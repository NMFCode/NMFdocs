### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.ObservingFunc`15
  commentId: T:NMF.Expressions.ObservingFunc`15
  id: ObservingFunc`15
  parent: NMF.Expressions
  children:
  - NMF.Expressions.ObservingFunc`15.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}})
  - NMF.Expressions.ObservingFunc`15.Evaluate(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)
  - NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0})
  - NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  - NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
  - NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})
  - NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})
  - NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})
  - NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})
  - NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})
  - NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})
  - NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})
  - NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10})
  - NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11})
  - NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12})
  - NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0)
  - NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1)
  - NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2)
  - NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3)
  - NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4)
  - NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5)
  - NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6)
  - NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7)
  - NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8)
  - NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)
  - NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)
  - NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)
  - NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)
  - NMF.Expressions.ObservingFunc`15.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}})
  - NMF.Expressions.ObservingFunc`15.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12},NMF.Expressions.INotifyValue{`13})
  - NMF.Expressions.ObservingFunc`15.InvokeReversable(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)
  - NMF.Expressions.ObservingFunc`15.IsReversable
  - NMF.Expressions.ObservingFunc`15.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12},NMF.Expressions.INotifyValue{`13})
  - NMF.Expressions.ObservingFunc`15.Observe(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)
  - NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0})
  - NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  - NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
  - NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})
  - NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})
  - NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})
  - NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})
  - NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})
  - NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})
  - NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})
  - NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10})
  - NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11})
  - NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12})
  - NMF.Expressions.ObservingFunc`15.ToString
  - NMF.Expressions.ObservingFunc`15.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}})~NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}
  langs:
  - csharp
  - vb
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  type: Class
  source:
    id: ObservingFunc
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7343
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Represents an observable expression with 14 input parameters
  example: []
  syntax:
    content: public class ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
    typeParameters:
    - id: T1
      description: The type of the input parameter 1
    - id: T2
      description: The type of the input parameter 2
    - id: T3
      description: The type of the input parameter 3
    - id: T4
      description: The type of the input parameter 4
    - id: T5
      description: The type of the input parameter 5
    - id: T6
      description: The type of the input parameter 6
    - id: T7
      description: The type of the input parameter 7
    - id: T8
      description: The type of the input parameter 8
    - id: T9
      description: The type of the input parameter 9
    - id: T10
      description: The type of the input parameter 10
    - id: T11
      description: The type of the input parameter 11
    - id: T12
      description: The type of the input parameter 12
    - id: T13
      description: The type of the input parameter 13
    - id: T14
      description: The type of the input parameter 14
    - id: TResult
      description: The result type of the observing func
    content.vb: Public Class ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  inheritance:
  - System.Object
  derivedClasses:
  - NMF.Expressions.ReversableObservingFunc`15
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - NMF.Expressions.ObservingFunc`15.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
- uid: NMF.Expressions.ObservingFunc`15.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}})
  commentId: M:NMF.Expressions.ObservingFunc`15.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}})
  id: '#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}})'
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: ObservingFunc(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservingFunc(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservingFunc(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7367
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates a new observable expression for the given expression
  example: []
  syntax:
    content: public ObservingFunc(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}}
      description: The expression that is to be observed
    content.vb: Public Sub New(expression As Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)))
  overload: NMF.Expressions.ObservingFunc`15.#ctor*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).New(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).New(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)))
  name.vb: New(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)))
- uid: NMF.Expressions.ObservingFunc`15.Evaluate(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)
  commentId: M:NMF.Expressions.ObservingFunc`15.Evaluate(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)
  id: Evaluate(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: Evaluate(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.Evaluate(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.Evaluate(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)
  type: Method
  source:
    id: Evaluate
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7482
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,,,>), "Observe", false)]

      public TResult Evaluate(T1 in1, T2 in2, T3 in3, T4 in4, T5 in5, T6 in6, T7 in7, T8 in8, T9 in9, T10 in10, T11 in11, T12 in12, T13 in13, T14 in14)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    - id: in3
      type: '{T3}'
      description: The input parameter 3
    - id: in4
      type: '{T4}'
      description: The input parameter 4
    - id: in5
      type: '{T5}'
      description: The input parameter 5
    - id: in6
      type: '{T6}'
      description: The input parameter 6
    - id: in7
      type: '{T7}'
      description: The input parameter 7
    - id: in8
      type: '{T8}'
      description: The input parameter 8
    - id: in9
      type: '{T9}'
      description: The input parameter 9
    - id: in10
      type: '{T10}'
      description: The input parameter 10
    - id: in11
      type: '{T11}'
      description: The input parameter 11
    - id: in12
      type: '{T12}'
      description: The input parameter 12
    - id: in13
      type: '{T13}'
      description: The input parameter 13
    - id: in14
      type: '{T14}'
      description: The input parameter 14
    return:
      type: '{TResult}'
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,,,,,,,,,,,,,)), "Observe", False)>

      Public Function Evaluate(in1 As T1, in2 As T2, in3 As T3, in4 As T4, in5 As T5, in6 As T6, in7 As T7, in8 As T8, in9 As T9, in10 As T10, in11 As T11, in12 As T12, in13 As T13, in14 As T14) As TResult
  overload: NMF.Expressions.ObservingFunc`15.Evaluate*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult}
    - type: System.String
      value: Observe
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).Evaluate(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).Evaluate(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)
- uid: NMF.Expressions.ObservingFunc`15.Observe(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)
  commentId: M:NMF.Expressions.ObservingFunc`15.Observe(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)
  id: Observe(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: Observe(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.Observe(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.Observe(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)
  type: Method
  source:
    id: Observe
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7506
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression
  example: []
  syntax:
    content: public INotifyValue<TResult> Observe(T1 in1, T2 in2, T3 in3, T4 in4, T5 in5, T6 in6, T7 in7, T8 in8, T9 in9, T10 in10, T11 in11, T12 in12, T13 in13, T14 in14)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    - id: in3
      type: '{T3}'
      description: The input parameter 3
    - id: in4
      type: '{T4}'
      description: The input parameter 4
    - id: in5
      type: '{T5}'
      description: The input parameter 5
    - id: in6
      type: '{T6}'
      description: The input parameter 6
    - id: in7
      type: '{T7}'
      description: The input parameter 7
    - id: in8
      type: '{T8}'
      description: The input parameter 8
    - id: in9
      type: '{T9}'
      description: The input parameter 9
    - id: in10
      type: '{T10}'
      description: The input parameter 10
    - id: in11
      type: '{T11}'
      description: The input parameter 11
    - id: in12
      type: '{T12}'
      description: The input parameter 12
    - id: in13
      type: '{T13}'
      description: The input parameter 13
    - id: in14
      type: '{T14}'
      description: The input parameter 14
    return:
      type: NMF.Expressions.INotifyValue{{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function Observe(in1 As T1, in2 As T2, in3 As T3, in4 As T4, in5 As T5, in6 As T6, in7 As T7, in8 As T8, in9 As T9, in10 As T10, in11 As T11, in12 As T12, in13 As T13, in14 As T14) As INotifyValue(Of TResult)
  overload: NMF.Expressions.ObservingFunc`15.Observe*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).Observe(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).Observe(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)
- uid: NMF.Expressions.ObservingFunc`15.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12},NMF.Expressions.INotifyValue{`13})
  commentId: M:NMF.Expressions.ObservingFunc`15.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12},NMF.Expressions.INotifyValue{`13})
  id: Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12},NMF.Expressions.INotifyValue{`13})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: Observe(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>, INotifyValue<T11>, INotifyValue<T12>, INotifyValue<T13>, INotifyValue<T14>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.Observe(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>, INotifyValue<T11>, INotifyValue<T12>, INotifyValue<T13>, INotifyValue<T14>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.Observe(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>, NMF.Expressions.INotifyValue<T8>, NMF.Expressions.INotifyValue<T9>, NMF.Expressions.INotifyValue<T10>, NMF.Expressions.INotifyValue<T11>, NMF.Expressions.INotifyValue<T12>, NMF.Expressions.INotifyValue<T13>, NMF.Expressions.INotifyValue<T14>)
  type: Method
  source:
    id: Observe
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7547
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression
  example: []
  syntax:
    content: public INotifyValue<TResult> Observe(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7, INotifyValue<T8> in8, INotifyValue<T9> in9, INotifyValue<T10> in10, INotifyValue<T11> in11, INotifyValue<T12> in12, INotifyValue<T13> in13, INotifyValue<T14> in14)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    - id: in8
      type: NMF.Expressions.INotifyValue{{T8}}
      description: The input parameter 8
    - id: in9
      type: NMF.Expressions.INotifyValue{{T9}}
      description: The input parameter 9
    - id: in10
      type: NMF.Expressions.INotifyValue{{T10}}
      description: The input parameter 10
    - id: in11
      type: NMF.Expressions.INotifyValue{{T11}}
      description: The input parameter 11
    - id: in12
      type: NMF.Expressions.INotifyValue{{T12}}
      description: The input parameter 12
    - id: in13
      type: NMF.Expressions.INotifyValue{{T13}}
      description: The input parameter 13
    - id: in14
      type: NMF.Expressions.INotifyValue{{T14}}
      description: The input parameter 14
    return:
      type: NMF.Expressions.INotifyValue{{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function Observe(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7), in8 As INotifyValue(Of T8), in9 As INotifyValue(Of T9), in10 As INotifyValue(Of T10), in11 As INotifyValue(Of T11), in12 As INotifyValue(Of T12), in13 As INotifyValue(Of T13), in14 As INotifyValue(Of T14)) As INotifyValue(Of TResult)
  overload: NMF.Expressions.ObservingFunc`15.Observe*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).Observe(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10), INotifyValue(Of T11), INotifyValue(Of T12), INotifyValue(Of T13), INotifyValue(Of T14))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).Observe(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7), NMF.Expressions.INotifyValue(Of T8), NMF.Expressions.INotifyValue(Of T9), NMF.Expressions.INotifyValue(Of T10), NMF.Expressions.INotifyValue(Of T11), NMF.Expressions.INotifyValue(Of T12), NMF.Expressions.INotifyValue(Of T13), NMF.Expressions.INotifyValue(Of T14))
  name.vb: Observe(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10), INotifyValue(Of T11), INotifyValue(Of T12), INotifyValue(Of T13), INotifyValue(Of T14))
- uid: NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0)
  commentId: M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0)
  id: EvaluatePartial(`0)
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: EvaluatePartial(T1)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(T1)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(T1)
  type: Method
  source:
    id: EvaluatePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7575
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,,,>), "ObservePartial", false)]

      public Func<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> EvaluatePartial(T1 in1)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    return:
      type: System.Func{{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,,,,,,,,,,,,,)), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As T1) As Func(Of T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(T1)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(T1)
- uid: NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0})
  commentId: M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0})
  id: EvaluatePartial(NMF.Expressions.INotifyValue{`0})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: EvaluatePartial(INotifyValue<T1>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(INotifyValue<T1>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>)
  type: Method
  source:
    id: EvaluatePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7586
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,,,>), "ObservePartial", false)]

      public Func<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> EvaluatePartial(INotifyValue<T1> in1)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    return:
      type: System.Func{{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,,,,,,,,,,,,,)), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As INotifyValue(Of T1)) As Func(Of T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(INotifyValue(Of T1))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1))
  name.vb: EvaluatePartial(INotifyValue(Of T1))
- uid: NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0})
  commentId: M:NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0})
  id: ObservePartial(NMF.Expressions.INotifyValue{`0})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: ObservePartial(INotifyValue<T1>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservePartial(INotifyValue<T1>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>)
  type: Method
  source:
    id: ObservePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7597
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: public ObservingFunc<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> ObservePartial(INotifyValue<T1> in1)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    return:
      type: NMF.Expressions.ObservingFunc{{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function ObservePartial(in1 As INotifyValue(Of T1)) As ObservingFunc(Of T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.ObservePartial*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ObservePartial(INotifyValue(Of T1))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1))
  name.vb: ObservePartial(INotifyValue(Of T1))
- uid: NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1)
  commentId: M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1)
  id: EvaluatePartial(`0,`1)
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: EvaluatePartial(T1, T2)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(T1, T2)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(T1, T2)
  type: Method
  source:
    id: EvaluatePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7611
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,,,>), "ObservePartial", false)]

      public Func<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> EvaluatePartial(T1 in1, T2 in2)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    return:
      type: System.Func{{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,,,,,,,,,,,,,)), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As T1, in2 As T2) As Func(Of T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(T1, T2)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(T1, T2)
- uid: NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  commentId: M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  id: EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>)
  type: Method
  source:
    id: EvaluatePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7623
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,,,>), "ObservePartial", false)]

      public Func<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> EvaluatePartial(INotifyValue<T1> in1, INotifyValue<T2> in2)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    return:
      type: System.Func{{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,,,,,,,,,,,,,)), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2)) As Func(Of T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2))
  name.vb: EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2))
- uid: NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  commentId: M:NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  id: ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: ObservePartial(INotifyValue<T1>, INotifyValue<T2>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservePartial(INotifyValue<T1>, INotifyValue<T2>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>)
  type: Method
  source:
    id: ObservePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7635
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: public ObservingFunc<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> ObservePartial(INotifyValue<T1> in1, INotifyValue<T2> in2)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    return:
      type: NMF.Expressions.ObservingFunc{{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function ObservePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2)) As ObservingFunc(Of T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.ObservePartial*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2))
  name.vb: ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2))
- uid: NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2)
  commentId: M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2)
  id: EvaluatePartial(`0,`1,`2)
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: EvaluatePartial(T1, T2, T3)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(T1, T2, T3)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(T1, T2, T3)
  type: Method
  source:
    id: EvaluatePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7651
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,,,>), "ObservePartial", false)]

      public Func<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> EvaluatePartial(T1 in1, T2 in2, T3 in3)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    - id: in3
      type: '{T3}'
      description: The input parameter 3
    return:
      type: System.Func{{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,,,,,,,,,,,,,)), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As T1, in2 As T2, in3 As T3) As Func(Of T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(T1, T2, T3)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(T1, T2, T3)
- uid: NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
  commentId: M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
  id: EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>)
  type: Method
  source:
    id: EvaluatePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7664
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,,,>), "ObservePartial", false)]

      public Func<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> EvaluatePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    return:
      type: System.Func{{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,,,,,,,,,,,,,)), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3)) As Func(Of T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3))
  name.vb: EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3))
- uid: NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
  commentId: M:NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
  id: ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>)
  type: Method
  source:
    id: ObservePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7677
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: public ObservingFunc<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> ObservePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    return:
      type: NMF.Expressions.ObservingFunc{{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function ObservePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3)) As ObservingFunc(Of T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.ObservePartial*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3))
  name.vb: ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3))
- uid: NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3)
  commentId: M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3)
  id: EvaluatePartial(`0,`1,`2,`3)
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: EvaluatePartial(T1, T2, T3, T4)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(T1, T2, T3, T4)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(T1, T2, T3, T4)
  type: Method
  source:
    id: EvaluatePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7695
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,,,>), "ObservePartial", false)]

      public Func<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> EvaluatePartial(T1 in1, T2 in2, T3 in3, T4 in4)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    - id: in3
      type: '{T3}'
      description: The input parameter 3
    - id: in4
      type: '{T4}'
      description: The input parameter 4
    return:
      type: System.Func{{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,,,,,,,,,,,,,)), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As T1, in2 As T2, in3 As T3, in4 As T4) As Func(Of T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(T1, T2, T3, T4)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(T1, T2, T3, T4)
- uid: NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})
  commentId: M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})
  id: EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>)
  type: Method
  source:
    id: EvaluatePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7709
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,,,>), "ObservePartial", false)]

      public Func<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> EvaluatePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    return:
      type: System.Func{{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,,,,,,,,,,,,,)), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4)) As Func(Of T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4))
  name.vb: EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4))
- uid: NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})
  commentId: M:NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})
  id: ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>)
  type: Method
  source:
    id: ObservePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7723
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: public ObservingFunc<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> ObservePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    return:
      type: NMF.Expressions.ObservingFunc{{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function ObservePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4)) As ObservingFunc(Of T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.ObservePartial*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4))
  name.vb: ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4))
- uid: NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4)
  commentId: M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4)
  id: EvaluatePartial(`0,`1,`2,`3,`4)
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: EvaluatePartial(T1, T2, T3, T4, T5)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(T1, T2, T3, T4, T5)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(T1, T2, T3, T4, T5)
  type: Method
  source:
    id: EvaluatePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7743
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,,,>), "ObservePartial", false)]

      public Func<T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> EvaluatePartial(T1 in1, T2 in2, T3 in3, T4 in4, T5 in5)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    - id: in3
      type: '{T3}'
      description: The input parameter 3
    - id: in4
      type: '{T4}'
      description: The input parameter 4
    - id: in5
      type: '{T5}'
      description: The input parameter 5
    return:
      type: System.Func{{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,,,,,,,,,,,,,)), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As T1, in2 As T2, in3 As T3, in4 As T4, in5 As T5) As Func(Of T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(T1, T2, T3, T4, T5)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(T1, T2, T3, T4, T5)
- uid: NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})
  commentId: M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})
  id: EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>)
  type: Method
  source:
    id: EvaluatePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7758
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,,,>), "ObservePartial", false)]

      public Func<T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> EvaluatePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    return:
      type: System.Func{{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,,,,,,,,,,,,,)), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5)) As Func(Of T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5))
  name.vb: EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5))
- uid: NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})
  commentId: M:NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})
  id: ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>)
  type: Method
  source:
    id: ObservePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7773
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: public ObservingFunc<T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> ObservePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    return:
      type: NMF.Expressions.ObservingFunc{{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function ObservePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5)) As ObservingFunc(Of T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.ObservePartial*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5))
  name.vb: ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5))
- uid: NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5)
  commentId: M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5)
  id: EvaluatePartial(`0,`1,`2,`3,`4,`5)
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: EvaluatePartial(T1, T2, T3, T4, T5, T6)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6)
  type: Method
  source:
    id: EvaluatePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7795
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,,,>), "ObservePartial", false)]

      public Func<T7, T8, T9, T10, T11, T12, T13, T14, TResult> EvaluatePartial(T1 in1, T2 in2, T3 in3, T4 in4, T5 in5, T6 in6)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    - id: in3
      type: '{T3}'
      description: The input parameter 3
    - id: in4
      type: '{T4}'
      description: The input parameter 4
    - id: in5
      type: '{T5}'
      description: The input parameter 5
    - id: in6
      type: '{T6}'
      description: The input parameter 6
    return:
      type: System.Func{{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,,,,,,,,,,,,,)), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As T1, in2 As T2, in3 As T3, in4 As T4, in5 As T5, in6 As T6) As Func(Of T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6)
- uid: NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})
  commentId: M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})
  id: EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>)
  type: Method
  source:
    id: EvaluatePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7811
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,,,>), "ObservePartial", false)]

      public Func<T7, T8, T9, T10, T11, T12, T13, T14, TResult> EvaluatePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    return:
      type: System.Func{{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,,,,,,,,,,,,,)), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6)) As Func(Of T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6))
  name.vb: EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6))
- uid: NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})
  commentId: M:NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})
  id: ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>)
  type: Method
  source:
    id: ObservePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7827
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: public ObservingFunc<T7, T8, T9, T10, T11, T12, T13, T14, TResult> ObservePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    return:
      type: NMF.Expressions.ObservingFunc{{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function ObservePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6)) As ObservingFunc(Of T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.ObservePartial*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6))
  name.vb: ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6))
- uid: NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6)
  commentId: M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6)
  id: EvaluatePartial(`0,`1,`2,`3,`4,`5,`6)
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: EvaluatePartial(T1, T2, T3, T4, T5, T6, T7)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6, T7)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6, T7)
  type: Method
  source:
    id: EvaluatePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7851
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,,,>), "ObservePartial", false)]

      public Func<T8, T9, T10, T11, T12, T13, T14, TResult> EvaluatePartial(T1 in1, T2 in2, T3 in3, T4 in4, T5 in5, T6 in6, T7 in7)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    - id: in3
      type: '{T3}'
      description: The input parameter 3
    - id: in4
      type: '{T4}'
      description: The input parameter 4
    - id: in5
      type: '{T5}'
      description: The input parameter 5
    - id: in6
      type: '{T6}'
      description: The input parameter 6
    - id: in7
      type: '{T7}'
      description: The input parameter 7
    return:
      type: System.Func{{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,,,,,,,,,,,,,)), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As T1, in2 As T2, in3 As T3, in4 As T4, in5 As T5, in6 As T6, in7 As T7) As Func(Of T8, T9, T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6, T7)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6, T7)
- uid: NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})
  commentId: M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})
  id: EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>)
  type: Method
  source:
    id: EvaluatePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7868
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,,,>), "ObservePartial", false)]

      public Func<T8, T9, T10, T11, T12, T13, T14, TResult> EvaluatePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    return:
      type: System.Func{{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,,,,,,,,,,,,,)), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7)) As Func(Of T8, T9, T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7))
  name.vb: EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7))
- uid: NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})
  commentId: M:NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})
  id: ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>)
  type: Method
  source:
    id: ObservePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7885
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: public ObservingFunc<T8, T9, T10, T11, T12, T13, T14, TResult> ObservePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    return:
      type: NMF.Expressions.ObservingFunc{{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function ObservePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7)) As ObservingFunc(Of T8, T9, T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.ObservePartial*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7))
  name.vb: ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7))
- uid: NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7)
  commentId: M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7)
  id: EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7)
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8)
  type: Method
  source:
    id: EvaluatePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7911
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,,,>), "ObservePartial", false)]

      public Func<T9, T10, T11, T12, T13, T14, TResult> EvaluatePartial(T1 in1, T2 in2, T3 in3, T4 in4, T5 in5, T6 in6, T7 in7, T8 in8)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    - id: in3
      type: '{T3}'
      description: The input parameter 3
    - id: in4
      type: '{T4}'
      description: The input parameter 4
    - id: in5
      type: '{T5}'
      description: The input parameter 5
    - id: in6
      type: '{T6}'
      description: The input parameter 6
    - id: in7
      type: '{T7}'
      description: The input parameter 7
    - id: in8
      type: '{T8}'
      description: The input parameter 8
    return:
      type: System.Func{{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,,,,,,,,,,,,,)), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As T1, in2 As T2, in3 As T3, in4 As T4, in5 As T5, in6 As T6, in7 As T7, in8 As T8) As Func(Of T9, T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8)
- uid: NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})
  commentId: M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})
  id: EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>, NMF.Expressions.INotifyValue<T8>)
  type: Method
  source:
    id: EvaluatePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7929
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,,,>), "ObservePartial", false)]

      public Func<T9, T10, T11, T12, T13, T14, TResult> EvaluatePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7, INotifyValue<T8> in8)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    - id: in8
      type: NMF.Expressions.INotifyValue{{T8}}
      description: The input parameter 8
    return:
      type: System.Func{{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,,,,,,,,,,,,,)), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7), in8 As INotifyValue(Of T8)) As Func(Of T9, T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7), NMF.Expressions.INotifyValue(Of T8))
  name.vb: EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8))
- uid: NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})
  commentId: M:NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})
  id: ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>, NMF.Expressions.INotifyValue<T8>)
  type: Method
  source:
    id: ObservePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7947
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: public ObservingFunc<T9, T10, T11, T12, T13, T14, TResult> ObservePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7, INotifyValue<T8> in8)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    - id: in8
      type: NMF.Expressions.INotifyValue{{T8}}
      description: The input parameter 8
    return:
      type: NMF.Expressions.ObservingFunc{{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function ObservePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7), in8 As INotifyValue(Of T8)) As ObservingFunc(Of T9, T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.ObservePartial*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7), NMF.Expressions.INotifyValue(Of T8))
  name.vb: ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8))
- uid: NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8)
  commentId: M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8)
  id: EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8)
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9)
  type: Method
  source:
    id: EvaluatePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7975
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,,,>), "ObservePartial", false)]

      public Func<T10, T11, T12, T13, T14, TResult> EvaluatePartial(T1 in1, T2 in2, T3 in3, T4 in4, T5 in5, T6 in6, T7 in7, T8 in8, T9 in9)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    - id: in3
      type: '{T3}'
      description: The input parameter 3
    - id: in4
      type: '{T4}'
      description: The input parameter 4
    - id: in5
      type: '{T5}'
      description: The input parameter 5
    - id: in6
      type: '{T6}'
      description: The input parameter 6
    - id: in7
      type: '{T7}'
      description: The input parameter 7
    - id: in8
      type: '{T8}'
      description: The input parameter 8
    - id: in9
      type: '{T9}'
      description: The input parameter 9
    return:
      type: System.Func{{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,,,,,,,,,,,,,)), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As T1, in2 As T2, in3 As T3, in4 As T4, in5 As T5, in6 As T6, in7 As T7, in8 As T8, in9 As T9) As Func(Of T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9)
- uid: NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})
  commentId: M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})
  id: EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>, NMF.Expressions.INotifyValue<T8>, NMF.Expressions.INotifyValue<T9>)
  type: Method
  source:
    id: EvaluatePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 7994
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,,,>), "ObservePartial", false)]

      public Func<T10, T11, T12, T13, T14, TResult> EvaluatePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7, INotifyValue<T8> in8, INotifyValue<T9> in9)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    - id: in8
      type: NMF.Expressions.INotifyValue{{T8}}
      description: The input parameter 8
    - id: in9
      type: NMF.Expressions.INotifyValue{{T9}}
      description: The input parameter 9
    return:
      type: System.Func{{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,,,,,,,,,,,,,)), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7), in8 As INotifyValue(Of T8), in9 As INotifyValue(Of T9)) As Func(Of T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7), NMF.Expressions.INotifyValue(Of T8), NMF.Expressions.INotifyValue(Of T9))
  name.vb: EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9))
- uid: NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})
  commentId: M:NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})
  id: ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>, NMF.Expressions.INotifyValue<T8>, NMF.Expressions.INotifyValue<T9>)
  type: Method
  source:
    id: ObservePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 8013
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: public ObservingFunc<T10, T11, T12, T13, T14, TResult> ObservePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7, INotifyValue<T8> in8, INotifyValue<T9> in9)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    - id: in8
      type: NMF.Expressions.INotifyValue{{T8}}
      description: The input parameter 8
    - id: in9
      type: NMF.Expressions.INotifyValue{{T9}}
      description: The input parameter 9
    return:
      type: NMF.Expressions.ObservingFunc{{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function ObservePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7), in8 As INotifyValue(Of T8), in9 As INotifyValue(Of T9)) As ObservingFunc(Of T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.ObservePartial*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7), NMF.Expressions.INotifyValue(Of T8), NMF.Expressions.INotifyValue(Of T9))
  name.vb: ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9))
- uid: NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)
  commentId: M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)
  id: EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)
  type: Method
  source:
    id: EvaluatePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 8043
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,,,>), "ObservePartial", false)]

      public Func<T11, T12, T13, T14, TResult> EvaluatePartial(T1 in1, T2 in2, T3 in3, T4 in4, T5 in5, T6 in6, T7 in7, T8 in8, T9 in9, T10 in10)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    - id: in3
      type: '{T3}'
      description: The input parameter 3
    - id: in4
      type: '{T4}'
      description: The input parameter 4
    - id: in5
      type: '{T5}'
      description: The input parameter 5
    - id: in6
      type: '{T6}'
      description: The input parameter 6
    - id: in7
      type: '{T7}'
      description: The input parameter 7
    - id: in8
      type: '{T8}'
      description: The input parameter 8
    - id: in9
      type: '{T9}'
      description: The input parameter 9
    - id: in10
      type: '{T10}'
      description: The input parameter 10
    return:
      type: System.Func{{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,,,,,,,,,,,,,)), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As T1, in2 As T2, in3 As T3, in4 As T4, in5 As T5, in6 As T6, in7 As T7, in8 As T8, in9 As T9, in10 As T10) As Func(Of T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)
- uid: NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})
  commentId: M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})
  id: EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>, NMF.Expressions.INotifyValue<T8>, NMF.Expressions.INotifyValue<T9>, NMF.Expressions.INotifyValue<T10>)
  type: Method
  source:
    id: EvaluatePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 8063
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,,,>), "ObservePartial", false)]

      public Func<T11, T12, T13, T14, TResult> EvaluatePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7, INotifyValue<T8> in8, INotifyValue<T9> in9, INotifyValue<T10> in10)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    - id: in8
      type: NMF.Expressions.INotifyValue{{T8}}
      description: The input parameter 8
    - id: in9
      type: NMF.Expressions.INotifyValue{{T9}}
      description: The input parameter 9
    - id: in10
      type: NMF.Expressions.INotifyValue{{T10}}
      description: The input parameter 10
    return:
      type: System.Func{{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,,,,,,,,,,,,,)), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7), in8 As INotifyValue(Of T8), in9 As INotifyValue(Of T9), in10 As INotifyValue(Of T10)) As Func(Of T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7), NMF.Expressions.INotifyValue(Of T8), NMF.Expressions.INotifyValue(Of T9), NMF.Expressions.INotifyValue(Of T10))
  name.vb: EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10))
- uid: NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})
  commentId: M:NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})
  id: ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>, NMF.Expressions.INotifyValue<T8>, NMF.Expressions.INotifyValue<T9>, NMF.Expressions.INotifyValue<T10>)
  type: Method
  source:
    id: ObservePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 8083
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: public ObservingFunc<T11, T12, T13, T14, TResult> ObservePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7, INotifyValue<T8> in8, INotifyValue<T9> in9, INotifyValue<T10> in10)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    - id: in8
      type: NMF.Expressions.INotifyValue{{T8}}
      description: The input parameter 8
    - id: in9
      type: NMF.Expressions.INotifyValue{{T9}}
      description: The input parameter 9
    - id: in10
      type: NMF.Expressions.INotifyValue{{T10}}
      description: The input parameter 10
    return:
      type: NMF.Expressions.ObservingFunc{{T11},{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function ObservePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7), in8 As INotifyValue(Of T8), in9 As INotifyValue(Of T9), in10 As INotifyValue(Of T10)) As ObservingFunc(Of T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.ObservePartial*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7), NMF.Expressions.INotifyValue(Of T8), NMF.Expressions.INotifyValue(Of T9), NMF.Expressions.INotifyValue(Of T10))
  name.vb: ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10))
- uid: NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)
  commentId: M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)
  id: EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)
  type: Method
  source:
    id: EvaluatePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 8115
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,,,>), "ObservePartial", false)]

      public Func<T12, T13, T14, TResult> EvaluatePartial(T1 in1, T2 in2, T3 in3, T4 in4, T5 in5, T6 in6, T7 in7, T8 in8, T9 in9, T10 in10, T11 in11)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    - id: in3
      type: '{T3}'
      description: The input parameter 3
    - id: in4
      type: '{T4}'
      description: The input parameter 4
    - id: in5
      type: '{T5}'
      description: The input parameter 5
    - id: in6
      type: '{T6}'
      description: The input parameter 6
    - id: in7
      type: '{T7}'
      description: The input parameter 7
    - id: in8
      type: '{T8}'
      description: The input parameter 8
    - id: in9
      type: '{T9}'
      description: The input parameter 9
    - id: in10
      type: '{T10}'
      description: The input parameter 10
    - id: in11
      type: '{T11}'
      description: The input parameter 11
    return:
      type: System.Func{{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,,,,,,,,,,,,,)), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As T1, in2 As T2, in3 As T3, in4 As T4, in5 As T5, in6 As T6, in7 As T7, in8 As T8, in9 As T9, in10 As T10, in11 As T11) As Func(Of T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)
- uid: NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10})
  commentId: M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10})
  id: EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>, INotifyValue<T11>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>, INotifyValue<T11>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>, NMF.Expressions.INotifyValue<T8>, NMF.Expressions.INotifyValue<T9>, NMF.Expressions.INotifyValue<T10>, NMF.Expressions.INotifyValue<T11>)
  type: Method
  source:
    id: EvaluatePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 8136
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,,,>), "ObservePartial", false)]

      public Func<T12, T13, T14, TResult> EvaluatePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7, INotifyValue<T8> in8, INotifyValue<T9> in9, INotifyValue<T10> in10, INotifyValue<T11> in11)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    - id: in8
      type: NMF.Expressions.INotifyValue{{T8}}
      description: The input parameter 8
    - id: in9
      type: NMF.Expressions.INotifyValue{{T9}}
      description: The input parameter 9
    - id: in10
      type: NMF.Expressions.INotifyValue{{T10}}
      description: The input parameter 10
    - id: in11
      type: NMF.Expressions.INotifyValue{{T11}}
      description: The input parameter 11
    return:
      type: System.Func{{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,,,,,,,,,,,,,)), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7), in8 As INotifyValue(Of T8), in9 As INotifyValue(Of T9), in10 As INotifyValue(Of T10), in11 As INotifyValue(Of T11)) As Func(Of T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10), INotifyValue(Of T11))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7), NMF.Expressions.INotifyValue(Of T8), NMF.Expressions.INotifyValue(Of T9), NMF.Expressions.INotifyValue(Of T10), NMF.Expressions.INotifyValue(Of T11))
  name.vb: EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10), INotifyValue(Of T11))
- uid: NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10})
  commentId: M:NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10})
  id: ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>, INotifyValue<T11>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>, INotifyValue<T11>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>, NMF.Expressions.INotifyValue<T8>, NMF.Expressions.INotifyValue<T9>, NMF.Expressions.INotifyValue<T10>, NMF.Expressions.INotifyValue<T11>)
  type: Method
  source:
    id: ObservePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 8157
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: public ObservingFunc<T12, T13, T14, TResult> ObservePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7, INotifyValue<T8> in8, INotifyValue<T9> in9, INotifyValue<T10> in10, INotifyValue<T11> in11)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    - id: in8
      type: NMF.Expressions.INotifyValue{{T8}}
      description: The input parameter 8
    - id: in9
      type: NMF.Expressions.INotifyValue{{T9}}
      description: The input parameter 9
    - id: in10
      type: NMF.Expressions.INotifyValue{{T10}}
      description: The input parameter 10
    - id: in11
      type: NMF.Expressions.INotifyValue{{T11}}
      description: The input parameter 11
    return:
      type: NMF.Expressions.ObservingFunc{{T12},{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function ObservePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7), in8 As INotifyValue(Of T8), in9 As INotifyValue(Of T9), in10 As INotifyValue(Of T10), in11 As INotifyValue(Of T11)) As ObservingFunc(Of T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.ObservePartial*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10), INotifyValue(Of T11))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7), NMF.Expressions.INotifyValue(Of T8), NMF.Expressions.INotifyValue(Of T9), NMF.Expressions.INotifyValue(Of T10), NMF.Expressions.INotifyValue(Of T11))
  name.vb: ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10), INotifyValue(Of T11))
- uid: NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)
  commentId: M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)
  id: EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)
  type: Method
  source:
    id: EvaluatePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 8191
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,,,>), "ObservePartial", false)]

      public Func<T13, T14, TResult> EvaluatePartial(T1 in1, T2 in2, T3 in3, T4 in4, T5 in5, T6 in6, T7 in7, T8 in8, T9 in9, T10 in10, T11 in11, T12 in12)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    - id: in3
      type: '{T3}'
      description: The input parameter 3
    - id: in4
      type: '{T4}'
      description: The input parameter 4
    - id: in5
      type: '{T5}'
      description: The input parameter 5
    - id: in6
      type: '{T6}'
      description: The input parameter 6
    - id: in7
      type: '{T7}'
      description: The input parameter 7
    - id: in8
      type: '{T8}'
      description: The input parameter 8
    - id: in9
      type: '{T9}'
      description: The input parameter 9
    - id: in10
      type: '{T10}'
      description: The input parameter 10
    - id: in11
      type: '{T11}'
      description: The input parameter 11
    - id: in12
      type: '{T12}'
      description: The input parameter 12
    return:
      type: System.Func{{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,,,,,,,,,,,,,)), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As T1, in2 As T2, in3 As T3, in4 As T4, in5 As T5, in6 As T6, in7 As T7, in8 As T8, in9 As T9, in10 As T10, in11 As T11, in12 As T12) As Func(Of T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)
- uid: NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11})
  commentId: M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11})
  id: EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>, INotifyValue<T11>, INotifyValue<T12>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>, INotifyValue<T11>, INotifyValue<T12>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>, NMF.Expressions.INotifyValue<T8>, NMF.Expressions.INotifyValue<T9>, NMF.Expressions.INotifyValue<T10>, NMF.Expressions.INotifyValue<T11>, NMF.Expressions.INotifyValue<T12>)
  type: Method
  source:
    id: EvaluatePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 8213
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,,,>), "ObservePartial", false)]

      public Func<T13, T14, TResult> EvaluatePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7, INotifyValue<T8> in8, INotifyValue<T9> in9, INotifyValue<T10> in10, INotifyValue<T11> in11, INotifyValue<T12> in12)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    - id: in8
      type: NMF.Expressions.INotifyValue{{T8}}
      description: The input parameter 8
    - id: in9
      type: NMF.Expressions.INotifyValue{{T9}}
      description: The input parameter 9
    - id: in10
      type: NMF.Expressions.INotifyValue{{T10}}
      description: The input parameter 10
    - id: in11
      type: NMF.Expressions.INotifyValue{{T11}}
      description: The input parameter 11
    - id: in12
      type: NMF.Expressions.INotifyValue{{T12}}
      description: The input parameter 12
    return:
      type: System.Func{{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,,,,,,,,,,,,,)), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7), in8 As INotifyValue(Of T8), in9 As INotifyValue(Of T9), in10 As INotifyValue(Of T10), in11 As INotifyValue(Of T11), in12 As INotifyValue(Of T12)) As Func(Of T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10), INotifyValue(Of T11), INotifyValue(Of T12))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7), NMF.Expressions.INotifyValue(Of T8), NMF.Expressions.INotifyValue(Of T9), NMF.Expressions.INotifyValue(Of T10), NMF.Expressions.INotifyValue(Of T11), NMF.Expressions.INotifyValue(Of T12))
  name.vb: EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10), INotifyValue(Of T11), INotifyValue(Of T12))
- uid: NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11})
  commentId: M:NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11})
  id: ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>, INotifyValue<T11>, INotifyValue<T12>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>, INotifyValue<T11>, INotifyValue<T12>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>, NMF.Expressions.INotifyValue<T8>, NMF.Expressions.INotifyValue<T9>, NMF.Expressions.INotifyValue<T10>, NMF.Expressions.INotifyValue<T11>, NMF.Expressions.INotifyValue<T12>)
  type: Method
  source:
    id: ObservePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 8235
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: public ObservingFunc<T13, T14, TResult> ObservePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7, INotifyValue<T8> in8, INotifyValue<T9> in9, INotifyValue<T10> in10, INotifyValue<T11> in11, INotifyValue<T12> in12)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    - id: in8
      type: NMF.Expressions.INotifyValue{{T8}}
      description: The input parameter 8
    - id: in9
      type: NMF.Expressions.INotifyValue{{T9}}
      description: The input parameter 9
    - id: in10
      type: NMF.Expressions.INotifyValue{{T10}}
      description: The input parameter 10
    - id: in11
      type: NMF.Expressions.INotifyValue{{T11}}
      description: The input parameter 11
    - id: in12
      type: NMF.Expressions.INotifyValue{{T12}}
      description: The input parameter 12
    return:
      type: NMF.Expressions.ObservingFunc{{T13},{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function ObservePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7), in8 As INotifyValue(Of T8), in9 As INotifyValue(Of T9), in10 As INotifyValue(Of T10), in11 As INotifyValue(Of T11), in12 As INotifyValue(Of T12)) As ObservingFunc(Of T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.ObservePartial*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10), INotifyValue(Of T11), INotifyValue(Of T12))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7), NMF.Expressions.INotifyValue(Of T8), NMF.Expressions.INotifyValue(Of T9), NMF.Expressions.INotifyValue(Of T10), NMF.Expressions.INotifyValue(Of T11), NMF.Expressions.INotifyValue(Of T12))
  name.vb: ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10), INotifyValue(Of T11), INotifyValue(Of T12))
- uid: NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)
  commentId: M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)
  id: EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
  type: Method
  source:
    id: EvaluatePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 8271
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,,,>), "ObservePartial", false)]

      public Func<T14, TResult> EvaluatePartial(T1 in1, T2 in2, T3 in3, T4 in4, T5 in5, T6 in6, T7 in7, T8 in8, T9 in9, T10 in10, T11 in11, T12 in12, T13 in13)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    - id: in3
      type: '{T3}'
      description: The input parameter 3
    - id: in4
      type: '{T4}'
      description: The input parameter 4
    - id: in5
      type: '{T5}'
      description: The input parameter 5
    - id: in6
      type: '{T6}'
      description: The input parameter 6
    - id: in7
      type: '{T7}'
      description: The input parameter 7
    - id: in8
      type: '{T8}'
      description: The input parameter 8
    - id: in9
      type: '{T9}'
      description: The input parameter 9
    - id: in10
      type: '{T10}'
      description: The input parameter 10
    - id: in11
      type: '{T11}'
      description: The input parameter 11
    - id: in12
      type: '{T12}'
      description: The input parameter 12
    - id: in13
      type: '{T13}'
      description: The input parameter 13
    return:
      type: System.Func{{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,,,,,,,,,,,,,)), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As T1, in2 As T2, in3 As T3, in4 As T4, in5 As T5, in6 As T6, in7 As T7, in8 As T8, in9 As T9, in10 As T10, in11 As T11, in12 As T12, in13 As T13) As Func(Of T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
- uid: NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12})
  commentId: M:NMF.Expressions.ObservingFunc`15.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12})
  id: EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>, INotifyValue<T11>, INotifyValue<T12>, INotifyValue<T13>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>, INotifyValue<T11>, INotifyValue<T12>, INotifyValue<T13>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>, NMF.Expressions.INotifyValue<T8>, NMF.Expressions.INotifyValue<T9>, NMF.Expressions.INotifyValue<T10>, NMF.Expressions.INotifyValue<T11>, NMF.Expressions.INotifyValue<T12>, NMF.Expressions.INotifyValue<T13>)
  type: Method
  source:
    id: EvaluatePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 8294
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,,,>), "ObservePartial", false)]

      public Func<T14, TResult> EvaluatePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7, INotifyValue<T8> in8, INotifyValue<T9> in9, INotifyValue<T10> in10, INotifyValue<T11> in11, INotifyValue<T12> in12, INotifyValue<T13> in13)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    - id: in8
      type: NMF.Expressions.INotifyValue{{T8}}
      description: The input parameter 8
    - id: in9
      type: NMF.Expressions.INotifyValue{{T9}}
      description: The input parameter 9
    - id: in10
      type: NMF.Expressions.INotifyValue{{T10}}
      description: The input parameter 10
    - id: in11
      type: NMF.Expressions.INotifyValue{{T11}}
      description: The input parameter 11
    - id: in12
      type: NMF.Expressions.INotifyValue{{T12}}
      description: The input parameter 12
    - id: in13
      type: NMF.Expressions.INotifyValue{{T13}}
      description: The input parameter 13
    return:
      type: System.Func{{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,,,,,,,,,,,,,)), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7), in8 As INotifyValue(Of T8), in9 As INotifyValue(Of T9), in10 As INotifyValue(Of T10), in11 As INotifyValue(Of T11), in12 As INotifyValue(Of T12), in13 As INotifyValue(Of T13)) As Func(Of T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10), INotifyValue(Of T11), INotifyValue(Of T12), INotifyValue(Of T13))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7), NMF.Expressions.INotifyValue(Of T8), NMF.Expressions.INotifyValue(Of T9), NMF.Expressions.INotifyValue(Of T10), NMF.Expressions.INotifyValue(Of T11), NMF.Expressions.INotifyValue(Of T12), NMF.Expressions.INotifyValue(Of T13))
  name.vb: EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10), INotifyValue(Of T11), INotifyValue(Of T12), INotifyValue(Of T13))
- uid: NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12})
  commentId: M:NMF.Expressions.ObservingFunc`15.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12})
  id: ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>, INotifyValue<T11>, INotifyValue<T12>, INotifyValue<T13>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>, INotifyValue<T11>, INotifyValue<T12>, INotifyValue<T13>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>, NMF.Expressions.INotifyValue<T8>, NMF.Expressions.INotifyValue<T9>, NMF.Expressions.INotifyValue<T10>, NMF.Expressions.INotifyValue<T11>, NMF.Expressions.INotifyValue<T12>, NMF.Expressions.INotifyValue<T13>)
  type: Method
  source:
    id: ObservePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 8317
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: public ObservingFunc<T14, TResult> ObservePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7, INotifyValue<T8> in8, INotifyValue<T9> in9, INotifyValue<T10> in10, INotifyValue<T11> in11, INotifyValue<T12> in12, INotifyValue<T13> in13)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    - id: in8
      type: NMF.Expressions.INotifyValue{{T8}}
      description: The input parameter 8
    - id: in9
      type: NMF.Expressions.INotifyValue{{T9}}
      description: The input parameter 9
    - id: in10
      type: NMF.Expressions.INotifyValue{{T10}}
      description: The input parameter 10
    - id: in11
      type: NMF.Expressions.INotifyValue{{T11}}
      description: The input parameter 11
    - id: in12
      type: NMF.Expressions.INotifyValue{{T12}}
      description: The input parameter 12
    - id: in13
      type: NMF.Expressions.INotifyValue{{T13}}
      description: The input parameter 13
    return:
      type: NMF.Expressions.ObservingFunc{{T14},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function ObservePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7), in8 As INotifyValue(Of T8), in9 As INotifyValue(Of T9), in10 As INotifyValue(Of T10), in11 As INotifyValue(Of T11), in12 As INotifyValue(Of T12), in13 As INotifyValue(Of T13)) As ObservingFunc(Of T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.ObservePartial*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10), INotifyValue(Of T11), INotifyValue(Of T12), INotifyValue(Of T13))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7), NMF.Expressions.INotifyValue(Of T8), NMF.Expressions.INotifyValue(Of T9), NMF.Expressions.INotifyValue(Of T10), NMF.Expressions.INotifyValue(Of T11), NMF.Expressions.INotifyValue(Of T12), NMF.Expressions.INotifyValue(Of T13))
  name.vb: ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10), INotifyValue(Of T11), INotifyValue(Of T12), INotifyValue(Of T13))
- uid: NMF.Expressions.ObservingFunc`15.InvokeReversable(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)
  commentId: M:NMF.Expressions.ObservingFunc`15.InvokeReversable(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)
  id: InvokeReversable(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13)
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: InvokeReversable(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.InvokeReversable(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.InvokeReversable(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)
  type: Method
  source:
    id: InvokeReversable
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 8356
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression
  example: []
  syntax:
    content: public virtual INotifyReversableValue<TResult> InvokeReversable(T1 in1, T2 in2, T3 in3, T4 in4, T5 in5, T6 in6, T7 in7, T8 in8, T9 in9, T10 in10, T11 in11, T12 in12, T13 in13, T14 in14)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    - id: in3
      type: '{T3}'
      description: The input parameter 3
    - id: in4
      type: '{T4}'
      description: The input parameter 4
    - id: in5
      type: '{T5}'
      description: The input parameter 5
    - id: in6
      type: '{T6}'
      description: The input parameter 6
    - id: in7
      type: '{T7}'
      description: The input parameter 7
    - id: in8
      type: '{T8}'
      description: The input parameter 8
    - id: in9
      type: '{T9}'
      description: The input parameter 9
    - id: in10
      type: '{T10}'
      description: The input parameter 10
    - id: in11
      type: '{T11}'
      description: The input parameter 11
    - id: in12
      type: '{T12}'
      description: The input parameter 12
    - id: in13
      type: '{T13}'
      description: The input parameter 13
    - id: in14
      type: '{T14}'
      description: The input parameter 14
    return:
      type: NMF.Expressions.INotifyReversableValue{{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Overridable Function InvokeReversable(in1 As T1, in2 As T2, in3 As T3, in4 As T4, in5 As T5, in6 As T6, in7 As T7, in8 As T8, in9 As T9, in10 As T10, in11 As T11, in12 As T12, in13 As T13, in14 As T14) As INotifyReversableValue(Of TResult)
  overload: NMF.Expressions.ObservingFunc`15.InvokeReversable*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).InvokeReversable(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).InvokeReversable(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)
- uid: NMF.Expressions.ObservingFunc`15.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12},NMF.Expressions.INotifyValue{`13})
  commentId: M:NMF.Expressions.ObservingFunc`15.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12},NMF.Expressions.INotifyValue{`13})
  id: InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12},NMF.Expressions.INotifyValue{`13})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: InvokeReversable(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>, INotifyValue<T11>, INotifyValue<T12>, INotifyValue<T13>, INotifyValue<T14>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.InvokeReversable(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>, INotifyValue<T11>, INotifyValue<T12>, INotifyValue<T13>, INotifyValue<T14>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.InvokeReversable(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>, NMF.Expressions.INotifyValue<T8>, NMF.Expressions.INotifyValue<T9>, NMF.Expressions.INotifyValue<T10>, NMF.Expressions.INotifyValue<T11>, NMF.Expressions.INotifyValue<T12>, NMF.Expressions.INotifyValue<T13>, NMF.Expressions.INotifyValue<T14>)
  type: Method
  source:
    id: InvokeReversable
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 8398
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression
  example: []
  syntax:
    content: public virtual INotifyReversableValue<TResult> InvokeReversable(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7, INotifyValue<T8> in8, INotifyValue<T9> in9, INotifyValue<T10> in10, INotifyValue<T11> in11, INotifyValue<T12> in12, INotifyValue<T13> in13, INotifyValue<T14> in14)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    - id: in8
      type: NMF.Expressions.INotifyValue{{T8}}
      description: The input parameter 8
    - id: in9
      type: NMF.Expressions.INotifyValue{{T9}}
      description: The input parameter 9
    - id: in10
      type: NMF.Expressions.INotifyValue{{T10}}
      description: The input parameter 10
    - id: in11
      type: NMF.Expressions.INotifyValue{{T11}}
      description: The input parameter 11
    - id: in12
      type: NMF.Expressions.INotifyValue{{T12}}
      description: The input parameter 12
    - id: in13
      type: NMF.Expressions.INotifyValue{{T13}}
      description: The input parameter 13
    - id: in14
      type: NMF.Expressions.INotifyValue{{T14}}
      description: The input parameter 14
    return:
      type: NMF.Expressions.INotifyReversableValue{{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Overridable Function InvokeReversable(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7), in8 As INotifyValue(Of T8), in9 As INotifyValue(Of T9), in10 As INotifyValue(Of T10), in11 As INotifyValue(Of T11), in12 As INotifyValue(Of T12), in13 As INotifyValue(Of T13), in14 As INotifyValue(Of T14)) As INotifyReversableValue(Of TResult)
  overload: NMF.Expressions.ObservingFunc`15.InvokeReversable*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).InvokeReversable(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10), INotifyValue(Of T11), INotifyValue(Of T12), INotifyValue(Of T13), INotifyValue(Of T14))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).InvokeReversable(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7), NMF.Expressions.INotifyValue(Of T8), NMF.Expressions.INotifyValue(Of T9), NMF.Expressions.INotifyValue(Of T10), NMF.Expressions.INotifyValue(Of T11), NMF.Expressions.INotifyValue(Of T12), NMF.Expressions.INotifyValue(Of T13), NMF.Expressions.INotifyValue(Of T14))
  name.vb: InvokeReversable(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10), INotifyValue(Of T11), INotifyValue(Of T12), INotifyValue(Of T13), INotifyValue(Of T14))
- uid: NMF.Expressions.ObservingFunc`15.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}})~NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}
  commentId: M:NMF.Expressions.ObservingFunc`15.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}})~NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}
  id: op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}})~NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: implicit operator ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.implicit operator ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.implicit operator NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>)
  type: Operator
  source:
    id: op_Implicit
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 8428
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates a new observable expression
  example: []
  syntax:
    content: public static implicit operator ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}}
      description: The expression that is to be observed
    return:
      type: NMF.Expressions.ObservingFunc`15
      description: An observable function
    content.vb: Public Shared Widening Operator CType(expression As Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult))) As ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.op_Implicit*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).CType(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).CType(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)))
  name.vb: CType(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)))
- uid: NMF.Expressions.ObservingFunc`15.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}})
  commentId: M:NMF.Expressions.ObservingFunc`15.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}})
  id: FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}})
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: FromExpression(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.FromExpression(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.FromExpression(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>)
  type: Method
  source:
    id: FromExpression
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 8439
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates a new observable expression from the given expression
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> FromExpression(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}}
      description: The expression that is to be observed
    return:
      type: NMF.Expressions.ObservingFunc`15
      description: An observable function
    content.vb: Public Shared Function FromExpression(expression As Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult))) As ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.ObservingFunc`15.FromExpression*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).FromExpression(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).FromExpression(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)))
  name.vb: FromExpression(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)))
- uid: NMF.Expressions.ObservingFunc`15.IsReversable
  commentId: P:NMF.Expressions.ObservingFunc`15.IsReversable
  id: IsReversable
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: IsReversable
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.IsReversable
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.IsReversable
  type: Property
  source:
    id: IsReversable
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 8448
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Gets a value indicating whether this function can be reversed
  example: []
  syntax:
    content: public virtual bool IsReversable { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property IsReversable As Boolean
  overload: NMF.Expressions.ObservingFunc`15.IsReversable*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).IsReversable
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).IsReversable
- uid: NMF.Expressions.ObservingFunc`15.ToString
  commentId: M:NMF.Expressions.ObservingFunc`15.ToString
  id: ToString
  parent: NMF.Expressions.ObservingFunc`15
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ToString()
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ToString()
  type: Method
  source:
    id: ToString
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 8457
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString() As String
  overridden: System.Object.ToString
  overload: NMF.Expressions.ObservingFunc`15.ToString*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ToString()
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ToString()
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  href: NMF.html
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: NMF.Expressions.ObservingFunc`15.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  name: AsOne<ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>(ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>)
  nameWithType: ExpressionExtensions.AsOne<ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>(ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>(NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>)
  nameWithType.vb: ExpressionExtensions.AsOne(Of ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult))(ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult))(NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult))
  name.vb: AsOne(Of ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult))(ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14})
    name: AsOne
    href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  - name: <
  - uid: NMF.Expressions.ObservingFunc`15
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-15.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: (
  - uid: NMF.Expressions.ObservingFunc`15
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-15.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14})
    name: AsOne
    href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.ObservingFunc`15
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-15.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: (
  - uid: NMF.Expressions.ObservingFunc`15
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-15.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  name: AsOne<T>(T)
  nameWithType: ExpressionExtensions.AsOne<T>(T)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<T>(T)
  nameWithType.vb: ExpressionExtensions.AsOne(Of T)(T)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of T)(T)
  name.vb: AsOne(Of T)(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
    href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
    href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  parent: NMF.Expressions.Linq
  href: NMF.Expressions.Linq.ExpressionExtensions.html
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  href: NMF.html
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
    href: NMF.Expressions.Linq.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
    href: NMF.Expressions.Linq.html
- uid: NMF.Expressions.ObservingFunc`15.#ctor*
  commentId: Overload:NMF.Expressions.ObservingFunc`15.#ctor
  href: NMF.Expressions.ObservingFunc-15.html#NMF_Expressions_ObservingFunc_15__ctor_System_Linq_Expressions_Expression_System_Func__0__1__2__3__4__5__6__7__8__9__10__11__12__13__14___
  name: ObservingFunc
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservingFunc
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservingFunc
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).New
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).New
  name.vb: New
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>
  nameWithType: Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>
  nameWithType.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult))
  name.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`15
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-15
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`15
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-15
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - name: TDelegate
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
- uid: NMF.Expressions.ObservingFunc`15.Evaluate*
  commentId: Overload:NMF.Expressions.ObservingFunc`15.Evaluate
  href: NMF.Expressions.ObservingFunc-15.html#NMF_Expressions_ObservingFunc_15_Evaluate__0__1__2__3__4__5__6__7__8__9__10__11__12__13_
  name: Evaluate
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.Evaluate
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.Evaluate
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).Evaluate
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).Evaluate
- uid: '{T1}'
  commentId: '!:T1'
  definition: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: '{T2}'
  commentId: '!:T2'
  definition: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: '{T3}'
  commentId: '!:T3'
  definition: T3
  name: T3
  nameWithType: T3
  fullName: T3
- uid: '{T4}'
  commentId: '!:T4'
  definition: T4
  name: T4
  nameWithType: T4
  fullName: T4
- uid: '{T5}'
  commentId: '!:T5'
  definition: T5
  name: T5
  nameWithType: T5
  fullName: T5
- uid: '{T6}'
  commentId: '!:T6'
  definition: T6
  name: T6
  nameWithType: T6
  fullName: T6
- uid: '{T7}'
  commentId: '!:T7'
  definition: T7
  name: T7
  nameWithType: T7
  fullName: T7
- uid: '{T8}'
  commentId: '!:T8'
  definition: T8
  name: T8
  nameWithType: T8
  fullName: T8
- uid: '{T9}'
  commentId: '!:T9'
  definition: T9
  name: T9
  nameWithType: T9
  fullName: T9
- uid: '{T10}'
  commentId: '!:T10'
  definition: T10
  name: T10
  nameWithType: T10
  fullName: T10
- uid: '{T11}'
  commentId: '!:T11'
  definition: T11
  name: T11
  nameWithType: T11
  fullName: T11
- uid: '{T12}'
  commentId: '!:T12'
  definition: T12
  name: T12
  nameWithType: T12
  fullName: T12
- uid: '{T13}'
  commentId: '!:T13'
  definition: T13
  name: T13
  nameWithType: T13
  fullName: T13
- uid: '{T14}'
  commentId: '!:T14'
  definition: T14
  name: T14
  nameWithType: T14
  fullName: T14
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: T3
  name: T3
  nameWithType: T3
  fullName: T3
- uid: T4
  name: T4
  nameWithType: T4
  fullName: T4
- uid: T5
  name: T5
  nameWithType: T5
  fullName: T5
- uid: T6
  name: T6
  nameWithType: T6
  fullName: T6
- uid: T7
  name: T7
  nameWithType: T7
  fullName: T7
- uid: T8
  name: T8
  nameWithType: T8
  fullName: T8
- uid: T9
  name: T9
  nameWithType: T9
  fullName: T9
- uid: T10
  name: T10
  nameWithType: T10
  fullName: T10
- uid: T11
  name: T11
  nameWithType: T11
  fullName: T11
- uid: T12
  name: T12
  nameWithType: T12
  fullName: T12
- uid: T13
  name: T13
  nameWithType: T13
  fullName: T13
- uid: T14
  name: T14
  nameWithType: T14
  fullName: T14
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: NMF.Expressions.ObservingFunc`15.Observe*
  commentId: Overload:NMF.Expressions.ObservingFunc`15.Observe
  href: NMF.Expressions.ObservingFunc-15.html#NMF_Expressions_ObservingFunc_15_Observe__0__1__2__3__4__5__6__7__8__9__10__11__12__13_
  name: Observe
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.Observe
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.Observe
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).Observe
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).Observe
- uid: NMF.Expressions.INotifyValue{{TResult}}
  commentId: T:NMF.Expressions.INotifyValue{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<TResult>
  nameWithType: INotifyValue<TResult>
  fullName: NMF.Expressions.INotifyValue<TResult>
  nameWithType.vb: INotifyValue(Of TResult)
  fullName.vb: NMF.Expressions.INotifyValue(Of TResult)
  name.vb: INotifyValue(Of TResult)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.INotifyValue`1
  commentId: T:NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<T>
  nameWithType: INotifyValue<T>
  fullName: NMF.Expressions.INotifyValue<T>
  nameWithType.vb: INotifyValue(Of T)
  fullName.vb: NMF.Expressions.INotifyValue(Of T)
  name.vb: INotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifyValue{{T1}}
  commentId: T:NMF.Expressions.INotifyValue{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<T1>
  nameWithType: INotifyValue<T1>
  fullName: NMF.Expressions.INotifyValue<T1>
  nameWithType.vb: INotifyValue(Of T1)
  fullName.vb: NMF.Expressions.INotifyValue(Of T1)
  name.vb: INotifyValue(Of T1)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T1
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: )
- uid: NMF.Expressions.INotifyValue{{T2}}
  commentId: T:NMF.Expressions.INotifyValue{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<T2>
  nameWithType: INotifyValue<T2>
  fullName: NMF.Expressions.INotifyValue<T2>
  nameWithType.vb: INotifyValue(Of T2)
  fullName.vb: NMF.Expressions.INotifyValue(Of T2)
  name.vb: INotifyValue(Of T2)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T2
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T2
  - name: )
- uid: NMF.Expressions.INotifyValue{{T3}}
  commentId: T:NMF.Expressions.INotifyValue{`2}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<T3>
  nameWithType: INotifyValue<T3>
  fullName: NMF.Expressions.INotifyValue<T3>
  nameWithType.vb: INotifyValue(Of T3)
  fullName.vb: NMF.Expressions.INotifyValue(Of T3)
  name.vb: INotifyValue(Of T3)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T3
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T3
  - name: )
- uid: NMF.Expressions.INotifyValue{{T4}}
  commentId: T:NMF.Expressions.INotifyValue{`3}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<T4>
  nameWithType: INotifyValue<T4>
  fullName: NMF.Expressions.INotifyValue<T4>
  nameWithType.vb: INotifyValue(Of T4)
  fullName.vb: NMF.Expressions.INotifyValue(Of T4)
  name.vb: INotifyValue(Of T4)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T4
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T4
  - name: )
- uid: NMF.Expressions.INotifyValue{{T5}}
  commentId: T:NMF.Expressions.INotifyValue{`4}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<T5>
  nameWithType: INotifyValue<T5>
  fullName: NMF.Expressions.INotifyValue<T5>
  nameWithType.vb: INotifyValue(Of T5)
  fullName.vb: NMF.Expressions.INotifyValue(Of T5)
  name.vb: INotifyValue(Of T5)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T5
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T5
  - name: )
- uid: NMF.Expressions.INotifyValue{{T6}}
  commentId: T:NMF.Expressions.INotifyValue{`5}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<T6>
  nameWithType: INotifyValue<T6>
  fullName: NMF.Expressions.INotifyValue<T6>
  nameWithType.vb: INotifyValue(Of T6)
  fullName.vb: NMF.Expressions.INotifyValue(Of T6)
  name.vb: INotifyValue(Of T6)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T6
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T6
  - name: )
- uid: NMF.Expressions.INotifyValue{{T7}}
  commentId: T:NMF.Expressions.INotifyValue{`6}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<T7>
  nameWithType: INotifyValue<T7>
  fullName: NMF.Expressions.INotifyValue<T7>
  nameWithType.vb: INotifyValue(Of T7)
  fullName.vb: NMF.Expressions.INotifyValue(Of T7)
  name.vb: INotifyValue(Of T7)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T7
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T7
  - name: )
- uid: NMF.Expressions.INotifyValue{{T8}}
  commentId: T:NMF.Expressions.INotifyValue{`7}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<T8>
  nameWithType: INotifyValue<T8>
  fullName: NMF.Expressions.INotifyValue<T8>
  nameWithType.vb: INotifyValue(Of T8)
  fullName.vb: NMF.Expressions.INotifyValue(Of T8)
  name.vb: INotifyValue(Of T8)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T8
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T8
  - name: )
- uid: NMF.Expressions.INotifyValue{{T9}}
  commentId: T:NMF.Expressions.INotifyValue{`8}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<T9>
  nameWithType: INotifyValue<T9>
  fullName: NMF.Expressions.INotifyValue<T9>
  nameWithType.vb: INotifyValue(Of T9)
  fullName.vb: NMF.Expressions.INotifyValue(Of T9)
  name.vb: INotifyValue(Of T9)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T9
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T9
  - name: )
- uid: NMF.Expressions.INotifyValue{{T10}}
  commentId: T:NMF.Expressions.INotifyValue{`9}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<T10>
  nameWithType: INotifyValue<T10>
  fullName: NMF.Expressions.INotifyValue<T10>
  nameWithType.vb: INotifyValue(Of T10)
  fullName.vb: NMF.Expressions.INotifyValue(Of T10)
  name.vb: INotifyValue(Of T10)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T10
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T10
  - name: )
- uid: NMF.Expressions.INotifyValue{{T11}}
  commentId: T:NMF.Expressions.INotifyValue{`10}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<T11>
  nameWithType: INotifyValue<T11>
  fullName: NMF.Expressions.INotifyValue<T11>
  nameWithType.vb: INotifyValue(Of T11)
  fullName.vb: NMF.Expressions.INotifyValue(Of T11)
  name.vb: INotifyValue(Of T11)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T11
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T11
  - name: )
- uid: NMF.Expressions.INotifyValue{{T12}}
  commentId: T:NMF.Expressions.INotifyValue{`11}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<T12>
  nameWithType: INotifyValue<T12>
  fullName: NMF.Expressions.INotifyValue<T12>
  nameWithType.vb: INotifyValue(Of T12)
  fullName.vb: NMF.Expressions.INotifyValue(Of T12)
  name.vb: INotifyValue(Of T12)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T12
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T12
  - name: )
- uid: NMF.Expressions.INotifyValue{{T13}}
  commentId: T:NMF.Expressions.INotifyValue{`12}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<T13>
  nameWithType: INotifyValue<T13>
  fullName: NMF.Expressions.INotifyValue<T13>
  nameWithType.vb: INotifyValue(Of T13)
  fullName.vb: NMF.Expressions.INotifyValue(Of T13)
  name.vb: INotifyValue(Of T13)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T13
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T13
  - name: )
- uid: NMF.Expressions.INotifyValue{{T14}}
  commentId: T:NMF.Expressions.INotifyValue{`13}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<T14>
  nameWithType: INotifyValue<T14>
  fullName: NMF.Expressions.INotifyValue<T14>
  nameWithType.vb: INotifyValue(Of T14)
  fullName.vb: NMF.Expressions.INotifyValue(Of T14)
  name.vb: INotifyValue(Of T14)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T14
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T14
  - name: )
- uid: NMF.Expressions.ObservingFunc`15.EvaluatePartial*
  commentId: Overload:NMF.Expressions.ObservingFunc`15.EvaluatePartial
  href: NMF.Expressions.ObservingFunc-15.html#NMF_Expressions_ObservingFunc_15_EvaluatePartial__0_
  name: EvaluatePartial
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.EvaluatePartial
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).EvaluatePartial
- uid: System.Func{{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
  commentId: T:System.Func{`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}
  parent: System
  definition: System.Func`14
  href: https://learn.microsoft.com/dotnet/api/system.func-14
  name: Func<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType: Func<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  fullName: System.Func<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType.vb: Func(Of T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  fullName.vb: System.Func(Of T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  name.vb: Func(Of T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  spec.csharp:
  - uid: System.Func`14
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-14
  - name: <
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`14
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-14
  - name: (
  - name: Of
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func`14
  commentId: T:System.Func`14
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-14
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  spec.csharp:
  - uid: System.Func`14
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-14
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`14
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-14
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`15.ObservePartial*
  commentId: Overload:NMF.Expressions.ObservingFunc`15.ObservePartial
  href: NMF.Expressions.ObservingFunc-15.html#NMF_Expressions_ObservingFunc_15_ObservePartial_NMF_Expressions_INotifyValue__0__
  name: ObservePartial
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservePartial
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ObservePartial
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ObservePartial
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ObservePartial
- uid: NMF.Expressions.ObservingFunc{{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`14
  href: NMF.Expressions.ObservingFunc-14.html
  name: ObservingFunc<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType: ObservingFunc<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  fullName: NMF.Expressions.ObservingFunc<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType.vb: ObservingFunc(Of T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  name.vb: ObservingFunc(Of T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`14
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-14.html
  - name: <
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`14
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-14.html
  - name: (
  - name: Of
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`14
  commentId: T:NMF.Expressions.ObservingFunc`14
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-14.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`14
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-14.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`14
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-14.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func{{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
  commentId: T:System.Func{`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}
  parent: System
  definition: System.Func`13
  href: https://learn.microsoft.com/dotnet/api/system.func-13
  name: Func<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType: Func<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  fullName: System.Func<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType.vb: Func(Of T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  fullName.vb: System.Func(Of T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  name.vb: Func(Of T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  spec.csharp:
  - uid: System.Func`13
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-13
  - name: <
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`13
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-13
  - name: (
  - name: Of
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func`13
  commentId: T:System.Func`13
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-13
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  spec.csharp:
  - uid: System.Func`13
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-13
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`13
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-13
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`13
  href: NMF.Expressions.ObservingFunc-13.html
  name: ObservingFunc<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType: ObservingFunc<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  fullName: NMF.Expressions.ObservingFunc<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType.vb: ObservingFunc(Of T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  name.vb: ObservingFunc(Of T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`13
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-13.html
  - name: <
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`13
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-13.html
  - name: (
  - name: Of
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`13
  commentId: T:NMF.Expressions.ObservingFunc`13
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-13.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`13
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-13.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`13
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-13.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func{{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
  commentId: T:System.Func{`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}
  parent: System
  definition: System.Func`12
  href: https://learn.microsoft.com/dotnet/api/system.func-12
  name: Func<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType: Func<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  fullName: System.Func<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType.vb: Func(Of T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  fullName.vb: System.Func(Of T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  name.vb: Func(Of T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  spec.csharp:
  - uid: System.Func`12
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-12
  - name: <
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`12
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-12
  - name: (
  - name: Of
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func`12
  commentId: T:System.Func`12
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-12
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  spec.csharp:
  - uid: System.Func`12
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-12
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`12
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-12
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`12
  href: NMF.Expressions.ObservingFunc-12.html
  name: ObservingFunc<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType: ObservingFunc<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  fullName: NMF.Expressions.ObservingFunc<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType.vb: ObservingFunc(Of T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  name.vb: ObservingFunc(Of T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`12
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-12.html
  - name: <
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`12
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-12.html
  - name: (
  - name: Of
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`12
  commentId: T:NMF.Expressions.ObservingFunc`12
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-12.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`12
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-12.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`12
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-12.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func{{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
  commentId: T:System.Func{`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}
  parent: System
  definition: System.Func`11
  href: https://learn.microsoft.com/dotnet/api/system.func-11
  name: Func<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType: Func<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  fullName: System.Func<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType.vb: Func(Of T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  fullName.vb: System.Func(Of T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  name.vb: Func(Of T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  spec.csharp:
  - uid: System.Func`11
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-11
  - name: <
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`11
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-11
  - name: (
  - name: Of
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func`11
  commentId: T:System.Func`11
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-11
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  spec.csharp:
  - uid: System.Func`11
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-11
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`11
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-11
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`11
  href: NMF.Expressions.ObservingFunc-11.html
  name: ObservingFunc<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType: ObservingFunc<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  fullName: NMF.Expressions.ObservingFunc<T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType.vb: ObservingFunc(Of T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  name.vb: ObservingFunc(Of T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`11
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-11.html
  - name: <
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`11
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-11.html
  - name: (
  - name: Of
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`11
  commentId: T:NMF.Expressions.ObservingFunc`11
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-11.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`11
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-11.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`11
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-11.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func{{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
  commentId: T:System.Func{`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}
  parent: System
  definition: System.Func`10
  href: https://learn.microsoft.com/dotnet/api/system.func-10
  name: Func<T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType: Func<T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  fullName: System.Func<T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType.vb: Func(Of T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  fullName.vb: System.Func(Of T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  name.vb: Func(Of T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  spec.csharp:
  - uid: System.Func`10
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-10
  - name: <
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`10
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-10
  - name: (
  - name: Of
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func`10
  commentId: T:System.Func`10
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-10
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  spec.csharp:
  - uid: System.Func`10
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-10
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`10
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-10
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`10
  href: NMF.Expressions.ObservingFunc-10.html
  name: ObservingFunc<T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType: ObservingFunc<T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  fullName: NMF.Expressions.ObservingFunc<T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType.vb: ObservingFunc(Of T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  name.vb: ObservingFunc(Of T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`10
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-10.html
  - name: <
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`10
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-10.html
  - name: (
  - name: Of
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`10
  commentId: T:NMF.Expressions.ObservingFunc`10
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-10.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`10
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-10.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`10
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-10.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func{{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
  commentId: T:System.Func{`6,`7,`8,`9,`10,`11,`12,`13,`14}
  parent: System
  definition: System.Func`9
  href: https://learn.microsoft.com/dotnet/api/system.func-9
  name: Func<T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType: Func<T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  fullName: System.Func<T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType.vb: Func(Of T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  fullName.vb: System.Func(Of T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  name.vb: Func(Of T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  spec.csharp:
  - uid: System.Func`9
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-9
  - name: <
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`9
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-9
  - name: (
  - name: Of
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func`9
  commentId: T:System.Func`9
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-9
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  spec.csharp:
  - uid: System.Func`9
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-9
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`9
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-9
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{`6,`7,`8,`9,`10,`11,`12,`13,`14}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`9
  href: NMF.Expressions.ObservingFunc-9.html
  name: ObservingFunc<T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType: ObservingFunc<T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  fullName: NMF.Expressions.ObservingFunc<T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType.vb: ObservingFunc(Of T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  name.vb: ObservingFunc(Of T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`9
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-9.html
  - name: <
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`9
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-9.html
  - name: (
  - name: Of
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`9
  commentId: T:NMF.Expressions.ObservingFunc`9
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-9.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`9
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-9.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`9
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-9.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func{{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
  commentId: T:System.Func{`7,`8,`9,`10,`11,`12,`13,`14}
  parent: System
  definition: System.Func`8
  href: https://learn.microsoft.com/dotnet/api/system.func-8
  name: Func<T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType: Func<T8, T9, T10, T11, T12, T13, T14, TResult>
  fullName: System.Func<T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType.vb: Func(Of T8, T9, T10, T11, T12, T13, T14, TResult)
  fullName.vb: System.Func(Of T8, T9, T10, T11, T12, T13, T14, TResult)
  name.vb: Func(Of T8, T9, T10, T11, T12, T13, T14, TResult)
  spec.csharp:
  - uid: System.Func`8
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-8
  - name: <
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`8
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-8
  - name: (
  - name: Of
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func`8
  commentId: T:System.Func`8
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-8
  name: Func<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, T7, TResult>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  spec.csharp:
  - uid: System.Func`8
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-8
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`8
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-8
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{`7,`8,`9,`10,`11,`12,`13,`14}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`8
  href: NMF.Expressions.ObservingFunc-8.html
  name: ObservingFunc<T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType: ObservingFunc<T8, T9, T10, T11, T12, T13, T14, TResult>
  fullName: NMF.Expressions.ObservingFunc<T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType.vb: ObservingFunc(Of T8, T9, T10, T11, T12, T13, T14, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T8, T9, T10, T11, T12, T13, T14, TResult)
  name.vb: ObservingFunc(Of T8, T9, T10, T11, T12, T13, T14, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`8
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-8.html
  - name: <
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`8
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-8.html
  - name: (
  - name: Of
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`8
  commentId: T:NMF.Expressions.ObservingFunc`8
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-8.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`8
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-8.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`8
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-8.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func{{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
  commentId: T:System.Func{`8,`9,`10,`11,`12,`13,`14}
  parent: System
  definition: System.Func`7
  href: https://learn.microsoft.com/dotnet/api/system.func-7
  name: Func<T9, T10, T11, T12, T13, T14, TResult>
  nameWithType: Func<T9, T10, T11, T12, T13, T14, TResult>
  fullName: System.Func<T9, T10, T11, T12, T13, T14, TResult>
  nameWithType.vb: Func(Of T9, T10, T11, T12, T13, T14, TResult)
  fullName.vb: System.Func(Of T9, T10, T11, T12, T13, T14, TResult)
  name.vb: Func(Of T9, T10, T11, T12, T13, T14, TResult)
  spec.csharp:
  - uid: System.Func`7
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-7
  - name: <
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`7
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-7
  - name: (
  - name: Of
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func`7
  commentId: T:System.Func`7
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-7
  name: Func<T1, T2, T3, T4, T5, T6, TResult>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, TResult>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, TResult)
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, TResult)
  spec.csharp:
  - uid: System.Func`7
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-7
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`7
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-7
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{`8,`9,`10,`11,`12,`13,`14}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`7
  href: NMF.Expressions.ObservingFunc-7.html
  name: ObservingFunc<T9, T10, T11, T12, T13, T14, TResult>
  nameWithType: ObservingFunc<T9, T10, T11, T12, T13, T14, TResult>
  fullName: NMF.Expressions.ObservingFunc<T9, T10, T11, T12, T13, T14, TResult>
  nameWithType.vb: ObservingFunc(Of T9, T10, T11, T12, T13, T14, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T9, T10, T11, T12, T13, T14, TResult)
  name.vb: ObservingFunc(Of T9, T10, T11, T12, T13, T14, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`7
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-7.html
  - name: <
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`7
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-7.html
  - name: (
  - name: Of
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`7
  commentId: T:NMF.Expressions.ObservingFunc`7
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-7.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`7
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-7.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`7
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-7.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func{{T10},{T11},{T12},{T13},{T14},{TResult}}
  commentId: T:System.Func{`9,`10,`11,`12,`13,`14}
  parent: System
  definition: System.Func`6
  href: https://learn.microsoft.com/dotnet/api/system.func-6
  name: Func<T10, T11, T12, T13, T14, TResult>
  nameWithType: Func<T10, T11, T12, T13, T14, TResult>
  fullName: System.Func<T10, T11, T12, T13, T14, TResult>
  nameWithType.vb: Func(Of T10, T11, T12, T13, T14, TResult)
  fullName.vb: System.Func(Of T10, T11, T12, T13, T14, TResult)
  name.vb: Func(Of T10, T11, T12, T13, T14, TResult)
  spec.csharp:
  - uid: System.Func`6
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-6
  - name: <
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`6
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-6
  - name: (
  - name: Of
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func`6
  commentId: T:System.Func`6
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-6
  name: Func<T1, T2, T3, T4, T5, TResult>
  nameWithType: Func<T1, T2, T3, T4, T5, TResult>
  fullName: System.Func<T1, T2, T3, T4, T5, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, TResult)
  name.vb: Func(Of T1, T2, T3, T4, T5, TResult)
  spec.csharp:
  - uid: System.Func`6
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-6
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`6
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-6
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T10},{T11},{T12},{T13},{T14},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{`9,`10,`11,`12,`13,`14}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`6
  href: NMF.Expressions.ObservingFunc-6.html
  name: ObservingFunc<T10, T11, T12, T13, T14, TResult>
  nameWithType: ObservingFunc<T10, T11, T12, T13, T14, TResult>
  fullName: NMF.Expressions.ObservingFunc<T10, T11, T12, T13, T14, TResult>
  nameWithType.vb: ObservingFunc(Of T10, T11, T12, T13, T14, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T10, T11, T12, T13, T14, TResult)
  name.vb: ObservingFunc(Of T10, T11, T12, T13, T14, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`6
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-6.html
  - name: <
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`6
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-6.html
  - name: (
  - name: Of
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`6
  commentId: T:NMF.Expressions.ObservingFunc`6
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-6.html
  name: ObservingFunc<T1, T2, T3, T4, T5, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`6
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-6.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`6
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-6.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func{{T11},{T12},{T13},{T14},{TResult}}
  commentId: T:System.Func{`10,`11,`12,`13,`14}
  parent: System
  definition: System.Func`5
  href: https://learn.microsoft.com/dotnet/api/system.func-5
  name: Func<T11, T12, T13, T14, TResult>
  nameWithType: Func<T11, T12, T13, T14, TResult>
  fullName: System.Func<T11, T12, T13, T14, TResult>
  nameWithType.vb: Func(Of T11, T12, T13, T14, TResult)
  fullName.vb: System.Func(Of T11, T12, T13, T14, TResult)
  name.vb: Func(Of T11, T12, T13, T14, TResult)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-5
  - name: <
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-5
  - name: (
  - name: Of
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func`5
  commentId: T:System.Func`5
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-5
  name: Func<T1, T2, T3, T4, TResult>
  nameWithType: Func<T1, T2, T3, T4, TResult>
  fullName: System.Func<T1, T2, T3, T4, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, TResult)
  name.vb: Func(Of T1, T2, T3, T4, TResult)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-5
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-5
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T11},{T12},{T13},{T14},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{`10,`11,`12,`13,`14}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`5
  href: NMF.Expressions.ObservingFunc-5.html
  name: ObservingFunc<T11, T12, T13, T14, TResult>
  nameWithType: ObservingFunc<T11, T12, T13, T14, TResult>
  fullName: NMF.Expressions.ObservingFunc<T11, T12, T13, T14, TResult>
  nameWithType.vb: ObservingFunc(Of T11, T12, T13, T14, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T11, T12, T13, T14, TResult)
  name.vb: ObservingFunc(Of T11, T12, T13, T14, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`5
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-5.html
  - name: <
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`5
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-5.html
  - name: (
  - name: Of
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`5
  commentId: T:NMF.Expressions.ObservingFunc`5
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-5.html
  name: ObservingFunc<T1, T2, T3, T4, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`5
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-5.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`5
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-5.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func{{T12},{T13},{T14},{TResult}}
  commentId: T:System.Func{`11,`12,`13,`14}
  parent: System
  definition: System.Func`4
  href: https://learn.microsoft.com/dotnet/api/system.func-4
  name: Func<T12, T13, T14, TResult>
  nameWithType: Func<T12, T13, T14, TResult>
  fullName: System.Func<T12, T13, T14, TResult>
  nameWithType.vb: Func(Of T12, T13, T14, TResult)
  fullName.vb: System.Func(Of T12, T13, T14, TResult)
  name.vb: Func(Of T12, T13, T14, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: <
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: (
  - name: Of
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func`4
  commentId: T:System.Func`4
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-4
  name: Func<T1, T2, T3, TResult>
  nameWithType: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T12},{T13},{T14},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{`11,`12,`13,`14}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`4
  href: NMF.Expressions.ObservingFunc-4.html
  name: ObservingFunc<T12, T13, T14, TResult>
  nameWithType: ObservingFunc<T12, T13, T14, TResult>
  fullName: NMF.Expressions.ObservingFunc<T12, T13, T14, TResult>
  nameWithType.vb: ObservingFunc(Of T12, T13, T14, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T12, T13, T14, TResult)
  name.vb: ObservingFunc(Of T12, T13, T14, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-4.html
  - name: <
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-4.html
  - name: (
  - name: Of
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`4
  commentId: T:NMF.Expressions.ObservingFunc`4
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-4.html
  name: ObservingFunc<T1, T2, T3, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-4.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-4.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func{{T13},{T14},{TResult}}
  commentId: T:System.Func{`12,`13,`14}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T13, T14, TResult>
  nameWithType: Func<T13, T14, TResult>
  fullName: System.Func<T13, T14, TResult>
  nameWithType.vb: Func(Of T13, T14, TResult)
  fullName.vb: System.Func(Of T13, T14, TResult)
  name.vb: Func(Of T13, T14, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T13},{T14},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{`12,`13,`14}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`3
  href: NMF.Expressions.ObservingFunc-3.html
  name: ObservingFunc<T13, T14, TResult>
  nameWithType: ObservingFunc<T13, T14, TResult>
  fullName: NMF.Expressions.ObservingFunc<T13, T14, TResult>
  nameWithType.vb: ObservingFunc(Of T13, T14, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T13, T14, TResult)
  name.vb: ObservingFunc(Of T13, T14, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`3
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-3.html
  - name: <
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`3
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-3.html
  - name: (
  - name: Of
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`3
  commentId: T:NMF.Expressions.ObservingFunc`3
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-3.html
  name: ObservingFunc<T1, T2, TResult>
  nameWithType: ObservingFunc<T1, T2, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult)
  name.vb: ObservingFunc(Of T1, T2, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`3
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-3.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`3
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-3.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func{{T14},{TResult}}
  commentId: T:System.Func{`13,`14}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T14, TResult>
  nameWithType: Func<T14, TResult>
  fullName: System.Func<T14, TResult>
  nameWithType.vb: Func(Of T14, TResult)
  fullName.vb: System.Func(Of T14, TResult)
  name.vb: Func(Of T14, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T14},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{`13,`14}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`2
  href: NMF.Expressions.ObservingFunc-2.html
  name: ObservingFunc<T14, TResult>
  nameWithType: ObservingFunc<T14, TResult>
  fullName: NMF.Expressions.ObservingFunc<T14, TResult>
  nameWithType.vb: ObservingFunc(Of T14, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T14, TResult)
  name.vb: ObservingFunc(Of T14, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-2.html
  - name: <
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`2
  commentId: T:NMF.Expressions.ObservingFunc`2
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-2.html
  name: ObservingFunc<T1, TResult>
  nameWithType: ObservingFunc<T1, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>
  nameWithType.vb: ObservingFunc(Of T1, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult)
  name.vb: ObservingFunc(Of T1, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-2.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`15.InvokeReversable*
  commentId: Overload:NMF.Expressions.ObservingFunc`15.InvokeReversable
  href: NMF.Expressions.ObservingFunc-15.html#NMF_Expressions_ObservingFunc_15_InvokeReversable__0__1__2__3__4__5__6__7__8__9__10__11__12__13_
  name: InvokeReversable
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.InvokeReversable
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.InvokeReversable
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).InvokeReversable
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).InvokeReversable
- uid: NMF.Expressions.INotifyReversableValue{{TResult}}
  commentId: T:NMF.Expressions.INotifyReversableValue{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyReversableValue`1
  href: NMF.Expressions.INotifyReversableValue-1.html
  name: INotifyReversableValue<TResult>
  nameWithType: INotifyReversableValue<TResult>
  fullName: NMF.Expressions.INotifyReversableValue<TResult>
  nameWithType.vb: INotifyReversableValue(Of TResult)
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of TResult)
  name.vb: INotifyReversableValue(Of TResult)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    href: NMF.Expressions.INotifyReversableValue-1.html
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    href: NMF.Expressions.INotifyReversableValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.INotifyReversableValue`1
  commentId: T:NMF.Expressions.INotifyReversableValue`1
  href: NMF.Expressions.INotifyReversableValue-1.html
  name: INotifyReversableValue<T>
  nameWithType: INotifyReversableValue<T>
  fullName: NMF.Expressions.INotifyReversableValue<T>
  nameWithType.vb: INotifyReversableValue(Of T)
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of T)
  name.vb: INotifyReversableValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    href: NMF.Expressions.INotifyReversableValue-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    href: NMF.Expressions.INotifyReversableValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.ObservingFunc`15.op_Implicit*
  commentId: Overload:NMF.Expressions.ObservingFunc`15.op_Implicit
  name: implicit operator
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.implicit operator
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.implicit operator
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).CType
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).CType
  name.vb: CType
  spec.csharp:
  - name: implicit
  - name: " "
  - name: operator
- uid: NMF.Expressions.ObservingFunc`15
  commentId: T:NMF.Expressions.ObservingFunc`15
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-15.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`15
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-15.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`15
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-15.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`15.FromExpression*
  commentId: Overload:NMF.Expressions.ObservingFunc`15.FromExpression
  href: NMF.Expressions.ObservingFunc-15.html#NMF_Expressions_ObservingFunc_15_FromExpression_System_Linq_Expressions_Expression_System_Func__0__1__2__3__4__5__6__7__8__9__10__11__12__13__14___
  name: FromExpression
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.FromExpression
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.FromExpression
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).FromExpression
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).FromExpression
- uid: NMF.Expressions.ObservingFunc`15.IsReversable*
  commentId: Overload:NMF.Expressions.ObservingFunc`15.IsReversable
  href: NMF.Expressions.ObservingFunc-15.html#NMF_Expressions_ObservingFunc_15_IsReversable
  name: IsReversable
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.IsReversable
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.IsReversable
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).IsReversable
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).IsReversable
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: NMF.Expressions.ObservingFunc`15.ToString*
  commentId: Overload:NMF.Expressions.ObservingFunc`15.ToString
  href: NMF.Expressions.ObservingFunc-15.html#NMF_Expressions_ObservingFunc_15_ToString
  name: ToString
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ToString
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>.ToString
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ToString
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult).ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
