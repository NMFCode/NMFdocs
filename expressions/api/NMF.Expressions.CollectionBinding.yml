### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.CollectionBinding
  commentId: T:NMF.Expressions.CollectionBinding
  id: CollectionBinding
  parent: NMF.Expressions
  children:
  - NMF.Expressions.CollectionBinding.Create``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.ICollection{``0},System.Boolean)
  - NMF.Expressions.CollectionBinding.Create``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.ICollection{``0})
  langs:
  - csharp
  - vb
  name: CollectionBinding
  nameWithType: CollectionBinding
  fullName: NMF.Expressions.CollectionBinding
  type: Class
  source:
    remote:
      path: Expressions/Expressions.Utilities/CollectionBinding.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CollectionBinding
    path: src/Expressions/Expressions.Utilities/CollectionBinding.cs
    startLine: 11
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nDenotes a helper class to create bindings between collections\n"
  example: []
  syntax:
    content: public static class CollectionBinding
    content.vb: Public Module CollectionBinding
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: NMF.Expressions.CollectionBinding.Create``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.ICollection{``0})
  commentId: M:NMF.Expressions.CollectionBinding.Create``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.ICollection{``0})
  id: Create``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.ICollection{``0})
  parent: NMF.Expressions.CollectionBinding
  langs:
  - csharp
  - vb
  name: Create<T>(IEnumerableExpression<T>, ICollection<T>)
  nameWithType: CollectionBinding.Create<T>(IEnumerableExpression<T>, ICollection<T>)
  fullName: NMF.Expressions.CollectionBinding.Create<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.ICollection<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/CollectionBinding.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Create
    path: src/Expressions/Expressions.Utilities/CollectionBinding.cs
    startLine: 20
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nCreates a binding between the given collections\n"
  example: []
  syntax:
    content: public static IDisposable Create<T>(IEnumerableExpression<T> sourceCollection, ICollection<T> targetCollection)
    parameters:
    - id: sourceCollection
      type: NMF.Expressions.IEnumerableExpression{{T}}
      description: The source collection
    - id: targetCollection
      type: System.Collections.Generic.ICollection{{T}}
      description: The target collection
    typeParameters:
    - id: T
      description: The type of the elements
    return:
      type: System.IDisposable
      description: An object that can be disposed to revoke the binding
    content.vb: Public Shared Function Create(Of T)(sourceCollection As IEnumerableExpression(Of T), targetCollection As ICollection(Of T)) As IDisposable
  overload: NMF.Expressions.CollectionBinding.Create*
  nameWithType.vb: CollectionBinding.Create(Of T)(IEnumerableExpression(Of T), ICollection(Of T))
  fullName.vb: NMF.Expressions.CollectionBinding.Create(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.ICollection(Of T))
  name.vb: Create(Of T)(IEnumerableExpression(Of T), ICollection(Of T))
- uid: NMF.Expressions.CollectionBinding.Create``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.ICollection{``0},System.Boolean)
  commentId: M:NMF.Expressions.CollectionBinding.Create``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.ICollection{``0},System.Boolean)
  id: Create``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.ICollection{``0},System.Boolean)
  parent: NMF.Expressions.CollectionBinding
  langs:
  - csharp
  - vb
  name: Create<T>(IEnumerableExpression<T>, ICollection<T>, bool)
  nameWithType: CollectionBinding.Create<T>(IEnumerableExpression<T>, ICollection<T>, bool)
  fullName: NMF.Expressions.CollectionBinding.Create<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.ICollection<T>, bool)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/CollectionBinding.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Create
    path: src/Expressions/Expressions.Utilities/CollectionBinding.cs
    startLine: 33
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nCreates a binding between the given collections\n"
  example: []
  syntax:
    content: public static IDisposable Create<T>(IEnumerableExpression<T> sourceCollection, ICollection<T> targetCollection, bool force)
    parameters:
    - id: sourceCollection
      type: NMF.Expressions.IEnumerableExpression{{T}}
      description: The source collection
    - id: targetCollection
      type: System.Collections.Generic.ICollection{{T}}
      description: The target collection
    - id: force
      type: System.Boolean
      description: True, if the contents of the target collection should be forced to the source collection at start
    typeParameters:
    - id: T
      description: The type of the elements
    return:
      type: System.IDisposable
      description: An object that can be disposed to revoke the binding
    content.vb: Public Shared Function Create(Of T)(sourceCollection As IEnumerableExpression(Of T), targetCollection As ICollection(Of T), force As Boolean) As IDisposable
  overload: NMF.Expressions.CollectionBinding.Create*
  nameWithType.vb: CollectionBinding.Create(Of T)(IEnumerableExpression(Of T), ICollection(Of T), Boolean)
  fullName.vb: NMF.Expressions.CollectionBinding.Create(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.ICollection(Of T), Boolean)
  name.vb: Create(Of T)(IEnumerableExpression(Of T), ICollection(Of T), Boolean)
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.CollectionBinding.Create*
  commentId: Overload:NMF.Expressions.CollectionBinding.Create
  name: Create
  nameWithType: CollectionBinding.Create
  fullName: NMF.Expressions.CollectionBinding.Create
- uid: NMF.Expressions.IEnumerableExpression{{T}}
  commentId: T:NMF.Expressions.IEnumerableExpression{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<T>
  nameWithType: IEnumerableExpression<T>
  fullName: NMF.Expressions.IEnumerableExpression<T>
  nameWithType.vb: IEnumerableExpression(Of T)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T)
  name.vb: IEnumerableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: NMF.Expressions.IEnumerableExpression`1
  commentId: T:NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<T>
  nameWithType: IEnumerableExpression<T>
  fullName: NMF.Expressions.IEnumerableExpression<T>
  nameWithType.vb: IEnumerableExpression(Of T)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T)
  name.vb: IEnumerableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
