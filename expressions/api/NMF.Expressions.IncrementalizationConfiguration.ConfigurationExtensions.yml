### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions
  commentId: T:NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions
  id: ConfigurationExtensions
  parent: NMF.Expressions.IncrementalizationConfiguration
  children:
  - NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions.Clone(NMF.Expressions.IncrementalizationConfiguration.Configuration)
  - NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions.Describe(NMF.Expressions.IncrementalizationConfiguration.Configuration)
  - NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions.GetAllPossibilities(NMF.Expressions.IncrementalizationConfiguration.Configuration)
  langs:
  - csharp
  - vb
  name: ConfigurationExtensions
  nameWithType: ConfigurationExtensions
  fullName: NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions
  type: Class
  source:
    remote:
      path: Expressions/Expressions.Configuration/IncrementalizationConfiguration/ConfigurationExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ConfigurationExtensions
    path: src/Expressions/Expressions.Configuration/IncrementalizationConfiguration/ConfigurationExtensions.cs
    startLine: 11
  assemblies:
  - NMF.Expressions.Configuration
  namespace: NMF.Expressions.IncrementalizationConfiguration
  summary: "\nDenotes a helper class for configurations\n"
  example: []
  syntax:
    content: public static class ConfigurationExtensions
    content.vb: Public Module ConfigurationExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions.Clone(NMF.Expressions.IncrementalizationConfiguration.Configuration)
  commentId: M:NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions.Clone(NMF.Expressions.IncrementalizationConfiguration.Configuration)
  id: Clone(NMF.Expressions.IncrementalizationConfiguration.Configuration)
  isExtensionMethod: true
  parent: NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions
  langs:
  - csharp
  - vb
  name: Clone(Configuration)
  nameWithType: ConfigurationExtensions.Clone(Configuration)
  fullName: NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions.Clone(NMF.Expressions.IncrementalizationConfiguration.Configuration)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Configuration/IncrementalizationConfiguration/ConfigurationExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Clone
    path: src/Expressions/Expressions.Configuration/IncrementalizationConfiguration/ConfigurationExtensions.cs
    startLine: 18
  assemblies:
  - NMF.Expressions.Configuration
  namespace: NMF.Expressions.IncrementalizationConfiguration
  summary: "\nClones the provided configuration\n"
  example: []
  syntax:
    content: public static Configuration Clone(this Configuration configuration)
    parameters:
    - id: configuration
      type: NMF.Expressions.IncrementalizationConfiguration.Configuration
      description: The configuration to clone
    return:
      type: NMF.Expressions.IncrementalizationConfiguration.Configuration
      description: The cloned configuration
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Clone(configuration As Configuration) As Configuration
  overload: NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions.Clone*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions.GetAllPossibilities(NMF.Expressions.IncrementalizationConfiguration.Configuration)
  commentId: M:NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions.GetAllPossibilities(NMF.Expressions.IncrementalizationConfiguration.Configuration)
  id: GetAllPossibilities(NMF.Expressions.IncrementalizationConfiguration.Configuration)
  isExtensionMethod: true
  parent: NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions
  langs:
  - csharp
  - vb
  name: GetAllPossibilities(Configuration)
  nameWithType: ConfigurationExtensions.GetAllPossibilities(Configuration)
  fullName: NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions.GetAllPossibilities(NMF.Expressions.IncrementalizationConfiguration.Configuration)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Configuration/IncrementalizationConfiguration/ConfigurationExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetAllPossibilities
    path: src/Expressions/Expressions.Configuration/IncrementalizationConfiguration/ConfigurationExtensions.cs
    startLine: 40
  assemblies:
  - NMF.Expressions.Configuration
  namespace: NMF.Expressions.IncrementalizationConfiguration
  summary: "\nGenerates a state-space of possibilities given the provided base configuration\n"
  example: []
  syntax:
    content: public static IEnumerable<Configuration> GetAllPossibilities(this Configuration baseConfiguration)
    parameters:
    - id: baseConfiguration
      type: NMF.Expressions.IncrementalizationConfiguration.Configuration
      description: The base configuration
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Expressions.IncrementalizationConfiguration.Configuration}
      description: A collection of allowed configurations
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetAllPossibilities(baseConfiguration As Configuration) As IEnumerable(Of Configuration)
  overload: NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions.GetAllPossibilities*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions.Describe(NMF.Expressions.IncrementalizationConfiguration.Configuration)
  commentId: M:NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions.Describe(NMF.Expressions.IncrementalizationConfiguration.Configuration)
  id: Describe(NMF.Expressions.IncrementalizationConfiguration.Configuration)
  isExtensionMethod: true
  parent: NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions
  langs:
  - csharp
  - vb
  name: Describe(Configuration)
  nameWithType: ConfigurationExtensions.Describe(Configuration)
  fullName: NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions.Describe(NMF.Expressions.IncrementalizationConfiguration.Configuration)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Configuration/IncrementalizationConfiguration/ConfigurationExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Describe
    path: src/Expressions/Expressions.Configuration/IncrementalizationConfiguration/ConfigurationExtensions.cs
    startLine: 70
  assemblies:
  - NMF.Expressions.Configuration
  namespace: NMF.Expressions.IncrementalizationConfiguration
  summary: "\nDescribes the current configuration in a string\n"
  example: []
  syntax:
    content: public static string Describe(this Configuration configuration)
    parameters:
    - id: configuration
      type: NMF.Expressions.IncrementalizationConfiguration.Configuration
      description: The configuration to be described
    return:
      type: System.String
      description: A descriptive string
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Describe(configuration As Configuration) As String
  overload: NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions.Describe*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: NMF.Expressions.IncrementalizationConfiguration
  commentId: N:NMF.Expressions.IncrementalizationConfiguration
  name: NMF.Expressions.IncrementalizationConfiguration
  nameWithType: NMF.Expressions.IncrementalizationConfiguration
  fullName: NMF.Expressions.IncrementalizationConfiguration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions.Clone*
  commentId: Overload:NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions.Clone
  name: Clone
  nameWithType: ConfigurationExtensions.Clone
  fullName: NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions.Clone
- uid: NMF.Expressions.IncrementalizationConfiguration.Configuration
  commentId: T:NMF.Expressions.IncrementalizationConfiguration.Configuration
  parent: NMF.Expressions.IncrementalizationConfiguration
  name: Configuration
  nameWithType: Configuration
  fullName: NMF.Expressions.IncrementalizationConfiguration.Configuration
- uid: NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions.GetAllPossibilities*
  commentId: Overload:NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions.GetAllPossibilities
  name: GetAllPossibilities
  nameWithType: ConfigurationExtensions.GetAllPossibilities
  fullName: NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions.GetAllPossibilities
- uid: System.Collections.Generic.IEnumerable{NMF.Expressions.IncrementalizationConfiguration.Configuration}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Expressions.IncrementalizationConfiguration.Configuration}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Configuration>
  nameWithType: IEnumerable<Configuration>
  fullName: System.Collections.Generic.IEnumerable<NMF.Expressions.IncrementalizationConfiguration.Configuration>
  nameWithType.vb: IEnumerable(Of Configuration)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Expressions.IncrementalizationConfiguration.Configuration)
  name.vb: IEnumerable(Of Configuration)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IncrementalizationConfiguration.Configuration
    name: Configuration
    nameWithType: Configuration
    fullName: NMF.Expressions.IncrementalizationConfiguration.Configuration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IncrementalizationConfiguration.Configuration
    name: Configuration
    nameWithType: Configuration
    fullName: NMF.Expressions.IncrementalizationConfiguration.Configuration
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions.Describe*
  commentId: Overload:NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions.Describe
  name: Describe
  nameWithType: ConfigurationExtensions.Describe
  fullName: NMF.Expressions.IncrementalizationConfiguration.ConfigurationExtensions.Describe
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
