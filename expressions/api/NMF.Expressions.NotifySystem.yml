### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.NotifySystem
  commentId: T:NMF.Expressions.NotifySystem
  id: NotifySystem
  parent: NMF.Expressions
  children:
  - NMF.Expressions.NotifySystem.CreateExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  - NMF.Expressions.NotifySystem.CreateReversableExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  - NMF.Expressions.NotifySystem.DefaultSystem
  langs:
  - csharp
  - vb
  name: NotifySystem
  nameWithType: NotifySystem
  fullName: NMF.Expressions.NotifySystem
  type: Class
  source:
    remote:
      path: Expressions/Expressions/Public/NotifySystem.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NotifySystem
    path: src/Expressions/Expressions/Public/NotifySystem.cs
    startLine: 8
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nThis class encapsulates a default incremental system\n"
  example: []
  syntax:
    content: public static class NotifySystem
    content.vb: Public Module NotifySystem
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NMF.Expressions.NotifySystem.DefaultSystem
  commentId: P:NMF.Expressions.NotifySystem.DefaultSystem
  id: DefaultSystem
  parent: NMF.Expressions.NotifySystem
  langs:
  - csharp
  - vb
  name: DefaultSystem
  nameWithType: NotifySystem.DefaultSystem
  fullName: NMF.Expressions.NotifySystem.DefaultSystem
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/NotifySystem.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: DefaultSystem
    path: src/Expressions/Expressions/Public/NotifySystem.cs
    startLine: 21
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nGets or sets the incremental computation system to be used by default\n"
  remarks: This property can never be set to a null value
  example: []
  syntax:
    content: public static INotifySystem DefaultSystem { get; set; }
    parameters: []
    return:
      type: NMF.Expressions.INotifySystem
    content.vb: Public Shared Property DefaultSystem As INotifySystem
  overload: NMF.Expressions.NotifySystem.DefaultSystem*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.Expressions.NotifySystem.CreateExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:NMF.Expressions.NotifySystem.CreateExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  id: CreateExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: NMF.Expressions.NotifySystem
  langs:
  - csharp
  - vb
  name: CreateExpression<T>(Expression, IEnumerable<ParameterExpression>, IDictionary<String, Object>)
  nameWithType: NotifySystem.CreateExpression<T>(Expression, IEnumerable<ParameterExpression>, IDictionary<String, Object>)
  fullName: NMF.Expressions.NotifySystem.CreateExpression<T>(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/NotifySystem.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateExpression
    path: src/Expressions/Expressions/Public/NotifySystem.cs
    startLine: 41
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nCreates an incremental expression for the given code expression\n"
  example: []
  syntax:
    content: public static INotifyExpression<T> CreateExpression<T>(Expression expression, IEnumerable<ParameterExpression> parameters, IDictionary<string, object> parameterMappings = null)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: The expression from which to create an incremental expression
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: The parameters of the expression
    - id: parameterMappings
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: A given mapping of parameters
    typeParameters:
    - id: T
      description: The type of the expression
    return:
      type: NMF.Expressions.INotifyExpression{{T}}
      description: An incremental expression object
    content.vb: Public Shared Function CreateExpression(Of T)(expression As Expression, parameters As IEnumerable(Of ParameterExpression), parameterMappings As IDictionary(Of String, Object) = Nothing) As INotifyExpression(Of T)
  overload: NMF.Expressions.NotifySystem.CreateExpression*
  nameWithType.vb: NotifySystem.CreateExpression(Of T)(Expression, IEnumerable(Of ParameterExpression), IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.NotifySystem.CreateExpression(Of T)(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: CreateExpression(Of T)(Expression, IEnumerable(Of ParameterExpression), IDictionary(Of String, Object))
- uid: NMF.Expressions.NotifySystem.CreateReversableExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:NMF.Expressions.NotifySystem.CreateReversableExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  id: CreateReversableExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: NMF.Expressions.NotifySystem
  langs:
  - csharp
  - vb
  name: CreateReversableExpression<T>(Expression, IEnumerable<ParameterExpression>, IDictionary<String, Object>)
  nameWithType: NotifySystem.CreateReversableExpression<T>(Expression, IEnumerable<ParameterExpression>, IDictionary<String, Object>)
  fullName: NMF.Expressions.NotifySystem.CreateReversableExpression<T>(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/NotifySystem.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateReversableExpression
    path: src/Expressions/Expressions/Public/NotifySystem.cs
    startLine: 54
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nCreates an incremental expression for the given code expression\n"
  example: []
  syntax:
    content: public static INotifyReversableExpression<T> CreateReversableExpression<T>(Expression expression, IEnumerable<ParameterExpression> parameters, IDictionary<string, object> parameterMappings = null)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: The expression from which to create an incremental expression
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: The parameters of the expression
    - id: parameterMappings
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: A given mapping of parameters
    typeParameters:
    - id: T
      description: The type of the expression
    return:
      type: NMF.Expressions.INotifyReversableExpression{{T}}
      description: An incremental expression object
    content.vb: Public Shared Function CreateReversableExpression(Of T)(expression As Expression, parameters As IEnumerable(Of ParameterExpression), parameterMappings As IDictionary(Of String, Object) = Nothing) As INotifyReversableExpression(Of T)
  overload: NMF.Expressions.NotifySystem.CreateReversableExpression*
  nameWithType.vb: NotifySystem.CreateReversableExpression(Of T)(Expression, IEnumerable(Of ParameterExpression), IDictionary(Of String, Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.NotifySystem.CreateReversableExpression(Of T)(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: CreateReversableExpression(Of T)(Expression, IEnumerable(Of ParameterExpression), IDictionary(Of String, Object))
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.NotifySystem.DefaultSystem*
  commentId: Overload:NMF.Expressions.NotifySystem.DefaultSystem
  name: DefaultSystem
  nameWithType: NotifySystem.DefaultSystem
  fullName: NMF.Expressions.NotifySystem.DefaultSystem
- uid: NMF.Expressions.INotifySystem
  commentId: T:NMF.Expressions.INotifySystem
  parent: NMF.Expressions
  name: INotifySystem
  nameWithType: INotifySystem
  fullName: NMF.Expressions.INotifySystem
- uid: NMF.Expressions.NotifySystem.CreateExpression*
  commentId: Overload:NMF.Expressions.NotifySystem.CreateExpression
  name: CreateExpression
  nameWithType: NotifySystem.CreateExpression
  fullName: NMF.Expressions.NotifySystem.CreateExpression
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
  commentId: T:System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ParameterExpression>
  nameWithType: IEnumerable<ParameterExpression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>
  nameWithType.vb: IEnumerable(Of ParameterExpression)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression)
  name.vb: IEnumerable(Of ParameterExpression)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    nameWithType: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    nameWithType: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Object>
  nameWithType: IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyExpression{{T}}
  commentId: T:NMF.Expressions.INotifyExpression{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyExpression`1
  name: INotifyExpression<T>
  nameWithType: INotifyExpression<T>
  fullName: NMF.Expressions.INotifyExpression<T>
  nameWithType.vb: INotifyExpression(Of T)
  fullName.vb: NMF.Expressions.INotifyExpression(Of T)
  name.vb: INotifyExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    nameWithType: INotifyExpression
    fullName: NMF.Expressions.INotifyExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    nameWithType: INotifyExpression
    fullName: NMF.Expressions.INotifyExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyExpression`1
  commentId: T:NMF.Expressions.INotifyExpression`1
  parent: NMF.Expressions
  name: INotifyExpression<T>
  nameWithType: INotifyExpression<T>
  fullName: NMF.Expressions.INotifyExpression<T>
  nameWithType.vb: INotifyExpression(Of T)
  fullName.vb: NMF.Expressions.INotifyExpression(Of T)
  name.vb: INotifyExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    nameWithType: INotifyExpression
    fullName: NMF.Expressions.INotifyExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    nameWithType: INotifyExpression
    fullName: NMF.Expressions.INotifyExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.NotifySystem.CreateReversableExpression*
  commentId: Overload:NMF.Expressions.NotifySystem.CreateReversableExpression
  name: CreateReversableExpression
  nameWithType: NotifySystem.CreateReversableExpression
  fullName: NMF.Expressions.NotifySystem.CreateReversableExpression
- uid: NMF.Expressions.INotifyReversableExpression{{T}}
  commentId: T:NMF.Expressions.INotifyReversableExpression{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyReversableExpression`1
  name: INotifyReversableExpression<T>
  nameWithType: INotifyReversableExpression<T>
  fullName: NMF.Expressions.INotifyReversableExpression<T>
  nameWithType.vb: INotifyReversableExpression(Of T)
  fullName.vb: NMF.Expressions.INotifyReversableExpression(Of T)
  name.vb: INotifyReversableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableExpression`1
    name: INotifyReversableExpression
    nameWithType: INotifyReversableExpression
    fullName: NMF.Expressions.INotifyReversableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableExpression`1
    name: INotifyReversableExpression
    nameWithType: INotifyReversableExpression
    fullName: NMF.Expressions.INotifyReversableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyReversableExpression`1
  commentId: T:NMF.Expressions.INotifyReversableExpression`1
  name: INotifyReversableExpression<T>
  nameWithType: INotifyReversableExpression<T>
  fullName: NMF.Expressions.INotifyReversableExpression<T>
  nameWithType.vb: INotifyReversableExpression(Of T)
  fullName.vb: NMF.Expressions.INotifyReversableExpression(Of T)
  name.vb: INotifyReversableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableExpression`1
    name: INotifyReversableExpression
    nameWithType: INotifyReversableExpression
    fullName: NMF.Expressions.INotifyReversableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableExpression`1
    name: INotifyReversableExpression
    nameWithType: INotifyReversableExpression
    fullName: NMF.Expressions.INotifyReversableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
