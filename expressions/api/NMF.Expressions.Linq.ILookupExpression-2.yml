### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.Linq.ILookupExpression`2
  commentId: T:NMF.Expressions.Linq.ILookupExpression`2
  id: ILookupExpression`2
  parent: NMF.Expressions.Linq
  children:
  - NMF.Expressions.Linq.ILookupExpression`2.AsNotifiable
  - NMF.Expressions.Linq.ILookupExpression`2.Item(`1)
  - NMF.Expressions.Linq.ILookupExpression`2.Keys
  langs:
  - csharp
  - vb
  name: ILookupExpression<TSource, TKey>
  nameWithType: ILookupExpression<TSource, TKey>
  fullName: NMF.Expressions.Linq.ILookupExpression<TSource, TKey>
  type: Interface
  source:
    remote:
      path: Expressions/Expressions.Utilities/ILookupExpression.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ILookupExpression
    path: src/Expressions/Expressions.Utilities/ILookupExpression.cs
    startLine: 11
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  summary: Denotes an interface for a lookup
  example: []
  syntax:
    content: public interface ILookupExpression<TSource, TKey>
    typeParameters:
    - id: TSource
      description: The source type of the lookup
    - id: TKey
      description: The type of key elements
    content.vb: Public Interface ILookupExpression(Of TSource, TKey)
  extensionMethods:
  - NMF.Expressions.Linq.ILookupExpression`2.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  nameWithType.vb: ILookupExpression(Of TSource, TKey)
  fullName.vb: NMF.Expressions.Linq.ILookupExpression(Of TSource, TKey)
  name.vb: ILookupExpression(Of TSource, TKey)
- uid: NMF.Expressions.Linq.ILookupExpression`2.Item(`1)
  commentId: P:NMF.Expressions.Linq.ILookupExpression`2.Item(`1)
  id: Item(`1)
  parent: NMF.Expressions.Linq.ILookupExpression`2
  langs:
  - csharp
  - vb
  name: this[TKey]
  nameWithType: ILookupExpression<TSource, TKey>.this[TKey]
  fullName: NMF.Expressions.Linq.ILookupExpression<TSource, TKey>.this[TKey]
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/ILookupExpression.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: this[]
    path: src/Expressions/Expressions.Utilities/ILookupExpression.cs
    startLine: 18
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  summary: Gets the elements for the provided key
  example: []
  syntax:
    content: IEnumerableExpression<TSource> this[TKey key] { get; }
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
    return:
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The elements for this key
    content.vb: ReadOnly Default Property this[](key As TKey) As IEnumerableExpression(Of TSource)
  overload: NMF.Expressions.Linq.ILookupExpression`2.Item*
  nameWithType.vb: ILookupExpression(Of TSource, TKey).this[](TKey)
  fullName.vb: NMF.Expressions.Linq.ILookupExpression(Of TSource, TKey).this[](TKey)
  name.vb: this[](TKey)
- uid: NMF.Expressions.Linq.ILookupExpression`2.Keys
  commentId: P:NMF.Expressions.Linq.ILookupExpression`2.Keys
  id: Keys
  parent: NMF.Expressions.Linq.ILookupExpression`2
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: ILookupExpression<TSource, TKey>.Keys
  fullName: NMF.Expressions.Linq.ILookupExpression<TSource, TKey>.Keys
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/ILookupExpression.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Keys
    path: src/Expressions/Expressions.Utilities/ILookupExpression.cs
    startLine: 23
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  summary: Gets a collection of keys
  example: []
  syntax:
    content: IEnumerableExpression<TKey> Keys { get; }
    parameters: []
    return:
      type: NMF.Expressions.IEnumerableExpression{{TKey}}
    content.vb: ReadOnly Property Keys As IEnumerableExpression(Of TKey)
  overload: NMF.Expressions.Linq.ILookupExpression`2.Keys*
  nameWithType.vb: ILookupExpression(Of TSource, TKey).Keys
  fullName.vb: NMF.Expressions.Linq.ILookupExpression(Of TSource, TKey).Keys
- uid: NMF.Expressions.Linq.ILookupExpression`2.AsNotifiable
  commentId: M:NMF.Expressions.Linq.ILookupExpression`2.AsNotifiable
  id: AsNotifiable
  parent: NMF.Expressions.Linq.ILookupExpression`2
  langs:
  - csharp
  - vb
  name: AsNotifiable()
  nameWithType: ILookupExpression<TSource, TKey>.AsNotifiable()
  fullName: NMF.Expressions.Linq.ILookupExpression<TSource, TKey>.AsNotifiable()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/ILookupExpression.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AsNotifiable
    path: src/Expressions/Expressions.Utilities/ILookupExpression.cs
    startLine: 29
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  summary: Gets an incremental version of the lookup
  example: []
  syntax:
    content: INotifyLookup<TSource, TKey> AsNotifiable()
    return:
      type: NMF.Expressions.Linq.INotifyLookup{{TSource},{TKey}}
      description: ''
    content.vb: Function AsNotifiable() As INotifyLookup(Of TSource, TKey)
  overload: NMF.Expressions.Linq.ILookupExpression`2.AsNotifiable*
  nameWithType.vb: ILookupExpression(Of TSource, TKey).AsNotifiable()
  fullName.vb: NMF.Expressions.Linq.ILookupExpression(Of TSource, TKey).AsNotifiable()
references:
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  href: NMF.html
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
    href: NMF.Expressions.Linq.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
    href: NMF.Expressions.Linq.html
- uid: NMF.Expressions.Linq.ILookupExpression`2.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  name: AsOne<ILookupExpression<TSource, TKey>>(ILookupExpression<TSource, TKey>)
  nameWithType: ExpressionExtensions.AsOne<ILookupExpression<TSource, TKey>>(ILookupExpression<TSource, TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<NMF.Expressions.Linq.ILookupExpression<TSource, TKey>>(NMF.Expressions.Linq.ILookupExpression<TSource, TKey>)
  nameWithType.vb: ExpressionExtensions.AsOne(Of ILookupExpression(Of TSource, TKey))(ILookupExpression(Of TSource, TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of NMF.Expressions.Linq.ILookupExpression(Of TSource, TKey))(NMF.Expressions.Linq.ILookupExpression(Of TSource, TKey))
  name.vb: AsOne(Of ILookupExpression(Of TSource, TKey))(ILookupExpression(Of TSource, TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.Linq.ILookupExpression{`0,`1})
    name: AsOne
    href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  - name: <
  - uid: NMF.Expressions.Linq.ILookupExpression`2
    name: ILookupExpression
    href: NMF.Expressions.Linq.ILookupExpression-2.html
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: (
  - uid: NMF.Expressions.Linq.ILookupExpression`2
    name: ILookupExpression
    href: NMF.Expressions.Linq.ILookupExpression-2.html
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.Linq.ILookupExpression{`0,`1})
    name: AsOne
    href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.Linq.ILookupExpression`2
    name: ILookupExpression
    href: NMF.Expressions.Linq.ILookupExpression-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: (
  - uid: NMF.Expressions.Linq.ILookupExpression`2
    name: ILookupExpression
    href: NMF.Expressions.Linq.ILookupExpression-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  name: AsOne<T>(T)
  nameWithType: ExpressionExtensions.AsOne<T>(T)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<T>(T)
  nameWithType.vb: ExpressionExtensions.AsOne(Of T)(T)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of T)(T)
  name.vb: AsOne(Of T)(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
    href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
    href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  parent: NMF.Expressions.Linq
  href: NMF.Expressions.Linq.ExpressionExtensions.html
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
- uid: NMF.Expressions.Linq.ILookupExpression`2.Item*
  commentId: Overload:NMF.Expressions.Linq.ILookupExpression`2.Item
  href: NMF.Expressions.Linq.ILookupExpression-2.html#NMF_Expressions_Linq_ILookupExpression_2_Item__1_
  name: this
  nameWithType: ILookupExpression<TSource, TKey>.this
  fullName: NMF.Expressions.Linq.ILookupExpression<TSource, TKey>.this
  nameWithType.vb: ILookupExpression(Of TSource, TKey).this[]
  fullName.vb: NMF.Expressions.Linq.ILookupExpression(Of TSource, TKey).this[]
  name.vb: this[]
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: NMF.Expressions.IEnumerableExpression{{TSource}}
  commentId: T:NMF.Expressions.IEnumerableExpression{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  href: NMF.Expressions.IEnumerableExpression-1.html
  name: IEnumerableExpression<TSource>
  nameWithType: IEnumerableExpression<TSource>
  fullName: NMF.Expressions.IEnumerableExpression<TSource>
  nameWithType.vb: IEnumerableExpression(Of TSource)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of TSource)
  name.vb: IEnumerableExpression(Of TSource)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    href: NMF.Expressions.IEnumerableExpression-1.html
  - name: <
  - name: TSource
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    href: NMF.Expressions.IEnumerableExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: NMF.Expressions.IEnumerableExpression`1
  commentId: T:NMF.Expressions.IEnumerableExpression`1
  href: NMF.Expressions.IEnumerableExpression-1.html
  name: IEnumerableExpression<T>
  nameWithType: IEnumerableExpression<T>
  fullName: NMF.Expressions.IEnumerableExpression<T>
  nameWithType.vb: IEnumerableExpression(Of T)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T)
  name.vb: IEnumerableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    href: NMF.Expressions.IEnumerableExpression-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    href: NMF.Expressions.IEnumerableExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  href: NMF.html
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
- uid: NMF.Expressions.Linq.ILookupExpression`2.Keys*
  commentId: Overload:NMF.Expressions.Linq.ILookupExpression`2.Keys
  href: NMF.Expressions.Linq.ILookupExpression-2.html#NMF_Expressions_Linq_ILookupExpression_2_Keys
  name: Keys
  nameWithType: ILookupExpression<TSource, TKey>.Keys
  fullName: NMF.Expressions.Linq.ILookupExpression<TSource, TKey>.Keys
  nameWithType.vb: ILookupExpression(Of TSource, TKey).Keys
  fullName.vb: NMF.Expressions.Linq.ILookupExpression(Of TSource, TKey).Keys
- uid: NMF.Expressions.IEnumerableExpression{{TKey}}
  commentId: T:NMF.Expressions.IEnumerableExpression{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  href: NMF.Expressions.IEnumerableExpression-1.html
  name: IEnumerableExpression<TKey>
  nameWithType: IEnumerableExpression<TKey>
  fullName: NMF.Expressions.IEnumerableExpression<TKey>
  nameWithType.vb: IEnumerableExpression(Of TKey)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of TKey)
  name.vb: IEnumerableExpression(Of TKey)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    href: NMF.Expressions.IEnumerableExpression-1.html
  - name: <
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    href: NMF.Expressions.IEnumerableExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
- uid: NMF.Expressions.Linq.ILookupExpression`2.AsNotifiable*
  commentId: Overload:NMF.Expressions.Linq.ILookupExpression`2.AsNotifiable
  href: NMF.Expressions.Linq.ILookupExpression-2.html#NMF_Expressions_Linq_ILookupExpression_2_AsNotifiable
  name: AsNotifiable
  nameWithType: ILookupExpression<TSource, TKey>.AsNotifiable
  fullName: NMF.Expressions.Linq.ILookupExpression<TSource, TKey>.AsNotifiable
  nameWithType.vb: ILookupExpression(Of TSource, TKey).AsNotifiable
  fullName.vb: NMF.Expressions.Linq.ILookupExpression(Of TSource, TKey).AsNotifiable
- uid: NMF.Expressions.Linq.INotifyLookup{{TSource},{TKey}}
  commentId: T:NMF.Expressions.Linq.INotifyLookup{`0,`1}
  parent: NMF.Expressions.Linq
  definition: NMF.Expressions.Linq.INotifyLookup`2
  href: NMF.Expressions.Linq.INotifyLookup-2.html
  name: INotifyLookup<TSource, TKey>
  nameWithType: INotifyLookup<TSource, TKey>
  fullName: NMF.Expressions.Linq.INotifyLookup<TSource, TKey>
  nameWithType.vb: INotifyLookup(Of TSource, TKey)
  fullName.vb: NMF.Expressions.Linq.INotifyLookup(Of TSource, TKey)
  name.vb: INotifyLookup(Of TSource, TKey)
  spec.csharp:
  - uid: NMF.Expressions.Linq.INotifyLookup`2
    name: INotifyLookup
    href: NMF.Expressions.Linq.INotifyLookup-2.html
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.INotifyLookup`2
    name: INotifyLookup
    href: NMF.Expressions.Linq.INotifyLookup-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
- uid: NMF.Expressions.Linq.INotifyLookup`2
  commentId: T:NMF.Expressions.Linq.INotifyLookup`2
  href: NMF.Expressions.Linq.INotifyLookup-2.html
  name: INotifyLookup<TSource, TKey>
  nameWithType: INotifyLookup<TSource, TKey>
  fullName: NMF.Expressions.Linq.INotifyLookup<TSource, TKey>
  nameWithType.vb: INotifyLookup(Of TSource, TKey)
  fullName.vb: NMF.Expressions.Linq.INotifyLookup(Of TSource, TKey)
  name.vb: INotifyLookup(Of TSource, TKey)
  spec.csharp:
  - uid: NMF.Expressions.Linq.INotifyLookup`2
    name: INotifyLookup
    href: NMF.Expressions.Linq.INotifyLookup-2.html
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.INotifyLookup`2
    name: INotifyLookup
    href: NMF.Expressions.Linq.INotifyLookup-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
