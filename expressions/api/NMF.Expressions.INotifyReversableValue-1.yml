### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.INotifyReversableValue`1
  commentId: T:NMF.Expressions.INotifyReversableValue`1
  id: INotifyReversableValue`1
  parent: NMF.Expressions
  children:
  - NMF.Expressions.INotifyReversableValue`1.IsReversable
  - NMF.Expressions.INotifyReversableValue`1.Value
  langs:
  - csharp
  - vb
  name: INotifyReversableValue<T>
  nameWithType: INotifyReversableValue<T>
  fullName: NMF.Expressions.INotifyReversableValue<T>
  type: Interface
  source:
    remote:
      path: Expressions/Expressions/Public/INotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: INotifyReversableValue
    path: src/Expressions/Expressions/Public/INotifyValue.cs
    startLine: 25
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nRepresents a reversable incremental value\n"
  example: []
  syntax:
    content: 'public interface INotifyReversableValue<T> : INotifyValue<T>, INotifiable, IDisposable'
    typeParameters:
    - id: T
      description: The value type
    content.vb: >-
      Public Interface INotifyReversableValue(Of T)
          Inherits INotifyValue(Of T)
  inheritedMembers:
  - NMF.Expressions.INotifyValue{{T}}.ValueChanged
  - NMF.Expressions.INotifiable.Successors
  - NMF.Expressions.INotifiable.Dependencies
  - NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  - NMF.Expressions.INotifiable.ExecutionMetaData
  - System.IDisposable.Dispose
  extensionMethods:
  - NMF.Expressions.INotifiable.NMF.Expressions.Debug.DebugExtensions.Visualize
  - NMF.Expressions.INotifiable.NMF.Expressions.Debug.DebugExtensions.ExportToDgml(System.String)
  - NMF.Expressions.INotifyValue{`0}.NMF.Expressions.ReversableExtensions.AsReversable``1(System.Action{{T}})
  nameWithType.vb: INotifyReversableValue(Of T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of T)
  name.vb: INotifyReversableValue(Of T)
- uid: NMF.Expressions.INotifyReversableValue`1.Value
  commentId: P:NMF.Expressions.INotifyReversableValue`1.Value
  id: Value
  parent: NMF.Expressions.INotifyReversableValue`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: INotifyReversableValue<T>.Value
  fullName: NMF.Expressions.INotifyReversableValue<T>.Value
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/INotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Value
    path: src/Expressions/Expressions/Public/INotifyValue.cs
    startLine: 30
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nGets or sets the current value\n"
  example: []
  syntax:
    content: T Value { get; set; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Property Value As T
  overload: NMF.Expressions.INotifyReversableValue`1.Value*
  nameWithType.vb: INotifyReversableValue(Of T).Value
  modifiers.csharp:
  - get
  - set
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of T).Value
- uid: NMF.Expressions.INotifyReversableValue`1.IsReversable
  commentId: P:NMF.Expressions.INotifyReversableValue`1.IsReversable
  id: IsReversable
  parent: NMF.Expressions.INotifyReversableValue`1
  langs:
  - csharp
  - vb
  name: IsReversable
  nameWithType: INotifyReversableValue<T>.IsReversable
  fullName: NMF.Expressions.INotifyReversableValue<T>.IsReversable
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/INotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsReversable
    path: src/Expressions/Expressions/Public/INotifyValue.cs
    startLine: 35
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nChecks whether it is allowed to set values\n"
  example: []
  syntax:
    content: bool IsReversable { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsReversable As Boolean
  overload: NMF.Expressions.INotifyReversableValue`1.IsReversable*
  nameWithType.vb: INotifyReversableValue(Of T).IsReversable
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of T).IsReversable
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: NMF.Expressions.INotifyValue{{T}}.ValueChanged
  commentId: E:NMF.Expressions.INotifyValue{`0}.ValueChanged
  parent: NMF.Expressions.INotifyValue{{T}}
  definition: NMF.Expressions.INotifyValue`1.ValueChanged
  name: ValueChanged
  nameWithType: INotifyValue<T>.ValueChanged
  fullName: NMF.Expressions.INotifyValue<T>.ValueChanged
  nameWithType.vb: INotifyValue(Of T).ValueChanged
  fullName.vb: NMF.Expressions.INotifyValue(Of T).ValueChanged
- uid: NMF.Expressions.INotifiable.Successors
  commentId: P:NMF.Expressions.INotifiable.Successors
  parent: NMF.Expressions.INotifiable
  name: Successors
  nameWithType: INotifiable.Successors
  fullName: NMF.Expressions.INotifiable.Successors
- uid: NMF.Expressions.INotifiable.Dependencies
  commentId: P:NMF.Expressions.INotifiable.Dependencies
  parent: NMF.Expressions.INotifiable
  name: Dependencies
  nameWithType: INotifiable.Dependencies
  fullName: NMF.Expressions.INotifiable.Dependencies
- uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  commentId: M:NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  parent: NMF.Expressions.INotifiable
  isExternal: true
  name: Notify(IList<INotificationResult>)
  nameWithType: INotifiable.Notify(IList<INotificationResult>)
  fullName: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList<NMF.Expressions.INotificationResult>)
  nameWithType.vb: INotifiable.Notify(IList(Of INotificationResult))
  fullName.vb: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
  spec.csharp:
  - uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
    nameWithType: INotifiable.Notify
    fullName: NMF.Expressions.INotifiable.Notify
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
    nameWithType: INotifiable.Notify
    fullName: NMF.Expressions.INotifiable.Notify
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifiable.ExecutionMetaData
  commentId: P:NMF.Expressions.INotifiable.ExecutionMetaData
  parent: NMF.Expressions.INotifiable
  name: ExecutionMetaData
  nameWithType: INotifiable.ExecutionMetaData
  fullName: NMF.Expressions.INotifiable.ExecutionMetaData
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifiable.NMF.Expressions.Debug.DebugExtensions.Visualize
  commentId: M:NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
  parent: NMF.Expressions.Debug.DebugExtensions
  definition: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
  name: Visualize()
  nameWithType: DebugExtensions.Visualize()
  fullName: NMF.Expressions.Debug.DebugExtensions.Visualize()
  spec.csharp:
  - uid: NMF.Expressions.Debug.DebugExtensions.Visualize
    name: Visualize
    nameWithType: DebugExtensions.Visualize
    fullName: NMF.Expressions.Debug.DebugExtensions.Visualize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Debug.DebugExtensions.Visualize
    name: Visualize
    nameWithType: DebugExtensions.Visualize
    fullName: NMF.Expressions.Debug.DebugExtensions.Visualize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifiable.NMF.Expressions.Debug.DebugExtensions.ExportToDgml(System.String)
  commentId: M:NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
  parent: NMF.Expressions.Debug.DebugExtensions
  definition: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
  name: ExportToDgml(String)
  nameWithType: DebugExtensions.ExportToDgml(String)
  fullName: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(System.String)
  spec.csharp:
  - uid: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(System.String)
    name: ExportToDgml
    nameWithType: DebugExtensions.ExportToDgml
    fullName: NMF.Expressions.Debug.DebugExtensions.ExportToDgml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(System.String)
    name: ExportToDgml
    nameWithType: DebugExtensions.ExportToDgml
    fullName: NMF.Expressions.Debug.DebugExtensions.ExportToDgml
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue{`0}.NMF.Expressions.ReversableExtensions.AsReversable``1(System.Action{{T}})
  commentId: M:NMF.Expressions.ReversableExtensions.AsReversable``1(NMF.Expressions.INotifyValue{``0},System.Action{``0})
  parent: NMF.Expressions.ReversableExtensions
  definition: NMF.Expressions.ReversableExtensions.AsReversable``1(NMF.Expressions.INotifyValue{``0},System.Action{``0})
  name: AsReversable<T>(Action<T>)
  nameWithType: ReversableExtensions.AsReversable<T>(Action<T>)
  fullName: NMF.Expressions.ReversableExtensions.AsReversable<T>(System.Action<T>)
  nameWithType.vb: ReversableExtensions.AsReversable(Of T)(Action(Of T))
  fullName.vb: NMF.Expressions.ReversableExtensions.AsReversable(Of T)(System.Action(Of T))
  name.vb: AsReversable(Of T)(Action(Of T))
  spec.csharp:
  - uid: NMF.Expressions.ReversableExtensions.AsReversable``1(System.Action{``0})
    name: AsReversable<T>
    nameWithType: ReversableExtensions.AsReversable<T>
    fullName: NMF.Expressions.ReversableExtensions.AsReversable<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ReversableExtensions.AsReversable``1(System.Action{``0})
    name: AsReversable(Of T)
    nameWithType: ReversableExtensions.AsReversable(Of T)
    fullName: NMF.Expressions.ReversableExtensions.AsReversable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue`1.ValueChanged
  commentId: E:NMF.Expressions.INotifyValue`1.ValueChanged
  name: ValueChanged
  nameWithType: INotifyValue<T>.ValueChanged
  fullName: NMF.Expressions.INotifyValue<T>.ValueChanged
  nameWithType.vb: INotifyValue(Of T).ValueChanged
  fullName.vb: NMF.Expressions.INotifyValue(Of T).ValueChanged
- uid: NMF.Expressions.INotifyValue{{T}}
  commentId: T:NMF.Expressions.INotifyValue{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<T>
  nameWithType: INotifyValue<T>
  fullName: NMF.Expressions.INotifyValue<T>
  nameWithType.vb: INotifyValue(Of T)
  fullName.vb: NMF.Expressions.INotifyValue(Of T)
  name.vb: INotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifiable
  commentId: T:NMF.Expressions.INotifiable
  parent: NMF.Expressions
  name: INotifiable
  nameWithType: INotifiable
  fullName: NMF.Expressions.INotifiable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
  commentId: M:NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
  name: Visualize(INotifiable)
  nameWithType: DebugExtensions.Visualize(INotifiable)
  fullName: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
  spec.csharp:
  - uid: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
    name: Visualize
    nameWithType: DebugExtensions.Visualize
    fullName: NMF.Expressions.Debug.DebugExtensions.Visualize
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
    nameWithType: INotifiable
    fullName: NMF.Expressions.INotifiable
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
    name: Visualize
    nameWithType: DebugExtensions.Visualize
    fullName: NMF.Expressions.Debug.DebugExtensions.Visualize
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
    nameWithType: INotifiable
    fullName: NMF.Expressions.INotifiable
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Debug.DebugExtensions
  commentId: T:NMF.Expressions.Debug.DebugExtensions
  parent: NMF.Expressions.Debug
  name: DebugExtensions
  nameWithType: DebugExtensions
  fullName: NMF.Expressions.Debug.DebugExtensions
- uid: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
  commentId: M:NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
  isExternal: true
  name: ExportToDgml(INotifiable, String)
  nameWithType: DebugExtensions.ExportToDgml(INotifiable, String)
  fullName: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable, System.String)
  spec.csharp:
  - uid: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
    name: ExportToDgml
    nameWithType: DebugExtensions.ExportToDgml
    fullName: NMF.Expressions.Debug.DebugExtensions.ExportToDgml
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
    nameWithType: INotifiable
    fullName: NMF.Expressions.INotifiable
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
    name: ExportToDgml
    nameWithType: DebugExtensions.ExportToDgml
    fullName: NMF.Expressions.Debug.DebugExtensions.ExportToDgml
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
    nameWithType: INotifiable
    fullName: NMF.Expressions.INotifiable
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ReversableExtensions.AsReversable``1(NMF.Expressions.INotifyValue{``0},System.Action{``0})
  commentId: M:NMF.Expressions.ReversableExtensions.AsReversable``1(NMF.Expressions.INotifyValue{``0},System.Action{``0})
  isExternal: true
  name: AsReversable<T>(INotifyValue<T>, Action<T>)
  nameWithType: ReversableExtensions.AsReversable<T>(INotifyValue<T>, Action<T>)
  fullName: NMF.Expressions.ReversableExtensions.AsReversable<T>(NMF.Expressions.INotifyValue<T>, System.Action<T>)
  nameWithType.vb: ReversableExtensions.AsReversable(Of T)(INotifyValue(Of T), Action(Of T))
  fullName.vb: NMF.Expressions.ReversableExtensions.AsReversable(Of T)(NMF.Expressions.INotifyValue(Of T), System.Action(Of T))
  name.vb: AsReversable(Of T)(INotifyValue(Of T), Action(Of T))
  spec.csharp:
  - uid: NMF.Expressions.ReversableExtensions.AsReversable``1(NMF.Expressions.INotifyValue{``0},System.Action{``0})
    name: AsReversable<T>
    nameWithType: ReversableExtensions.AsReversable<T>
    fullName: NMF.Expressions.ReversableExtensions.AsReversable<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ReversableExtensions.AsReversable``1(NMF.Expressions.INotifyValue{``0},System.Action{``0})
    name: AsReversable(Of T)
    nameWithType: ReversableExtensions.AsReversable(Of T)
    fullName: NMF.Expressions.ReversableExtensions.AsReversable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ReversableExtensions
  commentId: T:NMF.Expressions.ReversableExtensions
  parent: NMF.Expressions
  name: ReversableExtensions
  nameWithType: ReversableExtensions
  fullName: NMF.Expressions.ReversableExtensions
- uid: NMF.Expressions.INotifyValue`1
  commentId: T:NMF.Expressions.INotifyValue`1
  name: INotifyValue<T>
  nameWithType: INotifyValue<T>
  fullName: NMF.Expressions.INotifyValue<T>
  nameWithType.vb: INotifyValue(Of T)
  fullName.vb: NMF.Expressions.INotifyValue(Of T)
  name.vb: INotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.Debug
  commentId: N:NMF.Expressions.Debug
  name: NMF.Expressions.Debug
  nameWithType: NMF.Expressions.Debug
  fullName: NMF.Expressions.Debug
- uid: NMF.Expressions.INotifyReversableValue`1.Value*
  commentId: Overload:NMF.Expressions.INotifyReversableValue`1.Value
  name: Value
  nameWithType: INotifyReversableValue<T>.Value
  fullName: NMF.Expressions.INotifyReversableValue<T>.Value
  nameWithType.vb: INotifyReversableValue(Of T).Value
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of T).Value
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: NMF.Expressions.INotifyReversableValue`1.IsReversable*
  commentId: Overload:NMF.Expressions.INotifyReversableValue`1.IsReversable
  name: IsReversable
  nameWithType: INotifyReversableValue<T>.IsReversable
  fullName: NMF.Expressions.INotifyReversableValue<T>.IsReversable
  nameWithType.vb: INotifyReversableValue(Of T).IsReversable
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of T).IsReversable
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
