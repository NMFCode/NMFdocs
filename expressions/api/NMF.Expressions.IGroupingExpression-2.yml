### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.IGroupingExpression`2
  commentId: T:NMF.Expressions.IGroupingExpression`2
  id: IGroupingExpression`2
  parent: NMF.Expressions
  children: []
  langs:
  - csharp
  - vb
  name: IGroupingExpression<TKey, TElement>
  nameWithType: IGroupingExpression<TKey, TElement>
  fullName: NMF.Expressions.IGroupingExpression<TKey, TElement>
  type: Interface
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/IEnumerableExpression.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IGroupingExpression
    path: src/Expressions/Expressions.Linq/Facade/IEnumerableExpression.cs
    startLine: 81
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions
  summary: "\nRepresents a group of elements sharing a common key\n"
  example: []
  syntax:
    content: 'public interface IGroupingExpression<out TKey, out TElement> : IGrouping<TKey, TElement>, IEnumerableExpression<TElement>, IEnumerable<TElement>, IEnumerableExpression, IEnumerable'
    typeParameters:
    - id: TKey
      description: The type of the key
    - id: TElement
      description: The type of the elements
    content.vb: >-
      Public Interface IGroupingExpression(Of Out TKey, Out TElement)
          Inherits IGrouping(Of TKey, TElement), IEnumerableExpression(Of TElement)
  inheritedMembers:
  - System.Linq.IGrouping{{TKey},{TElement}}.Key
  - NMF.Expressions.IEnumerableExpression{{TElement}}.AsNotifiable
  - System.Collections.Generic.IEnumerable{{TElement}}.GetEnumerator
  extensionMethods:
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}})
  - System.Collections.Generic.IEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TElement},System.Int32}},System.Int32,{TResult}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TElement},System.Int32}},System.Int32,{TResult}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TElement},System.Int32}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{{TElement},System.Int32},{TResult}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TElement},System.Int32}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  - System.Collections.Generic.IEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TElement}},System.Int32,{TResult}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TElement}},System.Int32,{TResult}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TElement}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{{TElement},{TResult}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TElement}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.All``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Boolean}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Any``1
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Any``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Boolean}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Int32}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Int64}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Single}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Double}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Decimal}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Nullable{System.Int32}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Nullable{System.Int64}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Nullable{System.Single}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Nullable{System.Double}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Nullable{System.Decimal}}})
  - NMF.Expressions.IEnumerableExpression.NMF.Expressions.Linq.ExpressionExtensions.Cast``1
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Concat``1(System.Collections.Generic.IEnumerable{{TElement}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Contains``1({TElement})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Contains``1({TElement},System.Collections.Generic.IEqualityComparer{{TElement}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Count``1
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Count``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Boolean}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Distinct``1
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(System.Collections.Generic.IEqualityComparer{{TElement}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Except``1(System.Collections.Generic.IEnumerable{{TElement}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Except``1(System.Collections.Generic.IEnumerable{{TElement}},System.Collections.Generic.IEqualityComparer{{TElement}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Boolean}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TElement},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TElement},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(System.Collections.Generic.IEnumerable{{TElement}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(System.Collections.Generic.IEnumerable{{TElement}},System.Collections.Generic.IEqualityComparer{{TElement}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{{TElement}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{{TElement}},System.Collections.Generic.IEqualityComparer{{TElement}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{{TElement}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{{TElement}},System.Collections.Generic.IEqualityComparer{{TElement}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{{TElement}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{{TElement}},System.Collections.Generic.IEqualityComparer{{TElement}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{{TElement}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{{TElement}},System.Collections.Generic.IEqualityComparer{{TElement}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TElement},{TInner},{TResult}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TElement},{TInner},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Max``1(System.Collections.Generic.IComparer{{TElement}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TElement},{TResult}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TElement},{TResult}}},System.Func{{TElement},{TResult}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TElement},{TResult}}},System.Collections.Generic.IComparer{{TResult}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TElement},System.Nullable{{TResult}}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TElement},System.Nullable{{TResult}}}},System.Collections.Generic.IComparer{{TResult}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Min``1(System.Collections.Generic.IComparer{{TElement}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TElement},{TResult}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TElement},{TResult}}},System.Collections.Generic.IComparer{{TResult}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TElement},System.Nullable{{TResult}}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TElement},System.Nullable{{TResult}}}},System.Collections.Generic.IComparer{{TResult}})
  - NMF.Expressions.IEnumerableExpression.NMF.Expressions.Linq.ExpressionExtensions.OfType``1
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{{TElement},{TResult}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{{TElement},{TResult}}},System.Func{{TElement},{TResult}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(System.Linq.Expressions.Expression{System.Func{{TElement},System.Collections.Generic.IEnumerable{{TIntermediate}}}},System.Linq.Expressions.Expression{System.Func{{TElement},{TIntermediate},{TResult}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(System.Linq.Expressions.Expression{System.Func{{TElement},System.Collections.Generic.IEnumerable{{TResult}}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{{TElement}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{{TElement}},System.Collections.Generic.IEqualityComparer{{TElement}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Boolean}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Boolean}},System.Func{{TElement},System.Boolean})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Int32}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Int64}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Single}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Double}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Decimal}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Nullable{System.Int32}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Nullable{System.Int64}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Nullable{System.Single}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Nullable{System.Double}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Nullable{System.Decimal}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Union``1(System.Collections.Generic.IEnumerable{{TElement}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Union``1(System.Collections.Generic.IEnumerable{{TElement}},System.Collections.Generic.IEqualityComparer{{TElement}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Boolean}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Boolean}},System.Func{{TElement},System.Boolean})
  - System.Collections.Generic.IEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  nameWithType.vb: IGroupingExpression(Of TKey, TElement)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: NMF.Expressions.IGroupingExpression(Of TKey, TElement)
  name.vb: IGroupingExpression(Of TKey, TElement)
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: System.Linq.IGrouping{{TKey},{TElement}}.Key
  commentId: P:System.Linq.IGrouping{`0,`1}.Key
  parent: System.Linq.IGrouping{{TKey},{TElement}}
  definition: System.Linq.IGrouping`2.Key
  name: Key
  nameWithType: IGrouping<TKey, TElement>.Key
  fullName: System.Linq.IGrouping<TKey, TElement>.Key
  nameWithType.vb: IGrouping(Of TKey, TElement).Key
  fullName.vb: System.Linq.IGrouping(Of TKey, TElement).Key
- uid: NMF.Expressions.IEnumerableExpression{{TElement}}.AsNotifiable
  commentId: M:NMF.Expressions.IEnumerableExpression{`1}.AsNotifiable
  parent: NMF.Expressions.IEnumerableExpression{{TElement}}
  definition: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
  name: AsNotifiable()
  nameWithType: IEnumerableExpression<TElement>.AsNotifiable()
  fullName: NMF.Expressions.IEnumerableExpression<TElement>.AsNotifiable()
  nameWithType.vb: IEnumerableExpression(Of TElement).AsNotifiable()
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of TElement).AsNotifiable()
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression<TElement>.AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression<TElement>.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression(Of TElement).AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression(Of TElement).AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TElement}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`1}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{TElement}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<TElement>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<TElement>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of TElement).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of TElement).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<TElement>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<TElement>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of TElement).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of TElement).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}})
  commentId: M:NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.LookupExtensions
  definition: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: ToLookup<TElement, TKey>(Expression<Func<TElement, TKey>>)
  nameWithType: LookupExtensions.ToLookup<TElement, TKey>(Expression<Func<TElement, TKey>>)
  fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TElement, TKey>(System.Linq.Expressions.Expression<System.Func<TElement, TKey>>)
  nameWithType.vb: LookupExtensions.ToLookup(Of TElement, TKey)(Expression(Of Func(Of TElement, TKey)))
  fullName.vb: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TElement, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, TKey)))
  name.vb: ToLookup(Of TElement, TKey)(Expression(Of Func(Of TElement, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup<TElement, TKey>
    nameWithType: LookupExtensions.ToLookup<TElement, TKey>
    fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TElement, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup(Of TElement, TKey)
    nameWithType: LookupExtensions.ToLookup(Of TElement, TKey)
    fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TElement, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TElement},System.Int32}},System.Int32,{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  name: ChunkIndexed<TElement, TResult>(Int32, Func<IEnumerableExpression<ValueTuple<TElement, Int32>>, Int32, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<TElement, TResult>(Int32, Func<IEnumerableExpression<ValueTuple<TElement, Int32>>, Int32, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<TElement, TResult>(System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<System.ValueTuple<TElement, System.Int32>>, System.Int32, TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of TElement, TResult)(Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of TElement, Int32)), Int32, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of TElement, TResult)(System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of System.ValueTuple(Of TElement, System.Int32)), System.Int32, TResult))
  name.vb: ChunkIndexed(Of TElement, TResult)(Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of TElement, Int32)), Int32, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed<TElement, TResult>
    nameWithType: ChunkExtensions.ChunkIndexed<TElement, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<TElement, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed(Of TElement, TResult)
    nameWithType: ChunkExtensions.ChunkIndexed(Of TElement, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of TElement, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TElement},System.Int32}},System.Int32,{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  name: ChunkIndexed<TElement, TResult>(Int32, Func<IEnumerableExpression<ValueTuple<TElement, Int32>>, Int32, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<TElement, TResult>(Int32, Func<IEnumerableExpression<ValueTuple<TElement, Int32>>, Int32, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<TElement, TResult>(System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<System.ValueTuple<TElement, System.Int32>>, System.Int32, TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of TElement, TResult)(Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of TElement, Int32)), Int32, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of TElement, TResult)(System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of System.ValueTuple(Of TElement, System.Int32)), System.Int32, TResult))
  name.vb: ChunkIndexed(Of TElement, TResult)(Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of TElement, Int32)), Int32, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed<TElement, TResult>
    nameWithType: ChunkExtensions.ChunkIndexed<TElement, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<TElement, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed(Of TElement, TResult)
    nameWithType: ChunkExtensions.ChunkIndexed(Of TElement, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of TElement, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TElement},System.Int32}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{{TElement},System.Int32},{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  name: ChunkIndexed<TElement, TResult>(Int32, Func<IEnumerableExpression<ValueTuple<TElement, Int32>>, Int32, TResult>, IChunkBalancingStrategyProvider<ValueTuple<TElement, Int32>, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<TElement, TResult>(Int32, Func<IEnumerableExpression<ValueTuple<TElement, Int32>>, Int32, TResult>, IChunkBalancingStrategyProvider<ValueTuple<TElement, Int32>, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<TElement, TResult>(System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<System.ValueTuple<TElement, System.Int32>>, System.Int32, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider<System.ValueTuple<TElement, System.Int32>, TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of TElement, TResult)(Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of TElement, Int32)), Int32, TResult), IChunkBalancingStrategyProvider(Of ValueTuple(Of TElement, Int32), TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of TElement, TResult)(System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of System.ValueTuple(Of TElement, System.Int32)), System.Int32, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of System.ValueTuple(Of TElement, System.Int32), TResult))
  name.vb: ChunkIndexed(Of TElement, TResult)(Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of TElement, Int32)), Int32, TResult), IChunkBalancingStrategyProvider(Of ValueTuple(Of TElement, Int32), TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
    name: ChunkIndexed<TElement, TResult>
    nameWithType: ChunkExtensions.ChunkIndexed<TElement, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<TElement, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
    name: ChunkIndexed(Of TElement, TResult)
    nameWithType: ChunkExtensions.ChunkIndexed(Of TElement, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of TElement, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TElement},System.Int32}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name: ChunkIndexed<TElement, TResult>(Int32, Func<IEnumerableExpression<ValueTuple<TElement, Int32>>, Int32, TResult>, IChunkBalancingStrategyProvider)
  nameWithType: ChunkExtensions.ChunkIndexed<TElement, TResult>(Int32, Func<IEnumerableExpression<ValueTuple<TElement, Int32>>, Int32, TResult>, IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<TElement, TResult>(System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<System.ValueTuple<TElement, System.Int32>>, System.Int32, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of TElement, TResult)(Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of TElement, Int32)), Int32, TResult), IChunkBalancingStrategyProvider)
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of TElement, TResult)(System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of System.ValueTuple(Of TElement, System.Int32)), System.Int32, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: ChunkIndexed(Of TElement, TResult)(Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of TElement, Int32)), Int32, TResult), IChunkBalancingStrategyProvider)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: ChunkIndexed<TElement, TResult>
    nameWithType: ChunkExtensions.ChunkIndexed<TElement, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<TElement, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: ChunkIndexed(Of TElement, TResult)
    nameWithType: ChunkExtensions.ChunkIndexed(Of TElement, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of TElement, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TElement}},System.Int32,{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  name: Chunk<TElement, TResult>(Int32, Func<IEnumerableExpression<TElement>, Int32, TResult>)
  nameWithType: ChunkExtensions.Chunk<TElement, TResult>(Int32, Func<IEnumerableExpression<TElement>, Int32, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<TElement, TResult>(System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<TElement>, System.Int32, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of TElement, TResult)(Int32, Func(Of IEnumerableExpression(Of TElement), Int32, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of TElement, TResult)(System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of TElement), System.Int32, TResult))
  name.vb: Chunk(Of TElement, TResult)(Int32, Func(Of IEnumerableExpression(Of TElement), Int32, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
    name: Chunk<TElement, TResult>
    nameWithType: ChunkExtensions.Chunk<TElement, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<TElement, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
    name: Chunk(Of TElement, TResult)
    nameWithType: ChunkExtensions.Chunk(Of TElement, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of TElement, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TElement}},System.Int32,{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  name: Chunk<TElement, TResult>(Int32, Func<IEnumerableExpression<TElement>, Int32, TResult>)
  nameWithType: ChunkExtensions.Chunk<TElement, TResult>(Int32, Func<IEnumerableExpression<TElement>, Int32, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<TElement, TResult>(System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<TElement>, System.Int32, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of TElement, TResult)(Int32, Func(Of IEnumerableExpression(Of TElement), Int32, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of TElement, TResult)(System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of TElement), System.Int32, TResult))
  name.vb: Chunk(Of TElement, TResult)(Int32, Func(Of IEnumerableExpression(Of TElement), Int32, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
    name: Chunk<TElement, TResult>
    nameWithType: ChunkExtensions.Chunk<TElement, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<TElement, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
    name: Chunk(Of TElement, TResult)
    nameWithType: ChunkExtensions.Chunk(Of TElement, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of TElement, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TElement}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{{TElement},{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  name: Chunk<TElement, TResult>(Int32, Func<IEnumerableExpression<TElement>, Int32, TResult>, IChunkBalancingStrategyProvider<TElement, TResult>)
  nameWithType: ChunkExtensions.Chunk<TElement, TResult>(Int32, Func<IEnumerableExpression<TElement>, Int32, TResult>, IChunkBalancingStrategyProvider<TElement, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<TElement, TResult>(System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<TElement>, System.Int32, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider<TElement, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of TElement, TResult)(Int32, Func(Of IEnumerableExpression(Of TElement), Int32, TResult), IChunkBalancingStrategyProvider(Of TElement, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of TElement, TResult)(System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of TElement), System.Int32, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of TElement, TResult))
  name.vb: Chunk(Of TElement, TResult)(Int32, Func(Of IEnumerableExpression(Of TElement), Int32, TResult), IChunkBalancingStrategyProvider(Of TElement, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
    name: Chunk<TElement, TResult>
    nameWithType: ChunkExtensions.Chunk<TElement, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<TElement, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
    name: Chunk(Of TElement, TResult)
    nameWithType: ChunkExtensions.Chunk(Of TElement, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of TElement, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TElement}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name: Chunk<TElement, TResult>(Int32, Func<IEnumerableExpression<TElement>, Int32, TResult>, IChunkBalancingStrategyProvider)
  nameWithType: ChunkExtensions.Chunk<TElement, TResult>(Int32, Func<IEnumerableExpression<TElement>, Int32, TResult>, IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<TElement, TResult>(System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<TElement>, System.Int32, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  nameWithType.vb: ChunkExtensions.Chunk(Of TElement, TResult)(Int32, Func(Of IEnumerableExpression(Of TElement), Int32, TResult), IChunkBalancingStrategyProvider)
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of TElement, TResult)(System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of TElement), System.Int32, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: Chunk(Of TElement, TResult)(Int32, Func(Of IEnumerableExpression(Of TElement), Int32, TResult), IChunkBalancingStrategyProvider)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: Chunk<TElement, TResult>
    nameWithType: ChunkExtensions.Chunk<TElement, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<TElement, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: Chunk(Of TElement, TResult)
    nameWithType: ChunkExtensions.Chunk(Of TElement, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of TElement, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.All``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.All``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.All``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: All<TElement>(Expression<Func<TElement, Boolean>>)
  nameWithType: ExpressionExtensions.All<TElement>(Expression<Func<TElement, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.All<TElement>(System.Linq.Expressions.Expression<System.Func<TElement, System.Boolean>>)
  nameWithType.vb: ExpressionExtensions.All(Of TElement)(Expression(Of Func(Of TElement, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.All(Of TElement)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Boolean)))
  name.vb: All(Of TElement)(Expression(Of Func(Of TElement, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.All``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: All<TElement>
    nameWithType: ExpressionExtensions.All<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.All<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.All``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: All(Of TElement)
    nameWithType: ExpressionExtensions.All(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.All(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Any``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0})
  name: Any<TElement>()
  nameWithType: ExpressionExtensions.Any<TElement>()
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Any<TElement>()
  nameWithType.vb: ExpressionExtensions.Any(Of TElement)()
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Any(Of TElement)()
  name.vb: Any(Of TElement)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1
    name: Any<TElement>
    nameWithType: ExpressionExtensions.Any<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Any<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1
    name: Any(Of TElement)
    nameWithType: ExpressionExtensions.Any(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Any(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Any``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Any<TElement>(Expression<Func<TElement, Boolean>>)
  nameWithType: ExpressionExtensions.Any<TElement>(Expression<Func<TElement, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Any<TElement>(System.Linq.Expressions.Expression<System.Func<TElement, System.Boolean>>)
  nameWithType.vb: ExpressionExtensions.Any(Of TElement)(Expression(Of Func(Of TElement, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Any(Of TElement)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Boolean)))
  name.vb: Any(Of TElement)(Expression(Of Func(Of TElement, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Any<TElement>
    nameWithType: ExpressionExtensions.Any<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Any<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Any(Of TElement)
    nameWithType: ExpressionExtensions.Any(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Any(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Int32}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  name: Average<TElement>(Expression<Func<TElement, Int32>>)
  nameWithType: ExpressionExtensions.Average<TElement>(Expression<Func<TElement, Int32>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TElement>(System.Linq.Expressions.Expression<System.Func<TElement, System.Int32>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TElement)(Expression(Of Func(Of TElement, Int32)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TElement)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Int32)))
  name.vb: Average(Of TElement)(Expression(Of Func(Of TElement, Int32)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Average<TElement>
    nameWithType: ExpressionExtensions.Average<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Average(Of TElement)
    nameWithType: ExpressionExtensions.Average(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Int64}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  name: Average<TElement>(Expression<Func<TElement, Int64>>)
  nameWithType: ExpressionExtensions.Average<TElement>(Expression<Func<TElement, Int64>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TElement>(System.Linq.Expressions.Expression<System.Func<TElement, System.Int64>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TElement)(Expression(Of Func(Of TElement, Int64)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TElement)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Int64)))
  name.vb: Average(Of TElement)(Expression(Of Func(Of TElement, Int64)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Average<TElement>
    nameWithType: ExpressionExtensions.Average<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Average(Of TElement)
    nameWithType: ExpressionExtensions.Average(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Single}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  name: Average<TElement>(Expression<Func<TElement, Single>>)
  nameWithType: ExpressionExtensions.Average<TElement>(Expression<Func<TElement, Single>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TElement>(System.Linq.Expressions.Expression<System.Func<TElement, System.Single>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TElement)(Expression(Of Func(Of TElement, Single)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TElement)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Single)))
  name.vb: Average(Of TElement)(Expression(Of Func(Of TElement, Single)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Average<TElement>
    nameWithType: ExpressionExtensions.Average<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Average(Of TElement)
    nameWithType: ExpressionExtensions.Average(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Double}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  name: Average<TElement>(Expression<Func<TElement, Double>>)
  nameWithType: ExpressionExtensions.Average<TElement>(Expression<Func<TElement, Double>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TElement>(System.Linq.Expressions.Expression<System.Func<TElement, System.Double>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TElement)(Expression(Of Func(Of TElement, Double)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TElement)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Double)))
  name.vb: Average(Of TElement)(Expression(Of Func(Of TElement, Double)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Average<TElement>
    nameWithType: ExpressionExtensions.Average<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Average(Of TElement)
    nameWithType: ExpressionExtensions.Average(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  name: Average<TElement>(Expression<Func<TElement, Decimal>>)
  nameWithType: ExpressionExtensions.Average<TElement>(Expression<Func<TElement, Decimal>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TElement>(System.Linq.Expressions.Expression<System.Func<TElement, System.Decimal>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TElement)(Expression(Of Func(Of TElement, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TElement)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Decimal)))
  name.vb: Average(Of TElement)(Expression(Of Func(Of TElement, Decimal)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Average<TElement>
    nameWithType: ExpressionExtensions.Average<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Average(Of TElement)
    nameWithType: ExpressionExtensions.Average(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  name: Average<TElement>(Expression<Func<TElement, Nullable<Int32>>>)
  nameWithType: ExpressionExtensions.Average<TElement>(Expression<Func<TElement, Nullable<Int32>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TElement>(System.Linq.Expressions.Expression<System.Func<TElement, System.Nullable<System.Int32>>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TElement)(Expression(Of Func(Of TElement, Nullable(Of Int32))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TElement)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Nullable(Of System.Int32))))
  name.vb: Average(Of TElement)(Expression(Of Func(Of TElement, Nullable(Of Int32))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Average<TElement>
    nameWithType: ExpressionExtensions.Average<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Average(Of TElement)
    nameWithType: ExpressionExtensions.Average(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  name: Average<TElement>(Expression<Func<TElement, Nullable<Int64>>>)
  nameWithType: ExpressionExtensions.Average<TElement>(Expression<Func<TElement, Nullable<Int64>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TElement>(System.Linq.Expressions.Expression<System.Func<TElement, System.Nullable<System.Int64>>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TElement)(Expression(Of Func(Of TElement, Nullable(Of Int64))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TElement)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Nullable(Of System.Int64))))
  name.vb: Average(Of TElement)(Expression(Of Func(Of TElement, Nullable(Of Int64))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Average<TElement>
    nameWithType: ExpressionExtensions.Average<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Average(Of TElement)
    nameWithType: ExpressionExtensions.Average(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  name: Average<TElement>(Expression<Func<TElement, Nullable<Single>>>)
  nameWithType: ExpressionExtensions.Average<TElement>(Expression<Func<TElement, Nullable<Single>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TElement>(System.Linq.Expressions.Expression<System.Func<TElement, System.Nullable<System.Single>>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TElement)(Expression(Of Func(Of TElement, Nullable(Of Single))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TElement)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Nullable(Of System.Single))))
  name.vb: Average(Of TElement)(Expression(Of Func(Of TElement, Nullable(Of Single))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Average<TElement>
    nameWithType: ExpressionExtensions.Average<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Average(Of TElement)
    nameWithType: ExpressionExtensions.Average(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  name: Average<TElement>(Expression<Func<TElement, Nullable<Double>>>)
  nameWithType: ExpressionExtensions.Average<TElement>(Expression<Func<TElement, Nullable<Double>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TElement>(System.Linq.Expressions.Expression<System.Func<TElement, System.Nullable<System.Double>>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TElement)(Expression(Of Func(Of TElement, Nullable(Of Double))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TElement)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Nullable(Of System.Double))))
  name.vb: Average(Of TElement)(Expression(Of Func(Of TElement, Nullable(Of Double))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Average<TElement>
    nameWithType: ExpressionExtensions.Average<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Average(Of TElement)
    nameWithType: ExpressionExtensions.Average(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  name: Average<TElement>(Expression<Func<TElement, Nullable<Decimal>>>)
  nameWithType: ExpressionExtensions.Average<TElement>(Expression<Func<TElement, Nullable<Decimal>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TElement>(System.Linq.Expressions.Expression<System.Func<TElement, System.Nullable<System.Decimal>>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TElement)(Expression(Of Func(Of TElement, Nullable(Of Decimal))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TElement)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Nullable(Of System.Decimal))))
  name.vb: Average(Of TElement)(Expression(Of Func(Of TElement, Nullable(Of Decimal))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Average<TElement>
    nameWithType: ExpressionExtensions.Average<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Average(Of TElement)
    nameWithType: ExpressionExtensions.Average(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression.NMF.Expressions.Linq.ExpressionExtensions.Cast``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
  name: Cast<TResult>()
  nameWithType: ExpressionExtensions.Cast<TResult>()
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Cast<TResult>()
  nameWithType.vb: ExpressionExtensions.Cast(Of TResult)()
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Cast(Of TResult)()
  name.vb: Cast(Of TResult)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Cast``1
    name: Cast<TResult>
    nameWithType: ExpressionExtensions.Cast<TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Cast<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Cast``1
    name: Cast(Of TResult)
    nameWithType: ExpressionExtensions.Cast(Of TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Cast(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Concat``1(System.Collections.Generic.IEnumerable{{TElement}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Concat``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Concat``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  name: Concat<TElement>(IEnumerable<TElement>)
  nameWithType: ExpressionExtensions.Concat<TElement>(IEnumerable<TElement>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Concat<TElement>(System.Collections.Generic.IEnumerable<TElement>)
  nameWithType.vb: ExpressionExtensions.Concat(Of TElement)(IEnumerable(Of TElement))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Concat(Of TElement)(System.Collections.Generic.IEnumerable(Of TElement))
  name.vb: Concat(Of TElement)(IEnumerable(Of TElement))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0})
    name: Concat<TElement>
    nameWithType: ExpressionExtensions.Concat<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Concat<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0})
    name: Concat(Of TElement)
    nameWithType: ExpressionExtensions.Concat(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Concat(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Contains``1({TElement})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0)
  name: Contains<TElement>(TElement)
  nameWithType: ExpressionExtensions.Contains<TElement>(TElement)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains<TElement>(TElement)
  nameWithType.vb: ExpressionExtensions.Contains(Of TElement)(TElement)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Contains(Of TElement)(TElement)
  name.vb: Contains(Of TElement)(TElement)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(``0)
    name: Contains<TElement>
    nameWithType: ExpressionExtensions.Contains<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(``0)
    name: Contains(Of TElement)
    nameWithType: ExpressionExtensions.Contains(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Contains``1({TElement},System.Collections.Generic.IEqualityComparer{{TElement}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  name: Contains<TElement>(TElement, IEqualityComparer<TElement>)
  nameWithType: ExpressionExtensions.Contains<TElement>(TElement, IEqualityComparer<TElement>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains<TElement>(TElement, System.Collections.Generic.IEqualityComparer<TElement>)
  nameWithType.vb: ExpressionExtensions.Contains(Of TElement)(TElement, IEqualityComparer(Of TElement))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Contains(Of TElement)(TElement, System.Collections.Generic.IEqualityComparer(Of TElement))
  name.vb: Contains(Of TElement)(TElement, IEqualityComparer(Of TElement))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(``0,System.Collections.Generic.IEqualityComparer{``0})
    name: Contains<TElement>
    nameWithType: ExpressionExtensions.Contains<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(``0,System.Collections.Generic.IEqualityComparer{``0})
    name: Contains(Of TElement)
    nameWithType: ExpressionExtensions.Contains(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Count``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0})
  name: Count<TElement>()
  nameWithType: ExpressionExtensions.Count<TElement>()
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Count<TElement>()
  nameWithType.vb: ExpressionExtensions.Count(Of TElement)()
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Count(Of TElement)()
  name.vb: Count(Of TElement)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1
    name: Count<TElement>
    nameWithType: ExpressionExtensions.Count<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Count<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1
    name: Count(Of TElement)
    nameWithType: ExpressionExtensions.Count(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Count(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Count``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Count<TElement>(Expression<Func<TElement, Boolean>>)
  nameWithType: ExpressionExtensions.Count<TElement>(Expression<Func<TElement, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Count<TElement>(System.Linq.Expressions.Expression<System.Func<TElement, System.Boolean>>)
  nameWithType.vb: ExpressionExtensions.Count(Of TElement)(Expression(Of Func(Of TElement, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Count(Of TElement)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Boolean)))
  name.vb: Count(Of TElement)(Expression(Of Func(Of TElement, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Count<TElement>
    nameWithType: ExpressionExtensions.Count<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Count<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Count(Of TElement)
    nameWithType: ExpressionExtensions.Count(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Count(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Distinct``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0})
  name: Distinct<TElement>()
  nameWithType: ExpressionExtensions.Distinct<TElement>()
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct<TElement>()
  nameWithType.vb: ExpressionExtensions.Distinct(Of TElement)()
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Distinct(Of TElement)()
  name.vb: Distinct(Of TElement)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1
    name: Distinct<TElement>
    nameWithType: ExpressionExtensions.Distinct<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1
    name: Distinct(Of TElement)
    nameWithType: ExpressionExtensions.Distinct(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(System.Collections.Generic.IEqualityComparer{{TElement}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Distinct<TElement>(IEqualityComparer<TElement>)
  nameWithType: ExpressionExtensions.Distinct<TElement>(IEqualityComparer<TElement>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct<TElement>(System.Collections.Generic.IEqualityComparer<TElement>)
  nameWithType.vb: ExpressionExtensions.Distinct(Of TElement)(IEqualityComparer(Of TElement))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Distinct(Of TElement)(System.Collections.Generic.IEqualityComparer(Of TElement))
  name.vb: Distinct(Of TElement)(IEqualityComparer(Of TElement))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(System.Collections.Generic.IEqualityComparer{``0})
    name: Distinct<TElement>
    nameWithType: ExpressionExtensions.Distinct<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(System.Collections.Generic.IEqualityComparer{``0})
    name: Distinct(Of TElement)
    nameWithType: ExpressionExtensions.Distinct(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Except``1(System.Collections.Generic.IEnumerable{{TElement}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  name: Except<TElement>(IEnumerable<TElement>)
  nameWithType: ExpressionExtensions.Except<TElement>(IEnumerable<TElement>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Except<TElement>(System.Collections.Generic.IEnumerable<TElement>)
  nameWithType.vb: ExpressionExtensions.Except(Of TElement)(IEnumerable(Of TElement))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Except(Of TElement)(System.Collections.Generic.IEnumerable(Of TElement))
  name.vb: Except(Of TElement)(IEnumerable(Of TElement))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(System.Collections.Generic.IEnumerable{``0})
    name: Except<TElement>
    nameWithType: ExpressionExtensions.Except<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Except<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(System.Collections.Generic.IEnumerable{``0})
    name: Except(Of TElement)
    nameWithType: ExpressionExtensions.Except(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Except(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Except``1(System.Collections.Generic.IEnumerable{{TElement}},System.Collections.Generic.IEqualityComparer{{TElement}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Except<TElement>(IEnumerable<TElement>, IEqualityComparer<TElement>)
  nameWithType: ExpressionExtensions.Except<TElement>(IEnumerable<TElement>, IEqualityComparer<TElement>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Except<TElement>(System.Collections.Generic.IEnumerable<TElement>, System.Collections.Generic.IEqualityComparer<TElement>)
  nameWithType.vb: ExpressionExtensions.Except(Of TElement)(IEnumerable(Of TElement), IEqualityComparer(Of TElement))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Except(Of TElement)(System.Collections.Generic.IEnumerable(Of TElement), System.Collections.Generic.IEqualityComparer(Of TElement))
  name.vb: Except(Of TElement)(IEnumerable(Of TElement), IEqualityComparer(Of TElement))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Except<TElement>
    nameWithType: ExpressionExtensions.Except<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Except<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Except(Of TElement)
    nameWithType: ExpressionExtensions.Except(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Except(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  name: FirstOrDefault<TElement>()
  nameWithType: ExpressionExtensions.FirstOrDefault<TElement>()
  fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault<TElement>()
  nameWithType.vb: ExpressionExtensions.FirstOrDefault(Of TElement)()
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault(Of TElement)()
  name.vb: FirstOrDefault(Of TElement)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1
    name: FirstOrDefault<TElement>
    nameWithType: ExpressionExtensions.FirstOrDefault<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1
    name: FirstOrDefault(Of TElement)
    nameWithType: ExpressionExtensions.FirstOrDefault(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: FirstOrDefault<TElement>(Expression<Func<TElement, Boolean>>)
  nameWithType: ExpressionExtensions.FirstOrDefault<TElement>(Expression<Func<TElement, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault<TElement>(System.Linq.Expressions.Expression<System.Func<TElement, System.Boolean>>)
  nameWithType.vb: ExpressionExtensions.FirstOrDefault(Of TElement)(Expression(Of Func(Of TElement, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault(Of TElement)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Boolean)))
  name.vb: FirstOrDefault(Of TElement)(Expression(Of Func(Of TElement, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: FirstOrDefault<TElement>
    nameWithType: ExpressionExtensions.FirstOrDefault<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: FirstOrDefault(Of TElement)
    nameWithType: ExpressionExtensions.FirstOrDefault(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: GroupBy<TElement, TKey>(Expression<Func<TElement, TKey>>)
  nameWithType: ExpressionExtensions.GroupBy<TElement, TKey>(Expression<Func<TElement, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TElement, TKey>(System.Linq.Expressions.Expression<System.Func<TElement, TKey>>)
  nameWithType.vb: ExpressionExtensions.GroupBy(Of TElement, TKey)(Expression(Of Func(Of TElement, TKey)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TElement, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, TKey)))
  name.vb: GroupBy(Of TElement, TKey)(Expression(Of Func(Of TElement, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: GroupBy<TElement, TKey>
    nameWithType: ExpressionExtensions.GroupBy<TElement, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TElement, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: GroupBy(Of TElement, TKey)
    nameWithType: ExpressionExtensions.GroupBy(Of TElement, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TElement, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  name: GroupBy<TElement, TKey>(Expression<Func<TElement, TKey>>, IEqualityComparer<TKey>)
  nameWithType: ExpressionExtensions.GroupBy<TElement, TKey>(Expression<Func<TElement, TKey>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TElement, TKey>(System.Linq.Expressions.Expression<System.Func<TElement, TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.GroupBy(Of TElement, TKey)(Expression(Of Func(Of TElement, TKey)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TElement, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, TKey)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TElement, TKey)(Expression(Of Func(Of TElement, TKey)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy<TElement, TKey>
    nameWithType: ExpressionExtensions.GroupBy<TElement, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TElement, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy(Of TElement, TKey)
    nameWithType: ExpressionExtensions.GroupBy(Of TElement, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TElement, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  name: GroupBy<TElement, TKey, TResult>(Expression<Func<TElement, TKey>>, Expression<Func<TKey, IEnumerable<TElement>, TResult>>)
  nameWithType: ExpressionExtensions.GroupBy<TElement, TKey, TResult>(Expression<Func<TElement, TKey>>, Expression<Func<TKey, IEnumerable<TElement>, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TElement, TKey, TResult>(System.Linq.Expressions.Expression<System.Func<TElement, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>>)
  nameWithType.vb: ExpressionExtensions.GroupBy(Of TElement, TKey, TResult)(Expression(Of Func(Of TElement, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TElement), TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TElement, TKey, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult)))
  name.vb: GroupBy(Of TElement, TKey, TResult)(Expression(Of Func(Of TElement, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TElement), TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
    name: GroupBy<TElement, TKey, TResult>
    nameWithType: ExpressionExtensions.GroupBy<TElement, TKey, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TElement, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
    name: GroupBy(Of TElement, TKey, TResult)
    nameWithType: ExpressionExtensions.GroupBy(Of TElement, TKey, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TElement, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  name: GroupBy<TElement, TKey, TResult>(Expression<Func<TElement, TKey>>, Expression<Func<TKey, IEnumerable<TElement>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ExpressionExtensions.GroupBy<TElement, TKey, TResult>(Expression<Func<TElement, TKey>>, Expression<Func<TKey, IEnumerable<TElement>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TElement, TKey, TResult>(System.Linq.Expressions.Expression<System.Func<TElement, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.GroupBy(Of TElement, TKey, TResult)(Expression(Of Func(Of TElement, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TElement), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TElement, TKey, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TElement, TKey, TResult)(Expression(Of Func(Of TElement, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TElement), TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy<TElement, TKey, TResult>
    nameWithType: ExpressionExtensions.GroupBy<TElement, TKey, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TElement, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy(Of TElement, TKey, TResult)
    nameWithType: ExpressionExtensions.GroupBy(Of TElement, TKey, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TElement, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TElement},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  name: GroupJoin<TElement, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<TElement, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TElement, IEnumerable<TInner>, TResult>>)
  nameWithType: ExpressionExtensions.GroupJoin<TElement, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<TElement, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TElement, IEnumerable<TInner>, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin<TElement, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TElement, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TElement, System.Collections.Generic.IEnumerable<TInner>, TResult>>)
  nameWithType.vb: ExpressionExtensions.GroupJoin(Of TElement, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of TElement, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TElement, IEnumerable(Of TInner), TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin(Of TElement, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TElement, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Collections.Generic.IEnumerable(Of TInner), TResult)))
  name.vb: GroupJoin(Of TElement, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of TElement, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TElement, IEnumerable(Of TInner), TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
    name: GroupJoin<TElement, TInner, TKey, TResult>
    nameWithType: ExpressionExtensions.GroupJoin<TElement, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin<TElement, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
    name: GroupJoin(Of TElement, TInner, TKey, TResult)
    nameWithType: ExpressionExtensions.GroupJoin(Of TElement, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin(Of TElement, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TElement},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  name: GroupJoin<TElement, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<TElement, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TElement, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ExpressionExtensions.GroupJoin<TElement, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<TElement, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TElement, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin<TElement, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TElement, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TElement, System.Collections.Generic.IEnumerable<TInner>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.GroupJoin(Of TElement, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of TElement, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TElement, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin(Of TElement, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TElement, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Collections.Generic.IEnumerable(Of TInner), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupJoin(Of TElement, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of TElement, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TElement, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin<TElement, TInner, TKey, TResult>
    nameWithType: ExpressionExtensions.GroupJoin<TElement, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin<TElement, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin(Of TElement, TInner, TKey, TResult)
    nameWithType: ExpressionExtensions.GroupJoin(Of TElement, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin(Of TElement, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(System.Collections.Generic.IEnumerable{{TElement}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  name: Intersect<TElement>(IEnumerable<TElement>)
  nameWithType: ExpressionExtensions.Intersect<TElement>(IEnumerable<TElement>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect<TElement>(System.Collections.Generic.IEnumerable<TElement>)
  nameWithType.vb: ExpressionExtensions.Intersect(Of TElement)(IEnumerable(Of TElement))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Intersect(Of TElement)(System.Collections.Generic.IEnumerable(Of TElement))
  name.vb: Intersect(Of TElement)(IEnumerable(Of TElement))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(System.Collections.Generic.IEnumerable{``0})
    name: Intersect<TElement>
    nameWithType: ExpressionExtensions.Intersect<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(System.Collections.Generic.IEnumerable{``0})
    name: Intersect(Of TElement)
    nameWithType: ExpressionExtensions.Intersect(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(System.Collections.Generic.IEnumerable{{TElement}},System.Collections.Generic.IEqualityComparer{{TElement}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Intersect<TElement>(IEnumerable<TElement>, IEqualityComparer<TElement>)
  nameWithType: ExpressionExtensions.Intersect<TElement>(IEnumerable<TElement>, IEqualityComparer<TElement>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect<TElement>(System.Collections.Generic.IEnumerable<TElement>, System.Collections.Generic.IEqualityComparer<TElement>)
  nameWithType.vb: ExpressionExtensions.Intersect(Of TElement)(IEnumerable(Of TElement), IEqualityComparer(Of TElement))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Intersect(Of TElement)(System.Collections.Generic.IEnumerable(Of TElement), System.Collections.Generic.IEqualityComparer(Of TElement))
  name.vb: Intersect(Of TElement)(IEnumerable(Of TElement), IEqualityComparer(Of TElement))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Intersect<TElement>
    nameWithType: ExpressionExtensions.Intersect<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Intersect(Of TElement)
    nameWithType: ExpressionExtensions.Intersect(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{{TElement}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsProperSubsetOf<TElement>(IEnumerable<TElement>)
  nameWithType: ExpressionExtensions.IsProperSubsetOf<TElement>(IEnumerable<TElement>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf<TElement>(System.Collections.Generic.IEnumerable<TElement>)
  nameWithType.vb: ExpressionExtensions.IsProperSubsetOf(Of TElement)(IEnumerable(Of TElement))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf(Of TElement)(System.Collections.Generic.IEnumerable(Of TElement))
  name.vb: IsProperSubsetOf(Of TElement)(IEnumerable(Of TElement))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsProperSubsetOf<TElement>
    nameWithType: ExpressionExtensions.IsProperSubsetOf<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsProperSubsetOf(Of TElement)
    nameWithType: ExpressionExtensions.IsProperSubsetOf(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{{TElement}},System.Collections.Generic.IEqualityComparer{{TElement}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsProperSubsetOf<TElement>(IEnumerable<TElement>, IEqualityComparer<TElement>)
  nameWithType: ExpressionExtensions.IsProperSubsetOf<TElement>(IEnumerable<TElement>, IEqualityComparer<TElement>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf<TElement>(System.Collections.Generic.IEnumerable<TElement>, System.Collections.Generic.IEqualityComparer<TElement>)
  nameWithType.vb: ExpressionExtensions.IsProperSubsetOf(Of TElement)(IEnumerable(Of TElement), IEqualityComparer(Of TElement))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf(Of TElement)(System.Collections.Generic.IEnumerable(Of TElement), System.Collections.Generic.IEqualityComparer(Of TElement))
  name.vb: IsProperSubsetOf(Of TElement)(IEnumerable(Of TElement), IEqualityComparer(Of TElement))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSubsetOf<TElement>
    nameWithType: ExpressionExtensions.IsProperSubsetOf<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSubsetOf(Of TElement)
    nameWithType: ExpressionExtensions.IsProperSubsetOf(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{{TElement}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsProperSupersetOf<TElement>(IEnumerable<TElement>)
  nameWithType: ExpressionExtensions.IsProperSupersetOf<TElement>(IEnumerable<TElement>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf<TElement>(System.Collections.Generic.IEnumerable<TElement>)
  nameWithType.vb: ExpressionExtensions.IsProperSupersetOf(Of TElement)(IEnumerable(Of TElement))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf(Of TElement)(System.Collections.Generic.IEnumerable(Of TElement))
  name.vb: IsProperSupersetOf(Of TElement)(IEnumerable(Of TElement))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsProperSupersetOf<TElement>
    nameWithType: ExpressionExtensions.IsProperSupersetOf<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsProperSupersetOf(Of TElement)
    nameWithType: ExpressionExtensions.IsProperSupersetOf(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{{TElement}},System.Collections.Generic.IEqualityComparer{{TElement}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsProperSupersetOf<TElement>(IEnumerable<TElement>, IEqualityComparer<TElement>)
  nameWithType: ExpressionExtensions.IsProperSupersetOf<TElement>(IEnumerable<TElement>, IEqualityComparer<TElement>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf<TElement>(System.Collections.Generic.IEnumerable<TElement>, System.Collections.Generic.IEqualityComparer<TElement>)
  nameWithType.vb: ExpressionExtensions.IsProperSupersetOf(Of TElement)(IEnumerable(Of TElement), IEqualityComparer(Of TElement))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf(Of TElement)(System.Collections.Generic.IEnumerable(Of TElement), System.Collections.Generic.IEqualityComparer(Of TElement))
  name.vb: IsProperSupersetOf(Of TElement)(IEnumerable(Of TElement), IEqualityComparer(Of TElement))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSupersetOf<TElement>
    nameWithType: ExpressionExtensions.IsProperSupersetOf<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSupersetOf(Of TElement)
    nameWithType: ExpressionExtensions.IsProperSupersetOf(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{{TElement}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsSubsetOf<TElement>(IEnumerable<TElement>)
  nameWithType: ExpressionExtensions.IsSubsetOf<TElement>(IEnumerable<TElement>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf<TElement>(System.Collections.Generic.IEnumerable<TElement>)
  nameWithType.vb: ExpressionExtensions.IsSubsetOf(Of TElement)(IEnumerable(Of TElement))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf(Of TElement)(System.Collections.Generic.IEnumerable(Of TElement))
  name.vb: IsSubsetOf(Of TElement)(IEnumerable(Of TElement))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsSubsetOf<TElement>
    nameWithType: ExpressionExtensions.IsSubsetOf<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsSubsetOf(Of TElement)
    nameWithType: ExpressionExtensions.IsSubsetOf(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{{TElement}},System.Collections.Generic.IEqualityComparer{{TElement}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsSubsetOf<TElement>(IEnumerable<TElement>, IEqualityComparer<TElement>)
  nameWithType: ExpressionExtensions.IsSubsetOf<TElement>(IEnumerable<TElement>, IEqualityComparer<TElement>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf<TElement>(System.Collections.Generic.IEnumerable<TElement>, System.Collections.Generic.IEqualityComparer<TElement>)
  nameWithType.vb: ExpressionExtensions.IsSubsetOf(Of TElement)(IEnumerable(Of TElement), IEqualityComparer(Of TElement))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf(Of TElement)(System.Collections.Generic.IEnumerable(Of TElement), System.Collections.Generic.IEqualityComparer(Of TElement))
  name.vb: IsSubsetOf(Of TElement)(IEnumerable(Of TElement), IEqualityComparer(Of TElement))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSubsetOf<TElement>
    nameWithType: ExpressionExtensions.IsSubsetOf<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSubsetOf(Of TElement)
    nameWithType: ExpressionExtensions.IsSubsetOf(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{{TElement}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsSupersetOf<TElement>(IEnumerable<TElement>)
  nameWithType: ExpressionExtensions.IsSupersetOf<TElement>(IEnumerable<TElement>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf<TElement>(System.Collections.Generic.IEnumerable<TElement>)
  nameWithType.vb: ExpressionExtensions.IsSupersetOf(Of TElement)(IEnumerable(Of TElement))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf(Of TElement)(System.Collections.Generic.IEnumerable(Of TElement))
  name.vb: IsSupersetOf(Of TElement)(IEnumerable(Of TElement))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsSupersetOf<TElement>
    nameWithType: ExpressionExtensions.IsSupersetOf<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsSupersetOf(Of TElement)
    nameWithType: ExpressionExtensions.IsSupersetOf(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{{TElement}},System.Collections.Generic.IEqualityComparer{{TElement}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsSupersetOf<TElement>(IEnumerable<TElement>, IEqualityComparer<TElement>)
  nameWithType: ExpressionExtensions.IsSupersetOf<TElement>(IEnumerable<TElement>, IEqualityComparer<TElement>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf<TElement>(System.Collections.Generic.IEnumerable<TElement>, System.Collections.Generic.IEqualityComparer<TElement>)
  nameWithType.vb: ExpressionExtensions.IsSupersetOf(Of TElement)(IEnumerable(Of TElement), IEqualityComparer(Of TElement))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf(Of TElement)(System.Collections.Generic.IEnumerable(Of TElement), System.Collections.Generic.IEqualityComparer(Of TElement))
  name.vb: IsSupersetOf(Of TElement)(IEnumerable(Of TElement), IEqualityComparer(Of TElement))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSupersetOf<TElement>
    nameWithType: ExpressionExtensions.IsSupersetOf<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSupersetOf(Of TElement)
    nameWithType: ExpressionExtensions.IsSupersetOf(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TElement},{TInner},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  name: Join<TElement, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<TElement, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TElement, TInner, TResult>>)
  nameWithType: ExpressionExtensions.Join<TElement, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<TElement, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TElement, TInner, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Join<TElement, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TElement, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TElement, TInner, TResult>>)
  nameWithType.vb: ExpressionExtensions.Join(Of TElement, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of TElement, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TElement, TInner, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Join(Of TElement, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TElement, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TElement, TInner, TResult)))
  name.vb: Join(Of TElement, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of TElement, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TElement, TInner, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
    name: Join<TElement, TInner, TKey, TResult>
    nameWithType: ExpressionExtensions.Join<TElement, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Join<TElement, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
    name: Join(Of TElement, TInner, TKey, TResult)
    nameWithType: ExpressionExtensions.Join(Of TElement, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Join(Of TElement, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TElement},{TInner},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  name: Join<TElement, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<TElement, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TElement, TInner, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ExpressionExtensions.Join<TElement, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<TElement, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TElement, TInner, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Join<TElement, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TElement, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TElement, TInner, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.Join(Of TElement, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of TElement, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TElement, TInner, TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Join(Of TElement, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TElement, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TElement, TInner, TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Join(Of TElement, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of TElement, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TElement, TInner, TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: Join<TElement, TInner, TKey, TResult>
    nameWithType: ExpressionExtensions.Join<TElement, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Join<TElement, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: Join(Of TElement, TInner, TKey, TResult)
    nameWithType: ExpressionExtensions.Join(Of TElement, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Join(Of TElement, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Max``1(System.Collections.Generic.IComparer{{TElement}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  name: Max<TElement>(IComparer<TElement>)
  nameWithType: ExpressionExtensions.Max<TElement>(IComparer<TElement>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TElement>(System.Collections.Generic.IComparer<TElement>)
  nameWithType.vb: ExpressionExtensions.Max(Of TElement)(IComparer(Of TElement))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TElement)(System.Collections.Generic.IComparer(Of TElement))
  name.vb: Max(Of TElement)(IComparer(Of TElement))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``1(System.Collections.Generic.IComparer{``0})
    name: Max<TElement>
    nameWithType: ExpressionExtensions.Max<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``1(System.Collections.Generic.IComparer{``0})
    name: Max(Of TElement)
    nameWithType: ExpressionExtensions.Max(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TElement},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: Max<TElement, TResult>(Expression<Func<TElement, TResult>>)
  nameWithType: ExpressionExtensions.Max<TElement, TResult>(Expression<Func<TElement, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TElement, TResult>(System.Linq.Expressions.Expression<System.Func<TElement, TResult>>)
  nameWithType.vb: ExpressionExtensions.Max(Of TElement, TResult)(Expression(Of Func(Of TElement, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TElement, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, TResult)))
  name.vb: Max(Of TElement, TResult)(Expression(Of Func(Of TElement, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Max<TElement, TResult>
    nameWithType: ExpressionExtensions.Max<TElement, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TElement, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Max(Of TElement, TResult)
    nameWithType: ExpressionExtensions.Max(Of TElement, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TElement, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TElement},{TResult}}},System.Func{{TElement},{TResult}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  name: Max<TElement, TResult>(Expression<Func<TElement, TResult>>, Func<TElement, TResult>)
  nameWithType: ExpressionExtensions.Max<TElement, TResult>(Expression<Func<TElement, TResult>>, Func<TElement, TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TElement, TResult>(System.Linq.Expressions.Expression<System.Func<TElement, TResult>>, System.Func<TElement, TResult>)
  nameWithType.vb: ExpressionExtensions.Max(Of TElement, TResult)(Expression(Of Func(Of TElement, TResult)), Func(Of TElement, TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TElement, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, TResult)), System.Func(Of TElement, TResult))
  name.vb: Max(Of TElement, TResult)(Expression(Of Func(Of TElement, TResult)), Func(Of TElement, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
    name: Max<TElement, TResult>
    nameWithType: ExpressionExtensions.Max<TElement, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TElement, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
    name: Max(Of TElement, TResult)
    nameWithType: ExpressionExtensions.Max(Of TElement, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TElement, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TElement},{TResult}}},System.Collections.Generic.IComparer{{TResult}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: Max<TElement, TResult>(Expression<Func<TElement, TResult>>, IComparer<TResult>)
  nameWithType: ExpressionExtensions.Max<TElement, TResult>(Expression<Func<TElement, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TElement, TResult>(System.Linq.Expressions.Expression<System.Func<TElement, TResult>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ExpressionExtensions.Max(Of TElement, TResult)(Expression(Of Func(Of TElement, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TElement, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of TElement, TResult)(Expression(Of Func(Of TElement, TResult)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Max<TElement, TResult>
    nameWithType: ExpressionExtensions.Max<TElement, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TElement, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Max(Of TElement, TResult)
    nameWithType: ExpressionExtensions.Max(Of TElement, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TElement, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TElement},System.Nullable{{TResult}}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  name: Max<TElement, TResult>(Expression<Func<TElement, Nullable<TResult>>>)
  nameWithType: ExpressionExtensions.Max<TElement, TResult>(Expression<Func<TElement, Nullable<TResult>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TElement, TResult>(System.Linq.Expressions.Expression<System.Func<TElement, System.Nullable<TResult>>>)
  nameWithType.vb: ExpressionExtensions.Max(Of TElement, TResult)(Expression(Of Func(Of TElement, Nullable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TElement, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Nullable(Of TResult))))
  name.vb: Max(Of TElement, TResult)(Expression(Of Func(Of TElement, Nullable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Max<TElement, TResult>
    nameWithType: ExpressionExtensions.Max<TElement, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TElement, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Max(Of TElement, TResult)
    nameWithType: ExpressionExtensions.Max(Of TElement, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TElement, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TElement},System.Nullable{{TResult}}}},System.Collections.Generic.IComparer{{TResult}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  name: Max<TElement, TResult>(Expression<Func<TElement, Nullable<TResult>>>, IComparer<TResult>)
  nameWithType: ExpressionExtensions.Max<TElement, TResult>(Expression<Func<TElement, Nullable<TResult>>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TElement, TResult>(System.Linq.Expressions.Expression<System.Func<TElement, System.Nullable<TResult>>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ExpressionExtensions.Max(Of TElement, TResult)(Expression(Of Func(Of TElement, Nullable(Of TResult))), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TElement, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Nullable(Of TResult))), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of TElement, TResult)(Expression(Of Func(Of TElement, Nullable(Of TResult))), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Max<TElement, TResult>
    nameWithType: ExpressionExtensions.Max<TElement, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TElement, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Max(Of TElement, TResult)
    nameWithType: ExpressionExtensions.Max(Of TElement, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TElement, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Min``1(System.Collections.Generic.IComparer{{TElement}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  name: Min<TElement>(IComparer<TElement>)
  nameWithType: ExpressionExtensions.Min<TElement>(IComparer<TElement>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TElement>(System.Collections.Generic.IComparer<TElement>)
  nameWithType.vb: ExpressionExtensions.Min(Of TElement)(IComparer(Of TElement))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TElement)(System.Collections.Generic.IComparer(Of TElement))
  name.vb: Min(Of TElement)(IComparer(Of TElement))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``1(System.Collections.Generic.IComparer{``0})
    name: Min<TElement>
    nameWithType: ExpressionExtensions.Min<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``1(System.Collections.Generic.IComparer{``0})
    name: Min(Of TElement)
    nameWithType: ExpressionExtensions.Min(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TElement},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: Min<TElement, TResult>(Expression<Func<TElement, TResult>>)
  nameWithType: ExpressionExtensions.Min<TElement, TResult>(Expression<Func<TElement, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TElement, TResult>(System.Linq.Expressions.Expression<System.Func<TElement, TResult>>)
  nameWithType.vb: ExpressionExtensions.Min(Of TElement, TResult)(Expression(Of Func(Of TElement, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TElement, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, TResult)))
  name.vb: Min(Of TElement, TResult)(Expression(Of Func(Of TElement, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Min<TElement, TResult>
    nameWithType: ExpressionExtensions.Min<TElement, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TElement, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Min(Of TElement, TResult)
    nameWithType: ExpressionExtensions.Min(Of TElement, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TElement, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TElement},{TResult}}},System.Collections.Generic.IComparer{{TResult}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: Min<TElement, TResult>(Expression<Func<TElement, TResult>>, IComparer<TResult>)
  nameWithType: ExpressionExtensions.Min<TElement, TResult>(Expression<Func<TElement, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TElement, TResult>(System.Linq.Expressions.Expression<System.Func<TElement, TResult>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ExpressionExtensions.Min(Of TElement, TResult)(Expression(Of Func(Of TElement, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TElement, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of TElement, TResult)(Expression(Of Func(Of TElement, TResult)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Min<TElement, TResult>
    nameWithType: ExpressionExtensions.Min<TElement, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TElement, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Min(Of TElement, TResult)
    nameWithType: ExpressionExtensions.Min(Of TElement, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TElement, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TElement},System.Nullable{{TResult}}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  name: Min<TElement, TResult>(Expression<Func<TElement, Nullable<TResult>>>)
  nameWithType: ExpressionExtensions.Min<TElement, TResult>(Expression<Func<TElement, Nullable<TResult>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TElement, TResult>(System.Linq.Expressions.Expression<System.Func<TElement, System.Nullable<TResult>>>)
  nameWithType.vb: ExpressionExtensions.Min(Of TElement, TResult)(Expression(Of Func(Of TElement, Nullable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TElement, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Nullable(Of TResult))))
  name.vb: Min(Of TElement, TResult)(Expression(Of Func(Of TElement, Nullable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Min<TElement, TResult>
    nameWithType: ExpressionExtensions.Min<TElement, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TElement, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Min(Of TElement, TResult)
    nameWithType: ExpressionExtensions.Min(Of TElement, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TElement, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TElement},System.Nullable{{TResult}}}},System.Collections.Generic.IComparer{{TResult}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  name: Min<TElement, TResult>(Expression<Func<TElement, Nullable<TResult>>>, IComparer<TResult>)
  nameWithType: ExpressionExtensions.Min<TElement, TResult>(Expression<Func<TElement, Nullable<TResult>>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TElement, TResult>(System.Linq.Expressions.Expression<System.Func<TElement, System.Nullable<TResult>>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ExpressionExtensions.Min(Of TElement, TResult)(Expression(Of Func(Of TElement, Nullable(Of TResult))), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TElement, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Nullable(Of TResult))), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of TElement, TResult)(Expression(Of Func(Of TElement, Nullable(Of TResult))), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Min<TElement, TResult>
    nameWithType: ExpressionExtensions.Min<TElement, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TElement, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Min(Of TElement, TResult)
    nameWithType: ExpressionExtensions.Min(Of TElement, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TElement, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression.NMF.Expressions.Linq.ExpressionExtensions.OfType``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
  name: OfType<TResult>()
  nameWithType: ExpressionExtensions.OfType<TResult>()
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OfType<TResult>()
  nameWithType.vb: ExpressionExtensions.OfType(Of TResult)()
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OfType(Of TResult)()
  name.vb: OfType(Of TResult)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OfType``1
    name: OfType<TResult>
    nameWithType: ExpressionExtensions.OfType<TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OfType<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OfType``1
    name: OfType(Of TResult)
    nameWithType: ExpressionExtensions.OfType(Of TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OfType(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: OrderBy<TElement, TKey>(Expression<Func<TElement, TKey>>)
  nameWithType: ExpressionExtensions.OrderBy<TElement, TKey>(Expression<Func<TElement, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy<TElement, TKey>(System.Linq.Expressions.Expression<System.Func<TElement, TKey>>)
  nameWithType.vb: ExpressionExtensions.OrderBy(Of TElement, TKey)(Expression(Of Func(Of TElement, TKey)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OrderBy(Of TElement, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, TKey)))
  name.vb: OrderBy(Of TElement, TKey)(Expression(Of Func(Of TElement, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderBy<TElement, TKey>
    nameWithType: ExpressionExtensions.OrderBy<TElement, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy<TElement, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderBy(Of TElement, TKey)
    nameWithType: ExpressionExtensions.OrderBy(Of TElement, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy(Of TElement, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: OrderBy<TElement, TKey>(Expression<Func<TElement, TKey>>, IComparer<TKey>)
  nameWithType: ExpressionExtensions.OrderBy<TElement, TKey>(Expression<Func<TElement, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy<TElement, TKey>(System.Linq.Expressions.Expression<System.Func<TElement, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.OrderBy(Of TElement, TKey)(Expression(Of Func(Of TElement, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OrderBy(Of TElement, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderBy(Of TElement, TKey)(Expression(Of Func(Of TElement, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderBy<TElement, TKey>
    nameWithType: ExpressionExtensions.OrderBy<TElement, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy<TElement, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderBy(Of TElement, TKey)
    nameWithType: ExpressionExtensions.OrderBy(Of TElement, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy(Of TElement, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: OrderByDescending<TElement, TKey>(Expression<Func<TElement, TKey>>)
  nameWithType: ExpressionExtensions.OrderByDescending<TElement, TKey>(Expression<Func<TElement, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending<TElement, TKey>(System.Linq.Expressions.Expression<System.Func<TElement, TKey>>)
  nameWithType.vb: ExpressionExtensions.OrderByDescending(Of TElement, TKey)(Expression(Of Func(Of TElement, TKey)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending(Of TElement, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, TKey)))
  name.vb: OrderByDescending(Of TElement, TKey)(Expression(Of Func(Of TElement, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderByDescending<TElement, TKey>
    nameWithType: ExpressionExtensions.OrderByDescending<TElement, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending<TElement, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderByDescending(Of TElement, TKey)
    nameWithType: ExpressionExtensions.OrderByDescending(Of TElement, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending(Of TElement, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: OrderByDescending<TElement, TKey>(Expression<Func<TElement, TKey>>, IComparer<TKey>)
  nameWithType: ExpressionExtensions.OrderByDescending<TElement, TKey>(Expression<Func<TElement, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending<TElement, TKey>(System.Linq.Expressions.Expression<System.Func<TElement, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.OrderByDescending(Of TElement, TKey)(Expression(Of Func(Of TElement, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending(Of TElement, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderByDescending(Of TElement, TKey)(Expression(Of Func(Of TElement, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending<TElement, TKey>
    nameWithType: ExpressionExtensions.OrderByDescending<TElement, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending<TElement, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending(Of TElement, TKey)
    nameWithType: ExpressionExtensions.OrderByDescending(Of TElement, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending(Of TElement, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{{TElement},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: Select<TElement, TResult>(Expression<Func<TElement, TResult>>)
  nameWithType: ExpressionExtensions.Select<TElement, TResult>(Expression<Func<TElement, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Select<TElement, TResult>(System.Linq.Expressions.Expression<System.Func<TElement, TResult>>)
  nameWithType.vb: ExpressionExtensions.Select(Of TElement, TResult)(Expression(Of Func(Of TElement, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Select(Of TElement, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, TResult)))
  name.vb: Select(Of TElement, TResult)(Expression(Of Func(Of TElement, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Select<TElement, TResult>
    nameWithType: ExpressionExtensions.Select<TElement, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Select<TElement, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Select(Of TElement, TResult)
    nameWithType: ExpressionExtensions.Select(Of TElement, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Select(Of TElement, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{{TElement},{TResult}}},System.Func{{TElement},{TResult}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  name: Select<TElement, TResult>(Expression<Func<TElement, TResult>>, Func<TElement, TResult>)
  nameWithType: ExpressionExtensions.Select<TElement, TResult>(Expression<Func<TElement, TResult>>, Func<TElement, TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Select<TElement, TResult>(System.Linq.Expressions.Expression<System.Func<TElement, TResult>>, System.Func<TElement, TResult>)
  nameWithType.vb: ExpressionExtensions.Select(Of TElement, TResult)(Expression(Of Func(Of TElement, TResult)), Func(Of TElement, TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Select(Of TElement, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, TResult)), System.Func(Of TElement, TResult))
  name.vb: Select(Of TElement, TResult)(Expression(Of Func(Of TElement, TResult)), Func(Of TElement, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
    name: Select<TElement, TResult>
    nameWithType: ExpressionExtensions.Select<TElement, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Select<TElement, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
    name: Select(Of TElement, TResult)
    nameWithType: ExpressionExtensions.Select(Of TElement, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Select(Of TElement, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(System.Linq.Expressions.Expression{System.Func{{TElement},System.Collections.Generic.IEnumerable{{TIntermediate}}}},System.Linq.Expressions.Expression{System.Func{{TElement},{TIntermediate},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  name: SelectMany<TElement, TIntermediate, TResult>(Expression<Func<TElement, IEnumerable<TIntermediate>>>, Expression<Func<TElement, TIntermediate, TResult>>)
  nameWithType: ExpressionExtensions.SelectMany<TElement, TIntermediate, TResult>(Expression<Func<TElement, IEnumerable<TIntermediate>>>, Expression<Func<TElement, TIntermediate, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany<TElement, TIntermediate, TResult>(System.Linq.Expressions.Expression<System.Func<TElement, System.Collections.Generic.IEnumerable<TIntermediate>>>, System.Linq.Expressions.Expression<System.Func<TElement, TIntermediate, TResult>>)
  nameWithType.vb: ExpressionExtensions.SelectMany(Of TElement, TIntermediate, TResult)(Expression(Of Func(Of TElement, IEnumerable(Of TIntermediate))), Expression(Of Func(Of TElement, TIntermediate, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SelectMany(Of TElement, TIntermediate, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Collections.Generic.IEnumerable(Of TIntermediate))), System.Linq.Expressions.Expression(Of System.Func(Of TElement, TIntermediate, TResult)))
  name.vb: SelectMany(Of TElement, TIntermediate, TResult)(Expression(Of Func(Of TElement, IEnumerable(Of TIntermediate))), Expression(Of Func(Of TElement, TIntermediate, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
    name: SelectMany<TElement, TIntermediate, TResult>
    nameWithType: ExpressionExtensions.SelectMany<TElement, TIntermediate, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany<TElement, TIntermediate, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
    name: SelectMany(Of TElement, TIntermediate, TResult)
    nameWithType: ExpressionExtensions.SelectMany(Of TElement, TIntermediate, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany(Of TElement, TIntermediate, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(System.Linq.Expressions.Expression{System.Func{{TElement},System.Collections.Generic.IEnumerable{{TResult}}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  name: SelectMany<TElement, TResult>(Expression<Func<TElement, IEnumerable<TResult>>>)
  nameWithType: ExpressionExtensions.SelectMany<TElement, TResult>(Expression<Func<TElement, IEnumerable<TResult>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany<TElement, TResult>(System.Linq.Expressions.Expression<System.Func<TElement, System.Collections.Generic.IEnumerable<TResult>>>)
  nameWithType.vb: ExpressionExtensions.SelectMany(Of TElement, TResult)(Expression(Of Func(Of TElement, IEnumerable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SelectMany(Of TElement, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Collections.Generic.IEnumerable(Of TResult))))
  name.vb: SelectMany(Of TElement, TResult)(Expression(Of Func(Of TElement, IEnumerable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
    name: SelectMany<TElement, TResult>
    nameWithType: ExpressionExtensions.SelectMany<TElement, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany<TElement, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
    name: SelectMany(Of TElement, TResult)
    nameWithType: ExpressionExtensions.SelectMany(Of TElement, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany(Of TElement, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{{TElement}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  name: SetEquals<TElement>(IEnumerable<TElement>)
  nameWithType: ExpressionExtensions.SetEquals<TElement>(IEnumerable<TElement>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals<TElement>(System.Collections.Generic.IEnumerable<TElement>)
  nameWithType.vb: ExpressionExtensions.SetEquals(Of TElement)(IEnumerable(Of TElement))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SetEquals(Of TElement)(System.Collections.Generic.IEnumerable(Of TElement))
  name.vb: SetEquals(Of TElement)(IEnumerable(Of TElement))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{``0})
    name: SetEquals<TElement>
    nameWithType: ExpressionExtensions.SetEquals<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{``0})
    name: SetEquals(Of TElement)
    nameWithType: ExpressionExtensions.SetEquals(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{{TElement}},System.Collections.Generic.IEqualityComparer{{TElement}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: SetEquals<TElement>(IEnumerable<TElement>, IEqualityComparer<TElement>)
  nameWithType: ExpressionExtensions.SetEquals<TElement>(IEnumerable<TElement>, IEqualityComparer<TElement>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals<TElement>(System.Collections.Generic.IEnumerable<TElement>, System.Collections.Generic.IEqualityComparer<TElement>)
  nameWithType.vb: ExpressionExtensions.SetEquals(Of TElement)(IEnumerable(Of TElement), IEqualityComparer(Of TElement))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SetEquals(Of TElement)(System.Collections.Generic.IEnumerable(Of TElement), System.Collections.Generic.IEqualityComparer(Of TElement))
  name.vb: SetEquals(Of TElement)(IEnumerable(Of TElement), IEqualityComparer(Of TElement))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: SetEquals<TElement>
    nameWithType: ExpressionExtensions.SetEquals<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: SetEquals(Of TElement)
    nameWithType: ExpressionExtensions.SetEquals(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  name: SingleOrDefault<TElement>()
  nameWithType: ExpressionExtensions.SingleOrDefault<TElement>()
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TElement>()
  nameWithType.vb: ExpressionExtensions.SingleOrDefault(Of TElement)()
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TElement)()
  name.vb: SingleOrDefault(Of TElement)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1
    name: SingleOrDefault<TElement>
    nameWithType: ExpressionExtensions.SingleOrDefault<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1
    name: SingleOrDefault(Of TElement)
    nameWithType: ExpressionExtensions.SingleOrDefault(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: SingleOrDefault<TElement>(Expression<Func<TElement, Boolean>>)
  nameWithType: ExpressionExtensions.SingleOrDefault<TElement>(Expression<Func<TElement, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TElement>(System.Linq.Expressions.Expression<System.Func<TElement, System.Boolean>>)
  nameWithType.vb: ExpressionExtensions.SingleOrDefault(Of TElement)(Expression(Of Func(Of TElement, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TElement)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Boolean)))
  name.vb: SingleOrDefault(Of TElement)(Expression(Of Func(Of TElement, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: SingleOrDefault<TElement>
    nameWithType: ExpressionExtensions.SingleOrDefault<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: SingleOrDefault(Of TElement)
    nameWithType: ExpressionExtensions.SingleOrDefault(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Boolean}},System.Func{{TElement},System.Boolean})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  name: SingleOrDefault<TElement>(Expression<Func<TElement, Boolean>>, Func<TElement, Boolean>)
  nameWithType: ExpressionExtensions.SingleOrDefault<TElement>(Expression<Func<TElement, Boolean>>, Func<TElement, Boolean>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TElement>(System.Linq.Expressions.Expression<System.Func<TElement, System.Boolean>>, System.Func<TElement, System.Boolean>)
  nameWithType.vb: ExpressionExtensions.SingleOrDefault(Of TElement)(Expression(Of Func(Of TElement, Boolean)), Func(Of TElement, Boolean))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TElement)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Boolean)), System.Func(Of TElement, System.Boolean))
  name.vb: SingleOrDefault(Of TElement)(Expression(Of Func(Of TElement, Boolean)), Func(Of TElement, Boolean))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
    name: SingleOrDefault<TElement>
    nameWithType: ExpressionExtensions.SingleOrDefault<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
    name: SingleOrDefault(Of TElement)
    nameWithType: ExpressionExtensions.SingleOrDefault(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Int32}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  name: Sum<TElement>(Expression<Func<TElement, Int32>>)
  nameWithType: ExpressionExtensions.Sum<TElement>(Expression<Func<TElement, Int32>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TElement>(System.Linq.Expressions.Expression<System.Func<TElement, System.Int32>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TElement)(Expression(Of Func(Of TElement, Int32)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TElement)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Int32)))
  name.vb: Sum(Of TElement)(Expression(Of Func(Of TElement, Int32)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Sum<TElement>
    nameWithType: ExpressionExtensions.Sum<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Sum(Of TElement)
    nameWithType: ExpressionExtensions.Sum(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Int64}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  name: Sum<TElement>(Expression<Func<TElement, Int64>>)
  nameWithType: ExpressionExtensions.Sum<TElement>(Expression<Func<TElement, Int64>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TElement>(System.Linq.Expressions.Expression<System.Func<TElement, System.Int64>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TElement)(Expression(Of Func(Of TElement, Int64)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TElement)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Int64)))
  name.vb: Sum(Of TElement)(Expression(Of Func(Of TElement, Int64)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Sum<TElement>
    nameWithType: ExpressionExtensions.Sum<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Sum(Of TElement)
    nameWithType: ExpressionExtensions.Sum(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Single}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  name: Sum<TElement>(Expression<Func<TElement, Single>>)
  nameWithType: ExpressionExtensions.Sum<TElement>(Expression<Func<TElement, Single>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TElement>(System.Linq.Expressions.Expression<System.Func<TElement, System.Single>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TElement)(Expression(Of Func(Of TElement, Single)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TElement)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Single)))
  name.vb: Sum(Of TElement)(Expression(Of Func(Of TElement, Single)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Sum<TElement>
    nameWithType: ExpressionExtensions.Sum<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Sum(Of TElement)
    nameWithType: ExpressionExtensions.Sum(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Double}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  name: Sum<TElement>(Expression<Func<TElement, Double>>)
  nameWithType: ExpressionExtensions.Sum<TElement>(Expression<Func<TElement, Double>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TElement>(System.Linq.Expressions.Expression<System.Func<TElement, System.Double>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TElement)(Expression(Of Func(Of TElement, Double)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TElement)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Double)))
  name.vb: Sum(Of TElement)(Expression(Of Func(Of TElement, Double)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Sum<TElement>
    nameWithType: ExpressionExtensions.Sum<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Sum(Of TElement)
    nameWithType: ExpressionExtensions.Sum(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  name: Sum<TElement>(Expression<Func<TElement, Decimal>>)
  nameWithType: ExpressionExtensions.Sum<TElement>(Expression<Func<TElement, Decimal>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TElement>(System.Linq.Expressions.Expression<System.Func<TElement, System.Decimal>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TElement)(Expression(Of Func(Of TElement, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TElement)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Decimal)))
  name.vb: Sum(Of TElement)(Expression(Of Func(Of TElement, Decimal)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Sum<TElement>
    nameWithType: ExpressionExtensions.Sum<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Sum(Of TElement)
    nameWithType: ExpressionExtensions.Sum(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  name: Sum<TElement>(Expression<Func<TElement, Nullable<Int32>>>)
  nameWithType: ExpressionExtensions.Sum<TElement>(Expression<Func<TElement, Nullable<Int32>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TElement>(System.Linq.Expressions.Expression<System.Func<TElement, System.Nullable<System.Int32>>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TElement)(Expression(Of Func(Of TElement, Nullable(Of Int32))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TElement)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Nullable(Of System.Int32))))
  name.vb: Sum(Of TElement)(Expression(Of Func(Of TElement, Nullable(Of Int32))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Sum<TElement>
    nameWithType: ExpressionExtensions.Sum<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Sum(Of TElement)
    nameWithType: ExpressionExtensions.Sum(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  name: Sum<TElement>(Expression<Func<TElement, Nullable<Int64>>>)
  nameWithType: ExpressionExtensions.Sum<TElement>(Expression<Func<TElement, Nullable<Int64>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TElement>(System.Linq.Expressions.Expression<System.Func<TElement, System.Nullable<System.Int64>>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TElement)(Expression(Of Func(Of TElement, Nullable(Of Int64))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TElement)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Nullable(Of System.Int64))))
  name.vb: Sum(Of TElement)(Expression(Of Func(Of TElement, Nullable(Of Int64))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Sum<TElement>
    nameWithType: ExpressionExtensions.Sum<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Sum(Of TElement)
    nameWithType: ExpressionExtensions.Sum(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  name: Sum<TElement>(Expression<Func<TElement, Nullable<Single>>>)
  nameWithType: ExpressionExtensions.Sum<TElement>(Expression<Func<TElement, Nullable<Single>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TElement>(System.Linq.Expressions.Expression<System.Func<TElement, System.Nullable<System.Single>>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TElement)(Expression(Of Func(Of TElement, Nullable(Of Single))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TElement)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Nullable(Of System.Single))))
  name.vb: Sum(Of TElement)(Expression(Of Func(Of TElement, Nullable(Of Single))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Sum<TElement>
    nameWithType: ExpressionExtensions.Sum<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Sum(Of TElement)
    nameWithType: ExpressionExtensions.Sum(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  name: Sum<TElement>(Expression<Func<TElement, Nullable<Double>>>)
  nameWithType: ExpressionExtensions.Sum<TElement>(Expression<Func<TElement, Nullable<Double>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TElement>(System.Linq.Expressions.Expression<System.Func<TElement, System.Nullable<System.Double>>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TElement)(Expression(Of Func(Of TElement, Nullable(Of Double))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TElement)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Nullable(Of System.Double))))
  name.vb: Sum(Of TElement)(Expression(Of Func(Of TElement, Nullable(Of Double))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Sum<TElement>
    nameWithType: ExpressionExtensions.Sum<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Sum(Of TElement)
    nameWithType: ExpressionExtensions.Sum(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  name: Sum<TElement>(Expression<Func<TElement, Nullable<Decimal>>>)
  nameWithType: ExpressionExtensions.Sum<TElement>(Expression<Func<TElement, Nullable<Decimal>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TElement>(System.Linq.Expressions.Expression<System.Func<TElement, System.Nullable<System.Decimal>>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TElement)(Expression(Of Func(Of TElement, Nullable(Of Decimal))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TElement)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Of TElement)(Expression(Of Func(Of TElement, Nullable(Of Decimal))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Sum<TElement>
    nameWithType: ExpressionExtensions.Sum<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Sum(Of TElement)
    nameWithType: ExpressionExtensions.Sum(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: TopX<TElement, TKey>(Int32, Expression<Func<TElement, TKey>>)
  nameWithType: ExpressionExtensions.TopX<TElement, TKey>(Int32, Expression<Func<TElement, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX<TElement, TKey>(System.Int32, System.Linq.Expressions.Expression<System.Func<TElement, TKey>>)
  nameWithType.vb: ExpressionExtensions.TopX(Of TElement, TKey)(Int32, Expression(Of Func(Of TElement, TKey)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.TopX(Of TElement, TKey)(System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of TElement, TKey)))
  name.vb: TopX(Of TElement, TKey)(Int32, Expression(Of Func(Of TElement, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: TopX<TElement, TKey>
    nameWithType: ExpressionExtensions.TopX<TElement, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX<TElement, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: TopX(Of TElement, TKey)
    nameWithType: ExpressionExtensions.TopX(Of TElement, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX(Of TElement, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{{TElement},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: TopX<TElement, TKey>(Int32, Expression<Func<TElement, TKey>>, IComparer<TKey>)
  nameWithType: ExpressionExtensions.TopX<TElement, TKey>(Int32, Expression<Func<TElement, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX<TElement, TKey>(System.Int32, System.Linq.Expressions.Expression<System.Func<TElement, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.TopX(Of TElement, TKey)(Int32, Expression(Of Func(Of TElement, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.TopX(Of TElement, TKey)(System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of TElement, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: TopX(Of TElement, TKey)(Int32, Expression(Of Func(Of TElement, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: TopX<TElement, TKey>
    nameWithType: ExpressionExtensions.TopX<TElement, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX<TElement, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: TopX(Of TElement, TKey)
    nameWithType: ExpressionExtensions.TopX(Of TElement, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX(Of TElement, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Union``1(System.Collections.Generic.IEnumerable{{TElement}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  name: Union<TElement>(IEnumerable<TElement>)
  nameWithType: ExpressionExtensions.Union<TElement>(IEnumerable<TElement>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Union<TElement>(System.Collections.Generic.IEnumerable<TElement>)
  nameWithType.vb: ExpressionExtensions.Union(Of TElement)(IEnumerable(Of TElement))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Union(Of TElement)(System.Collections.Generic.IEnumerable(Of TElement))
  name.vb: Union(Of TElement)(IEnumerable(Of TElement))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(System.Collections.Generic.IEnumerable{``0})
    name: Union<TElement>
    nameWithType: ExpressionExtensions.Union<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Union<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(System.Collections.Generic.IEnumerable{``0})
    name: Union(Of TElement)
    nameWithType: ExpressionExtensions.Union(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Union(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Union``1(System.Collections.Generic.IEnumerable{{TElement}},System.Collections.Generic.IEqualityComparer{{TElement}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Union<TElement>(IEnumerable<TElement>, IEqualityComparer<TElement>)
  nameWithType: ExpressionExtensions.Union<TElement>(IEnumerable<TElement>, IEqualityComparer<TElement>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Union<TElement>(System.Collections.Generic.IEnumerable<TElement>, System.Collections.Generic.IEqualityComparer<TElement>)
  nameWithType.vb: ExpressionExtensions.Union(Of TElement)(IEnumerable(Of TElement), IEqualityComparer(Of TElement))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Union(Of TElement)(System.Collections.Generic.IEnumerable(Of TElement), System.Collections.Generic.IEqualityComparer(Of TElement))
  name.vb: Union(Of TElement)(IEnumerable(Of TElement), IEqualityComparer(Of TElement))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Union<TElement>
    nameWithType: ExpressionExtensions.Union<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Union<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Union(Of TElement)
    nameWithType: ExpressionExtensions.Union(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Union(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Where<TElement>(Expression<Func<TElement, Boolean>>)
  nameWithType: ExpressionExtensions.Where<TElement>(Expression<Func<TElement, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Where<TElement>(System.Linq.Expressions.Expression<System.Func<TElement, System.Boolean>>)
  nameWithType.vb: ExpressionExtensions.Where(Of TElement)(Expression(Of Func(Of TElement, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Where(Of TElement)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Boolean)))
  name.vb: Where(Of TElement)(Expression(Of Func(Of TElement, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where<TElement>
    nameWithType: ExpressionExtensions.Where<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Where<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where(Of TElement)
    nameWithType: ExpressionExtensions.Where(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Where(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{{TElement},System.Boolean}},System.Func{{TElement},System.Boolean})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  name: Where<TElement>(Expression<Func<TElement, Boolean>>, Func<TElement, Boolean>)
  nameWithType: ExpressionExtensions.Where<TElement>(Expression<Func<TElement, Boolean>>, Func<TElement, Boolean>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Where<TElement>(System.Linq.Expressions.Expression<System.Func<TElement, System.Boolean>>, System.Func<TElement, System.Boolean>)
  nameWithType.vb: ExpressionExtensions.Where(Of TElement)(Expression(Of Func(Of TElement, Boolean)), Func(Of TElement, Boolean))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Where(Of TElement)(System.Linq.Expressions.Expression(Of System.Func(Of TElement, System.Boolean)), System.Func(Of TElement, System.Boolean))
  name.vb: Where(Of TElement)(Expression(Of Func(Of TElement, Boolean)), Func(Of TElement, Boolean))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
    name: Where<TElement>
    nameWithType: ExpressionExtensions.Where<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Where<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
    name: Where(Of TElement)
    nameWithType: ExpressionExtensions.Where(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Where(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  name: WithUpdates<TElement>()
  nameWithType: ObservableExtensions.WithUpdates<TElement>()
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<TElement>()
  nameWithType.vb: ObservableExtensions.WithUpdates(Of TElement)()
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of TElement)()
  name.vb: WithUpdates(Of TElement)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
    name: WithUpdates<TElement>
    nameWithType: ObservableExtensions.WithUpdates<TElement>
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
    name: WithUpdates(Of TElement)
    nameWithType: ObservableExtensions.WithUpdates(Of TElement)
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IGrouping`2.Key
  commentId: P:System.Linq.IGrouping`2.Key
  isExternal: true
  name: Key
  nameWithType: IGrouping<TKey, TElement>.Key
  fullName: System.Linq.IGrouping<TKey, TElement>.Key
  nameWithType.vb: IGrouping(Of TKey, TElement).Key
  fullName.vb: System.Linq.IGrouping(Of TKey, TElement).Key
- uid: System.Linq.IGrouping{{TKey},{TElement}}
  commentId: T:System.Linq.IGrouping{`0,`1}
  parent: System.Linq
  definition: System.Linq.IGrouping`2
  name: IGrouping<TKey, TElement>
  nameWithType: IGrouping<TKey, TElement>
  fullName: System.Linq.IGrouping<TKey, TElement>
  nameWithType.vb: IGrouping(Of TKey, TElement)
  fullName.vb: System.Linq.IGrouping(Of TKey, TElement)
  name.vb: IGrouping(Of TKey, TElement)
  spec.csharp:
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
  commentId: M:NMF.Expressions.IEnumerableExpression`1.AsNotifiable
  name: AsNotifiable()
  nameWithType: IEnumerableExpression<T>.AsNotifiable()
  fullName: NMF.Expressions.IEnumerableExpression<T>.AsNotifiable()
  nameWithType.vb: IEnumerableExpression(Of T).AsNotifiable()
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T).AsNotifiable()
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression<T>.AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression<T>.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression(Of T).AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression(Of T).AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{{TElement}}
  commentId: T:NMF.Expressions.IEnumerableExpression{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<TElement>
  nameWithType: IEnumerableExpression<TElement>
  fullName: NMF.Expressions.IEnumerableExpression<TElement>
  nameWithType.vb: IEnumerableExpression(Of TElement)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of TElement)
  name.vb: IEnumerableExpression(Of TElement)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TElement}}
  commentId: T:System.Collections.Generic.IEnumerable{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TElement>
  nameWithType: IEnumerable<TElement>
  fullName: System.Collections.Generic.IEnumerable<TElement>
  nameWithType.vb: IEnumerable(Of TElement)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TElement)
  name.vb: IEnumerable(Of TElement)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: ToLookup<TSource, TKey>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>)
  nameWithType: LookupExtensions.ToLookup<TSource, TKey>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>)
  fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TSource, TKey>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  nameWithType.vb: LookupExtensions.ToLookup(Of TSource, TKey)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)))
  fullName.vb: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TSource, TKey)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: ToLookup(Of TSource, TKey)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup<TSource, TKey>
    nameWithType: LookupExtensions.ToLookup<TSource, TKey>
    fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TSource, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup(Of TSource, TKey)
    nameWithType: LookupExtensions.ToLookup(Of TSource, TKey)
    fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TSource, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.LookupExtensions
  commentId: T:NMF.Expressions.Linq.LookupExtensions
  parent: NMF.Expressions.Linq
  name: LookupExtensions
  nameWithType: LookupExtensions
  fullName: NMF.Expressions.Linq.LookupExtensions
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  isExternal: true
  name: ChunkIndexed<T, TResult>(IEnumerable<T>, Int32, Func<IEnumerableExpression<ValueTuple<T, Int32>>, Int32, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(IEnumerable<T>, Int32, Func<IEnumerableExpression<ValueTuple<T, Int32>>, Int32, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<System.ValueTuple<T, System.Int32>>, System.Int32, TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(IEnumerable(Of T), Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of T, Int32)), Int32, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(System.Collections.Generic.IEnumerable(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of System.ValueTuple(Of T, System.Int32)), System.Int32, TResult))
  name.vb: ChunkIndexed(Of T, TResult)(IEnumerable(Of T), Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of T, Int32)), Int32, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed<T, TResult>
    nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed(Of T, TResult)
    nameWithType: ChunkExtensions.ChunkIndexed(Of T, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ChunkExtensions
  commentId: T:NMF.Expressions.Linq.ChunkExtensions
  parent: NMF.Expressions.Linq
  name: ChunkExtensions
  nameWithType: ChunkExtensions
  fullName: NMF.Expressions.Linq.ChunkExtensions
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  isExternal: true
  name: ChunkIndexed<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<ValueTuple<T, Int32>>, Int32, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<ValueTuple<T, Int32>>, Int32, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<System.ValueTuple<T, System.Int32>>, System.Int32, TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of T, Int32)), Int32, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of System.ValueTuple(Of T, System.Int32)), System.Int32, TResult))
  name.vb: ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of T, Int32)), Int32, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed<T, TResult>
    nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed(Of T, TResult)
    nameWithType: ChunkExtensions.ChunkIndexed(Of T, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  isExternal: true
  name: ChunkIndexed<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<ValueTuple<T, Int32>>, Int32, TResult>, IChunkBalancingStrategyProvider<ValueTuple<T, Int32>, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<ValueTuple<T, Int32>>, Int32, TResult>, IChunkBalancingStrategyProvider<ValueTuple<T, Int32>, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<System.ValueTuple<T, System.Int32>>, System.Int32, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider<System.ValueTuple<T, System.Int32>, TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of T, Int32)), Int32, TResult), IChunkBalancingStrategyProvider(Of ValueTuple(Of T, Int32), TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of System.ValueTuple(Of T, System.Int32)), System.Int32, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of System.ValueTuple(Of T, System.Int32), TResult))
  name.vb: ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of T, Int32)), Int32, TResult), IChunkBalancingStrategyProvider(Of ValueTuple(Of T, Int32), TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
    name: ChunkIndexed<T, TResult>
    nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
    name: ChunkIndexed(Of T, TResult)
    nameWithType: ChunkExtensions.ChunkIndexed(Of T, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  isExternal: true
  name: ChunkIndexed<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<ValueTuple<T, Int32>>, Int32, TResult>, IChunkBalancingStrategyProvider)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<ValueTuple<T, Int32>>, Int32, TResult>, IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<System.ValueTuple<T, System.Int32>>, System.Int32, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of T, Int32)), Int32, TResult), IChunkBalancingStrategyProvider)
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of System.ValueTuple(Of T, System.Int32)), System.Int32, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of T, Int32)), Int32, TResult), IChunkBalancingStrategyProvider)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: ChunkIndexed<T, TResult>
    nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: ChunkIndexed(Of T, TResult)
    nameWithType: ChunkExtensions.ChunkIndexed(Of T, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  isExternal: true
  name: Chunk<T, TResult>(IEnumerable<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(IEnumerable<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<T>, System.Int32, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(IEnumerable(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(System.Collections.Generic.IEnumerable(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), System.Int32, TResult))
  name.vb: Chunk(Of T, TResult)(IEnumerable(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
    name: Chunk<T, TResult>
    nameWithType: ChunkExtensions.Chunk<T, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
    name: Chunk(Of T, TResult)
    nameWithType: ChunkExtensions.Chunk(Of T, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  isExternal: true
  name: Chunk<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<T>, System.Int32, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), System.Int32, TResult))
  name.vb: Chunk(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
    name: Chunk<T, TResult>
    nameWithType: ChunkExtensions.Chunk<T, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
    name: Chunk(Of T, TResult)
    nameWithType: ChunkExtensions.Chunk(Of T, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  isExternal: true
  name: Chunk<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>, IChunkBalancingStrategyProvider<T, TResult>)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>, IChunkBalancingStrategyProvider<T, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<T>, System.Int32, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider<T, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult), IChunkBalancingStrategyProvider(Of T, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), System.Int32, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of T, TResult))
  name.vb: Chunk(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult), IChunkBalancingStrategyProvider(Of T, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
    name: Chunk<T, TResult>
    nameWithType: ChunkExtensions.Chunk<T, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
    name: Chunk(Of T, TResult)
    nameWithType: ChunkExtensions.Chunk(Of T, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  isExternal: true
  name: Chunk<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>, IChunkBalancingStrategyProvider)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>, IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<T>, System.Int32, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult), IChunkBalancingStrategyProvider)
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), System.Int32, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: Chunk(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult), IChunkBalancingStrategyProvider)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: Chunk<T, TResult>
    nameWithType: ChunkExtensions.Chunk<T, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: Chunk(Of T, TResult)
    nameWithType: ChunkExtensions.Chunk(Of T, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.All``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.All``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: All<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  nameWithType: ExpressionExtensions.All<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.All<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  nameWithType.vb: ExpressionExtensions.All(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.All(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: All(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.All``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: All<TSource>
    nameWithType: ExpressionExtensions.All<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.All<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.All``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: All(Of TSource)
    nameWithType: ExpressionExtensions.All(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.All(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  parent: NMF.Expressions.Linq
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
- uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0})
  name: Any<TSource>(IEnumerableExpression<TSource>)
  nameWithType: ExpressionExtensions.Any<TSource>(IEnumerableExpression<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Any<TSource>(NMF.Expressions.IEnumerableExpression<TSource>)
  nameWithType.vb: ExpressionExtensions.Any(Of TSource)(IEnumerableExpression(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Any(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource))
  name.vb: Any(Of TSource)(IEnumerableExpression(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0})
    name: Any<TSource>
    nameWithType: ExpressionExtensions.Any<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Any<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0})
    name: Any(Of TSource)
    nameWithType: ExpressionExtensions.Any(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Any(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: Any<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  nameWithType: ExpressionExtensions.Any<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Any<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  nameWithType.vb: ExpressionExtensions.Any(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Any(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: Any(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Any<TSource>
    nameWithType: ExpressionExtensions.Any<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Any<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Any(Of TSource)
    nameWithType: ExpressionExtensions.Any(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Any(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Int32>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Int32>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Int32)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32)))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Int32)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Average<TSource>
    nameWithType: ExpressionExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Average(Of TSource)
    nameWithType: ExpressionExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Int64>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Int64>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Int64)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int64)))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Int64)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Average<TSource>
    nameWithType: ExpressionExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Average(Of TSource)
    nameWithType: ExpressionExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Single>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Single>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Single>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Single)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Single)))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Single)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Average<TSource>
    nameWithType: ExpressionExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Average(Of TSource)
    nameWithType: ExpressionExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Double>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Double>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Double>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Double)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Double)))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Double)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Average<TSource>
    nameWithType: ExpressionExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Average(Of TSource)
    nameWithType: ExpressionExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Decimal>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Decimal>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Decimal)))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Average<TSource>
    nameWithType: ExpressionExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Average(Of TSource)
    nameWithType: ExpressionExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Int32>>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Int32>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int32))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32))))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int32))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Average<TSource>
    nameWithType: ExpressionExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Average(Of TSource)
    nameWithType: ExpressionExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Int64>>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Int64>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int64))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64))))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int64))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Average<TSource>
    nameWithType: ExpressionExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Average(Of TSource)
    nameWithType: ExpressionExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Single>>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Single>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Single))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single))))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Single))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Average<TSource>
    nameWithType: ExpressionExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Average(Of TSource)
    nameWithType: ExpressionExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Double>>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Double>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Double))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double))))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Double))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Average<TSource>
    nameWithType: ExpressionExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Average(Of TSource)
    nameWithType: ExpressionExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Decimal>>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Decimal>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Decimal))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal))))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Decimal))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Average<TSource>
    nameWithType: ExpressionExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Average(Of TSource)
    nameWithType: ExpressionExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
  name: Cast<TResult>(IEnumerableExpression)
  nameWithType: ExpressionExtensions.Cast<TResult>(IEnumerableExpression)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Cast<TResult>(NMF.Expressions.IEnumerableExpression)
  nameWithType.vb: ExpressionExtensions.Cast(Of TResult)(IEnumerableExpression)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Cast(Of TResult)(NMF.Expressions.IEnumerableExpression)
  name.vb: Cast(Of TResult)(IEnumerableExpression)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
    name: Cast<TResult>
    nameWithType: ExpressionExtensions.Cast<TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Cast<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
    name: Cast(Of TResult)
    nameWithType: ExpressionExtensions.Cast(Of TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Cast(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Concat``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Concat``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Concat<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  nameWithType: ExpressionExtensions.Concat<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Concat<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: ExpressionExtensions.Concat(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Concat(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Concat(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Concat``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: Concat<TSource>
    nameWithType: ExpressionExtensions.Concat<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Concat<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Concat``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: Concat(Of TSource)
    nameWithType: ExpressionExtensions.Concat(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Concat(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0)
  name: Contains<TSource>(IEnumerableExpression<TSource>, TSource)
  nameWithType: ExpressionExtensions.Contains<TSource>(IEnumerableExpression<TSource>, TSource)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, TSource)
  nameWithType.vb: ExpressionExtensions.Contains(Of TSource)(IEnumerableExpression(Of TSource), TSource)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Contains(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), TSource)
  name.vb: Contains(Of TSource)(IEnumerableExpression(Of TSource), TSource)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0)
    name: Contains<TSource>
    nameWithType: ExpressionExtensions.Contains<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0)
    name: Contains(Of TSource)
    nameWithType: ExpressionExtensions.Contains(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Contains<TSource>(IEnumerableExpression<TSource>, TSource, IEqualityComparer<TSource>)
  nameWithType: ExpressionExtensions.Contains<TSource>(IEnumerableExpression<TSource>, TSource, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ExpressionExtensions.Contains(Of TSource)(IEnumerableExpression(Of TSource), TSource, IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Contains(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), TSource, System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Contains(Of TSource)(IEnumerableExpression(Of TSource), TSource, IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
    name: Contains<TSource>
    nameWithType: ExpressionExtensions.Contains<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
    name: Contains(Of TSource)
    nameWithType: ExpressionExtensions.Contains(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0})
  name: Count<TSource>(IEnumerableExpression<TSource>)
  nameWithType: ExpressionExtensions.Count<TSource>(IEnumerableExpression<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Count<TSource>(NMF.Expressions.IEnumerableExpression<TSource>)
  nameWithType.vb: ExpressionExtensions.Count(Of TSource)(IEnumerableExpression(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Count(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource))
  name.vb: Count(Of TSource)(IEnumerableExpression(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0})
    name: Count<TSource>
    nameWithType: ExpressionExtensions.Count<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Count<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0})
    name: Count(Of TSource)
    nameWithType: ExpressionExtensions.Count(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Count(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: Count<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  nameWithType: ExpressionExtensions.Count<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Count<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  nameWithType.vb: ExpressionExtensions.Count(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Count(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: Count(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Count<TSource>
    nameWithType: ExpressionExtensions.Count<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Count<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Count(Of TSource)
    nameWithType: ExpressionExtensions.Count(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Count(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0})
  name: Distinct<TSource>(IEnumerableExpression<TSource>)
  nameWithType: ExpressionExtensions.Distinct<TSource>(IEnumerableExpression<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct<TSource>(NMF.Expressions.IEnumerableExpression<TSource>)
  nameWithType.vb: ExpressionExtensions.Distinct(Of TSource)(IEnumerableExpression(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Distinct(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource))
  name.vb: Distinct(Of TSource)(IEnumerableExpression(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0})
    name: Distinct<TSource>
    nameWithType: ExpressionExtensions.Distinct<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0})
    name: Distinct(Of TSource)
    nameWithType: ExpressionExtensions.Distinct(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Distinct<TSource>(IEnumerableExpression<TSource>, IEqualityComparer<TSource>)
  nameWithType: ExpressionExtensions.Distinct<TSource>(IEnumerableExpression<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ExpressionExtensions.Distinct(Of TSource)(IEnumerableExpression(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Distinct(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Distinct(Of TSource)(IEnumerableExpression(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Distinct<TSource>
    nameWithType: ExpressionExtensions.Distinct<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Distinct(Of TSource)
    nameWithType: ExpressionExtensions.Distinct(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Except<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  nameWithType: ExpressionExtensions.Except<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Except<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: ExpressionExtensions.Except(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Except(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Except(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: Except<TSource>
    nameWithType: ExpressionExtensions.Except<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Except<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: Except(Of TSource)
    nameWithType: ExpressionExtensions.Except(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Except(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Except<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ExpressionExtensions.Except<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Except<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ExpressionExtensions.Except(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Except(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Except(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Except<TSource>
    nameWithType: ExpressionExtensions.Except<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Except<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Except(Of TSource)
    nameWithType: ExpressionExtensions.Except(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Except(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  name: FirstOrDefault<TSource>(IEnumerableExpression<TSource>)
  nameWithType: ExpressionExtensions.FirstOrDefault<TSource>(IEnumerableExpression<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault<TSource>(NMF.Expressions.IEnumerableExpression<TSource>)
  nameWithType.vb: ExpressionExtensions.FirstOrDefault(Of TSource)(IEnumerableExpression(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource))
  name.vb: FirstOrDefault(Of TSource)(IEnumerableExpression(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
    name: FirstOrDefault<TSource>
    nameWithType: ExpressionExtensions.FirstOrDefault<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
    name: FirstOrDefault(Of TSource)
    nameWithType: ExpressionExtensions.FirstOrDefault(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: FirstOrDefault<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  nameWithType: ExpressionExtensions.FirstOrDefault<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  nameWithType.vb: ExpressionExtensions.FirstOrDefault(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: FirstOrDefault(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: FirstOrDefault<TSource>
    nameWithType: ExpressionExtensions.FirstOrDefault<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: FirstOrDefault(Of TSource)
    nameWithType: ExpressionExtensions.FirstOrDefault(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: GroupBy<TSource, TKey>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>)
  nameWithType: ExpressionExtensions.GroupBy<TSource, TKey>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TSource, TKey>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  nameWithType.vb: ExpressionExtensions.GroupBy(Of TSource, TKey)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TSource, TKey)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: GroupBy(Of TSource, TKey)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: GroupBy<TSource, TKey>
    nameWithType: ExpressionExtensions.GroupBy<TSource, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TSource, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: GroupBy(Of TSource, TKey)
    nameWithType: ExpressionExtensions.GroupBy(Of TSource, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TSource, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  isExternal: true
  name: GroupBy<TSource, TKey>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>, IEqualityComparer<TKey>)
  nameWithType: ExpressionExtensions.GroupBy<TSource, TKey>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TSource, TKey>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.GroupBy(Of TSource, TKey)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TSource, TKey)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy<TSource, TKey>
    nameWithType: ExpressionExtensions.GroupBy<TSource, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TSource, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy(Of TSource, TKey)
    nameWithType: ExpressionExtensions.GroupBy(Of TSource, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TSource, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  isExternal: true
  name: GroupBy<TSource, TKey, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>)
  nameWithType: ExpressionExtensions.GroupBy<TSource, TKey, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TSource, TKey, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>)
  nameWithType.vb: ExpressionExtensions.GroupBy(Of TSource, TKey, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TSource, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)))
  name.vb: GroupBy(Of TSource, TKey, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
    name: GroupBy<TSource, TKey, TResult>
    nameWithType: ExpressionExtensions.GroupBy<TSource, TKey, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TSource, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
    name: GroupBy(Of TSource, TKey, TResult)
    nameWithType: ExpressionExtensions.GroupBy(Of TSource, TKey, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TSource, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  isExternal: true
  name: GroupBy<TSource, TKey, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ExpressionExtensions.GroupBy<TSource, TKey, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TSource, TKey, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.GroupBy(Of TSource, TKey, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TSource, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy<TSource, TKey, TResult>
    nameWithType: ExpressionExtensions.GroupBy<TSource, TKey, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TSource, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy(Of TSource, TKey, TResult)
    nameWithType: ExpressionExtensions.GroupBy(Of TSource, TKey, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TSource, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  isExternal: true
  name: GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>)
  nameWithType: ExpressionExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(NMF.Expressions.IEnumerableExpression<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>)
  nameWithType.vb: ExpressionExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
    name: GroupJoin<TOuter, TInner, TKey, TResult>
    nameWithType: ExpressionExtensions.GroupJoin<TOuter, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin<TOuter, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
    name: GroupJoin(Of TOuter, TInner, TKey, TResult)
    nameWithType: ExpressionExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  isExternal: true
  name: GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ExpressionExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(NMF.Expressions.IEnumerableExpression<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin<TOuter, TInner, TKey, TResult>
    nameWithType: ExpressionExtensions.GroupJoin<TOuter, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin<TOuter, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin(Of TOuter, TInner, TKey, TResult)
    nameWithType: ExpressionExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Intersect<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  nameWithType: ExpressionExtensions.Intersect<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: ExpressionExtensions.Intersect(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Intersect(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Intersect(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: Intersect<TSource>
    nameWithType: ExpressionExtensions.Intersect<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: Intersect(Of TSource)
    nameWithType: ExpressionExtensions.Intersect(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Intersect<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ExpressionExtensions.Intersect<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ExpressionExtensions.Intersect(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Intersect(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Intersect(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Intersect<TSource>
    nameWithType: ExpressionExtensions.Intersect<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Intersect(Of TSource)
    nameWithType: ExpressionExtensions.Intersect(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsProperSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.IsProperSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ExpressionExtensions.IsProperSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsProperSubsetOf<T>
    nameWithType: ExpressionExtensions.IsProperSubsetOf<T>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsProperSubsetOf(Of T)
    nameWithType: ExpressionExtensions.IsProperSubsetOf(Of T)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsProperSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.IsProperSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ExpressionExtensions.IsProperSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsProperSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSubsetOf<T>
    nameWithType: ExpressionExtensions.IsProperSubsetOf<T>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSubsetOf(Of T)
    nameWithType: ExpressionExtensions.IsProperSubsetOf(Of T)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsProperSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.IsProperSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ExpressionExtensions.IsProperSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsProperSupersetOf<T>
    nameWithType: ExpressionExtensions.IsProperSupersetOf<T>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsProperSupersetOf(Of T)
    nameWithType: ExpressionExtensions.IsProperSupersetOf(Of T)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsProperSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.IsProperSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ExpressionExtensions.IsProperSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsProperSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSupersetOf<T>
    nameWithType: ExpressionExtensions.IsProperSupersetOf<T>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSupersetOf(Of T)
    nameWithType: ExpressionExtensions.IsProperSupersetOf(Of T)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.IsSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ExpressionExtensions.IsSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsSubsetOf<T>
    nameWithType: ExpressionExtensions.IsSubsetOf<T>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsSubsetOf(Of T)
    nameWithType: ExpressionExtensions.IsSubsetOf(Of T)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.IsSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ExpressionExtensions.IsSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSubsetOf<T>
    nameWithType: ExpressionExtensions.IsSubsetOf<T>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSubsetOf(Of T)
    nameWithType: ExpressionExtensions.IsSubsetOf(Of T)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.IsSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ExpressionExtensions.IsSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsSupersetOf<T>
    nameWithType: ExpressionExtensions.IsSupersetOf<T>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsSupersetOf(Of T)
    nameWithType: ExpressionExtensions.IsSupersetOf(Of T)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.IsSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ExpressionExtensions.IsSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSupersetOf<T>
    nameWithType: ExpressionExtensions.IsSupersetOf<T>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSupersetOf(Of T)
    nameWithType: ExpressionExtensions.IsSupersetOf(Of T)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  isExternal: true
  name: Join<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>)
  nameWithType: ExpressionExtensions.Join<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Join<TOuter, TInner, TKey, TResult>(NMF.Expressions.IEnumerableExpression<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>)
  nameWithType.vb: ExpressionExtensions.Join(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Join(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult)))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
    name: Join<TOuter, TInner, TKey, TResult>
    nameWithType: ExpressionExtensions.Join<TOuter, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Join<TOuter, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
    name: Join(Of TOuter, TInner, TKey, TResult)
    nameWithType: ExpressionExtensions.Join(Of TOuter, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Join(Of TOuter, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  isExternal: true
  name: Join<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ExpressionExtensions.Join<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Join<TOuter, TInner, TKey, TResult>(NMF.Expressions.IEnumerableExpression<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.Join(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Join(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: Join<TOuter, TInner, TKey, TResult>
    nameWithType: ExpressionExtensions.Join<TOuter, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Join<TOuter, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: Join(Of TOuter, TInner, TKey, TResult)
    nameWithType: ExpressionExtensions.Join(Of TOuter, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Join(Of TOuter, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  isExternal: true
  name: Max<TSource>(IEnumerableExpression<TSource>, IComparer<TSource>)
  nameWithType: ExpressionExtensions.Max<TSource>(IEnumerableExpression<TSource>, IComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IComparer<TSource>)
  nameWithType.vb: ExpressionExtensions.Max(Of TSource)(IEnumerableExpression(Of TSource), IComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IComparer(Of TSource))
  name.vb: Max(Of TSource)(IEnumerableExpression(Of TSource), IComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
    name: Max<TSource>
    nameWithType: ExpressionExtensions.Max<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
    name: Max(Of TSource)
    nameWithType: ExpressionExtensions.Max(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>)
  nameWithType: ExpressionExtensions.Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  nameWithType.vb: ExpressionExtensions.Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Max<TSource, TResult>
    nameWithType: ExpressionExtensions.Max<TSource, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Max(Of TSource, TResult)
    nameWithType: ExpressionExtensions.Max(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  isExternal: true
  name: Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, Func<TSource, TResult>)
  nameWithType: ExpressionExtensions.Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, Func<TSource, TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Func<TSource, TResult>)
  nameWithType.vb: ExpressionExtensions.Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), Func(Of TSource, TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Func(Of TSource, TResult))
  name.vb: Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), Func(Of TSource, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
    name: Max<TSource, TResult>
    nameWithType: ExpressionExtensions.Max<TSource, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
    name: Max(Of TSource, TResult)
    nameWithType: ExpressionExtensions.Max(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  nameWithType: ExpressionExtensions.Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ExpressionExtensions.Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Max<TSource, TResult>
    nameWithType: ExpressionExtensions.Max<TSource, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Max(Of TSource, TResult)
    nameWithType: ExpressionExtensions.Max(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  isExternal: true
  name: Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<TResult>>>)
  nameWithType: ExpressionExtensions.Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<TResult>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<TResult>>>)
  nameWithType.vb: ExpressionExtensions.Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of TResult))))
  name.vb: Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Max<TSource, TResult>
    nameWithType: ExpressionExtensions.Max<TSource, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Max(Of TSource, TResult)
    nameWithType: ExpressionExtensions.Max(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<TResult>>>, IComparer<TResult>)
  nameWithType: ExpressionExtensions.Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<TResult>>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<TResult>>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ExpressionExtensions.Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of TResult))), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Max<TSource, TResult>
    nameWithType: ExpressionExtensions.Max<TSource, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Max(Of TSource, TResult)
    nameWithType: ExpressionExtensions.Max(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  isExternal: true
  name: Min<TSource>(IEnumerableExpression<TSource>, IComparer<TSource>)
  nameWithType: ExpressionExtensions.Min<TSource>(IEnumerableExpression<TSource>, IComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IComparer<TSource>)
  nameWithType.vb: ExpressionExtensions.Min(Of TSource)(IEnumerableExpression(Of TSource), IComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IComparer(Of TSource))
  name.vb: Min(Of TSource)(IEnumerableExpression(Of TSource), IComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
    name: Min<TSource>
    nameWithType: ExpressionExtensions.Min<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
    name: Min(Of TSource)
    nameWithType: ExpressionExtensions.Min(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>)
  nameWithType: ExpressionExtensions.Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  nameWithType.vb: ExpressionExtensions.Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Min<TSource, TResult>
    nameWithType: ExpressionExtensions.Min<TSource, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Min(Of TSource, TResult)
    nameWithType: ExpressionExtensions.Min(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  nameWithType: ExpressionExtensions.Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ExpressionExtensions.Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Min<TSource, TResult>
    nameWithType: ExpressionExtensions.Min<TSource, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Min(Of TSource, TResult)
    nameWithType: ExpressionExtensions.Min(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  isExternal: true
  name: Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<TResult>>>)
  nameWithType: ExpressionExtensions.Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<TResult>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<TResult>>>)
  nameWithType.vb: ExpressionExtensions.Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of TResult))))
  name.vb: Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Min<TSource, TResult>
    nameWithType: ExpressionExtensions.Min<TSource, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Min(Of TSource, TResult)
    nameWithType: ExpressionExtensions.Min(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<TResult>>>, IComparer<TResult>)
  nameWithType: ExpressionExtensions.Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<TResult>>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<TResult>>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ExpressionExtensions.Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of TResult))), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Min<TSource, TResult>
    nameWithType: ExpressionExtensions.Min<TSource, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Min(Of TSource, TResult)
    nameWithType: ExpressionExtensions.Min(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
  name: OfType<TResult>(IEnumerableExpression)
  nameWithType: ExpressionExtensions.OfType<TResult>(IEnumerableExpression)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OfType<TResult>(NMF.Expressions.IEnumerableExpression)
  nameWithType.vb: ExpressionExtensions.OfType(Of TResult)(IEnumerableExpression)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OfType(Of TResult)(NMF.Expressions.IEnumerableExpression)
  name.vb: OfType(Of TResult)(IEnumerableExpression)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
    name: OfType<TResult>
    nameWithType: ExpressionExtensions.OfType<TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OfType<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
    name: OfType(Of TResult)
    nameWithType: ExpressionExtensions.OfType(Of TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OfType(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: OrderBy<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>)
  nameWithType: ExpressionExtensions.OrderBy<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy<TItem, TKey>(NMF.Expressions.IEnumerableExpression<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ExpressionExtensions.OrderBy(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OrderBy(Of TItem, TKey)(NMF.Expressions.IEnumerableExpression(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: OrderBy(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderBy<TItem, TKey>
    nameWithType: ExpressionExtensions.OrderBy<TItem, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderBy(Of TItem, TKey)
    nameWithType: ExpressionExtensions.OrderBy(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: OrderBy<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ExpressionExtensions.OrderBy<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy<TItem, TKey>(NMF.Expressions.IEnumerableExpression<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.OrderBy(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OrderBy(Of TItem, TKey)(NMF.Expressions.IEnumerableExpression(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderBy(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderBy<TItem, TKey>
    nameWithType: ExpressionExtensions.OrderBy<TItem, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderBy(Of TItem, TKey)
    nameWithType: ExpressionExtensions.OrderBy(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: OrderByDescending<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>)
  nameWithType: ExpressionExtensions.OrderByDescending<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending<TItem, TKey>(NMF.Expressions.IEnumerableExpression<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ExpressionExtensions.OrderByDescending(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending(Of TItem, TKey)(NMF.Expressions.IEnumerableExpression(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: OrderByDescending(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderByDescending<TItem, TKey>
    nameWithType: ExpressionExtensions.OrderByDescending<TItem, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderByDescending(Of TItem, TKey)
    nameWithType: ExpressionExtensions.OrderByDescending(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: OrderByDescending<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ExpressionExtensions.OrderByDescending<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending<TItem, TKey>(NMF.Expressions.IEnumerableExpression<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.OrderByDescending(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending(Of TItem, TKey)(NMF.Expressions.IEnumerableExpression(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderByDescending(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending<TItem, TKey>
    nameWithType: ExpressionExtensions.OrderByDescending<TItem, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending(Of TItem, TKey)
    nameWithType: ExpressionExtensions.OrderByDescending(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: Select<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>)
  nameWithType: ExpressionExtensions.Select<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Select<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  nameWithType.vb: ExpressionExtensions.Select(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Select(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Select(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Select<TSource, TResult>
    nameWithType: ExpressionExtensions.Select<TSource, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Select<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Select(Of TSource, TResult)
    nameWithType: ExpressionExtensions.Select(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Select(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  isExternal: true
  name: Select<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, Func<TSource, TResult>)
  nameWithType: ExpressionExtensions.Select<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, Func<TSource, TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Select<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Func<TSource, TResult>)
  nameWithType.vb: ExpressionExtensions.Select(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), Func(Of TSource, TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Select(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Func(Of TSource, TResult))
  name.vb: Select(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), Func(Of TSource, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
    name: Select<TSource, TResult>
    nameWithType: ExpressionExtensions.Select<TSource, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Select<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
    name: Select(Of TSource, TResult)
    nameWithType: ExpressionExtensions.Select(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Select(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  isExternal: true
  name: SelectMany<TSource, TIntermediate, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, IEnumerable<TIntermediate>>>, Expression<Func<TSource, TIntermediate, TResult>>)
  nameWithType: ExpressionExtensions.SelectMany<TSource, TIntermediate, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, IEnumerable<TIntermediate>>>, Expression<Func<TSource, TIntermediate, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany<TSource, TIntermediate, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TIntermediate>>>, System.Linq.Expressions.Expression<System.Func<TSource, TIntermediate, TResult>>)
  nameWithType.vb: ExpressionExtensions.SelectMany(Of TSource, TIntermediate, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate))), Expression(Of Func(Of TSource, TIntermediate, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SelectMany(Of TSource, TIntermediate, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TIntermediate))), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TIntermediate, TResult)))
  name.vb: SelectMany(Of TSource, TIntermediate, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate))), Expression(Of Func(Of TSource, TIntermediate, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
    name: SelectMany<TSource, TIntermediate, TResult>
    nameWithType: ExpressionExtensions.SelectMany<TSource, TIntermediate, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany<TSource, TIntermediate, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
    name: SelectMany(Of TSource, TIntermediate, TResult)
    nameWithType: ExpressionExtensions.SelectMany(Of TSource, TIntermediate, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany(Of TSource, TIntermediate, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  isExternal: true
  name: SelectMany<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, IEnumerable<TResult>>>)
  nameWithType: ExpressionExtensions.SelectMany<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, IEnumerable<TResult>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>>)
  nameWithType.vb: ExpressionExtensions.SelectMany(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SelectMany(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult))))
  name.vb: SelectMany(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
    name: SelectMany<TSource, TResult>
    nameWithType: ExpressionExtensions.SelectMany<TSource, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
    name: SelectMany(Of TSource, TResult)
    nameWithType: ExpressionExtensions.SelectMany(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: SetEquals<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.SetEquals<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ExpressionExtensions.SetEquals(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SetEquals(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: SetEquals(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: SetEquals<T>
    nameWithType: ExpressionExtensions.SetEquals<T>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: SetEquals(Of T)
    nameWithType: ExpressionExtensions.SetEquals(Of T)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: SetEquals<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.SetEquals<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ExpressionExtensions.SetEquals(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SetEquals(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: SetEquals(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: SetEquals<T>
    nameWithType: ExpressionExtensions.SetEquals<T>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: SetEquals(Of T)
    nameWithType: ExpressionExtensions.SetEquals(Of T)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  name: SingleOrDefault<TSource>(IEnumerableExpression<TSource>)
  nameWithType: ExpressionExtensions.SingleOrDefault<TSource>(IEnumerableExpression<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TSource>(NMF.Expressions.IEnumerableExpression<TSource>)
  nameWithType.vb: ExpressionExtensions.SingleOrDefault(Of TSource)(IEnumerableExpression(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource))
  name.vb: SingleOrDefault(Of TSource)(IEnumerableExpression(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
    name: SingleOrDefault<TSource>
    nameWithType: ExpressionExtensions.SingleOrDefault<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
    name: SingleOrDefault(Of TSource)
    nameWithType: ExpressionExtensions.SingleOrDefault(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: SingleOrDefault<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  nameWithType: ExpressionExtensions.SingleOrDefault<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  nameWithType.vb: ExpressionExtensions.SingleOrDefault(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: SingleOrDefault(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: SingleOrDefault<TSource>
    nameWithType: ExpressionExtensions.SingleOrDefault<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: SingleOrDefault(Of TSource)
    nameWithType: ExpressionExtensions.SingleOrDefault(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  isExternal: true
  name: SingleOrDefault<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>, Func<TSource, Boolean>)
  nameWithType: ExpressionExtensions.SingleOrDefault<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>, Func<TSource, Boolean>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>, System.Func<TSource, System.Boolean>)
  nameWithType.vb: ExpressionExtensions.SingleOrDefault(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)), Func(Of TSource, Boolean))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)), System.Func(Of TSource, System.Boolean))
  name.vb: SingleOrDefault(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)), Func(Of TSource, Boolean))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
    name: SingleOrDefault<TSource>
    nameWithType: ExpressionExtensions.SingleOrDefault<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
    name: SingleOrDefault(Of TSource)
    nameWithType: ExpressionExtensions.SingleOrDefault(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Int32>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Int32>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Int32)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32)))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Int32)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Sum<TSource>
    nameWithType: ExpressionExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Sum(Of TSource)
    nameWithType: ExpressionExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Int64>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Int64>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Int64)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int64)))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Int64)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Sum<TSource>
    nameWithType: ExpressionExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Sum(Of TSource)
    nameWithType: ExpressionExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Single>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Single>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Single>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Single)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Single)))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Single)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Sum<TSource>
    nameWithType: ExpressionExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Sum(Of TSource)
    nameWithType: ExpressionExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Double>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Double>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Double>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Double)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Double)))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Double)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Sum<TSource>
    nameWithType: ExpressionExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Sum(Of TSource)
    nameWithType: ExpressionExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Decimal>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Decimal>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Decimal)))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Sum<TSource>
    nameWithType: ExpressionExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Sum(Of TSource)
    nameWithType: ExpressionExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Int32>>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Int32>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int32))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32))))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int32))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Sum<TSource>
    nameWithType: ExpressionExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Sum(Of TSource)
    nameWithType: ExpressionExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Int64>>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Int64>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int64))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64))))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int64))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Sum<TSource>
    nameWithType: ExpressionExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Sum(Of TSource)
    nameWithType: ExpressionExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Single>>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Single>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Single))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single))))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Single))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Sum<TSource>
    nameWithType: ExpressionExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Sum(Of TSource)
    nameWithType: ExpressionExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Double>>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Double>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Double))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double))))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Double))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Sum<TSource>
    nameWithType: ExpressionExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Sum(Of TSource)
    nameWithType: ExpressionExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Decimal>>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Decimal>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Decimal))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Decimal))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Sum<TSource>
    nameWithType: ExpressionExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Sum(Of TSource)
    nameWithType: ExpressionExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: TopX<TItem, TKey>(IEnumerableExpression<TItem>, Int32, Expression<Func<TItem, TKey>>)
  nameWithType: ExpressionExtensions.TopX<TItem, TKey>(IEnumerableExpression<TItem>, Int32, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX<TItem, TKey>(NMF.Expressions.IEnumerableExpression<TItem>, System.Int32, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ExpressionExtensions.TopX(Of TItem, TKey)(IEnumerableExpression(Of TItem), Int32, Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.TopX(Of TItem, TKey)(NMF.Expressions.IEnumerableExpression(Of TItem), System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: TopX(Of TItem, TKey)(IEnumerableExpression(Of TItem), Int32, Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: TopX<TItem, TKey>
    nameWithType: ExpressionExtensions.TopX<TItem, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: TopX(Of TItem, TKey)
    nameWithType: ExpressionExtensions.TopX(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: TopX<TItem, TKey>(IEnumerableExpression<TItem>, Int32, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ExpressionExtensions.TopX<TItem, TKey>(IEnumerableExpression<TItem>, Int32, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX<TItem, TKey>(NMF.Expressions.IEnumerableExpression<TItem>, System.Int32, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.TopX(Of TItem, TKey)(IEnumerableExpression(Of TItem), Int32, Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.TopX(Of TItem, TKey)(NMF.Expressions.IEnumerableExpression(Of TItem), System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: TopX(Of TItem, TKey)(IEnumerableExpression(Of TItem), Int32, Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: TopX<TItem, TKey>
    nameWithType: ExpressionExtensions.TopX<TItem, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: TopX(Of TItem, TKey)
    nameWithType: ExpressionExtensions.TopX(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Union<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  nameWithType: ExpressionExtensions.Union<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Union<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: ExpressionExtensions.Union(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Union(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Union(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: Union<TSource>
    nameWithType: ExpressionExtensions.Union<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Union<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: Union(Of TSource)
    nameWithType: ExpressionExtensions.Union(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Union(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Union<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ExpressionExtensions.Union<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Union<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ExpressionExtensions.Union(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Union(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Union(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Union<TSource>
    nameWithType: ExpressionExtensions.Union<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Union<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Union(Of TSource)
    nameWithType: ExpressionExtensions.Union(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Union(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: Where<T>(IEnumerableExpression<T>, Expression<Func<T, Boolean>>)
  nameWithType: ExpressionExtensions.Where<T>(IEnumerableExpression<T>, Expression<Func<T, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Where<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: ExpressionExtensions.Where(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Where(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Where(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where<T>
    nameWithType: ExpressionExtensions.Where<T>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Where<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where(Of T)
    nameWithType: ExpressionExtensions.Where(Of T)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Where(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  isExternal: true
  name: Where<T>(IEnumerableExpression<T>, Expression<Func<T, Boolean>>, Func<T, Boolean>)
  nameWithType: ExpressionExtensions.Where<T>(IEnumerableExpression<T>, Expression<Func<T, Boolean>>, Func<T, Boolean>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Where<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Func<T, System.Boolean>)
  nameWithType.vb: ExpressionExtensions.Where(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)), Func(Of T, Boolean))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Where(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Func(Of T, System.Boolean))
  name.vb: Where(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)), Func(Of T, Boolean))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
    name: Where<T>
    nameWithType: ExpressionExtensions.Where<T>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Where<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
    name: Where(Of T)
    nameWithType: ExpressionExtensions.Where(Of T)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Where(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: WithUpdates<T>(IEnumerable<T>)
  nameWithType: ObservableExtensions.WithUpdates<T>(IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.WithUpdates(Of T)(IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: WithUpdates(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
    name: WithUpdates<T>
    nameWithType: ObservableExtensions.WithUpdates<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
    name: WithUpdates(Of T)
    nameWithType: ObservableExtensions.WithUpdates(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions
  commentId: T:NMF.Expressions.Linq.ObservableExtensions
  parent: NMF.Expressions.Linq
  name: ObservableExtensions
  nameWithType: ObservableExtensions
  fullName: NMF.Expressions.Linq.ObservableExtensions
- uid: System.Linq.IGrouping`2
  commentId: T:System.Linq.IGrouping`2
  isExternal: true
  name: IGrouping<TKey, TElement>
  nameWithType: IGrouping<TKey, TElement>
  fullName: System.Linq.IGrouping<TKey, TElement>
  nameWithType.vb: IGrouping(Of TKey, TElement)
  fullName.vb: System.Linq.IGrouping(Of TKey, TElement)
  name.vb: IGrouping(Of TKey, TElement)
  spec.csharp:
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: true
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: NMF.Expressions.IEnumerableExpression`1
  commentId: T:NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<T>
  nameWithType: IEnumerableExpression<T>
  fullName: NMF.Expressions.IEnumerableExpression<T>
  nameWithType.vb: IEnumerableExpression(Of T)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T)
  name.vb: IEnumerableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
