### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.ISuccessorList
  commentId: T:NMF.Expressions.ISuccessorList
  id: ISuccessorList
  parent: NMF.Expressions
  children:
  - NMF.Expressions.ISuccessorList.Count
  - NMF.Expressions.ISuccessorList.GetSuccessor(System.Int32)
  - NMF.Expressions.ISuccessorList.HasSuccessors
  - NMF.Expressions.ISuccessorList.IsAttached
  - NMF.Expressions.ISuccessorList.Set(NMF.Expressions.INotifiable)
  - NMF.Expressions.ISuccessorList.SetDummy
  - NMF.Expressions.ISuccessorList.Unset(NMF.Expressions.INotifiable,System.Boolean)
  - NMF.Expressions.ISuccessorList.UnsetAll
  langs:
  - csharp
  - vb
  name: ISuccessorList
  nameWithType: ISuccessorList
  fullName: NMF.Expressions.ISuccessorList
  type: Interface
  source:
    remote:
      path: Expressions/Expressions/Public/ISuccessorList.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ISuccessorList
    path: src/Expressions/Expressions/Public/ISuccessorList.cs
    startLine: 7
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public interface ISuccessorList
    content.vb: Public Interface ISuccessorList
  extensionMethods:
  - NMF.Expressions.ISuccessorList.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
- uid: NMF.Expressions.ISuccessorList.Count
  commentId: P:NMF.Expressions.ISuccessorList.Count
  id: Count
  parent: NMF.Expressions.ISuccessorList
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ISuccessorList.Count
  fullName: NMF.Expressions.ISuccessorList.Count
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/ISuccessorList.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Count
    path: src/Expressions/Expressions/Public/ISuccessorList.cs
    startLine: 9
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property Count As Integer
  overload: NMF.Expressions.ISuccessorList.Count*
- uid: NMF.Expressions.ISuccessorList.GetSuccessor(System.Int32)
  commentId: M:NMF.Expressions.ISuccessorList.GetSuccessor(System.Int32)
  id: GetSuccessor(System.Int32)
  parent: NMF.Expressions.ISuccessorList
  langs:
  - csharp
  - vb
  name: GetSuccessor(int)
  nameWithType: ISuccessorList.GetSuccessor(int)
  fullName: NMF.Expressions.ISuccessorList.GetSuccessor(int)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/ISuccessorList.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetSuccessor
    path: src/Expressions/Expressions/Public/ISuccessorList.cs
    startLine: 11
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: INotifiable GetSuccessor(int index)
    parameters:
    - id: index
      type: System.Int32
    return:
      type: NMF.Expressions.INotifiable
    content.vb: Function GetSuccessor(index As Integer) As INotifiable
  overload: NMF.Expressions.ISuccessorList.GetSuccessor*
  nameWithType.vb: ISuccessorList.GetSuccessor(Integer)
  fullName.vb: NMF.Expressions.ISuccessorList.GetSuccessor(Integer)
  name.vb: GetSuccessor(Integer)
- uid: NMF.Expressions.ISuccessorList.HasSuccessors
  commentId: P:NMF.Expressions.ISuccessorList.HasSuccessors
  id: HasSuccessors
  parent: NMF.Expressions.ISuccessorList
  langs:
  - csharp
  - vb
  name: HasSuccessors
  nameWithType: ISuccessorList.HasSuccessors
  fullName: NMF.Expressions.ISuccessorList.HasSuccessors
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/ISuccessorList.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: HasSuccessors
    path: src/Expressions/Expressions/Public/ISuccessorList.cs
    startLine: 13
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: bool HasSuccessors { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property HasSuccessors As Boolean
  overload: NMF.Expressions.ISuccessorList.HasSuccessors*
- uid: NMF.Expressions.ISuccessorList.IsAttached
  commentId: P:NMF.Expressions.ISuccessorList.IsAttached
  id: IsAttached
  parent: NMF.Expressions.ISuccessorList
  langs:
  - csharp
  - vb
  name: IsAttached
  nameWithType: ISuccessorList.IsAttached
  fullName: NMF.Expressions.ISuccessorList.IsAttached
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/ISuccessorList.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsAttached
    path: src/Expressions/Expressions/Public/ISuccessorList.cs
    startLine: 15
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: bool IsAttached { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property IsAttached As Boolean
  overload: NMF.Expressions.ISuccessorList.IsAttached*
- uid: NMF.Expressions.ISuccessorList.Set(NMF.Expressions.INotifiable)
  commentId: M:NMF.Expressions.ISuccessorList.Set(NMF.Expressions.INotifiable)
  id: Set(NMF.Expressions.INotifiable)
  parent: NMF.Expressions.ISuccessorList
  langs:
  - csharp
  - vb
  name: Set(INotifiable)
  nameWithType: ISuccessorList.Set(INotifiable)
  fullName: NMF.Expressions.ISuccessorList.Set(NMF.Expressions.INotifiable)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/ISuccessorList.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Set
    path: src/Expressions/Expressions/Public/ISuccessorList.cs
    startLine: 17
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: void Set(INotifiable node)
    parameters:
    - id: node
      type: NMF.Expressions.INotifiable
    content.vb: Sub [Set](node As INotifiable)
  overload: NMF.Expressions.ISuccessorList.Set*
- uid: NMF.Expressions.ISuccessorList.SetDummy
  commentId: M:NMF.Expressions.ISuccessorList.SetDummy
  id: SetDummy
  parent: NMF.Expressions.ISuccessorList
  langs:
  - csharp
  - vb
  name: SetDummy()
  nameWithType: ISuccessorList.SetDummy()
  fullName: NMF.Expressions.ISuccessorList.SetDummy()
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/ISuccessorList.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SetDummy
    path: src/Expressions/Expressions/Public/ISuccessorList.cs
    startLine: 19
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: void SetDummy()
    content.vb: Sub SetDummy()
  overload: NMF.Expressions.ISuccessorList.SetDummy*
- uid: NMF.Expressions.ISuccessorList.Unset(NMF.Expressions.INotifiable,System.Boolean)
  commentId: M:NMF.Expressions.ISuccessorList.Unset(NMF.Expressions.INotifiable,System.Boolean)
  id: Unset(NMF.Expressions.INotifiable,System.Boolean)
  parent: NMF.Expressions.ISuccessorList
  langs:
  - csharp
  - vb
  name: Unset(INotifiable, bool)
  nameWithType: ISuccessorList.Unset(INotifiable, bool)
  fullName: NMF.Expressions.ISuccessorList.Unset(NMF.Expressions.INotifiable, bool)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/ISuccessorList.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Unset
    path: src/Expressions/Expressions/Public/ISuccessorList.cs
    startLine: 21
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: void Unset(INotifiable node, bool leaveDummy = false)
    parameters:
    - id: node
      type: NMF.Expressions.INotifiable
    - id: leaveDummy
      type: System.Boolean
    content.vb: Sub Unset(node As INotifiable, leaveDummy As Boolean = False)
  overload: NMF.Expressions.ISuccessorList.Unset*
  nameWithType.vb: ISuccessorList.Unset(INotifiable, Boolean)
  fullName.vb: NMF.Expressions.ISuccessorList.Unset(NMF.Expressions.INotifiable, Boolean)
  name.vb: Unset(INotifiable, Boolean)
- uid: NMF.Expressions.ISuccessorList.UnsetAll
  commentId: M:NMF.Expressions.ISuccessorList.UnsetAll
  id: UnsetAll
  parent: NMF.Expressions.ISuccessorList
  langs:
  - csharp
  - vb
  name: UnsetAll()
  nameWithType: ISuccessorList.UnsetAll()
  fullName: NMF.Expressions.ISuccessorList.UnsetAll()
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/ISuccessorList.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: UnsetAll
    path: src/Expressions/Expressions/Public/ISuccessorList.cs
    startLine: 23
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: void UnsetAll()
    content.vb: Sub UnsetAll()
  overload: NMF.Expressions.ISuccessorList.UnsetAll*
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
- uid: NMF.Expressions.ISuccessorList.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<ISuccessorList>(ISuccessorList)
  nameWithType: ExpressionExtensions.AsOne<ISuccessorList>(ISuccessorList)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<NMF.Expressions.ISuccessorList>(NMF.Expressions.ISuccessorList)
  nameWithType.vb: ExpressionExtensions.AsOne(Of ISuccessorList)(ISuccessorList)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of NMF.Expressions.ISuccessorList)(NMF.Expressions.ISuccessorList)
  name.vb: AsOne(Of ISuccessorList)(ISuccessorList)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.ISuccessorList)
    name: AsOne
  - name: <
  - uid: NMF.Expressions.ISuccessorList
    name: ISuccessorList
  - name: '>'
  - name: (
  - uid: NMF.Expressions.ISuccessorList
    name: ISuccessorList
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.ISuccessorList)
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.ISuccessorList
    name: ISuccessorList
  - name: )
  - name: (
  - uid: NMF.Expressions.ISuccessorList
    name: ISuccessorList
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<T>(T)
  nameWithType: ExpressionExtensions.AsOne<T>(T)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<T>(T)
  nameWithType.vb: ExpressionExtensions.AsOne(Of T)(T)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of T)(T)
  name.vb: AsOne(Of T)(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  parent: NMF.Expressions.Linq
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
- uid: NMF.Expressions.ISuccessorList.Count*
  commentId: Overload:NMF.Expressions.ISuccessorList.Count
  name: Count
  nameWithType: ISuccessorList.Count
  fullName: NMF.Expressions.ISuccessorList.Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.ISuccessorList.GetSuccessor*
  commentId: Overload:NMF.Expressions.ISuccessorList.GetSuccessor
  name: GetSuccessor
  nameWithType: ISuccessorList.GetSuccessor
  fullName: NMF.Expressions.ISuccessorList.GetSuccessor
- uid: NMF.Expressions.INotifiable
  commentId: T:NMF.Expressions.INotifiable
  parent: NMF.Expressions
  name: INotifiable
  nameWithType: INotifiable
  fullName: NMF.Expressions.INotifiable
- uid: NMF.Expressions.ISuccessorList.HasSuccessors*
  commentId: Overload:NMF.Expressions.ISuccessorList.HasSuccessors
  name: HasSuccessors
  nameWithType: ISuccessorList.HasSuccessors
  fullName: NMF.Expressions.ISuccessorList.HasSuccessors
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: NMF.Expressions.ISuccessorList.IsAttached*
  commentId: Overload:NMF.Expressions.ISuccessorList.IsAttached
  name: IsAttached
  nameWithType: ISuccessorList.IsAttached
  fullName: NMF.Expressions.ISuccessorList.IsAttached
- uid: NMF.Expressions.ISuccessorList.Set*
  commentId: Overload:NMF.Expressions.ISuccessorList.Set
  name: Set
  nameWithType: ISuccessorList.Set
  fullName: NMF.Expressions.ISuccessorList.Set
- uid: NMF.Expressions.ISuccessorList.SetDummy*
  commentId: Overload:NMF.Expressions.ISuccessorList.SetDummy
  name: SetDummy
  nameWithType: ISuccessorList.SetDummy
  fullName: NMF.Expressions.ISuccessorList.SetDummy
- uid: NMF.Expressions.ISuccessorList.Unset*
  commentId: Overload:NMF.Expressions.ISuccessorList.Unset
  name: Unset
  nameWithType: ISuccessorList.Unset
  fullName: NMF.Expressions.ISuccessorList.Unset
- uid: NMF.Expressions.ISuccessorList.UnsetAll*
  commentId: Overload:NMF.Expressions.ISuccessorList.UnsetAll
  name: UnsetAll
  nameWithType: ISuccessorList.UnsetAll
  fullName: NMF.Expressions.ISuccessorList.UnsetAll
