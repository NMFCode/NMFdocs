### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave
  commentId: T:NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave
  id: IncrementalLookup`2.IncrementalLookupSlave
  parent: NMF.Expressions.Linq
  children:
  - NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.#ctor(NMF.Expressions.Linq.IncrementalLookup{`0,`1},`1)
  - NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.Dependencies
  - NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.GetEnumerator
  - NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.Items
  - NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.Key
  - NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  langs:
  - csharp
  - vb
  name: IncrementalLookup<TSource, TKey>.IncrementalLookupSlave
  nameWithType: IncrementalLookup<TSource, TKey>.IncrementalLookupSlave
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.IncrementalLookupSlave
  type: Class
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IncrementalLookupSlave
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 168
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: 'protected class IncrementalLookupSlave : ObservableEnumerable<TSource>, INotifyEnumerable<TSource>, INotifyEnumerable, INotifiable, ICollection<TSource>, IEnumerable<TSource>, IEnumerable, INotifyCollectionChanged, IDisposable'
    content.vb: >-
      Protected Class IncrementalLookupSlave

          Inherits ObservableEnumerable(Of TSource)

          Implements INotifyEnumerable(Of TSource), INotifyEnumerable, INotifiable, ICollection(Of TSource), IEnumerable(Of TSource), IEnumerable, INotifyCollectionChanged, IDisposable
  inheritance:
  - System.Object
  - NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  implements:
  - NMF.Expressions.INotifyEnumerable{{TSource}}
  - NMF.Expressions.INotifyEnumerable
  - NMF.Expressions.INotifiable
  - System.Collections.Generic.ICollection{{TSource}}
  - System.Collections.Generic.IEnumerable{{TSource}}
  - System.Collections.IEnumerable
  - System.Collections.Specialized.INotifyCollectionChanged
  - System.IDisposable
  inheritedMembers:
  - NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.OnAddItem({TSource},System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.OnAddItems(System.Collections.Generic.IEnumerable{{TSource}},System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.OnRemoveItem({TSource},System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.OnRemoveItems(System.Collections.Generic.IEnumerable{{TSource}},System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.OnReplaceItems(System.Collections.Generic.IEnumerable{{TSource}},System.Collections.Generic.IEnumerable{{TSource}},System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.OnCleared
  - NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.OnUpdateItem({TSource},{TSource},System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.OnMoveItem({TSource},System.Int32,System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.OnMoveItems(System.Collections.Generic.IEnumerable{{TSource}},System.Int32,System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.HasEventSubscriber
  - NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  - NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.CollectionChanged
  - NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.System#Collections#IEnumerable#GetEnumerator
  - NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.Dispose
  - NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.Dispose(System.Boolean)
  - NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.System#Collections#Generic#ICollection{T}#Add({TSource})
  - NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.System#Collections#Generic#ICollection{T}#Clear
  - NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.System#Collections#Generic#ICollection{T}#IsReadOnly
  - NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.System#Collections#Generic#ICollection{T}#Remove({TSource})
  - NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.Contains({TSource})
  - NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.CopyTo({TSource}[],System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.Count
  - NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.Successors
  - NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.ExecutionMetaData
  - NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.OnAttach
  - NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.OnDetach
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}})
  - System.Collections.Generic.IEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  - System.Collections.Generic.ICollection{`0}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).IncrementalLookupSlave
  modifiers.csharp:
  - protected
  - class
  modifiers.vb:
  - Protected
  - Class
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).IncrementalLookupSlave
  name.vb: IncrementalLookup(Of TSource, TKey).IncrementalLookupSlave
- uid: NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.Key
  commentId: P:NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.Key
  id: Key
  parent: NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave
  langs:
  - csharp
  - vb
  name: Key
  nameWithType: IncrementalLookup<TSource, TKey>.IncrementalLookupSlave.Key
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.IncrementalLookupSlave.Key
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Key
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 173
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: public TKey Key { get; }
    parameters: []
    return:
      type: '{TKey}'
    content.vb: Public ReadOnly Property Key As TKey
  overload: NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.Key*
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).IncrementalLookupSlave.Key
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).IncrementalLookupSlave.Key
- uid: NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.Items
  commentId: P:NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.Items
  id: Items
  parent: NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave
  langs:
  - csharp
  - vb
  name: Items
  nameWithType: IncrementalLookup<TSource, TKey>.IncrementalLookupSlave.Items
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.IncrementalLookupSlave.Items
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Items
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 175
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: public List<TSource> Items { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{{TSource}}
    content.vb: Public ReadOnly Property Items As List(Of TSource)
  overload: NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.Items*
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).IncrementalLookupSlave.Items
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).IncrementalLookupSlave.Items
- uid: NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.#ctor(NMF.Expressions.Linq.IncrementalLookup{`0,`1},`1)
  commentId: M:NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.#ctor(NMF.Expressions.Linq.IncrementalLookup{`0,`1},`1)
  id: '#ctor(NMF.Expressions.Linq.IncrementalLookup{`0,`1},`1)'
  parent: NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave
  langs:
  - csharp
  - vb
  name: IncrementalLookupSlave(IncrementalLookup<TSource, TKey>, TKey)
  nameWithType: IncrementalLookup<TSource, TKey>.IncrementalLookupSlave.IncrementalLookupSlave(IncrementalLookup<TSource, TKey>, TKey)
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.IncrementalLookupSlave.IncrementalLookupSlave(NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>, TKey)
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 177
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: public IncrementalLookupSlave(IncrementalLookup<TSource, TKey> parent, TKey key)
    parameters:
    - id: parent
      type: NMF.Expressions.Linq.IncrementalLookup`2
    - id: key
      type: '{TKey}'
    content.vb: Public Sub New(parent As IncrementalLookup(Of TSource, TKey), key As TKey)
  overload: NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.#ctor*
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).IncrementalLookupSlave.IncrementalLookupSlave(IncrementalLookup(Of TSource, TKey), TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).IncrementalLookupSlave.IncrementalLookupSlave(NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey), TKey)
  name.vb: IncrementalLookupSlave(IncrementalLookup(Of TSource, TKey), TKey)
- uid: NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.Dependencies
  commentId: P:NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.Dependencies
  id: Dependencies
  parent: NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave
  langs:
  - csharp
  - vb
  name: Dependencies
  nameWithType: IncrementalLookup<TSource, TKey>.IncrementalLookupSlave.Dependencies
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.IncrementalLookupSlave.Dependencies
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Dependencies
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 183
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: public override IEnumerable<INotifiable> Dependencies { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
    content.vb: Public Overrides ReadOnly Property Dependencies As IEnumerable(Of INotifiable)
  overridden: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.Dependencies
  overload: NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.Dependencies*
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).IncrementalLookupSlave.Dependencies
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).IncrementalLookupSlave.Dependencies
- uid: NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.GetEnumerator
  commentId: M:NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.GetEnumerator
  id: GetEnumerator
  parent: NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: IncrementalLookup<TSource, TKey>.IncrementalLookupSlave.GetEnumerator()
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.IncrementalLookupSlave.GetEnumerator()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetEnumerator
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 191
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: public override IEnumerator<TSource> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{TSource}}
    content.vb: Public Overrides Function GetEnumerator As IEnumerator(Of TSource)
  overridden: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.GetEnumerator
  overload: NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.GetEnumerator*
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).IncrementalLookupSlave.GetEnumerator()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).IncrementalLookupSlave.GetEnumerator()
- uid: NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  commentId: M:NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  id: Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  parent: NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave
  langs:
  - csharp
  - vb
  name: Notify(IList<INotificationResult>)
  nameWithType: IncrementalLookup<TSource, TKey>.IncrementalLookupSlave.Notify(IList<INotificationResult>)
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.IncrementalLookupSlave.Notify(System.Collections.Generic.IList<NMF.Expressions.INotificationResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Notify
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 196
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: public override INotificationResult Notify(IList<INotificationResult> sources)
    parameters:
    - id: sources
      type: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
    return:
      type: NMF.Expressions.INotificationResult
    content.vb: Public Overrides Function Notify(sources As IList(Of INotificationResult)) As INotificationResult
  overridden: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  overload: NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.Notify*
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).IncrementalLookupSlave.Notify(IList(Of INotificationResult))
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).IncrementalLookupSlave.Notify(System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
references:
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  commentId: T:NMF.Expressions.Linq.ObservableEnumerable{`0}
  parent: NMF.Expressions.Linq
  definition: NMF.Expressions.Linq.ObservableEnumerable`1
  name: ObservableEnumerable<TSource>
  nameWithType: ObservableEnumerable<TSource>
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>
  nameWithType.vb: ObservableEnumerable(Of TSource)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource)
  name.vb: ObservableEnumerable(Of TSource)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1
    name: ObservableEnumerable
    nameWithType: ObservableEnumerable
    fullName: NMF.Expressions.Linq.ObservableEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1
    name: ObservableEnumerable
    nameWithType: ObservableEnumerable
    fullName: NMF.Expressions.Linq.ObservableEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{{TSource}}
  commentId: T:NMF.Expressions.INotifyEnumerable{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<TSource>
  nameWithType: INotifyEnumerable<TSource>
  fullName: NMF.Expressions.INotifyEnumerable<TSource>
  nameWithType.vb: INotifyEnumerable(Of TSource)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of TSource)
  name.vb: INotifyEnumerable(Of TSource)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable
  commentId: T:NMF.Expressions.INotifyEnumerable
  parent: NMF.Expressions
  name: INotifyEnumerable
  nameWithType: INotifyEnumerable
  fullName: NMF.Expressions.INotifyEnumerable
- uid: NMF.Expressions.INotifiable
  commentId: T:NMF.Expressions.INotifiable
  parent: NMF.Expressions
  name: INotifiable
  nameWithType: INotifiable
  fullName: NMF.Expressions.INotifiable
- uid: System.Collections.Generic.ICollection{{TSource}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TSource>
  nameWithType: ICollection<TSource>
  fullName: System.Collections.Generic.ICollection<TSource>
  nameWithType.vb: ICollection(Of TSource)
  fullName.vb: System.Collections.Generic.ICollection(Of TSource)
  name.vb: ICollection(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  nameWithType.vb: IEnumerable(Of TSource)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TSource)
  name.vb: IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Specialized.INotifyCollectionChanged
  commentId: T:System.Collections.Specialized.INotifyCollectionChanged
  parent: System.Collections.Specialized
  isExternal: true
  name: INotifyCollectionChanged
  nameWithType: INotifyCollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.OnAddItem({TSource},System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`0}.OnAddItem(`0,System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItem(`0,System.Int32)
  name: OnAddItem(TSource, Int32)
  nameWithType: ObservableEnumerable<TSource>.OnAddItem(TSource, Int32)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.OnAddItem(TSource, System.Int32)
  nameWithType.vb: ObservableEnumerable(Of TSource).OnAddItem(TSource, Int32)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).OnAddItem(TSource, System.Int32)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItem(`0,System.Int32)
    name: OnAddItem
    nameWithType: ObservableEnumerable<TSource>.OnAddItem
    fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.OnAddItem
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItem(`0,System.Int32)
    name: OnAddItem
    nameWithType: ObservableEnumerable(Of TSource).OnAddItem
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).OnAddItem
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.OnAddItems(System.Collections.Generic.IEnumerable{{TSource}},System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`0}.OnAddItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
  name: OnAddItems(IEnumerable<TSource>, Int32)
  nameWithType: ObservableEnumerable<TSource>.OnAddItems(IEnumerable<TSource>, Int32)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.OnAddItems(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
  nameWithType.vb: ObservableEnumerable(Of TSource).OnAddItems(IEnumerable(Of TSource), Int32)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).OnAddItems(System.Collections.Generic.IEnumerable(Of TSource), System.Int32)
  name.vb: OnAddItems(IEnumerable(Of TSource), Int32)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
    name: OnAddItems
    nameWithType: ObservableEnumerable<TSource>.OnAddItems
    fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.OnAddItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
    name: OnAddItems
    nameWithType: ObservableEnumerable(Of TSource).OnAddItems
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).OnAddItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.OnRemoveItem({TSource},System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`0}.OnRemoveItem(`0,System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItem(`0,System.Int32)
  name: OnRemoveItem(TSource, Int32)
  nameWithType: ObservableEnumerable<TSource>.OnRemoveItem(TSource, Int32)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.OnRemoveItem(TSource, System.Int32)
  nameWithType.vb: ObservableEnumerable(Of TSource).OnRemoveItem(TSource, Int32)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).OnRemoveItem(TSource, System.Int32)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItem(`0,System.Int32)
    name: OnRemoveItem
    nameWithType: ObservableEnumerable<TSource>.OnRemoveItem
    fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.OnRemoveItem
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItem(`0,System.Int32)
    name: OnRemoveItem
    nameWithType: ObservableEnumerable(Of TSource).OnRemoveItem
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).OnRemoveItem
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.OnRemoveItems(System.Collections.Generic.IEnumerable{{TSource}},System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`0}.OnRemoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
  name: OnRemoveItems(IEnumerable<TSource>, Int32)
  nameWithType: ObservableEnumerable<TSource>.OnRemoveItems(IEnumerable<TSource>, Int32)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.OnRemoveItems(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
  nameWithType.vb: ObservableEnumerable(Of TSource).OnRemoveItems(IEnumerable(Of TSource), Int32)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).OnRemoveItems(System.Collections.Generic.IEnumerable(Of TSource), System.Int32)
  name.vb: OnRemoveItems(IEnumerable(Of TSource), Int32)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
    name: OnRemoveItems
    nameWithType: ObservableEnumerable<TSource>.OnRemoveItems
    fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.OnRemoveItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
    name: OnRemoveItems
    nameWithType: ObservableEnumerable(Of TSource).OnRemoveItems
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).OnRemoveItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.OnReplaceItems(System.Collections.Generic.IEnumerable{{TSource}},System.Collections.Generic.IEnumerable{{TSource}},System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`0}.OnReplaceItems(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.OnReplaceItems(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Int32)
  name: OnReplaceItems(IEnumerable<TSource>, IEnumerable<TSource>, Int32)
  nameWithType: ObservableEnumerable<TSource>.OnReplaceItems(IEnumerable<TSource>, IEnumerable<TSource>, Int32)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.OnReplaceItems(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Int32)
  nameWithType.vb: ObservableEnumerable(Of TSource).OnReplaceItems(IEnumerable(Of TSource), IEnumerable(Of TSource), Int32)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).OnReplaceItems(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Int32)
  name.vb: OnReplaceItems(IEnumerable(Of TSource), IEnumerable(Of TSource), Int32)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnReplaceItems(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Int32)
    name: OnReplaceItems
    nameWithType: ObservableEnumerable<TSource>.OnReplaceItems
    fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.OnReplaceItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnReplaceItems(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Int32)
    name: OnReplaceItems
    nameWithType: ObservableEnumerable(Of TSource).OnReplaceItems
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).OnReplaceItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.OnCleared
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`0}.OnCleared
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.OnCleared
  name: OnCleared()
  nameWithType: ObservableEnumerable<TSource>.OnCleared()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.OnCleared()
  nameWithType.vb: ObservableEnumerable(Of TSource).OnCleared()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).OnCleared()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnCleared
    name: OnCleared
    nameWithType: ObservableEnumerable<TSource>.OnCleared
    fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.OnCleared
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnCleared
    name: OnCleared
    nameWithType: ObservableEnumerable(Of TSource).OnCleared
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).OnCleared
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.OnUpdateItem({TSource},{TSource},System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`0}.OnUpdateItem(`0,`0,System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.OnUpdateItem(`0,`0,System.Int32)
  name: OnUpdateItem(TSource, TSource, Int32)
  nameWithType: ObservableEnumerable<TSource>.OnUpdateItem(TSource, TSource, Int32)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.OnUpdateItem(TSource, TSource, System.Int32)
  nameWithType.vb: ObservableEnumerable(Of TSource).OnUpdateItem(TSource, TSource, Int32)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).OnUpdateItem(TSource, TSource, System.Int32)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnUpdateItem(`0,`0,System.Int32)
    name: OnUpdateItem
    nameWithType: ObservableEnumerable<TSource>.OnUpdateItem
    fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.OnUpdateItem
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnUpdateItem(`0,`0,System.Int32)
    name: OnUpdateItem
    nameWithType: ObservableEnumerable(Of TSource).OnUpdateItem
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).OnUpdateItem
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.OnMoveItem({TSource},System.Int32,System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`0}.OnMoveItem(`0,System.Int32,System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItem(`0,System.Int32,System.Int32)
  name: OnMoveItem(TSource, Int32, Int32)
  nameWithType: ObservableEnumerable<TSource>.OnMoveItem(TSource, Int32, Int32)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.OnMoveItem(TSource, System.Int32, System.Int32)
  nameWithType.vb: ObservableEnumerable(Of TSource).OnMoveItem(TSource, Int32, Int32)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).OnMoveItem(TSource, System.Int32, System.Int32)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItem(`0,System.Int32,System.Int32)
    name: OnMoveItem
    nameWithType: ObservableEnumerable<TSource>.OnMoveItem
    fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.OnMoveItem
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItem(`0,System.Int32,System.Int32)
    name: OnMoveItem
    nameWithType: ObservableEnumerable(Of TSource).OnMoveItem
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).OnMoveItem
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.OnMoveItems(System.Collections.Generic.IEnumerable{{TSource}},System.Int32,System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`0}.OnMoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)
  name: OnMoveItems(IEnumerable<TSource>, Int32, Int32)
  nameWithType: ObservableEnumerable<TSource>.OnMoveItems(IEnumerable<TSource>, Int32, Int32)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.OnMoveItems(System.Collections.Generic.IEnumerable<TSource>, System.Int32, System.Int32)
  nameWithType.vb: ObservableEnumerable(Of TSource).OnMoveItems(IEnumerable(Of TSource), Int32, Int32)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).OnMoveItems(System.Collections.Generic.IEnumerable(Of TSource), System.Int32, System.Int32)
  name.vb: OnMoveItems(IEnumerable(Of TSource), Int32, Int32)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)
    name: OnMoveItems
    nameWithType: ObservableEnumerable<TSource>.OnMoveItems
    fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.OnMoveItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)
    name: OnMoveItems
    nameWithType: ObservableEnumerable(Of TSource).OnMoveItems
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).OnMoveItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.HasEventSubscriber
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable{`0}.HasEventSubscriber
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.HasEventSubscriber
  name: HasEventSubscriber
  nameWithType: ObservableEnumerable<TSource>.HasEventSubscriber
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.HasEventSubscriber
  nameWithType.vb: ObservableEnumerable(Of TSource).HasEventSubscriber
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).HasEventSubscriber
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`0}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  name: OnCollectionChanged(NotifyCollectionChangedEventArgs)
  nameWithType: ObservableEnumerable<TSource>.OnCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  nameWithType.vb: ObservableEnumerable(Of TSource).OnCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanged
    nameWithType: ObservableEnumerable<TSource>.OnCollectionChanged
    fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.OnCollectionChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    nameWithType: NotifyCollectionChangedEventArgs
    fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanged
    nameWithType: ObservableEnumerable(Of TSource).OnCollectionChanged
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).OnCollectionChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    nameWithType: NotifyCollectionChangedEventArgs
    fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.CollectionChanged
  commentId: E:NMF.Expressions.Linq.ObservableEnumerable{`0}.CollectionChanged
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.CollectionChanged
  name: CollectionChanged
  nameWithType: ObservableEnumerable<TSource>.CollectionChanged
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.CollectionChanged
  nameWithType.vb: ObservableEnumerable(Of TSource).CollectionChanged
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).CollectionChanged
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.System#Collections#IEnumerable#GetEnumerator
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`0}.System#Collections#IEnumerable#GetEnumerator
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator()
  nameWithType: ObservableEnumerable<TSource>.IEnumerable.GetEnumerator()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: ObservableEnumerable(Of TSource).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: ObservableEnumerable<TSource>.IEnumerable.GetEnumerator
    fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: ObservableEnumerable(Of TSource).System.Collections.IEnumerable.GetEnumerator
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.Dispose
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`0}.Dispose
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.Dispose
  name: Dispose()
  nameWithType: ObservableEnumerable<TSource>.Dispose()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.Dispose()
  nameWithType.vb: ObservableEnumerable(Of TSource).Dispose()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).Dispose()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Dispose
    name: Dispose
    nameWithType: ObservableEnumerable<TSource>.Dispose
    fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Dispose
    name: Dispose
    nameWithType: ObservableEnumerable(Of TSource).Dispose
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.Dispose(System.Boolean)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`0}.Dispose(System.Boolean)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.Dispose(System.Boolean)
  name: Dispose(Boolean)
  nameWithType: ObservableEnumerable<TSource>.Dispose(Boolean)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.Dispose(System.Boolean)
  nameWithType.vb: ObservableEnumerable(Of TSource).Dispose(Boolean)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).Dispose(System.Boolean)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Dispose(System.Boolean)
    name: Dispose
    nameWithType: ObservableEnumerable<TSource>.Dispose
    fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Dispose(System.Boolean)
    name: Dispose
    nameWithType: ObservableEnumerable(Of TSource).Dispose
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.System#Collections#Generic#ICollection{T}#Add({TSource})
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`0}.System#Collections#Generic#ICollection{T}#Add(`0)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Add(`0)
  name: ICollection<TSource>.Add(TSource)
  nameWithType: ObservableEnumerable<TSource>.ICollection<TSource>.Add(TSource)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.System.Collections.Generic.ICollection<TSource>.Add(TSource)
  nameWithType.vb: ObservableEnumerable(Of TSource).System.Collections.Generic.ICollection<T>.Add(TSource)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).System.Collections.Generic.ICollection<T>.Add(TSource)
  name.vb: System.Collections.Generic.ICollection<T>.Add(TSource)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Add(`0)
    name: ICollection<TSource>.Add
    nameWithType: ObservableEnumerable<TSource>.ICollection<TSource>.Add
    fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.System.Collections.Generic.ICollection<TSource>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Add(`0)
    name: System.Collections.Generic.ICollection<T>.Add
    nameWithType: ObservableEnumerable(Of TSource).System.Collections.Generic.ICollection<T>.Add
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).System.Collections.Generic.ICollection<T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.System#Collections#Generic#ICollection{T}#Clear
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`0}.System#Collections#Generic#ICollection{T}#Clear
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Clear
  name: ICollection<TSource>.Clear()
  nameWithType: ObservableEnumerable<TSource>.ICollection<TSource>.Clear()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.System.Collections.Generic.ICollection<TSource>.Clear()
  nameWithType.vb: ObservableEnumerable(Of TSource).System.Collections.Generic.ICollection<T>.Clear()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).System.Collections.Generic.ICollection<T>.Clear()
  name.vb: System.Collections.Generic.ICollection<T>.Clear()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Clear
    name: ICollection<TSource>.Clear
    nameWithType: ObservableEnumerable<TSource>.ICollection<TSource>.Clear
    fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.System.Collections.Generic.ICollection<TSource>.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Clear
    name: System.Collections.Generic.ICollection<T>.Clear
    nameWithType: ObservableEnumerable(Of TSource).System.Collections.Generic.ICollection<T>.Clear
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).System.Collections.Generic.ICollection<T>.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable{`0}.System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  name: ICollection<TSource>.IsReadOnly
  nameWithType: ObservableEnumerable<TSource>.ICollection<TSource>.IsReadOnly
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.System.Collections.Generic.ICollection<TSource>.IsReadOnly
  nameWithType.vb: ObservableEnumerable(Of TSource).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.System#Collections#Generic#ICollection{T}#Remove({TSource})
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`0}.System#Collections#Generic#ICollection{T}#Remove(`0)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  name: ICollection<TSource>.Remove(TSource)
  nameWithType: ObservableEnumerable<TSource>.ICollection<TSource>.Remove(TSource)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.System.Collections.Generic.ICollection<TSource>.Remove(TSource)
  nameWithType.vb: ObservableEnumerable(Of TSource).System.Collections.Generic.ICollection<T>.Remove(TSource)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).System.Collections.Generic.ICollection<T>.Remove(TSource)
  name.vb: System.Collections.Generic.ICollection<T>.Remove(TSource)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Remove(`0)
    name: ICollection<TSource>.Remove
    nameWithType: ObservableEnumerable<TSource>.ICollection<TSource>.Remove
    fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.System.Collections.Generic.ICollection<TSource>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Remove(`0)
    name: System.Collections.Generic.ICollection<T>.Remove
    nameWithType: ObservableEnumerable(Of TSource).System.Collections.Generic.ICollection<T>.Remove
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).System.Collections.Generic.ICollection<T>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.Contains({TSource})
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`0}.Contains(`0)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.Contains(`0)
  name: Contains(TSource)
  nameWithType: ObservableEnumerable<TSource>.Contains(TSource)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.Contains(TSource)
  nameWithType.vb: ObservableEnumerable(Of TSource).Contains(TSource)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).Contains(TSource)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Contains(`0)
    name: Contains
    nameWithType: ObservableEnumerable<TSource>.Contains
    fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.Contains
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Contains(`0)
    name: Contains
    nameWithType: ObservableEnumerable(Of TSource).Contains
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).Contains
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.CopyTo({TSource}[],System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`0}.CopyTo(`0[],System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.CopyTo(`0[],System.Int32)
  name: CopyTo(TSource[], Int32)
  nameWithType: ObservableEnumerable<TSource>.CopyTo(TSource[], Int32)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.CopyTo(TSource[], System.Int32)
  nameWithType.vb: ObservableEnumerable(Of TSource).CopyTo(TSource(), Int32)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).CopyTo(TSource(), System.Int32)
  name.vb: CopyTo(TSource(), Int32)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ObservableEnumerable<TSource>.CopyTo
    fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ObservableEnumerable(Of TSource).CopyTo
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.Count
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable{`0}.Count
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.Count
  name: Count
  nameWithType: ObservableEnumerable<TSource>.Count
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.Count
  nameWithType.vb: ObservableEnumerable(Of TSource).Count
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).Count
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.Successors
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable{`0}.Successors
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.Successors
  name: Successors
  nameWithType: ObservableEnumerable<TSource>.Successors
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.Successors
  nameWithType.vb: ObservableEnumerable(Of TSource).Successors
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).Successors
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.ExecutionMetaData
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable{`0}.ExecutionMetaData
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.ExecutionMetaData
  name: ExecutionMetaData
  nameWithType: ObservableEnumerable<TSource>.ExecutionMetaData
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.ExecutionMetaData
  nameWithType.vb: ObservableEnumerable(Of TSource).ExecutionMetaData
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).ExecutionMetaData
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.OnAttach
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`0}.OnAttach
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.OnAttach
  name: OnAttach()
  nameWithType: ObservableEnumerable<TSource>.OnAttach()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.OnAttach()
  nameWithType.vb: ObservableEnumerable(Of TSource).OnAttach()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).OnAttach()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAttach
    name: OnAttach
    nameWithType: ObservableEnumerable<TSource>.OnAttach
    fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.OnAttach
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAttach
    name: OnAttach
    nameWithType: ObservableEnumerable(Of TSource).OnAttach
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).OnAttach
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.OnDetach
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`0}.OnDetach
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.OnDetach
  name: OnDetach()
  nameWithType: ObservableEnumerable<TSource>.OnDetach()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.OnDetach()
  nameWithType.vb: ObservableEnumerable(Of TSource).OnDetach()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).OnDetach()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnDetach
    name: OnDetach
    nameWithType: ObservableEnumerable<TSource>.OnDetach
    fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.OnDetach
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnDetach
    name: OnDetach
    nameWithType: ObservableEnumerable(Of TSource).OnDetach
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).OnDetach
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}})
  commentId: M:NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.LookupExtensions
  definition: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: ToLookup<TSource, TKey>(Expression<Func<TSource, TKey>>)
  nameWithType: LookupExtensions.ToLookup<TSource, TKey>(Expression<Func<TSource, TKey>>)
  fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TSource, TKey>(System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  nameWithType.vb: LookupExtensions.ToLookup(Of TSource, TKey)(Expression(Of Func(Of TSource, TKey)))
  fullName.vb: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TSource, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: ToLookup(Of TSource, TKey)(Expression(Of Func(Of TSource, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup<TSource, TKey>
    nameWithType: LookupExtensions.ToLookup<TSource, TKey>
    fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TSource, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup(Of TSource, TKey)
    nameWithType: LookupExtensions.ToLookup(Of TSource, TKey)
    fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TSource, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  name: WithUpdates<T>()
  nameWithType: ObservableExtensions.WithUpdates<T>()
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>()
  nameWithType.vb: ObservableExtensions.WithUpdates(Of T)()
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)()
  name.vb: WithUpdates(Of T)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
    name: WithUpdates<T>
    nameWithType: ObservableExtensions.WithUpdates<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
    name: WithUpdates(Of T)
    nameWithType: ObservableExtensions.WithUpdates(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{`0}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
  name: WithUpdates<T>()
  nameWithType: ObservableExtensions.WithUpdates<T>()
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>()
  nameWithType.vb: ObservableExtensions.WithUpdates(Of T)()
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)()
  name.vb: WithUpdates(Of T)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
    name: WithUpdates<T>
    nameWithType: ObservableExtensions.WithUpdates<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
    name: WithUpdates(Of T)
    nameWithType: ObservableExtensions.WithUpdates(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.Linq.ObservableEnumerable`1
  commentId: T:NMF.Expressions.Linq.ObservableEnumerable`1
  name: ObservableEnumerable<T>
  nameWithType: ObservableEnumerable<T>
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>
  nameWithType.vb: ObservableEnumerable(Of T)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T)
  name.vb: ObservableEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1
    name: ObservableEnumerable
    nameWithType: ObservableEnumerable
    fullName: NMF.Expressions.Linq.ObservableEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1
    name: ObservableEnumerable
    nameWithType: ObservableEnumerable
    fullName: NMF.Expressions.Linq.ObservableEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable`1
  commentId: T:NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<T>
  nameWithType: INotifyEnumerable<T>
  fullName: NMF.Expressions.INotifyEnumerable<T>
  nameWithType.vb: INotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of T)
  name.vb: INotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Specialized
  commentId: N:System.Collections.Specialized
  isExternal: true
  name: System.Collections.Specialized
  nameWithType: System.Collections.Specialized
  fullName: System.Collections.Specialized
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItem(`0,System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItem(`0,System.Int32)
  isExternal: true
  name: OnAddItem(T, Int32)
  nameWithType: ObservableEnumerable<T>.OnAddItem(T, Int32)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnAddItem(T, System.Int32)
  nameWithType.vb: ObservableEnumerable(Of T).OnAddItem(T, Int32)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnAddItem(T, System.Int32)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItem(`0,System.Int32)
    name: OnAddItem
    nameWithType: ObservableEnumerable<T>.OnAddItem
    fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnAddItem
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItem(`0,System.Int32)
    name: OnAddItem
    nameWithType: ObservableEnumerable(Of T).OnAddItem
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnAddItem
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
  isExternal: true
  name: OnAddItems(IEnumerable<T>, Int32)
  nameWithType: ObservableEnumerable<T>.OnAddItems(IEnumerable<T>, Int32)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnAddItems(System.Collections.Generic.IEnumerable<T>, System.Int32)
  nameWithType.vb: ObservableEnumerable(Of T).OnAddItems(IEnumerable(Of T), Int32)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnAddItems(System.Collections.Generic.IEnumerable(Of T), System.Int32)
  name.vb: OnAddItems(IEnumerable(Of T), Int32)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
    name: OnAddItems
    nameWithType: ObservableEnumerable<T>.OnAddItems
    fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnAddItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
    name: OnAddItems
    nameWithType: ObservableEnumerable(Of T).OnAddItems
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnAddItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItem(`0,System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItem(`0,System.Int32)
  isExternal: true
  name: OnRemoveItem(T, Int32)
  nameWithType: ObservableEnumerable<T>.OnRemoveItem(T, Int32)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnRemoveItem(T, System.Int32)
  nameWithType.vb: ObservableEnumerable(Of T).OnRemoveItem(T, Int32)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnRemoveItem(T, System.Int32)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItem(`0,System.Int32)
    name: OnRemoveItem
    nameWithType: ObservableEnumerable<T>.OnRemoveItem
    fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnRemoveItem
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItem(`0,System.Int32)
    name: OnRemoveItem
    nameWithType: ObservableEnumerable(Of T).OnRemoveItem
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnRemoveItem
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
  isExternal: true
  name: OnRemoveItems(IEnumerable<T>, Int32)
  nameWithType: ObservableEnumerable<T>.OnRemoveItems(IEnumerable<T>, Int32)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnRemoveItems(System.Collections.Generic.IEnumerable<T>, System.Int32)
  nameWithType.vb: ObservableEnumerable(Of T).OnRemoveItems(IEnumerable(Of T), Int32)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnRemoveItems(System.Collections.Generic.IEnumerable(Of T), System.Int32)
  name.vb: OnRemoveItems(IEnumerable(Of T), Int32)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
    name: OnRemoveItems
    nameWithType: ObservableEnumerable<T>.OnRemoveItems
    fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnRemoveItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
    name: OnRemoveItems
    nameWithType: ObservableEnumerable(Of T).OnRemoveItems
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnRemoveItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnReplaceItems(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnReplaceItems(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Int32)
  isExternal: true
  name: OnReplaceItems(IEnumerable<T>, IEnumerable<T>, Int32)
  nameWithType: ObservableEnumerable<T>.OnReplaceItems(IEnumerable<T>, IEnumerable<T>, Int32)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnReplaceItems(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Int32)
  nameWithType.vb: ObservableEnumerable(Of T).OnReplaceItems(IEnumerable(Of T), IEnumerable(Of T), Int32)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnReplaceItems(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Int32)
  name.vb: OnReplaceItems(IEnumerable(Of T), IEnumerable(Of T), Int32)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnReplaceItems(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Int32)
    name: OnReplaceItems
    nameWithType: ObservableEnumerable<T>.OnReplaceItems
    fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnReplaceItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnReplaceItems(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Int32)
    name: OnReplaceItems
    nameWithType: ObservableEnumerable(Of T).OnReplaceItems
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnReplaceItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnCleared
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnCleared
  name: OnCleared()
  nameWithType: ObservableEnumerable<T>.OnCleared()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnCleared()
  nameWithType.vb: ObservableEnumerable(Of T).OnCleared()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnCleared()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnCleared
    name: OnCleared
    nameWithType: ObservableEnumerable<T>.OnCleared
    fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnCleared
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnCleared
    name: OnCleared
    nameWithType: ObservableEnumerable(Of T).OnCleared
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnCleared
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnUpdateItem(`0,`0,System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnUpdateItem(`0,`0,System.Int32)
  isExternal: true
  name: OnUpdateItem(T, T, Int32)
  nameWithType: ObservableEnumerable<T>.OnUpdateItem(T, T, Int32)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnUpdateItem(T, T, System.Int32)
  nameWithType.vb: ObservableEnumerable(Of T).OnUpdateItem(T, T, Int32)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnUpdateItem(T, T, System.Int32)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnUpdateItem(`0,`0,System.Int32)
    name: OnUpdateItem
    nameWithType: ObservableEnumerable<T>.OnUpdateItem
    fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnUpdateItem
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnUpdateItem(`0,`0,System.Int32)
    name: OnUpdateItem
    nameWithType: ObservableEnumerable(Of T).OnUpdateItem
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnUpdateItem
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItem(`0,System.Int32,System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItem(`0,System.Int32,System.Int32)
  isExternal: true
  name: OnMoveItem(T, Int32, Int32)
  nameWithType: ObservableEnumerable<T>.OnMoveItem(T, Int32, Int32)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnMoveItem(T, System.Int32, System.Int32)
  nameWithType.vb: ObservableEnumerable(Of T).OnMoveItem(T, Int32, Int32)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnMoveItem(T, System.Int32, System.Int32)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItem(`0,System.Int32,System.Int32)
    name: OnMoveItem
    nameWithType: ObservableEnumerable<T>.OnMoveItem
    fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnMoveItem
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItem(`0,System.Int32,System.Int32)
    name: OnMoveItem
    nameWithType: ObservableEnumerable(Of T).OnMoveItem
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnMoveItem
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)
  isExternal: true
  name: OnMoveItems(IEnumerable<T>, Int32, Int32)
  nameWithType: ObservableEnumerable<T>.OnMoveItems(IEnumerable<T>, Int32, Int32)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnMoveItems(System.Collections.Generic.IEnumerable<T>, System.Int32, System.Int32)
  nameWithType.vb: ObservableEnumerable(Of T).OnMoveItems(IEnumerable(Of T), Int32, Int32)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnMoveItems(System.Collections.Generic.IEnumerable(Of T), System.Int32, System.Int32)
  name.vb: OnMoveItems(IEnumerable(Of T), Int32, Int32)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)
    name: OnMoveItems
    nameWithType: ObservableEnumerable<T>.OnMoveItems
    fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnMoveItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)
    name: OnMoveItems
    nameWithType: ObservableEnumerable(Of T).OnMoveItems
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnMoveItems
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.HasEventSubscriber
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable`1.HasEventSubscriber
  name: HasEventSubscriber
  nameWithType: ObservableEnumerable<T>.HasEventSubscriber
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.HasEventSubscriber
  nameWithType.vb: ObservableEnumerable(Of T).HasEventSubscriber
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).HasEventSubscriber
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  isExternal: true
  name: OnCollectionChanged(NotifyCollectionChangedEventArgs)
  nameWithType: ObservableEnumerable<T>.OnCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  nameWithType.vb: ObservableEnumerable(Of T).OnCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanged
    nameWithType: ObservableEnumerable<T>.OnCollectionChanged
    fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnCollectionChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    nameWithType: NotifyCollectionChangedEventArgs
    fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanged
    nameWithType: ObservableEnumerable(Of T).OnCollectionChanged
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnCollectionChanged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    nameWithType: NotifyCollectionChangedEventArgs
    fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.CollectionChanged
  commentId: E:NMF.Expressions.Linq.ObservableEnumerable`1.CollectionChanged
  name: CollectionChanged
  nameWithType: ObservableEnumerable<T>.CollectionChanged
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.CollectionChanged
  nameWithType.vb: ObservableEnumerable(Of T).CollectionChanged
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).CollectionChanged
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator()
  nameWithType: ObservableEnumerable<T>.IEnumerable.GetEnumerator()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: ObservableEnumerable(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: ObservableEnumerable<T>.IEnumerable.GetEnumerator
    fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: ObservableEnumerable(Of T).System.Collections.IEnumerable.GetEnumerator
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of T).System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Dispose
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.Dispose
  name: Dispose()
  nameWithType: ObservableEnumerable<T>.Dispose()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Dispose()
  nameWithType.vb: ObservableEnumerable(Of T).Dispose()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Dispose()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Dispose
    name: Dispose
    nameWithType: ObservableEnumerable<T>.Dispose
    fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Dispose
    name: Dispose
    nameWithType: ObservableEnumerable(Of T).Dispose
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of T).Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Dispose(System.Boolean)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.Dispose(System.Boolean)
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: ObservableEnumerable<T>.Dispose(Boolean)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Dispose(System.Boolean)
  nameWithType.vb: ObservableEnumerable(Of T).Dispose(Boolean)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Dispose(System.Boolean)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Dispose(System.Boolean)
    name: Dispose
    nameWithType: ObservableEnumerable<T>.Dispose
    fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Dispose(System.Boolean)
    name: Dispose
    nameWithType: ObservableEnumerable(Of T).Dispose
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of T).Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Add(`0)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Add(`0)
  name: ICollection<T>.Add(T)
  nameWithType: ObservableEnumerable<T>.ICollection<T>.Add(T)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  name.vb: System.Collections.Generic.ICollection<T>.Add(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Add(`0)
    name: ICollection<T>.Add
    nameWithType: ObservableEnumerable<T>.ICollection<T>.Add
    fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.System.Collections.Generic.ICollection<T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Add(`0)
    name: System.Collections.Generic.ICollection<T>.Add
    nameWithType: ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.Add
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.Add
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Clear
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Clear
  name: ICollection<T>.Clear()
  nameWithType: ObservableEnumerable<T>.ICollection<T>.Clear()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.Clear()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.Clear()
  name.vb: System.Collections.Generic.ICollection<T>.Clear()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Clear
    name: ICollection<T>.Clear
    nameWithType: ObservableEnumerable<T>.ICollection<T>.Clear
    fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.System.Collections.Generic.ICollection<T>.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Clear
    name: System.Collections.Generic.ICollection<T>.Clear
    nameWithType: ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.Clear
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  name: ICollection<T>.IsReadOnly
  nameWithType: ObservableEnumerable<T>.ICollection<T>.IsReadOnly
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  name: ICollection<T>.Remove(T)
  nameWithType: ObservableEnumerable<T>.ICollection<T>.Remove(T)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.Remove(T)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.Remove(T)
  name.vb: System.Collections.Generic.ICollection<T>.Remove(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Remove(`0)
    name: ICollection<T>.Remove
    nameWithType: ObservableEnumerable<T>.ICollection<T>.Remove
    fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.System.Collections.Generic.ICollection<T>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Remove(`0)
    name: System.Collections.Generic.ICollection<T>.Remove
    nameWithType: ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.Remove
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.Remove
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Contains(`0)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.Contains(`0)
  name: Contains(T)
  nameWithType: ObservableEnumerable<T>.Contains(T)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Contains(T)
  nameWithType.vb: ObservableEnumerable(Of T).Contains(T)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Contains(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Contains(`0)
    name: Contains
    nameWithType: ObservableEnumerable<T>.Contains
    fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Contains
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Contains(`0)
    name: Contains
    nameWithType: ObservableEnumerable(Of T).Contains
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of T).Contains
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.CopyTo(`0[],System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ObservableEnumerable<T>.CopyTo(T[], Int32)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ObservableEnumerable(Of T).CopyTo(T(), Int32)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ObservableEnumerable<T>.CopyTo
    fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ObservableEnumerable(Of T).CopyTo
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of T).CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Count
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable`1.Count
  name: Count
  nameWithType: ObservableEnumerable<T>.Count
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Count
  nameWithType.vb: ObservableEnumerable(Of T).Count
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Count
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Successors
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable`1.Successors
  name: Successors
  nameWithType: ObservableEnumerable<T>.Successors
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Successors
  nameWithType.vb: ObservableEnumerable(Of T).Successors
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Successors
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.ExecutionMetaData
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable`1.ExecutionMetaData
  name: ExecutionMetaData
  nameWithType: ObservableEnumerable<T>.ExecutionMetaData
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.ExecutionMetaData
  nameWithType.vb: ObservableEnumerable(Of T).ExecutionMetaData
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).ExecutionMetaData
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAttach
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnAttach
  name: OnAttach()
  nameWithType: ObservableEnumerable<T>.OnAttach()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnAttach()
  nameWithType.vb: ObservableEnumerable(Of T).OnAttach()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnAttach()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAttach
    name: OnAttach
    nameWithType: ObservableEnumerable<T>.OnAttach
    fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnAttach
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAttach
    name: OnAttach
    nameWithType: ObservableEnumerable(Of T).OnAttach
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnAttach
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnDetach
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnDetach
  name: OnDetach()
  nameWithType: ObservableEnumerable<T>.OnDetach()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnDetach()
  nameWithType.vb: ObservableEnumerable(Of T).OnDetach()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnDetach()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnDetach
    name: OnDetach
    nameWithType: ObservableEnumerable<T>.OnDetach
    fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnDetach
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnDetach
    name: OnDetach
    nameWithType: ObservableEnumerable(Of T).OnDetach
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnDetach
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: ToLookup<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>)
  nameWithType: LookupExtensions.ToLookup<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>)
  fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TSource, TKey>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  nameWithType.vb: LookupExtensions.ToLookup(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)))
  fullName.vb: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TSource, TKey)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: ToLookup(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup<TSource, TKey>
    nameWithType: LookupExtensions.ToLookup<TSource, TKey>
    fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TSource, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup(Of TSource, TKey)
    nameWithType: LookupExtensions.ToLookup(Of TSource, TKey)
    fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TSource, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.LookupExtensions
  commentId: T:NMF.Expressions.Linq.LookupExtensions
  parent: NMF.Expressions.Linq
  name: LookupExtensions
  nameWithType: LookupExtensions
  fullName: NMF.Expressions.Linq.LookupExtensions
- uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: WithUpdates<T>(IEnumerable<T>)
  nameWithType: ObservableExtensions.WithUpdates<T>(IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.WithUpdates(Of T)(IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: WithUpdates(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
    name: WithUpdates<T>
    nameWithType: ObservableExtensions.WithUpdates<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
    name: WithUpdates(Of T)
    nameWithType: ObservableExtensions.WithUpdates(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions
  commentId: T:NMF.Expressions.Linq.ObservableExtensions
  parent: NMF.Expressions.Linq
  name: ObservableExtensions
  nameWithType: ObservableExtensions
  fullName: NMF.Expressions.Linq.ObservableExtensions
- uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
  isExternal: true
  name: WithUpdates<T>(ICollection<T>)
  nameWithType: ObservableExtensions.WithUpdates<T>(ICollection<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>(System.Collections.Generic.ICollection<T>)
  nameWithType.vb: ObservableExtensions.WithUpdates(Of T)(ICollection(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)(System.Collections.Generic.ICollection(Of T))
  name.vb: WithUpdates(Of T)(ICollection(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
    name: WithUpdates<T>
    nameWithType: ObservableExtensions.WithUpdates<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
    name: WithUpdates(Of T)
    nameWithType: ObservableExtensions.WithUpdates(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.Key*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.Key
  name: Key
  nameWithType: IncrementalLookup<TSource, TKey>.IncrementalLookupSlave.Key
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.IncrementalLookupSlave.Key
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).IncrementalLookupSlave.Key
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).IncrementalLookupSlave.Key
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.Items*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.Items
  name: Items
  nameWithType: IncrementalLookup<TSource, TKey>.IncrementalLookupSlave.Items
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.IncrementalLookupSlave.Items
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).IncrementalLookupSlave.Items
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).IncrementalLookupSlave.Items
- uid: System.Collections.Generic.List{{TSource}}
  commentId: T:System.Collections.Generic.List{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TSource>
  nameWithType: List<TSource>
  fullName: System.Collections.Generic.List<TSource>
  nameWithType.vb: List(Of TSource)
  fullName.vb: System.Collections.Generic.List(Of TSource)
  name.vb: List(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.#ctor*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.#ctor
  name: IncrementalLookupSlave
  nameWithType: IncrementalLookup<TSource, TKey>.IncrementalLookupSlave.IncrementalLookupSlave
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.IncrementalLookupSlave.IncrementalLookupSlave
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).IncrementalLookupSlave.IncrementalLookupSlave
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).IncrementalLookupSlave.IncrementalLookupSlave
- uid: NMF.Expressions.Linq.IncrementalLookup`2
  commentId: T:NMF.Expressions.Linq.IncrementalLookup`2
  parent: NMF.Expressions.Linq
  name: IncrementalLookup<TSource, TKey>
  nameWithType: IncrementalLookup<TSource, TKey>
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>
  nameWithType.vb: IncrementalLookup(Of TSource, TKey)
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey)
  name.vb: IncrementalLookup(Of TSource, TKey)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IncrementalLookup`2
    name: IncrementalLookup
    nameWithType: IncrementalLookup
    fullName: NMF.Expressions.Linq.IncrementalLookup
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IncrementalLookup`2
    name: IncrementalLookup
    nameWithType: IncrementalLookup
    fullName: NMF.Expressions.Linq.IncrementalLookup
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.Dependencies
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable{`0}.Dependencies
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.Dependencies
  name: Dependencies
  nameWithType: ObservableEnumerable<TSource>.Dependencies
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.Dependencies
  nameWithType.vb: ObservableEnumerable(Of TSource).Dependencies
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).Dependencies
- uid: NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.Dependencies*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.Dependencies
  name: Dependencies
  nameWithType: IncrementalLookup<TSource, TKey>.IncrementalLookupSlave.Dependencies
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.IncrementalLookupSlave.Dependencies
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).IncrementalLookupSlave.Dependencies
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).IncrementalLookupSlave.Dependencies
- uid: System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<INotifiable>
  nameWithType: IEnumerable<INotifiable>
  fullName: System.Collections.Generic.IEnumerable<NMF.Expressions.INotifiable>
  nameWithType.vb: IEnumerable(Of INotifiable)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Expressions.INotifiable)
  name.vb: IEnumerable(Of INotifiable)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
    nameWithType: INotifiable
    fullName: NMF.Expressions.INotifiable
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
    nameWithType: INotifiable
    fullName: NMF.Expressions.INotifiable
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Dependencies
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable`1.Dependencies
  name: Dependencies
  nameWithType: ObservableEnumerable<T>.Dependencies
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Dependencies
  nameWithType.vb: ObservableEnumerable(Of T).Dependencies
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Dependencies
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.GetEnumerator
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`0}.GetEnumerator
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: ObservableEnumerable<TSource>.GetEnumerator()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.GetEnumerator()
  nameWithType.vb: ObservableEnumerable(Of TSource).GetEnumerator()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).GetEnumerator()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: ObservableEnumerable<TSource>.GetEnumerator
    fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: ObservableEnumerable(Of TSource).GetEnumerator
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.GetEnumerator*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.GetEnumerator
  name: GetEnumerator
  nameWithType: IncrementalLookup<TSource, TKey>.IncrementalLookupSlave.GetEnumerator
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.IncrementalLookupSlave.GetEnumerator
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).IncrementalLookupSlave.GetEnumerator
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).IncrementalLookupSlave.GetEnumerator
- uid: System.Collections.Generic.IEnumerator{{TSource}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<TSource>
  nameWithType: IEnumerator<TSource>
  fullName: System.Collections.Generic.IEnumerator<TSource>
  nameWithType.vb: IEnumerator(Of TSource)
  fullName.vb: System.Collections.Generic.IEnumerator(Of TSource)
  name.vb: IEnumerator(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.GetEnumerator
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: ObservableEnumerable<T>.GetEnumerator()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.GetEnumerator()
  nameWithType.vb: ObservableEnumerable(Of T).GetEnumerator()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: ObservableEnumerable<T>.GetEnumerator
    fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: ObservableEnumerable(Of T).GetEnumerator
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of T).GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`0}.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TSource}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  name: Notify(IList<INotificationResult>)
  nameWithType: ObservableEnumerable<TSource>.Notify(IList<INotificationResult>)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.Notify(System.Collections.Generic.IList<NMF.Expressions.INotificationResult>)
  nameWithType.vb: ObservableEnumerable(Of TSource).Notify(IList(Of INotificationResult))
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).Notify(System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
    nameWithType: ObservableEnumerable<TSource>.Notify
    fullName: NMF.Expressions.Linq.ObservableEnumerable<TSource>.Notify
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
    nameWithType: ObservableEnumerable(Of TSource).Notify
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of TSource).Notify
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.Notify*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave.Notify
  name: Notify
  nameWithType: IncrementalLookup<TSource, TKey>.IncrementalLookupSlave.Notify
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.IncrementalLookupSlave.Notify
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).IncrementalLookupSlave.Notify
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).IncrementalLookupSlave.Notify
- uid: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  commentId: T:System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<INotificationResult>
  nameWithType: IList<INotificationResult>
  fullName: System.Collections.Generic.IList<NMF.Expressions.INotificationResult>
  nameWithType.vb: IList(Of INotificationResult)
  fullName.vb: System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult)
  name.vb: IList(Of INotificationResult)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotificationResult
  commentId: T:NMF.Expressions.INotificationResult
  parent: NMF.Expressions
  name: INotificationResult
  nameWithType: INotificationResult
  fullName: NMF.Expressions.INotificationResult
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  isExternal: true
  name: Notify(IList<INotificationResult>)
  nameWithType: ObservableEnumerable<T>.Notify(IList<INotificationResult>)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Notify(System.Collections.Generic.IList<NMF.Expressions.INotificationResult>)
  nameWithType.vb: ObservableEnumerable(Of T).Notify(IList(Of INotificationResult))
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Notify(System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
    nameWithType: ObservableEnumerable<T>.Notify
    fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Notify
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
    nameWithType: ObservableEnumerable(Of T).Notify
    fullName: NMF.Expressions.Linq.ObservableEnumerable(Of T).Notify
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
