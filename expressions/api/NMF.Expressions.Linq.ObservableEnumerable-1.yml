### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.Linq.ObservableEnumerable`1
  commentId: T:NMF.Expressions.Linq.ObservableEnumerable`1
  id: ObservableEnumerable`1
  parent: NMF.Expressions.Linq
  children:
  - NMF.Expressions.Linq.ObservableEnumerable`1.#ctor
  - NMF.Expressions.Linq.ObservableEnumerable`1.CollectionChanged
  - NMF.Expressions.Linq.ObservableEnumerable`1.Contains(`0)
  - NMF.Expressions.Linq.ObservableEnumerable`1.CopyTo(`0[],System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable`1.Count
  - NMF.Expressions.Linq.ObservableEnumerable`1.Dependencies
  - NMF.Expressions.Linq.ObservableEnumerable`1.Dispose
  - NMF.Expressions.Linq.ObservableEnumerable`1.Dispose(System.Boolean)
  - NMF.Expressions.Linq.ObservableEnumerable`1.ExecutionMetaData
  - NMF.Expressions.Linq.ObservableEnumerable`1.GetEnumerator
  - NMF.Expressions.Linq.ObservableEnumerable`1.HasEventSubscriber
  - NMF.Expressions.Linq.ObservableEnumerable`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  - NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItem(`0,System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable`1.OnAttach
  - NMF.Expressions.Linq.ObservableEnumerable`1.OnCleared
  - NMF.Expressions.Linq.ObservableEnumerable`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  - NMF.Expressions.Linq.ObservableEnumerable`1.OnDetach
  - NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItem(`0,System.Int32,System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItem(`0,System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable`1.OnReplaceItems(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable`1.OnUpdateItem(`0,`0,System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable`1.Successors
  - NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Add(`0)
  - NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Clear
  - NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  - NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: ObservableEnumerable<T>
  nameWithType: ObservableEnumerable<T>
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>
  type: Class
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ObservableEnumerable
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 10
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: 'public abstract class ObservableEnumerable<T> : INotifyEnumerable<T>, INotifyEnumerable, INotifiable, ICollection<T>, IEnumerable<T>, IEnumerable, INotifyCollectionChanged, IDisposable'
    typeParameters:
    - id: T
    content.vb: >-
      Public MustInherit Class ObservableEnumerable(Of T)

          Implements INotifyEnumerable(Of T), INotifyEnumerable, INotifiable, ICollection(Of T), IEnumerable(Of T), IEnumerable, INotifyCollectionChanged, IDisposable
  inheritance:
  - System.Object
  derivedClasses:
  - NMF.Expressions.Linq.IncrementalLookup`2
  - NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave
  implements:
  - NMF.Expressions.INotifyEnumerable{{T}}
  - NMF.Expressions.INotifyEnumerable
  - NMF.Expressions.INotifiable
  - System.Collections.Generic.ICollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  - System.Collections.Specialized.INotifyCollectionChanged
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.All``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Any``1
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Any``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Int32}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Int64}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Single}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Double}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}})
  - NMF.Expressions.INotifyEnumerable.NMF.Expressions.Linq.ObservableExtensions.Cast``1
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Concat``1(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Contains``1({T})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Contains``1({T},System.Collections.Generic.IEqualityComparer{{T}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Count``1
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Count``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Distinct``1
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Distinct``1(System.Collections.Generic.IEqualityComparer{{T}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Except``1(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Except``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{T}},{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{T}},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{T},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{T},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{T},{TInner},{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{T},{TInner},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Max``1(System.Collections.Generic.IComparer{{T}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},System.Collections.Generic.IComparer{{TResult}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{{TResult}}}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{{TResult}}}},System.Collections.Generic.IComparer{{TResult}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Min``1(System.Collections.Generic.IComparer{{T}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},System.Collections.Generic.IComparer{{TResult}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{{TResult}}}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{{TResult}}}},System.Collections.Generic.IComparer{{TResult}})
  - NMF.Expressions.INotifyEnumerable.NMF.Expressions.Linq.ObservableExtensions.OfType``1
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(System.Linq.Expressions.Expression{System.Func{{T},System.Collections.Generic.IEnumerable{{TIntermediate}}}},System.Linq.Expressions.Expression{System.Func{{T},{TIntermediate},{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(System.Linq.Expressions.Expression{System.Func{{T},System.Collections.Generic.IEnumerable{{TResult}}}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Int32}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Int64}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Single}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Double}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{{T},{TKey}}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Union``1(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Union``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  - NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  - System.Collections.Generic.IEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  - System.Collections.Generic.ICollection{`0}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  nameWithType.vb: ObservableEnumerable(Of T)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T)
  name.vb: ObservableEnumerable(Of T)
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.#ctor
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.#ctor
  id: '#ctor'
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: ObservableEnumerable()
  nameWithType: ObservableEnumerable<T>.ObservableEnumerable()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.ObservableEnumerable()
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 12
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: public ObservableEnumerable()
    content.vb: Public Sub New
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.#ctor*
  nameWithType.vb: ObservableEnumerable(Of T).ObservableEnumerable()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).ObservableEnumerable()
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItem(`0,System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItem(`0,System.Int32)
  id: OnAddItem(`0,System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: OnAddItem(T, Int32)
  nameWithType: ObservableEnumerable<T>.OnAddItem(T, Int32)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnAddItem(T, System.Int32)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnAddItem
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 18
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: protected void OnAddItem(T item, int index = -1)
    parameters:
    - id: item
      type: '{T}'
    - id: index
      type: System.Int32
    content.vb: Protected Sub OnAddItem(item As T, index As Integer = -1)
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItem*
  nameWithType.vb: ObservableEnumerable(Of T).OnAddItem(T, Int32)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnAddItem(T, System.Int32)
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
  id: OnAddItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: OnAddItems(IEnumerable<T>, Int32)
  nameWithType: ObservableEnumerable<T>.OnAddItems(IEnumerable<T>, Int32)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnAddItems(System.Collections.Generic.IEnumerable<T>, System.Int32)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnAddItems
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 25
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: protected void OnAddItems(IEnumerable<T> items, int index = -1)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: index
      type: System.Int32
    content.vb: Protected Sub OnAddItems(items As IEnumerable(Of T), index As Integer = -1)
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItems*
  nameWithType.vb: ObservableEnumerable(Of T).OnAddItems(IEnumerable(Of T), Int32)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnAddItems(System.Collections.Generic.IEnumerable(Of T), System.Int32)
  name.vb: OnAddItems(IEnumerable(Of T), Int32)
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItem(`0,System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItem(`0,System.Int32)
  id: OnRemoveItem(`0,System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: OnRemoveItem(T, Int32)
  nameWithType: ObservableEnumerable<T>.OnRemoveItem(T, Int32)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnRemoveItem(T, System.Int32)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnRemoveItem
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 50
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: protected void OnRemoveItem(T item, int index = -1)
    parameters:
    - id: item
      type: '{T}'
    - id: index
      type: System.Int32
    content.vb: Protected Sub OnRemoveItem(item As T, index As Integer = -1)
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItem*
  nameWithType.vb: ObservableEnumerable(Of T).OnRemoveItem(T, Int32)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnRemoveItem(T, System.Int32)
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
  id: OnRemoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: OnRemoveItems(IEnumerable<T>, Int32)
  nameWithType: ObservableEnumerable<T>.OnRemoveItems(IEnumerable<T>, Int32)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnRemoveItems(System.Collections.Generic.IEnumerable<T>, System.Int32)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnRemoveItems
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 57
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: protected void OnRemoveItems(IEnumerable<T> items, int index = -1)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: index
      type: System.Int32
    content.vb: Protected Sub OnRemoveItems(items As IEnumerable(Of T), index As Integer = -1)
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItems*
  nameWithType.vb: ObservableEnumerable(Of T).OnRemoveItems(IEnumerable(Of T), Int32)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnRemoveItems(System.Collections.Generic.IEnumerable(Of T), System.Int32)
  name.vb: OnRemoveItems(IEnumerable(Of T), Int32)
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnReplaceItems(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnReplaceItems(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Int32)
  id: OnReplaceItems(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: OnReplaceItems(IEnumerable<T>, IEnumerable<T>, Int32)
  nameWithType: ObservableEnumerable<T>.OnReplaceItems(IEnumerable<T>, IEnumerable<T>, Int32)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnReplaceItems(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Int32)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnReplaceItems
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 68
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: protected void OnReplaceItems(IEnumerable<T> oldItems, IEnumerable<T> newItems, int index = -1)
    parameters:
    - id: oldItems
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: newItems
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: index
      type: System.Int32
    content.vb: Protected Sub OnReplaceItems(oldItems As IEnumerable(Of T), newItems As IEnumerable(Of T), index As Integer = -1)
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.OnReplaceItems*
  nameWithType.vb: ObservableEnumerable(Of T).OnReplaceItems(IEnumerable(Of T), IEnumerable(Of T), Int32)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnReplaceItems(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Int32)
  name.vb: OnReplaceItems(IEnumerable(Of T), IEnumerable(Of T), Int32)
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnCleared
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnCleared
  id: OnCleared
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: OnCleared()
  nameWithType: ObservableEnumerable<T>.OnCleared()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnCleared()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnCleared
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 81
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: protected void OnCleared()
    content.vb: Protected Sub OnCleared
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.OnCleared*
  nameWithType.vb: ObservableEnumerable(Of T).OnCleared()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnCleared()
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnUpdateItem(`0,`0,System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnUpdateItem(`0,`0,System.Int32)
  id: OnUpdateItem(`0,`0,System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: OnUpdateItem(T, T, Int32)
  nameWithType: ObservableEnumerable<T>.OnUpdateItem(T, T, Int32)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnUpdateItem(T, T, System.Int32)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnUpdateItem
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 88
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: protected void OnUpdateItem(T item, T old, int index = -1)
    parameters:
    - id: item
      type: '{T}'
    - id: old
      type: '{T}'
    - id: index
      type: System.Int32
    content.vb: Protected Sub OnUpdateItem(item As T, old As T, index As Integer = -1)
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.OnUpdateItem*
  nameWithType.vb: ObservableEnumerable(Of T).OnUpdateItem(T, T, Int32)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnUpdateItem(T, T, System.Int32)
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItem(`0,System.Int32,System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItem(`0,System.Int32,System.Int32)
  id: OnMoveItem(`0,System.Int32,System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: OnMoveItem(T, Int32, Int32)
  nameWithType: ObservableEnumerable<T>.OnMoveItem(T, Int32, Int32)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnMoveItem(T, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnMoveItem
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 95
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: protected void OnMoveItem(T item, int oldIndex = 0, int newIndex = 0)
    parameters:
    - id: item
      type: '{T}'
    - id: oldIndex
      type: System.Int32
    - id: newIndex
      type: System.Int32
    content.vb: Protected Sub OnMoveItem(item As T, oldIndex As Integer = 0, newIndex As Integer = 0)
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItem*
  nameWithType.vb: ObservableEnumerable(Of T).OnMoveItem(T, Int32, Int32)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnMoveItem(T, System.Int32, System.Int32)
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)
  id: OnMoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: OnMoveItems(IEnumerable<T>, Int32, Int32)
  nameWithType: ObservableEnumerable<T>.OnMoveItems(IEnumerable<T>, Int32, Int32)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnMoveItems(System.Collections.Generic.IEnumerable<T>, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnMoveItems
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 102
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: protected void OnMoveItems(IEnumerable<T> items, int oldIndex = 0, int newIndex = 0)
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: oldIndex
      type: System.Int32
    - id: newIndex
      type: System.Int32
    content.vb: Protected Sub OnMoveItems(items As IEnumerable(Of T), oldIndex As Integer = 0, newIndex As Integer = 0)
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItems*
  nameWithType.vb: ObservableEnumerable(Of T).OnMoveItems(IEnumerable(Of T), Int32, Int32)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnMoveItems(System.Collections.Generic.IEnumerable(Of T), System.Int32, System.Int32)
  name.vb: OnMoveItems(IEnumerable(Of T), Int32, Int32)
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.HasEventSubscriber
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable`1.HasEventSubscriber
  id: HasEventSubscriber
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: HasEventSubscriber
  nameWithType: ObservableEnumerable<T>.HasEventSubscriber
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.HasEventSubscriber
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: HasEventSubscriber
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 114
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: protected bool HasEventSubscriber { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected ReadOnly Property HasEventSubscriber As Boolean
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.HasEventSubscriber*
  nameWithType.vb: ObservableEnumerable(Of T).HasEventSubscriber
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).HasEventSubscriber
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  id: OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: OnCollectionChanged(NotifyCollectionChangedEventArgs)
  nameWithType: ObservableEnumerable<T>.OnCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnCollectionChanged
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 122
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: protected void OnCollectionChanged(NotifyCollectionChangedEventArgs e)
    parameters:
    - id: e
      type: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    content.vb: Protected Sub OnCollectionChanged(e As NotifyCollectionChangedEventArgs)
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.OnCollectionChanged*
  nameWithType.vb: ObservableEnumerable(Of T).OnCollectionChanged(NotifyCollectionChangedEventArgs)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.CollectionChanged
  commentId: E:NMF.Expressions.Linq.ObservableEnumerable`1.CollectionChanged
  id: CollectionChanged
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: CollectionChanged
  nameWithType: ObservableEnumerable<T>.CollectionChanged
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.CollectionChanged
  type: Event
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CollectionChanged
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 131
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: public event NotifyCollectionChangedEventHandler CollectionChanged
    return:
      type: System.Collections.Specialized.NotifyCollectionChangedEventHandler
    content.vb: Public Event CollectionChanged As NotifyCollectionChangedEventHandler
  implements:
  - System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  nameWithType.vb: ObservableEnumerable(Of T).CollectionChanged
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).CollectionChanged
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.GetEnumerator
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.GetEnumerator
  id: GetEnumerator
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: ObservableEnumerable<T>.GetEnumerator()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetEnumerator
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 133
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: public abstract IEnumerator<T> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
    content.vb: Public MustOverride Function GetEnumerator As IEnumerator(Of T)
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  nameWithType.vb: ObservableEnumerable(Of T).GetEnumerator()
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).GetEnumerator()
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: ObservableEnumerable<T>.IEnumerable.GetEnumerator()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 135
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ObservableEnumerable(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Dispose
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.Dispose
  id: Dispose
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ObservableEnumerable<T>.Dispose()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Dispose()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Dispose
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 140
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: ObservableEnumerable(Of T).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Dispose()
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Dispose(System.Boolean)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: ObservableEnumerable<T>.Dispose(Boolean)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Dispose
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 146
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.Dispose*
  nameWithType.vb: ObservableEnumerable(Of T).Dispose(Boolean)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Dispose(System.Boolean)
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Add(`0)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Add(`0)
  id: System#Collections#Generic#ICollection{T}#Add(`0)
  isEii: true
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Add(T)
  nameWithType: ObservableEnumerable<T>.ICollection<T>.Add(T)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.System.Collections.Generic.ICollection<T>.Add(T)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: System.Collections.Generic.ICollection<T>.Add
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 154
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: void ICollection<T>.Add(T item)
    parameters:
    - id: item
      type: '{T}'
    content.vb: Sub System.Collections.Generic.ICollection<T>.Add(item As T) Implements ICollection(Of T).Add
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Add*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Add({T})
  nameWithType.vb: ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  name.vb: System.Collections.Generic.ICollection<T>.Add(T)
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Clear
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Clear
  id: System#Collections#Generic#ICollection{T}#Clear
  isEii: true
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Clear()
  nameWithType: ObservableEnumerable<T>.ICollection<T>.Clear()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.System.Collections.Generic.ICollection<T>.Clear()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: System.Collections.Generic.ICollection<T>.Clear
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 159
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: void ICollection<T>.Clear()
    content.vb: Sub System.Collections.Generic.ICollection<T>.Clear Implements ICollection(Of T).Clear
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Clear*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Clear
  nameWithType.vb: ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.Clear()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.Clear()
  name.vb: System.Collections.Generic.ICollection<T>.Clear()
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  id: System#Collections#Generic#ICollection{T}#IsReadOnly
  isEii: true
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.IsReadOnly
  nameWithType: ObservableEnumerable<T>.ICollection<T>.IsReadOnly
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: System.Collections.Generic.ICollection<T>.IsReadOnly
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 164
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: bool ICollection<T>.IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<T>.IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{{T}}.IsReadOnly
  nameWithType.vb: ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  id: System#Collections#Generic#ICollection{T}#Remove(`0)
  isEii: true
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Remove(T)
  nameWithType: ObservableEnumerable<T>.ICollection<T>.Remove(T)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.System.Collections.Generic.ICollection<T>.Remove(T)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: System.Collections.Generic.ICollection<T>.Remove
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 169
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: bool ICollection<T>.Remove(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Function System.Collections.Generic.ICollection<T>.Remove(item As T) As Boolean Implements ICollection(Of T).Remove
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Remove*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Remove({T})
  nameWithType.vb: ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.Remove(T)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.Remove(T)
  name.vb: System.Collections.Generic.ICollection<T>.Remove(T)
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Contains(`0)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.Contains(`0)
  id: Contains(`0)
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  nameWithType: ObservableEnumerable<T>.Contains(T)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Contains(T)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Contains
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 174
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: public virtual bool Contains(T item)
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Overridable Function Contains(item As T) As Boolean
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.Contains*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Contains({T})
  nameWithType.vb: ObservableEnumerable(Of T).Contains(T)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Contains(T)
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.CopyTo(`0[],System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  nameWithType: ObservableEnumerable<T>.CopyTo(T[], Int32)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CopyTo
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 187
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: public void CopyTo(T[] array, int arrayIndex)
    parameters:
    - id: array
      type: '{T}[]'
    - id: arrayIndex
      type: System.Int32
    content.vb: Public Sub CopyTo(array As T(), arrayIndex As Integer)
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.CopyTo*
  implements:
  - System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  nameWithType.vb: ObservableEnumerable(Of T).CopyTo(T(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Count
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable`1.Count
  id: Count
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ObservableEnumerable<T>.Count
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Count
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Count
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 198
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: public virtual int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Overridable ReadOnly Property Count As Integer
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.Count*
  implements:
  - System.Collections.Generic.ICollection{{T}}.Count
  nameWithType.vb: ObservableEnumerable(Of T).Count
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Count
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Successors
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable`1.Successors
  id: Successors
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: Successors
  nameWithType: ObservableEnumerable<T>.Successors
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Successors
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Successors
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 214
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: public ISuccessorList Successors { get; }
    parameters: []
    return:
      type: NMF.Expressions.ISuccessorList
    content.vb: Public ReadOnly Property Successors As ISuccessorList
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.Successors*
  implements:
  - NMF.Expressions.INotifiable.Successors
  nameWithType.vb: ObservableEnumerable(Of T).Successors
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Successors
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Dependencies
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable`1.Dependencies
  id: Dependencies
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: Dependencies
  nameWithType: ObservableEnumerable<T>.Dependencies
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Dependencies
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Dependencies
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 216
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: public abstract IEnumerable<INotifiable> Dependencies { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
    content.vb: Public MustOverride ReadOnly Property Dependencies As IEnumerable(Of INotifiable)
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.Dependencies*
  implements:
  - NMF.Expressions.INotifiable.Dependencies
  nameWithType.vb: ObservableEnumerable(Of T).Dependencies
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Dependencies
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.ExecutionMetaData
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable`1.ExecutionMetaData
  id: ExecutionMetaData
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: ExecutionMetaData
  nameWithType: ObservableEnumerable<T>.ExecutionMetaData
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.ExecutionMetaData
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ExecutionMetaData
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 218
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: public ExecutionMetaData ExecutionMetaData { get; }
    parameters: []
    return:
      type: NMF.Expressions.ExecutionMetaData
    content.vb: Public ReadOnly Property ExecutionMetaData As ExecutionMetaData
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.ExecutionMetaData*
  implements:
  - NMF.Expressions.INotifiable.ExecutionMetaData
  nameWithType.vb: ObservableEnumerable(Of T).ExecutionMetaData
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).ExecutionMetaData
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAttach
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnAttach
  id: OnAttach
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: OnAttach()
  nameWithType: ObservableEnumerable<T>.OnAttach()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnAttach()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnAttach
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 234
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: protected virtual void OnAttach()
    content.vb: Protected Overridable Sub OnAttach
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.OnAttach*
  nameWithType.vb: ObservableEnumerable(Of T).OnAttach()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnAttach()
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnDetach
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnDetach
  id: OnDetach
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: OnDetach()
  nameWithType: ObservableEnumerable<T>.OnDetach()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnDetach()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnDetach
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 236
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: protected virtual void OnDetach()
    content.vb: Protected Overridable Sub OnDetach
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.OnDetach*
  nameWithType.vb: ObservableEnumerable(Of T).OnDetach()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnDetach()
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  id: Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  parent: NMF.Expressions.Linq.ObservableEnumerable`1
  langs:
  - csharp
  - vb
  name: Notify(IList<INotificationResult>)
  nameWithType: ObservableEnumerable<T>.Notify(IList<INotificationResult>)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Notify(System.Collections.Generic.IList<NMF.Expressions.INotificationResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Notify
    path: src/Expressions/Expressions.Linq/Linq/ObservableEnumerable.cs
    startLine: 238
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: public abstract INotificationResult Notify(IList<INotificationResult> sources)
    parameters:
    - id: sources
      type: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
    return:
      type: NMF.Expressions.INotificationResult
    content.vb: Public MustOverride Function Notify(sources As IList(Of INotificationResult)) As INotificationResult
  overload: NMF.Expressions.Linq.ObservableEnumerable`1.Notify*
  implements:
  - NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  nameWithType.vb: ObservableEnumerable(Of T).Notify(IList(Of INotificationResult))
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Notify(System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
references:
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Expressions.INotifyEnumerable{{T}}
  commentId: T:NMF.Expressions.INotifyEnumerable{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<T>
  nameWithType: INotifyEnumerable<T>
  fullName: NMF.Expressions.INotifyEnumerable<T>
  nameWithType.vb: INotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of T)
  name.vb: INotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable
  commentId: T:NMF.Expressions.INotifyEnumerable
  parent: NMF.Expressions
  name: INotifyEnumerable
  nameWithType: INotifyEnumerable
  fullName: NMF.Expressions.INotifyEnumerable
- uid: NMF.Expressions.INotifiable
  commentId: T:NMF.Expressions.INotifiable
  parent: NMF.Expressions
  name: INotifiable
  nameWithType: INotifiable
  fullName: NMF.Expressions.INotifiable
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Specialized.INotifyCollectionChanged
  commentId: T:System.Collections.Specialized.INotifyCollectionChanged
  parent: System.Collections.Specialized
  isExternal: true
  name: INotifyCollectionChanged
  nameWithType: INotifyCollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}})
  commentId: M:NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.LookupExtensions
  definition: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: ToLookup<T, TKey>(Expression<Func<T, TKey>>)
  nameWithType: LookupExtensions.ToLookup<T, TKey>(Expression<Func<T, TKey>>)
  fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<T, TKey>(System.Linq.Expressions.Expression<System.Func<T, TKey>>)
  nameWithType.vb: LookupExtensions.ToLookup(Of T, TKey)(Expression(Of Func(Of T, TKey)))
  fullName.vb: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of T, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)))
  name.vb: ToLookup(Of T, TKey)(Expression(Of Func(Of T, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup<T, TKey>
    nameWithType: LookupExtensions.ToLookup<T, TKey>
    fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup(Of T, TKey)
    nameWithType: LookupExtensions.ToLookup(Of T, TKey)
    fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.All``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: All<T>(Expression<Func<T, Boolean>>)
  nameWithType: ObservableExtensions.All<T>(Expression<Func<T, Boolean>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.All<T>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: ObservableExtensions.All(Of T)(Expression(Of Func(Of T, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.All(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: All(Of T)(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.All``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: All<T>
    nameWithType: ObservableExtensions.All<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.All<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.All``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: All(Of T)
    nameWithType: ObservableExtensions.All(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.All(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Any``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0})
  name: Any<T>()
  nameWithType: ObservableExtensions.Any<T>()
  fullName: NMF.Expressions.Linq.ObservableExtensions.Any<T>()
  nameWithType.vb: ObservableExtensions.Any(Of T)()
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Any(Of T)()
  name.vb: Any(Of T)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1
    name: Any<T>
    nameWithType: ObservableExtensions.Any<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Any<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1
    name: Any(Of T)
    nameWithType: ObservableExtensions.Any(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Any(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Any``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Any<T>(Expression<Func<T, Boolean>>)
  nameWithType: ObservableExtensions.Any<T>(Expression<Func<T, Boolean>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Any<T>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: ObservableExtensions.Any(Of T)(Expression(Of Func(Of T, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Any(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Any(Of T)(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Any<T>
    nameWithType: ObservableExtensions.Any<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Any<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Any(Of T)
    nameWithType: ObservableExtensions.Any(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Any(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Int32}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  name: Average<T>(Expression<Func<T, Int32>>)
  nameWithType: ObservableExtensions.Average<T>(Expression<Func<T, Int32>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<T>(System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: ObservableExtensions.Average(Of T)(Expression(Of Func(Of T, Int32)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Average(Of T)(Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Average<T>
    nameWithType: ObservableExtensions.Average<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Average(Of T)
    nameWithType: ObservableExtensions.Average(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Int64}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  name: Average<T>(Expression<Func<T, Int64>>)
  nameWithType: ObservableExtensions.Average<T>(Expression<Func<T, Int64>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<T>(System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: ObservableExtensions.Average(Of T)(Expression(Of Func(Of T, Int64)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Average(Of T)(Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Average<T>
    nameWithType: ObservableExtensions.Average<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Average(Of T)
    nameWithType: ObservableExtensions.Average(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Single}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  name: Average<T>(Expression<Func<T, Single>>)
  nameWithType: ObservableExtensions.Average<T>(Expression<Func<T, Single>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<T>(System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: ObservableExtensions.Average(Of T)(Expression(Of Func(Of T, Single)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Average(Of T)(Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Average<T>
    nameWithType: ObservableExtensions.Average<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Average(Of T)
    nameWithType: ObservableExtensions.Average(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Double}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  name: Average<T>(Expression<Func<T, Double>>)
  nameWithType: ObservableExtensions.Average<T>(Expression<Func<T, Double>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<T>(System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: ObservableExtensions.Average(Of T)(Expression(Of Func(Of T, Double)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Average(Of T)(Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Average<T>
    nameWithType: ObservableExtensions.Average<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Average(Of T)
    nameWithType: ObservableExtensions.Average(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  name: Average<T>(Expression<Func<T, Decimal>>)
  nameWithType: ObservableExtensions.Average<T>(Expression<Func<T, Decimal>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<T>(System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: ObservableExtensions.Average(Of T)(Expression(Of Func(Of T, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Average(Of T)(Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Average<T>
    nameWithType: ObservableExtensions.Average<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Average(Of T)
    nameWithType: ObservableExtensions.Average(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  name: Average<T>(Expression<Func<T, Nullable<Int32>>>)
  nameWithType: ObservableExtensions.Average<T>(Expression<Func<T, Nullable<Int32>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<T>(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: ObservableExtensions.Average(Of T)(Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Average(Of T)(Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Average<T>
    nameWithType: ObservableExtensions.Average<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Average(Of T)
    nameWithType: ObservableExtensions.Average(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  name: Average<T>(Expression<Func<T, Nullable<Int64>>>)
  nameWithType: ObservableExtensions.Average<T>(Expression<Func<T, Nullable<Int64>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<T>(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: ObservableExtensions.Average(Of T)(Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Average(Of T)(Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Average<T>
    nameWithType: ObservableExtensions.Average<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Average(Of T)
    nameWithType: ObservableExtensions.Average(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  name: Average<T>(Expression<Func<T, Nullable<Single>>>)
  nameWithType: ObservableExtensions.Average<T>(Expression<Func<T, Nullable<Single>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<T>(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: ObservableExtensions.Average(Of T)(Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Average(Of T)(Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Average<T>
    nameWithType: ObservableExtensions.Average<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Average(Of T)
    nameWithType: ObservableExtensions.Average(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  name: Average<T>(Expression<Func<T, Nullable<Double>>>)
  nameWithType: ObservableExtensions.Average<T>(Expression<Func<T, Nullable<Double>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<T>(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: ObservableExtensions.Average(Of T)(Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Average(Of T)(Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Average<T>
    nameWithType: ObservableExtensions.Average<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Average(Of T)
    nameWithType: ObservableExtensions.Average(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  name: Average<T>(Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: ObservableExtensions.Average<T>(Expression<Func<T, Nullable<Decimal>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<T>(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: ObservableExtensions.Average(Of T)(Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Average(Of T)(Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Average<T>
    nameWithType: ObservableExtensions.Average<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Average(Of T)
    nameWithType: ObservableExtensions.Average(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable.NMF.Expressions.Linq.ObservableExtensions.Cast``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
  name: Cast<TResult>()
  nameWithType: ObservableExtensions.Cast<TResult>()
  fullName: NMF.Expressions.Linq.ObservableExtensions.Cast<TResult>()
  nameWithType.vb: ObservableExtensions.Cast(Of TResult)()
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Cast(Of TResult)()
  name.vb: Cast(Of TResult)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Cast``1
    name: Cast<TResult>
    nameWithType: ObservableExtensions.Cast<TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Cast<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Cast``1
    name: Cast(Of TResult)
    nameWithType: ObservableExtensions.Cast(Of TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Cast(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Concat``1(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: Concat<T>(IEnumerable<T>)
  nameWithType: ObservableExtensions.Concat<T>(IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Concat<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.Concat(Of T)(IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Concat(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Concat(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0})
    name: Concat<T>
    nameWithType: ObservableExtensions.Concat<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Concat<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0})
    name: Concat(Of T)
    nameWithType: ObservableExtensions.Concat(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Concat(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Contains``1({T})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0)
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0)
  name: Contains<T>(T)
  nameWithType: ObservableExtensions.Contains<T>(T)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Contains<T>(T)
  nameWithType.vb: ObservableExtensions.Contains(Of T)(T)
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Contains(Of T)(T)
  name.vb: Contains(Of T)(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(``0)
    name: Contains<T>
    nameWithType: ObservableExtensions.Contains<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Contains<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(``0)
    name: Contains(Of T)
    nameWithType: ObservableExtensions.Contains(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Contains(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Contains``1({T},System.Collections.Generic.IEqualityComparer{{T}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  name: Contains<T>(T, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.Contains<T>(T, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Contains<T>(T, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.Contains(Of T)(T, IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Contains(Of T)(T, System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: Contains(Of T)(T, IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(``0,System.Collections.Generic.IEqualityComparer{``0})
    name: Contains<T>
    nameWithType: ObservableExtensions.Contains<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Contains<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(``0,System.Collections.Generic.IEqualityComparer{``0})
    name: Contains(Of T)
    nameWithType: ObservableExtensions.Contains(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Contains(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Count``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0})
  name: Count<T>()
  nameWithType: ObservableExtensions.Count<T>()
  fullName: NMF.Expressions.Linq.ObservableExtensions.Count<T>()
  nameWithType.vb: ObservableExtensions.Count(Of T)()
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Count(Of T)()
  name.vb: Count(Of T)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1
    name: Count<T>
    nameWithType: ObservableExtensions.Count<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Count<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1
    name: Count(Of T)
    nameWithType: ObservableExtensions.Count(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Count(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Count``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Count<T>(Expression<Func<T, Boolean>>)
  nameWithType: ObservableExtensions.Count<T>(Expression<Func<T, Boolean>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Count<T>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: ObservableExtensions.Count(Of T)(Expression(Of Func(Of T, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Count(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Count(Of T)(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Count<T>
    nameWithType: ObservableExtensions.Count<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Count<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Count(Of T)
    nameWithType: ObservableExtensions.Count(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Count(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Distinct``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0})
  name: Distinct<T>()
  nameWithType: ObservableExtensions.Distinct<T>()
  fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct<T>()
  nameWithType.vb: ObservableExtensions.Distinct(Of T)()
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Distinct(Of T)()
  name.vb: Distinct(Of T)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1
    name: Distinct<T>
    nameWithType: ObservableExtensions.Distinct<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1
    name: Distinct(Of T)
    nameWithType: ObservableExtensions.Distinct(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Distinct``1(System.Collections.Generic.IEqualityComparer{{T}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Distinct<T>(IEqualityComparer<T>)
  nameWithType: ObservableExtensions.Distinct<T>(IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct<T>(System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.Distinct(Of T)(IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Distinct(Of T)(System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: Distinct(Of T)(IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(System.Collections.Generic.IEqualityComparer{``0})
    name: Distinct<T>
    nameWithType: ObservableExtensions.Distinct<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(System.Collections.Generic.IEqualityComparer{``0})
    name: Distinct(Of T)
    nameWithType: ObservableExtensions.Distinct(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Except``1(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: Except<T>(IEnumerable<T>)
  nameWithType: ObservableExtensions.Except<T>(IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Except<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.Except(Of T)(IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Except(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Except(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(System.Collections.Generic.IEnumerable{``0})
    name: Except<T>
    nameWithType: ObservableExtensions.Except<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Except<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(System.Collections.Generic.IEnumerable{``0})
    name: Except(Of T)
    nameWithType: ObservableExtensions.Except(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Except(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Except``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Except<T>(IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.Except<T>(IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Except<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.Except(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Except(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: Except(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Except<T>
    nameWithType: ObservableExtensions.Except<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Except<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Except(Of T)
    nameWithType: ObservableExtensions.Except(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Except(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  name: FirstOrDefault<T>()
  nameWithType: ObservableExtensions.FirstOrDefault<T>()
  fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault<T>()
  nameWithType.vb: ObservableExtensions.FirstOrDefault(Of T)()
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault(Of T)()
  name.vb: FirstOrDefault(Of T)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1
    name: FirstOrDefault<T>
    nameWithType: ObservableExtensions.FirstOrDefault<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1
    name: FirstOrDefault(Of T)
    nameWithType: ObservableExtensions.FirstOrDefault(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: FirstOrDefault<T>(Expression<Func<T, Boolean>>)
  nameWithType: ObservableExtensions.FirstOrDefault<T>(Expression<Func<T, Boolean>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault<T>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: ObservableExtensions.FirstOrDefault(Of T)(Expression(Of Func(Of T, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: FirstOrDefault(Of T)(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: FirstOrDefault<T>
    nameWithType: ObservableExtensions.FirstOrDefault<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: FirstOrDefault(Of T)
    nameWithType: ObservableExtensions.FirstOrDefault(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: GroupBy<T, TKey>(Expression<Func<T, TKey>>)
  nameWithType: ObservableExtensions.GroupBy<T, TKey>(Expression<Func<T, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<T, TKey>(System.Linq.Expressions.Expression<System.Func<T, TKey>>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of T, TKey)(Expression(Of Func(Of T, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of T, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)))
  name.vb: GroupBy(Of T, TKey)(Expression(Of Func(Of T, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: GroupBy<T, TKey>
    nameWithType: ObservableExtensions.GroupBy<T, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: GroupBy(Of T, TKey)
    nameWithType: ObservableExtensions.GroupBy(Of T, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  name: GroupBy<T, TKey>(Expression<Func<T, TKey>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupBy<T, TKey>(Expression<Func<T, TKey>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<T, TKey>(System.Linq.Expressions.Expression<System.Func<T, TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of T, TKey)(Expression(Of Func(Of T, TKey)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of T, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of T, TKey)(Expression(Of Func(Of T, TKey)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy<T, TKey>
    nameWithType: ObservableExtensions.GroupBy<T, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy(Of T, TKey)
    nameWithType: ObservableExtensions.GroupBy(Of T, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{T}},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  name: GroupBy<T, TKey, TResult>(Expression<Func<T, TKey>>, Expression<Func<TKey, IEnumerable<T>, TResult>>)
  nameWithType: ObservableExtensions.GroupBy<T, TKey, TResult>(Expression<Func<T, TKey>>, Expression<Func<TKey, IEnumerable<T>, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<T, TKey, TResult>(System.Linq.Expressions.Expression<System.Func<T, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<T>, TResult>>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of T, TKey, TResult)(Expression(Of Func(Of T, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of T), TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of T, TKey, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of T), TResult)))
  name.vb: GroupBy(Of T, TKey, TResult)(Expression(Of Func(Of T, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of T), TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
    name: GroupBy<T, TKey, TResult>
    nameWithType: ObservableExtensions.GroupBy<T, TKey, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<T, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
    name: GroupBy(Of T, TKey, TResult)
    nameWithType: ObservableExtensions.GroupBy(Of T, TKey, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of T, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{T}},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  name: GroupBy<T, TKey, TResult>(Expression<Func<T, TKey>>, Expression<Func<TKey, IEnumerable<T>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupBy<T, TKey, TResult>(Expression<Func<T, TKey>>, Expression<Func<TKey, IEnumerable<T>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<T, TKey, TResult>(System.Linq.Expressions.Expression<System.Func<T, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<T>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of T, TKey, TResult)(Expression(Of Func(Of T, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of T), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of T, TKey, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of T), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of T, TKey, TResult)(Expression(Of Func(Of T, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of T), TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy<T, TKey, TResult>
    nameWithType: ObservableExtensions.GroupBy<T, TKey, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<T, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy(Of T, TKey, TResult)
    nameWithType: ObservableExtensions.GroupBy(Of T, TKey, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of T, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{T},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  name: GroupJoin<T, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<T, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<T, IEnumerable<TInner>, TResult>>)
  nameWithType: ObservableExtensions.GroupJoin<T, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<T, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<T, IEnumerable<TInner>, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin<T, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<T, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<T, System.Collections.Generic.IEnumerable<TInner>, TResult>>)
  nameWithType.vb: ObservableExtensions.GroupJoin(Of T, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of T, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of T, IEnumerable(Of TInner), TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupJoin(Of T, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Collections.Generic.IEnumerable(Of TInner), TResult)))
  name.vb: GroupJoin(Of T, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of T, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of T, IEnumerable(Of TInner), TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
    name: GroupJoin<T, TInner, TKey, TResult>
    nameWithType: ObservableExtensions.GroupJoin<T, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin<T, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
    name: GroupJoin(Of T, TInner, TKey, TResult)
    nameWithType: ObservableExtensions.GroupJoin(Of T, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin(Of T, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{T},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  name: GroupJoin<T, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<T, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<T, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupJoin<T, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<T, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<T, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin<T, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<T, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<T, System.Collections.Generic.IEnumerable<TInner>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupJoin(Of T, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of T, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of T, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupJoin(Of T, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Collections.Generic.IEnumerable(Of TInner), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupJoin(Of T, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of T, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of T, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin<T, TInner, TKey, TResult>
    nameWithType: ObservableExtensions.GroupJoin<T, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin<T, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin(Of T, TInner, TKey, TResult)
    nameWithType: ObservableExtensions.GroupJoin(Of T, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin(Of T, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: Intersect<T>(IEnumerable<T>)
  nameWithType: ObservableExtensions.Intersect<T>(IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.Intersect(Of T)(IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Intersect(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Intersect(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{``0})
    name: Intersect<T>
    nameWithType: ObservableExtensions.Intersect<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{``0})
    name: Intersect(Of T)
    nameWithType: ObservableExtensions.Intersect(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Intersect<T>(IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.Intersect<T>(IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.Intersect(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Intersect(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: Intersect(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Intersect<T>
    nameWithType: ObservableExtensions.Intersect<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Intersect(Of T)
    nameWithType: ObservableExtensions.Intersect(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsProperSubsetOf<T>(IEnumerable<T>)
  nameWithType: ObservableExtensions.IsProperSubsetOf<T>(IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.IsProperSubsetOf(Of T)(IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSubsetOf(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsProperSubsetOf<T>
    nameWithType: ObservableExtensions.IsProperSubsetOf<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsProperSubsetOf(Of T)
    nameWithType: ObservableExtensions.IsProperSubsetOf(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsProperSubsetOf<T>(IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.IsProperSubsetOf<T>(IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.IsProperSubsetOf(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsProperSubsetOf(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSubsetOf<T>
    nameWithType: ObservableExtensions.IsProperSubsetOf<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSubsetOf(Of T)
    nameWithType: ObservableExtensions.IsProperSubsetOf(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsProperSupersetOf<T>(IEnumerable<T>)
  nameWithType: ObservableExtensions.IsProperSupersetOf<T>(IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.IsProperSupersetOf(Of T)(IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSupersetOf(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsProperSupersetOf<T>
    nameWithType: ObservableExtensions.IsProperSupersetOf<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsProperSupersetOf(Of T)
    nameWithType: ObservableExtensions.IsProperSupersetOf(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsProperSupersetOf<T>(IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.IsProperSupersetOf<T>(IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.IsProperSupersetOf(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsProperSupersetOf(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSupersetOf<T>
    nameWithType: ObservableExtensions.IsProperSupersetOf<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSupersetOf(Of T)
    nameWithType: ObservableExtensions.IsProperSupersetOf(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsSubsetOf<T>(IEnumerable<T>)
  nameWithType: ObservableExtensions.IsSubsetOf<T>(IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.IsSubsetOf(Of T)(IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSubsetOf(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsSubsetOf<T>
    nameWithType: ObservableExtensions.IsSubsetOf<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsSubsetOf(Of T)
    nameWithType: ObservableExtensions.IsSubsetOf(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsSubsetOf<T>(IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.IsSubsetOf<T>(IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.IsSubsetOf(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsSubsetOf(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSubsetOf<T>
    nameWithType: ObservableExtensions.IsSubsetOf<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSubsetOf(Of T)
    nameWithType: ObservableExtensions.IsSubsetOf(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsSupersetOf<T>(IEnumerable<T>)
  nameWithType: ObservableExtensions.IsSupersetOf<T>(IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.IsSupersetOf(Of T)(IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSupersetOf(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsSupersetOf<T>
    nameWithType: ObservableExtensions.IsSupersetOf<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsSupersetOf(Of T)
    nameWithType: ObservableExtensions.IsSupersetOf(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsSupersetOf<T>(IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.IsSupersetOf<T>(IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.IsSupersetOf(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsSupersetOf(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSupersetOf<T>
    nameWithType: ObservableExtensions.IsSupersetOf<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSupersetOf(Of T)
    nameWithType: ObservableExtensions.IsSupersetOf(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{T},{TInner},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  name: Join<T, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<T, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<T, TInner, TResult>>)
  nameWithType: ObservableExtensions.Join<T, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<T, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<T, TInner, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Join<T, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<T, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<T, TInner, TResult>>)
  nameWithType.vb: ObservableExtensions.Join(Of T, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of T, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of T, TInner, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Join(Of T, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of T, TInner, TResult)))
  name.vb: Join(Of T, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of T, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of T, TInner, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
    name: Join<T, TInner, TKey, TResult>
    nameWithType: ObservableExtensions.Join<T, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Join<T, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
    name: Join(Of T, TInner, TKey, TResult)
    nameWithType: ObservableExtensions.Join(Of T, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Join(Of T, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{T},{TInner},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  name: Join<T, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<T, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<T, TInner, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.Join<T, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<T, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<T, TInner, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Join<T, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<T, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<T, TInner, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.Join(Of T, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of T, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of T, TInner, TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Join(Of T, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of T, TInner, TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Join(Of T, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of T, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of T, TInner, TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: Join<T, TInner, TKey, TResult>
    nameWithType: ObservableExtensions.Join<T, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Join<T, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: Join(Of T, TInner, TKey, TResult)
    nameWithType: ObservableExtensions.Join(Of T, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Join(Of T, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Max``1(System.Collections.Generic.IComparer{{T}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  name: Max<T>(IComparer<T>)
  nameWithType: ObservableExtensions.Max<T>(IComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<T>(System.Collections.Generic.IComparer<T>)
  nameWithType.vb: ObservableExtensions.Max(Of T)(IComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of T)(System.Collections.Generic.IComparer(Of T))
  name.vb: Max(Of T)(IComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``1(System.Collections.Generic.IComparer{``0})
    name: Max<T>
    nameWithType: ObservableExtensions.Max<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``1(System.Collections.Generic.IComparer{``0})
    name: Max(Of T)
    nameWithType: ObservableExtensions.Max(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: Max<T, TResult>(Expression<Func<T, TResult>>)
  nameWithType: ObservableExtensions.Max<T, TResult>(Expression<Func<T, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<T, TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: ObservableExtensions.Max(Of T, TResult)(Expression(Of Func(Of T, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of T, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Max(Of T, TResult)(Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Max<T, TResult>
    nameWithType: ObservableExtensions.Max<T, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Max(Of T, TResult)
    nameWithType: ObservableExtensions.Max(Of T, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},System.Collections.Generic.IComparer{{TResult}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: Max<T, TResult>(Expression<Func<T, TResult>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Max<T, TResult>(Expression<Func<T, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<T, TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Max(Of T, TResult)(Expression(Of Func(Of T, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of T, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of T, TResult)(Expression(Of Func(Of T, TResult)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Max<T, TResult>
    nameWithType: ObservableExtensions.Max<T, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Max(Of T, TResult)
    nameWithType: ObservableExtensions.Max(Of T, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{{TResult}}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  name: Max<T, TResult>(Expression<Func<T, Nullable<TResult>>>)
  nameWithType: ObservableExtensions.Max<T, TResult>(Expression<Func<T, Nullable<TResult>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<T, TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<TResult>>>)
  nameWithType.vb: ObservableExtensions.Max(Of T, TResult)(Expression(Of Func(Of T, Nullable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of T, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of TResult))))
  name.vb: Max(Of T, TResult)(Expression(Of Func(Of T, Nullable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Max<T, TResult>
    nameWithType: ObservableExtensions.Max<T, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Max(Of T, TResult)
    nameWithType: ObservableExtensions.Max(Of T, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{{TResult}}}},System.Collections.Generic.IComparer{{TResult}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  name: Max<T, TResult>(Expression<Func<T, Nullable<TResult>>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Max<T, TResult>(Expression<Func<T, Nullable<TResult>>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<T, TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<TResult>>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Max(Of T, TResult)(Expression(Of Func(Of T, Nullable(Of TResult))), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of T, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of TResult))), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of T, TResult)(Expression(Of Func(Of T, Nullable(Of TResult))), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Max<T, TResult>
    nameWithType: ObservableExtensions.Max<T, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Max(Of T, TResult)
    nameWithType: ObservableExtensions.Max(Of T, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Min``1(System.Collections.Generic.IComparer{{T}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  name: Min<T>(IComparer<T>)
  nameWithType: ObservableExtensions.Min<T>(IComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<T>(System.Collections.Generic.IComparer<T>)
  nameWithType.vb: ObservableExtensions.Min(Of T)(IComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of T)(System.Collections.Generic.IComparer(Of T))
  name.vb: Min(Of T)(IComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``1(System.Collections.Generic.IComparer{``0})
    name: Min<T>
    nameWithType: ObservableExtensions.Min<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``1(System.Collections.Generic.IComparer{``0})
    name: Min(Of T)
    nameWithType: ObservableExtensions.Min(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: Min<T, TResult>(Expression<Func<T, TResult>>)
  nameWithType: ObservableExtensions.Min<T, TResult>(Expression<Func<T, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<T, TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: ObservableExtensions.Min(Of T, TResult)(Expression(Of Func(Of T, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of T, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Min(Of T, TResult)(Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Min<T, TResult>
    nameWithType: ObservableExtensions.Min<T, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Min(Of T, TResult)
    nameWithType: ObservableExtensions.Min(Of T, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},System.Collections.Generic.IComparer{{TResult}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: Min<T, TResult>(Expression<Func<T, TResult>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Min<T, TResult>(Expression<Func<T, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<T, TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Min(Of T, TResult)(Expression(Of Func(Of T, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of T, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of T, TResult)(Expression(Of Func(Of T, TResult)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Min<T, TResult>
    nameWithType: ObservableExtensions.Min<T, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Min(Of T, TResult)
    nameWithType: ObservableExtensions.Min(Of T, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{{TResult}}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  name: Min<T, TResult>(Expression<Func<T, Nullable<TResult>>>)
  nameWithType: ObservableExtensions.Min<T, TResult>(Expression<Func<T, Nullable<TResult>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<T, TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<TResult>>>)
  nameWithType.vb: ObservableExtensions.Min(Of T, TResult)(Expression(Of Func(Of T, Nullable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of T, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of TResult))))
  name.vb: Min(Of T, TResult)(Expression(Of Func(Of T, Nullable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Min<T, TResult>
    nameWithType: ObservableExtensions.Min<T, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Min(Of T, TResult)
    nameWithType: ObservableExtensions.Min(Of T, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{{TResult}}}},System.Collections.Generic.IComparer{{TResult}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  name: Min<T, TResult>(Expression<Func<T, Nullable<TResult>>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Min<T, TResult>(Expression<Func<T, Nullable<TResult>>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<T, TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<TResult>>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Min(Of T, TResult)(Expression(Of Func(Of T, Nullable(Of TResult))), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of T, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of TResult))), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of T, TResult)(Expression(Of Func(Of T, Nullable(Of TResult))), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Min<T, TResult>
    nameWithType: ObservableExtensions.Min<T, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Min(Of T, TResult)
    nameWithType: ObservableExtensions.Min(Of T, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable.NMF.Expressions.Linq.ObservableExtensions.OfType``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
  name: OfType<TResult>()
  nameWithType: ObservableExtensions.OfType<TResult>()
  fullName: NMF.Expressions.Linq.ObservableExtensions.OfType<TResult>()
  nameWithType.vb: ObservableExtensions.OfType(Of TResult)()
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OfType(Of TResult)()
  name.vb: OfType(Of TResult)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OfType``1
    name: OfType<TResult>
    nameWithType: ObservableExtensions.OfType<TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.OfType<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OfType``1
    name: OfType(Of TResult)
    nameWithType: ObservableExtensions.OfType(Of TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.OfType(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: OrderBy<T, TKey>(Expression<Func<T, TKey>>)
  nameWithType: ObservableExtensions.OrderBy<T, TKey>(Expression<Func<T, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy<T, TKey>(System.Linq.Expressions.Expression<System.Func<T, TKey>>)
  nameWithType.vb: ObservableExtensions.OrderBy(Of T, TKey)(Expression(Of Func(Of T, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderBy(Of T, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)))
  name.vb: OrderBy(Of T, TKey)(Expression(Of Func(Of T, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderBy<T, TKey>
    nameWithType: ObservableExtensions.OrderBy<T, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderBy(Of T, TKey)
    nameWithType: ObservableExtensions.OrderBy(Of T, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: OrderBy<T, TKey>(Expression<Func<T, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.OrderBy<T, TKey>(Expression<Func<T, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy<T, TKey>(System.Linq.Expressions.Expression<System.Func<T, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ObservableExtensions.OrderBy(Of T, TKey)(Expression(Of Func(Of T, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderBy(Of T, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderBy(Of T, TKey)(Expression(Of Func(Of T, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderBy<T, TKey>
    nameWithType: ObservableExtensions.OrderBy<T, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderBy(Of T, TKey)
    nameWithType: ObservableExtensions.OrderBy(Of T, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: OrderByDescending<T, TKey>(Expression<Func<T, TKey>>)
  nameWithType: ObservableExtensions.OrderByDescending<T, TKey>(Expression<Func<T, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending<T, TKey>(System.Linq.Expressions.Expression<System.Func<T, TKey>>)
  nameWithType.vb: ObservableExtensions.OrderByDescending(Of T, TKey)(Expression(Of Func(Of T, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending(Of T, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)))
  name.vb: OrderByDescending(Of T, TKey)(Expression(Of Func(Of T, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderByDescending<T, TKey>
    nameWithType: ObservableExtensions.OrderByDescending<T, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderByDescending(Of T, TKey)
    nameWithType: ObservableExtensions.OrderByDescending(Of T, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: OrderByDescending<T, TKey>(Expression<Func<T, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.OrderByDescending<T, TKey>(Expression<Func<T, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending<T, TKey>(System.Linq.Expressions.Expression<System.Func<T, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ObservableExtensions.OrderByDescending(Of T, TKey)(Expression(Of Func(Of T, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending(Of T, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderByDescending(Of T, TKey)(Expression(Of Func(Of T, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending<T, TKey>
    nameWithType: ObservableExtensions.OrderByDescending<T, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending(Of T, TKey)
    nameWithType: ObservableExtensions.OrderByDescending(Of T, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: Select<T, TResult>(Expression<Func<T, TResult>>)
  nameWithType: ObservableExtensions.Select<T, TResult>(Expression<Func<T, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Select<T, TResult>(System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: ObservableExtensions.Select(Of T, TResult)(Expression(Of Func(Of T, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Select(Of T, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Select(Of T, TResult)(Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Select<T, TResult>
    nameWithType: ObservableExtensions.Select<T, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Select<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Select(Of T, TResult)
    nameWithType: ObservableExtensions.Select(Of T, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Select(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(System.Linq.Expressions.Expression{System.Func{{T},System.Collections.Generic.IEnumerable{{TIntermediate}}}},System.Linq.Expressions.Expression{System.Func{{T},{TIntermediate},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  name: SelectMany<T, TIntermediate, TResult>(Expression<Func<T, IEnumerable<TIntermediate>>>, Expression<Func<T, TIntermediate, TResult>>)
  nameWithType: ObservableExtensions.SelectMany<T, TIntermediate, TResult>(Expression<Func<T, IEnumerable<TIntermediate>>>, Expression<Func<T, TIntermediate, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<T, TIntermediate, TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Collections.Generic.IEnumerable<TIntermediate>>>, System.Linq.Expressions.Expression<System.Func<T, TIntermediate, TResult>>)
  nameWithType.vb: ObservableExtensions.SelectMany(Of T, TIntermediate, TResult)(Expression(Of Func(Of T, IEnumerable(Of TIntermediate))), Expression(Of Func(Of T, TIntermediate, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of T, TIntermediate, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Collections.Generic.IEnumerable(Of TIntermediate))), System.Linq.Expressions.Expression(Of System.Func(Of T, TIntermediate, TResult)))
  name.vb: SelectMany(Of T, TIntermediate, TResult)(Expression(Of Func(Of T, IEnumerable(Of TIntermediate))), Expression(Of Func(Of T, TIntermediate, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
    name: SelectMany<T, TIntermediate, TResult>
    nameWithType: ObservableExtensions.SelectMany<T, TIntermediate, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<T, TIntermediate, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
    name: SelectMany(Of T, TIntermediate, TResult)
    nameWithType: ObservableExtensions.SelectMany(Of T, TIntermediate, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of T, TIntermediate, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(System.Linq.Expressions.Expression{System.Func{{T},System.Collections.Generic.IEnumerable{{TResult}}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  name: SelectMany<T, TResult>(Expression<Func<T, IEnumerable<TResult>>>)
  nameWithType: ObservableExtensions.SelectMany<T, TResult>(Expression<Func<T, IEnumerable<TResult>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<T, TResult>(System.Linq.Expressions.Expression<System.Func<T, System.Collections.Generic.IEnumerable<TResult>>>)
  nameWithType.vb: ObservableExtensions.SelectMany(Of T, TResult)(Expression(Of Func(Of T, IEnumerable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of T, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Collections.Generic.IEnumerable(Of TResult))))
  name.vb: SelectMany(Of T, TResult)(Expression(Of Func(Of T, IEnumerable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
    name: SelectMany<T, TResult>
    nameWithType: ObservableExtensions.SelectMany<T, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
    name: SelectMany(Of T, TResult)
    nameWithType: ObservableExtensions.SelectMany(Of T, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: SetEquals<T>(IEnumerable<T>)
  nameWithType: ObservableExtensions.SetEquals<T>(IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.SetEquals(Of T)(IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SetEquals(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SetEquals(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{``0})
    name: SetEquals<T>
    nameWithType: ObservableExtensions.SetEquals<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{``0})
    name: SetEquals(Of T)
    nameWithType: ObservableExtensions.SetEquals(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: SetEquals<T>(IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.SetEquals<T>(IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.SetEquals(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SetEquals(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: SetEquals(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: SetEquals<T>
    nameWithType: ObservableExtensions.SetEquals<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: SetEquals(Of T)
    nameWithType: ObservableExtensions.SetEquals(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  name: SingleOrDefault<T>()
  nameWithType: ObservableExtensions.SingleOrDefault<T>()
  fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault<T>()
  nameWithType.vb: ObservableExtensions.SingleOrDefault(Of T)()
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault(Of T)()
  name.vb: SingleOrDefault(Of T)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1
    name: SingleOrDefault<T>
    nameWithType: ObservableExtensions.SingleOrDefault<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1
    name: SingleOrDefault(Of T)
    nameWithType: ObservableExtensions.SingleOrDefault(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: SingleOrDefault<T>(Expression<Func<T, Boolean>>)
  nameWithType: ObservableExtensions.SingleOrDefault<T>(Expression<Func<T, Boolean>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault<T>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: ObservableExtensions.SingleOrDefault(Of T)(Expression(Of Func(Of T, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: SingleOrDefault(Of T)(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: SingleOrDefault<T>
    nameWithType: ObservableExtensions.SingleOrDefault<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: SingleOrDefault(Of T)
    nameWithType: ObservableExtensions.SingleOrDefault(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Int32}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  name: Sum<T>(Expression<Func<T, Int32>>)
  nameWithType: ObservableExtensions.Sum<T>(Expression<Func<T, Int32>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<T>(System.Linq.Expressions.Expression<System.Func<T, System.Int32>>)
  nameWithType.vb: ObservableExtensions.Sum(Of T)(Expression(Of Func(Of T, Int32)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int32)))
  name.vb: Sum(Of T)(Expression(Of Func(Of T, Int32)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Sum<T>
    nameWithType: ObservableExtensions.Sum<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Sum(Of T)
    nameWithType: ObservableExtensions.Sum(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Int64}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  name: Sum<T>(Expression<Func<T, Int64>>)
  nameWithType: ObservableExtensions.Sum<T>(Expression<Func<T, Int64>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<T>(System.Linq.Expressions.Expression<System.Func<T, System.Int64>>)
  nameWithType.vb: ObservableExtensions.Sum(Of T)(Expression(Of Func(Of T, Int64)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Int64)))
  name.vb: Sum(Of T)(Expression(Of Func(Of T, Int64)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Sum<T>
    nameWithType: ObservableExtensions.Sum<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Sum(Of T)
    nameWithType: ObservableExtensions.Sum(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Single}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  name: Sum<T>(Expression<Func<T, Single>>)
  nameWithType: ObservableExtensions.Sum<T>(Expression<Func<T, Single>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<T>(System.Linq.Expressions.Expression<System.Func<T, System.Single>>)
  nameWithType.vb: ObservableExtensions.Sum(Of T)(Expression(Of Func(Of T, Single)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Single)))
  name.vb: Sum(Of T)(Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Sum<T>
    nameWithType: ObservableExtensions.Sum<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Sum(Of T)
    nameWithType: ObservableExtensions.Sum(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Double}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  name: Sum<T>(Expression<Func<T, Double>>)
  nameWithType: ObservableExtensions.Sum<T>(Expression<Func<T, Double>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<T>(System.Linq.Expressions.Expression<System.Func<T, System.Double>>)
  nameWithType.vb: ObservableExtensions.Sum(Of T)(Expression(Of Func(Of T, Double)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Double)))
  name.vb: Sum(Of T)(Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Sum<T>
    nameWithType: ObservableExtensions.Sum<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Sum(Of T)
    nameWithType: ObservableExtensions.Sum(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  name: Sum<T>(Expression<Func<T, Decimal>>)
  nameWithType: ObservableExtensions.Sum<T>(Expression<Func<T, Decimal>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<T>(System.Linq.Expressions.Expression<System.Func<T, System.Decimal>>)
  nameWithType.vb: ObservableExtensions.Sum(Of T)(Expression(Of Func(Of T, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Decimal)))
  name.vb: Sum(Of T)(Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Sum<T>
    nameWithType: ObservableExtensions.Sum<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Sum(Of T)
    nameWithType: ObservableExtensions.Sum(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  name: Sum<T>(Expression<Func<T, Nullable<Int32>>>)
  nameWithType: ObservableExtensions.Sum<T>(Expression<Func<T, Nullable<Int32>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<T>(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int32>>>)
  nameWithType.vb: ObservableExtensions.Sum(Of T)(Expression(Of Func(Of T, Nullable(Of Int32))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int32))))
  name.vb: Sum(Of T)(Expression(Of Func(Of T, Nullable(Of Int32))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Sum<T>
    nameWithType: ObservableExtensions.Sum<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Sum(Of T)
    nameWithType: ObservableExtensions.Sum(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  name: Sum<T>(Expression<Func<T, Nullable<Int64>>>)
  nameWithType: ObservableExtensions.Sum<T>(Expression<Func<T, Nullable<Int64>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<T>(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Int64>>>)
  nameWithType.vb: ObservableExtensions.Sum(Of T)(Expression(Of Func(Of T, Nullable(Of Int64))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Int64))))
  name.vb: Sum(Of T)(Expression(Of Func(Of T, Nullable(Of Int64))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Sum<T>
    nameWithType: ObservableExtensions.Sum<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Sum(Of T)
    nameWithType: ObservableExtensions.Sum(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  name: Sum<T>(Expression<Func<T, Nullable<Single>>>)
  nameWithType: ObservableExtensions.Sum<T>(Expression<Func<T, Nullable<Single>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<T>(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Single>>>)
  nameWithType.vb: ObservableExtensions.Sum(Of T)(Expression(Of Func(Of T, Nullable(Of Single))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Single))))
  name.vb: Sum(Of T)(Expression(Of Func(Of T, Nullable(Of Single))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Sum<T>
    nameWithType: ObservableExtensions.Sum<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Sum(Of T)
    nameWithType: ObservableExtensions.Sum(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  name: Sum<T>(Expression<Func<T, Nullable<Double>>>)
  nameWithType: ObservableExtensions.Sum<T>(Expression<Func<T, Nullable<Double>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<T>(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Double>>>)
  nameWithType.vb: ObservableExtensions.Sum(Of T)(Expression(Of Func(Of T, Nullable(Of Double))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Double))))
  name.vb: Sum(Of T)(Expression(Of Func(Of T, Nullable(Of Double))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Sum<T>
    nameWithType: ObservableExtensions.Sum<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Sum(Of T)
    nameWithType: ObservableExtensions.Sum(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  name: Sum<T>(Expression<Func<T, Nullable<Decimal>>>)
  nameWithType: ObservableExtensions.Sum<T>(Expression<Func<T, Nullable<Decimal>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<T>(System.Linq.Expressions.Expression<System.Func<T, System.Nullable<System.Decimal>>>)
  nameWithType.vb: ObservableExtensions.Sum(Of T)(Expression(Of Func(Of T, Nullable(Of Decimal))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Of T)(Expression(Of Func(Of T, Nullable(Of Decimal))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Sum<T>
    nameWithType: ObservableExtensions.Sum<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Sum(Of T)
    nameWithType: ObservableExtensions.Sum(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{{T},{TKey}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: TopX<T, TKey>(Int32, Expression<Func<T, TKey>>)
  nameWithType: ObservableExtensions.TopX<T, TKey>(Int32, Expression<Func<T, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.TopX<T, TKey>(System.Int32, System.Linq.Expressions.Expression<System.Func<T, TKey>>)
  nameWithType.vb: ObservableExtensions.TopX(Of T, TKey)(Int32, Expression(Of Func(Of T, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.TopX(Of T, TKey)(System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)))
  name.vb: TopX(Of T, TKey)(Int32, Expression(Of Func(Of T, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: TopX<T, TKey>
    nameWithType: ObservableExtensions.TopX<T, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.TopX<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: TopX(Of T, TKey)
    nameWithType: ObservableExtensions.TopX(Of T, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.TopX(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: TopX<T, TKey>(Int32, Expression<Func<T, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.TopX<T, TKey>(Int32, Expression<Func<T, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.TopX<T, TKey>(System.Int32, System.Linq.Expressions.Expression<System.Func<T, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ObservableExtensions.TopX(Of T, TKey)(Int32, Expression(Of Func(Of T, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.TopX(Of T, TKey)(System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: TopX(Of T, TKey)(Int32, Expression(Of Func(Of T, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: TopX<T, TKey>
    nameWithType: ObservableExtensions.TopX<T, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.TopX<T, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: TopX(Of T, TKey)
    nameWithType: ObservableExtensions.TopX(Of T, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.TopX(Of T, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Union``1(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: Union<T>(IEnumerable<T>)
  nameWithType: ObservableExtensions.Union<T>(IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Union<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.Union(Of T)(IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Union(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Union(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(System.Collections.Generic.IEnumerable{``0})
    name: Union<T>
    nameWithType: ObservableExtensions.Union<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Union<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(System.Collections.Generic.IEnumerable{``0})
    name: Union(Of T)
    nameWithType: ObservableExtensions.Union(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Union(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Union``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Union<T>(IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.Union<T>(IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Union<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.Union(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Union(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: Union(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Union<T>
    nameWithType: ObservableExtensions.Union<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Union<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Union(Of T)
    nameWithType: ObservableExtensions.Union(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Union(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Where<T>(Expression<Func<T, Boolean>>)
  nameWithType: ObservableExtensions.Where<T>(Expression<Func<T, Boolean>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Where<T>(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: ObservableExtensions.Where(Of T)(Expression(Of Func(Of T, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Where(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Where(Of T)(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where<T>
    nameWithType: ObservableExtensions.Where<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Where<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where(Of T)
    nameWithType: ObservableExtensions.Where(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Where(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  name: WithUpdates<T>()
  nameWithType: ObservableExtensions.WithUpdates<T>()
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>()
  nameWithType.vb: ObservableExtensions.WithUpdates(Of T)()
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)()
  name.vb: WithUpdates(Of T)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
    name: WithUpdates<T>
    nameWithType: ObservableExtensions.WithUpdates<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
    name: WithUpdates(Of T)
    nameWithType: ObservableExtensions.WithUpdates(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{`0}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
  name: WithUpdates<T>()
  nameWithType: ObservableExtensions.WithUpdates<T>()
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>()
  nameWithType.vb: ObservableExtensions.WithUpdates(Of T)()
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)()
  name.vb: WithUpdates(Of T)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
    name: WithUpdates<T>
    nameWithType: ObservableExtensions.WithUpdates<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
    name: WithUpdates(Of T)
    nameWithType: ObservableExtensions.WithUpdates(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.INotifyEnumerable`1
  commentId: T:NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<T>
  nameWithType: INotifyEnumerable<T>
  fullName: NMF.Expressions.INotifyEnumerable<T>
  nameWithType.vb: INotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of T)
  name.vb: INotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Specialized
  commentId: N:System.Collections.Specialized
  isExternal: true
  name: System.Collections.Specialized
  nameWithType: System.Collections.Specialized
  fullName: System.Collections.Specialized
- uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: ToLookup<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>)
  nameWithType: LookupExtensions.ToLookup<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>)
  fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TSource, TKey>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  nameWithType.vb: LookupExtensions.ToLookup(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)))
  fullName.vb: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TSource, TKey)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: ToLookup(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup<TSource, TKey>
    nameWithType: LookupExtensions.ToLookup<TSource, TKey>
    fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TSource, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup(Of TSource, TKey)
    nameWithType: LookupExtensions.ToLookup(Of TSource, TKey)
    fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TSource, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.LookupExtensions
  commentId: T:NMF.Expressions.Linq.LookupExtensions
  parent: NMF.Expressions.Linq
  name: LookupExtensions
  nameWithType: LookupExtensions
  fullName: NMF.Expressions.Linq.LookupExtensions
- uid: NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: All<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Boolean>>)
  nameWithType: ObservableExtensions.All<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Boolean>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.All<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  nameWithType.vb: ObservableExtensions.All(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.All(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: All(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: All<TSource>
    nameWithType: ObservableExtensions.All<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.All<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: All(Of TSource)
    nameWithType: ObservableExtensions.All(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.All(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions
  commentId: T:NMF.Expressions.Linq.ObservableExtensions
  parent: NMF.Expressions.Linq
  name: ObservableExtensions
  nameWithType: ObservableExtensions
  fullName: NMF.Expressions.Linq.ObservableExtensions
- uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0})
  name: Any<TSource>(INotifyEnumerable<TSource>)
  nameWithType: ObservableExtensions.Any<TSource>(INotifyEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Any<TSource>(NMF.Expressions.INotifyEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.Any(Of TSource)(INotifyEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Any(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource))
  name.vb: Any(Of TSource)(INotifyEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0})
    name: Any<TSource>
    nameWithType: ObservableExtensions.Any<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Any<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0})
    name: Any(Of TSource)
    nameWithType: ObservableExtensions.Any(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Any(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: Any<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Boolean>>)
  nameWithType: ObservableExtensions.Any<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Boolean>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Any<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  nameWithType.vb: ObservableExtensions.Any(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Any(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: Any(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Any<TSource>
    nameWithType: ObservableExtensions.Any<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Any<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Any(Of TSource)
    nameWithType: ObservableExtensions.Any(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Any(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Int32>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Int32>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Int32)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Int32)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Average<TSource>
    nameWithType: ObservableExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Average(Of TSource)
    nameWithType: ObservableExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Int64>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Int64>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Int64)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int64)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Int64)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Average<TSource>
    nameWithType: ObservableExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Average(Of TSource)
    nameWithType: ObservableExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Single>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Single>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Single>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Single)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Average<TSource>
    nameWithType: ObservableExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Average(Of TSource)
    nameWithType: ObservableExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Double>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Double>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Double>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Double)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Average<TSource>
    nameWithType: ObservableExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Average(Of TSource)
    nameWithType: ObservableExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Decimal>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Decimal>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Decimal)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Average<TSource>
    nameWithType: ObservableExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Average(Of TSource)
    nameWithType: ObservableExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Int32>>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Int32>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int32))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32))))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int32))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Average<TSource>
    nameWithType: ObservableExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Average(Of TSource)
    nameWithType: ObservableExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Int64>>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Int64>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int64))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64))))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int64))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Average<TSource>
    nameWithType: ObservableExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Average(Of TSource)
    nameWithType: ObservableExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Single>>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Single>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Single))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single))))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Single))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Average<TSource>
    nameWithType: ObservableExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Average(Of TSource)
    nameWithType: ObservableExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Double>>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Double>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Double))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double))))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Double))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Average<TSource>
    nameWithType: ObservableExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Average(Of TSource)
    nameWithType: ObservableExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Decimal))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal))))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Decimal))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Average<TSource>
    nameWithType: ObservableExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Average(Of TSource)
    nameWithType: ObservableExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
  name: Cast<TResult>(INotifyEnumerable)
  nameWithType: ObservableExtensions.Cast<TResult>(INotifyEnumerable)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Cast<TResult>(NMF.Expressions.INotifyEnumerable)
  nameWithType.vb: ObservableExtensions.Cast(Of TResult)(INotifyEnumerable)
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Cast(Of TResult)(NMF.Expressions.INotifyEnumerable)
  name.vb: Cast(Of TResult)(INotifyEnumerable)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
    name: Cast<TResult>
    nameWithType: ObservableExtensions.Cast<TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Cast<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
    name: Cast(Of TResult)
    nameWithType: ObservableExtensions.Cast(Of TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Cast(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Concat<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: ObservableExtensions.Concat<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Concat<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.Concat(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Concat(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Concat(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Concat<TSource>
    nameWithType: ObservableExtensions.Concat<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Concat<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Concat(Of TSource)
    nameWithType: ObservableExtensions.Concat(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Concat(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0)
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0)
  name: Contains<TSource>(INotifyEnumerable<TSource>, TSource)
  nameWithType: ObservableExtensions.Contains<TSource>(INotifyEnumerable<TSource>, TSource)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Contains<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, TSource)
  nameWithType.vb: ObservableExtensions.Contains(Of TSource)(INotifyEnumerable(Of TSource), TSource)
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Contains(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), TSource)
  name.vb: Contains(Of TSource)(INotifyEnumerable(Of TSource), TSource)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0)
    name: Contains<TSource>
    nameWithType: ObservableExtensions.Contains<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Contains<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0)
    name: Contains(Of TSource)
    nameWithType: ObservableExtensions.Contains(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Contains(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Contains<TSource>(INotifyEnumerable<TSource>, TSource, IEqualityComparer<TSource>)
  nameWithType: ObservableExtensions.Contains<TSource>(INotifyEnumerable<TSource>, TSource, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Contains<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ObservableExtensions.Contains(Of TSource)(INotifyEnumerable(Of TSource), TSource, IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Contains(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), TSource, System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Contains(Of TSource)(INotifyEnumerable(Of TSource), TSource, IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
    name: Contains<TSource>
    nameWithType: ObservableExtensions.Contains<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Contains<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
    name: Contains(Of TSource)
    nameWithType: ObservableExtensions.Contains(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Contains(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0})
  name: Count<TSource>(INotifyEnumerable<TSource>)
  nameWithType: ObservableExtensions.Count<TSource>(INotifyEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Count<TSource>(NMF.Expressions.INotifyEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.Count(Of TSource)(INotifyEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Count(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource))
  name.vb: Count(Of TSource)(INotifyEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0})
    name: Count<TSource>
    nameWithType: ObservableExtensions.Count<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Count<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0})
    name: Count(Of TSource)
    nameWithType: ObservableExtensions.Count(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Count(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: Count<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Boolean>>)
  nameWithType: ObservableExtensions.Count<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Boolean>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Count<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  nameWithType.vb: ObservableExtensions.Count(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Count(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: Count(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Count<TSource>
    nameWithType: ObservableExtensions.Count<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Count<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Count(Of TSource)
    nameWithType: ObservableExtensions.Count(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Count(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0})
  name: Distinct<TSource>(INotifyEnumerable<TSource>)
  nameWithType: ObservableExtensions.Distinct<TSource>(INotifyEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct<TSource>(NMF.Expressions.INotifyEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.Distinct(Of TSource)(INotifyEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Distinct(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource))
  name.vb: Distinct(Of TSource)(INotifyEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0})
    name: Distinct<TSource>
    nameWithType: ObservableExtensions.Distinct<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0})
    name: Distinct(Of TSource)
    nameWithType: ObservableExtensions.Distinct(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Distinct<TSource>(INotifyEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ObservableExtensions.Distinct<TSource>(INotifyEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ObservableExtensions.Distinct(Of TSource)(INotifyEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Distinct(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Distinct(Of TSource)(INotifyEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Distinct<TSource>
    nameWithType: ObservableExtensions.Distinct<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Distinct(Of TSource)
    nameWithType: ObservableExtensions.Distinct(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Except<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: ObservableExtensions.Except<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Except<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.Except(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Except(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Except(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Except<TSource>
    nameWithType: ObservableExtensions.Except<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Except<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Except(Of TSource)
    nameWithType: ObservableExtensions.Except(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Except(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Except<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ObservableExtensions.Except<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Except<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ObservableExtensions.Except(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Except(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Except(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Except<TSource>
    nameWithType: ObservableExtensions.Except<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Except<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Except(Of TSource)
    nameWithType: ObservableExtensions.Except(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Except(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  name: FirstOrDefault<TSource>(INotifyEnumerable<TSource>)
  nameWithType: ObservableExtensions.FirstOrDefault<TSource>(INotifyEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault<TSource>(NMF.Expressions.INotifyEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.FirstOrDefault(Of TSource)(INotifyEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource))
  name.vb: FirstOrDefault(Of TSource)(INotifyEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
    name: FirstOrDefault<TSource>
    nameWithType: ObservableExtensions.FirstOrDefault<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
    name: FirstOrDefault(Of TSource)
    nameWithType: ObservableExtensions.FirstOrDefault(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: FirstOrDefault<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Boolean>>)
  nameWithType: ObservableExtensions.FirstOrDefault<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Boolean>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  nameWithType.vb: ObservableExtensions.FirstOrDefault(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: FirstOrDefault(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: FirstOrDefault<TSource>
    nameWithType: ObservableExtensions.FirstOrDefault<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: FirstOrDefault(Of TSource)
    nameWithType: ObservableExtensions.FirstOrDefault(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: GroupBy<TSource, TKey>
    nameWithType: ObservableExtensions.GroupBy<TSource, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: GroupBy(Of TSource, TKey)
    nameWithType: ObservableExtensions.GroupBy(Of TSource, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  isExternal: true
  name: GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy<TSource, TKey>
    nameWithType: ObservableExtensions.GroupBy<TSource, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy(Of TSource, TKey)
    nameWithType: ObservableExtensions.GroupBy(Of TSource, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  isExternal: true
  name: GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)))
  name.vb: GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
    name: GroupBy<TSource, TKey, TResult>
    nameWithType: ObservableExtensions.GroupBy<TSource, TKey, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
    name: GroupBy(Of TSource, TKey, TResult)
    nameWithType: ObservableExtensions.GroupBy(Of TSource, TKey, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  isExternal: true
  name: GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy<TSource, TKey, TResult>
    nameWithType: ObservableExtensions.GroupBy<TSource, TKey, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy(Of TSource, TKey, TResult)
    nameWithType: ObservableExtensions.GroupBy(Of TSource, TKey, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  isExternal: true
  name: GroupJoin<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>)
  nameWithType: ObservableExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>)
  nameWithType.vb: ObservableExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
    name: GroupJoin<TOuter, TInner, TKey, TResult>
    nameWithType: ObservableExtensions.GroupJoin<TOuter, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin<TOuter, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
    name: GroupJoin(Of TOuter, TInner, TKey, TResult)
    nameWithType: ObservableExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  isExternal: true
  name: GroupJoin<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin<TOuter, TInner, TKey, TResult>
    nameWithType: ObservableExtensions.GroupJoin<TOuter, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin<TOuter, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin(Of TOuter, TInner, TKey, TResult)
    nameWithType: ObservableExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Intersect<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: ObservableExtensions.Intersect<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.Intersect(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Intersect(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Intersect(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Intersect<TSource>
    nameWithType: ObservableExtensions.Intersect<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Intersect(Of TSource)
    nameWithType: ObservableExtensions.Intersect(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Intersect<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ObservableExtensions.Intersect<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ObservableExtensions.Intersect(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Intersect(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Intersect(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Intersect<TSource>
    nameWithType: ObservableExtensions.Intersect<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Intersect(Of TSource)
    nameWithType: ObservableExtensions.Intersect(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsProperSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  nameWithType: ObservableExtensions.IsProperSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.IsProperSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsProperSubsetOf<T>
    nameWithType: ObservableExtensions.IsProperSubsetOf<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsProperSubsetOf(Of T)
    nameWithType: ObservableExtensions.IsProperSubsetOf(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsProperSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.IsProperSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.IsProperSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsProperSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSubsetOf<T>
    nameWithType: ObservableExtensions.IsProperSubsetOf<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSubsetOf(Of T)
    nameWithType: ObservableExtensions.IsProperSubsetOf(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsProperSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  nameWithType: ObservableExtensions.IsProperSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.IsProperSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsProperSupersetOf<T>
    nameWithType: ObservableExtensions.IsProperSupersetOf<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsProperSupersetOf(Of T)
    nameWithType: ObservableExtensions.IsProperSupersetOf(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsProperSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.IsProperSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.IsProperSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsProperSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSupersetOf<T>
    nameWithType: ObservableExtensions.IsProperSupersetOf<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSupersetOf(Of T)
    nameWithType: ObservableExtensions.IsProperSupersetOf(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  nameWithType: ObservableExtensions.IsSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.IsSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsSubsetOf<T>
    nameWithType: ObservableExtensions.IsSubsetOf<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsSubsetOf(Of T)
    nameWithType: ObservableExtensions.IsSubsetOf(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.IsSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.IsSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSubsetOf<T>
    nameWithType: ObservableExtensions.IsSubsetOf<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSubsetOf(Of T)
    nameWithType: ObservableExtensions.IsSubsetOf(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  nameWithType: ObservableExtensions.IsSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.IsSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsSupersetOf<T>
    nameWithType: ObservableExtensions.IsSupersetOf<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsSupersetOf(Of T)
    nameWithType: ObservableExtensions.IsSupersetOf(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.IsSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.IsSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSupersetOf<T>
    nameWithType: ObservableExtensions.IsSupersetOf<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSupersetOf(Of T)
    nameWithType: ObservableExtensions.IsSupersetOf(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  isExternal: true
  name: Join<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>)
  nameWithType: ObservableExtensions.Join<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Join<TOuter, TInner, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>)
  nameWithType.vb: ObservableExtensions.Join(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Join(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult)))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
    name: Join<TOuter, TInner, TKey, TResult>
    nameWithType: ObservableExtensions.Join<TOuter, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Join<TOuter, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
    name: Join(Of TOuter, TInner, TKey, TResult)
    nameWithType: ObservableExtensions.Join(Of TOuter, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Join(Of TOuter, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  isExternal: true
  name: Join<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.Join<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Join<TOuter, TInner, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.Join(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Join(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: Join<TOuter, TInner, TKey, TResult>
    nameWithType: ObservableExtensions.Join<TOuter, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Join<TOuter, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: Join(Of TOuter, TInner, TKey, TResult)
    nameWithType: ObservableExtensions.Join(Of TOuter, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Join(Of TOuter, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  isExternal: true
  name: Max<TSource>(INotifyEnumerable<TSource>, IComparer<TSource>)
  nameWithType: ObservableExtensions.Max<TSource>(INotifyEnumerable<TSource>, IComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IComparer<TSource>)
  nameWithType.vb: ObservableExtensions.Max(Of TSource)(INotifyEnumerable(Of TSource), IComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IComparer(Of TSource))
  name.vb: Max(Of TSource)(INotifyEnumerable(Of TSource), IComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
    name: Max<TSource>
    nameWithType: ObservableExtensions.Max<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
    name: Max(Of TSource)
    nameWithType: ObservableExtensions.Max(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  nameWithType: ObservableExtensions.Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  nameWithType.vb: ObservableExtensions.Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Max<TSource, TResult>
    nameWithType: ObservableExtensions.Max<TSource, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Max(Of TSource, TResult)
    nameWithType: ObservableExtensions.Max(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Max<TSource, TResult>
    nameWithType: ObservableExtensions.Max<TSource, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Max(Of TSource, TResult)
    nameWithType: ObservableExtensions.Max(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  isExternal: true
  name: Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<TResult>>>)
  nameWithType: ObservableExtensions.Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<TResult>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<TResult>>>)
  nameWithType.vb: ObservableExtensions.Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of TResult))))
  name.vb: Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Max<TSource, TResult>
    nameWithType: ObservableExtensions.Max<TSource, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Max(Of TSource, TResult)
    nameWithType: ObservableExtensions.Max(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<TResult>>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<TResult>>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<TResult>>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of TResult))), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Max<TSource, TResult>
    nameWithType: ObservableExtensions.Max<TSource, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Max(Of TSource, TResult)
    nameWithType: ObservableExtensions.Max(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  isExternal: true
  name: Min<TSource>(INotifyEnumerable<TSource>, IComparer<TSource>)
  nameWithType: ObservableExtensions.Min<TSource>(INotifyEnumerable<TSource>, IComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IComparer<TSource>)
  nameWithType.vb: ObservableExtensions.Min(Of TSource)(INotifyEnumerable(Of TSource), IComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IComparer(Of TSource))
  name.vb: Min(Of TSource)(INotifyEnumerable(Of TSource), IComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
    name: Min<TSource>
    nameWithType: ObservableExtensions.Min<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
    name: Min(Of TSource)
    nameWithType: ObservableExtensions.Min(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  nameWithType: ObservableExtensions.Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  nameWithType.vb: ObservableExtensions.Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Min<TSource, TResult>
    nameWithType: ObservableExtensions.Min<TSource, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Min(Of TSource, TResult)
    nameWithType: ObservableExtensions.Min(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Min<TSource, TResult>
    nameWithType: ObservableExtensions.Min<TSource, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Min(Of TSource, TResult)
    nameWithType: ObservableExtensions.Min(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  isExternal: true
  name: Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<TResult>>>)
  nameWithType: ObservableExtensions.Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<TResult>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<TResult>>>)
  nameWithType.vb: ObservableExtensions.Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of TResult))))
  name.vb: Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Min<TSource, TResult>
    nameWithType: ObservableExtensions.Min<TSource, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Min(Of TSource, TResult)
    nameWithType: ObservableExtensions.Min(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<TResult>>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<TResult>>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<TResult>>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of TResult))), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Min<TSource, TResult>
    nameWithType: ObservableExtensions.Min<TSource, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Min(Of TSource, TResult)
    nameWithType: ObservableExtensions.Min(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
  name: OfType<TResult>(INotifyEnumerable)
  nameWithType: ObservableExtensions.OfType<TResult>(INotifyEnumerable)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OfType<TResult>(NMF.Expressions.INotifyEnumerable)
  nameWithType.vb: ObservableExtensions.OfType(Of TResult)(INotifyEnumerable)
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OfType(Of TResult)(NMF.Expressions.INotifyEnumerable)
  name.vb: OfType(Of TResult)(INotifyEnumerable)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
    name: OfType<TResult>
    nameWithType: ObservableExtensions.OfType<TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.OfType<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
    name: OfType(Of TResult)
    nameWithType: ObservableExtensions.OfType(Of TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.OfType(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: OrderBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  nameWithType: ObservableExtensions.OrderBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ObservableExtensions.OrderBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderBy(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: OrderBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderBy<TItem, TKey>
    nameWithType: ObservableExtensions.OrderBy<TItem, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderBy(Of TItem, TKey)
    nameWithType: ObservableExtensions.OrderBy(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: OrderBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.OrderBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ObservableExtensions.OrderBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderBy(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderBy<TItem, TKey>
    nameWithType: ObservableExtensions.OrderBy<TItem, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderBy(Of TItem, TKey)
    nameWithType: ObservableExtensions.OrderBy(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: OrderByDescending<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  nameWithType: ObservableExtensions.OrderByDescending<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ObservableExtensions.OrderByDescending(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: OrderByDescending(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderByDescending<TItem, TKey>
    nameWithType: ObservableExtensions.OrderByDescending<TItem, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderByDescending(Of TItem, TKey)
    nameWithType: ObservableExtensions.OrderByDescending(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: OrderByDescending<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.OrderByDescending<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ObservableExtensions.OrderByDescending(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderByDescending(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending<TItem, TKey>
    nameWithType: ObservableExtensions.OrderByDescending<TItem, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending(Of TItem, TKey)
    nameWithType: ObservableExtensions.OrderByDescending(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: Select<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  nameWithType: ObservableExtensions.Select<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Select<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  nameWithType.vb: ObservableExtensions.Select(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Select(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Select(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Select<TSource, TResult>
    nameWithType: ObservableExtensions.Select<TSource, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Select<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Select(Of TSource, TResult)
    nameWithType: ObservableExtensions.Select(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Select(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  isExternal: true
  name: SelectMany<TSource, TIntermediate, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TIntermediate>>>, Expression<Func<TSource, TIntermediate, TResult>>)
  nameWithType: ObservableExtensions.SelectMany<TSource, TIntermediate, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TIntermediate>>>, Expression<Func<TSource, TIntermediate, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TSource, TIntermediate, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TIntermediate>>>, System.Linq.Expressions.Expression<System.Func<TSource, TIntermediate, TResult>>)
  nameWithType.vb: ObservableExtensions.SelectMany(Of TSource, TIntermediate, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate))), Expression(Of Func(Of TSource, TIntermediate, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TSource, TIntermediate, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TIntermediate))), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TIntermediate, TResult)))
  name.vb: SelectMany(Of TSource, TIntermediate, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate))), Expression(Of Func(Of TSource, TIntermediate, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
    name: SelectMany<TSource, TIntermediate, TResult>
    nameWithType: ObservableExtensions.SelectMany<TSource, TIntermediate, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TSource, TIntermediate, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
    name: SelectMany(Of TSource, TIntermediate, TResult)
    nameWithType: ObservableExtensions.SelectMany(Of TSource, TIntermediate, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TSource, TIntermediate, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  isExternal: true
  name: SelectMany<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TResult>>>)
  nameWithType: ObservableExtensions.SelectMany<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TResult>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>>)
  nameWithType.vb: ObservableExtensions.SelectMany(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult))))
  name.vb: SelectMany(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
    name: SelectMany<TSource, TResult>
    nameWithType: ObservableExtensions.SelectMany<TSource, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
    name: SelectMany(Of TSource, TResult)
    nameWithType: ObservableExtensions.SelectMany(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: SetEquals<T>(INotifyEnumerable<T>, IEnumerable<T>)
  nameWithType: ObservableExtensions.SetEquals<T>(INotifyEnumerable<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.SetEquals(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SetEquals(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: SetEquals(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: SetEquals<T>
    nameWithType: ObservableExtensions.SetEquals<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: SetEquals(Of T)
    nameWithType: ObservableExtensions.SetEquals(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: SetEquals<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.SetEquals<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.SetEquals(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SetEquals(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: SetEquals(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: SetEquals<T>
    nameWithType: ObservableExtensions.SetEquals<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: SetEquals(Of T)
    nameWithType: ObservableExtensions.SetEquals(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  name: SingleOrDefault<TSource>(INotifyEnumerable<TSource>)
  nameWithType: ObservableExtensions.SingleOrDefault<TSource>(INotifyEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault<TSource>(NMF.Expressions.INotifyEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.SingleOrDefault(Of TSource)(INotifyEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource))
  name.vb: SingleOrDefault(Of TSource)(INotifyEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
    name: SingleOrDefault<TSource>
    nameWithType: ObservableExtensions.SingleOrDefault<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
    name: SingleOrDefault(Of TSource)
    nameWithType: ObservableExtensions.SingleOrDefault(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: SingleOrDefault<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Boolean>>)
  nameWithType: ObservableExtensions.SingleOrDefault<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Boolean>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  nameWithType.vb: ObservableExtensions.SingleOrDefault(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: SingleOrDefault(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: SingleOrDefault<TSource>
    nameWithType: ObservableExtensions.SingleOrDefault<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: SingleOrDefault(Of TSource)
    nameWithType: ObservableExtensions.SingleOrDefault(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Int32>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Int32>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Int32)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Int32)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Sum<TSource>
    nameWithType: ObservableExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Sum(Of TSource)
    nameWithType: ObservableExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Int64>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Int64>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Int64)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int64)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Int64)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Sum<TSource>
    nameWithType: ObservableExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Sum(Of TSource)
    nameWithType: ObservableExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Single>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Single>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Single>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Single)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Sum<TSource>
    nameWithType: ObservableExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Sum(Of TSource)
    nameWithType: ObservableExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Double>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Double>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Double>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Double)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Sum<TSource>
    nameWithType: ObservableExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Sum(Of TSource)
    nameWithType: ObservableExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Decimal>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Decimal>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Decimal)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Sum<TSource>
    nameWithType: ObservableExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Sum(Of TSource)
    nameWithType: ObservableExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Int32>>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Int32>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int32))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32))))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int32))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Sum<TSource>
    nameWithType: ObservableExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Sum(Of TSource)
    nameWithType: ObservableExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Int64>>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Int64>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int64))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64))))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int64))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Sum<TSource>
    nameWithType: ObservableExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Sum(Of TSource)
    nameWithType: ObservableExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Single>>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Single>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Single))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single))))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Single))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Sum<TSource>
    nameWithType: ObservableExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Sum(Of TSource)
    nameWithType: ObservableExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Double>>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Double>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Double))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double))))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Double))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Sum<TSource>
    nameWithType: ObservableExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Sum(Of TSource)
    nameWithType: ObservableExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Decimal))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Decimal))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Sum<TSource>
    nameWithType: ObservableExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Sum(Of TSource)
    nameWithType: ObservableExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: TopX<TItem, TKey>(INotifyEnumerable<TItem>, Int32, Expression<Func<TItem, TKey>>)
  nameWithType: ObservableExtensions.TopX<TItem, TKey>(INotifyEnumerable<TItem>, Int32, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.TopX<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Int32, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ObservableExtensions.TopX(Of TItem, TKey)(INotifyEnumerable(Of TItem), Int32, Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.TopX(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: TopX(Of TItem, TKey)(INotifyEnumerable(Of TItem), Int32, Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: TopX<TItem, TKey>
    nameWithType: ObservableExtensions.TopX<TItem, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.TopX<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: TopX(Of TItem, TKey)
    nameWithType: ObservableExtensions.TopX(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.TopX(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: TopX<TItem, TKey>(INotifyEnumerable<TItem>, Int32, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.TopX<TItem, TKey>(INotifyEnumerable<TItem>, Int32, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.TopX<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Int32, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ObservableExtensions.TopX(Of TItem, TKey)(INotifyEnumerable(Of TItem), Int32, Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.TopX(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: TopX(Of TItem, TKey)(INotifyEnumerable(Of TItem), Int32, Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: TopX<TItem, TKey>
    nameWithType: ObservableExtensions.TopX<TItem, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.TopX<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: TopX(Of TItem, TKey)
    nameWithType: ObservableExtensions.TopX(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.TopX(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Union<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: ObservableExtensions.Union<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Union<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.Union(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Union(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Union(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Union<TSource>
    nameWithType: ObservableExtensions.Union<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Union<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Union(Of TSource)
    nameWithType: ObservableExtensions.Union(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Union(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Union<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ObservableExtensions.Union<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Union<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ObservableExtensions.Union(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Union(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Union(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Union<TSource>
    nameWithType: ObservableExtensions.Union<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Union<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Union(Of TSource)
    nameWithType: ObservableExtensions.Union(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Union(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: Where<T>(INotifyEnumerable<T>, Expression<Func<T, Boolean>>)
  nameWithType: ObservableExtensions.Where<T>(INotifyEnumerable<T>, Expression<Func<T, Boolean>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Where<T>(NMF.Expressions.INotifyEnumerable<T>, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: ObservableExtensions.Where(Of T)(INotifyEnumerable(Of T), Expression(Of Func(Of T, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Where(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Where(Of T)(INotifyEnumerable(Of T), Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where<T>
    nameWithType: ObservableExtensions.Where<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Where<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where(Of T)
    nameWithType: ObservableExtensions.Where(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Where(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: WithUpdates<T>(IEnumerable<T>)
  nameWithType: ObservableExtensions.WithUpdates<T>(IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.WithUpdates(Of T)(IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: WithUpdates(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
    name: WithUpdates<T>
    nameWithType: ObservableExtensions.WithUpdates<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
    name: WithUpdates(Of T)
    nameWithType: ObservableExtensions.WithUpdates(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
  isExternal: true
  name: WithUpdates<T>(ICollection<T>)
  nameWithType: ObservableExtensions.WithUpdates<T>(ICollection<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>(System.Collections.Generic.ICollection<T>)
  nameWithType.vb: ObservableExtensions.WithUpdates(Of T)(ICollection(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)(System.Collections.Generic.ICollection(Of T))
  name.vb: WithUpdates(Of T)(ICollection(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
    name: WithUpdates<T>
    nameWithType: ObservableExtensions.WithUpdates<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
    name: WithUpdates(Of T)
    nameWithType: ObservableExtensions.WithUpdates(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.#ctor*
  commentId: Overload:NMF.Expressions.Linq.ObservableEnumerable`1.#ctor
  name: ObservableEnumerable
  nameWithType: ObservableEnumerable<T>.ObservableEnumerable
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.ObservableEnumerable
  nameWithType.vb: ObservableEnumerable(Of T).ObservableEnumerable
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).ObservableEnumerable
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItem*
  commentId: Overload:NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItem
  name: OnAddItem
  nameWithType: ObservableEnumerable<T>.OnAddItem
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnAddItem
  nameWithType.vb: ObservableEnumerable(Of T).OnAddItem
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnAddItem
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItems*
  commentId: Overload:NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItems
  name: OnAddItems
  nameWithType: ObservableEnumerable<T>.OnAddItems
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnAddItems
  nameWithType.vb: ObservableEnumerable(Of T).OnAddItems
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnAddItems
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItem*
  commentId: Overload:NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItem
  name: OnRemoveItem
  nameWithType: ObservableEnumerable<T>.OnRemoveItem
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnRemoveItem
  nameWithType.vb: ObservableEnumerable(Of T).OnRemoveItem
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnRemoveItem
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItems*
  commentId: Overload:NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItems
  name: OnRemoveItems
  nameWithType: ObservableEnumerable<T>.OnRemoveItems
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnRemoveItems
  nameWithType.vb: ObservableEnumerable(Of T).OnRemoveItems
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnRemoveItems
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnReplaceItems*
  commentId: Overload:NMF.Expressions.Linq.ObservableEnumerable`1.OnReplaceItems
  name: OnReplaceItems
  nameWithType: ObservableEnumerable<T>.OnReplaceItems
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnReplaceItems
  nameWithType.vb: ObservableEnumerable(Of T).OnReplaceItems
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnReplaceItems
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnCleared*
  commentId: Overload:NMF.Expressions.Linq.ObservableEnumerable`1.OnCleared
  name: OnCleared
  nameWithType: ObservableEnumerable<T>.OnCleared
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnCleared
  nameWithType.vb: ObservableEnumerable(Of T).OnCleared
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnCleared
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnUpdateItem*
  commentId: Overload:NMF.Expressions.Linq.ObservableEnumerable`1.OnUpdateItem
  name: OnUpdateItem
  nameWithType: ObservableEnumerable<T>.OnUpdateItem
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnUpdateItem
  nameWithType.vb: ObservableEnumerable(Of T).OnUpdateItem
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnUpdateItem
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItem*
  commentId: Overload:NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItem
  name: OnMoveItem
  nameWithType: ObservableEnumerable<T>.OnMoveItem
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnMoveItem
  nameWithType.vb: ObservableEnumerable(Of T).OnMoveItem
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnMoveItem
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItems*
  commentId: Overload:NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItems
  name: OnMoveItems
  nameWithType: ObservableEnumerable<T>.OnMoveItems
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnMoveItems
  nameWithType.vb: ObservableEnumerable(Of T).OnMoveItems
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnMoveItems
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.HasEventSubscriber*
  commentId: Overload:NMF.Expressions.Linq.ObservableEnumerable`1.HasEventSubscriber
  name: HasEventSubscriber
  nameWithType: ObservableEnumerable<T>.HasEventSubscriber
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.HasEventSubscriber
  nameWithType.vb: ObservableEnumerable(Of T).HasEventSubscriber
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).HasEventSubscriber
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnCollectionChanged*
  commentId: Overload:NMF.Expressions.Linq.ObservableEnumerable`1.OnCollectionChanged
  name: OnCollectionChanged
  nameWithType: ObservableEnumerable<T>.OnCollectionChanged
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnCollectionChanged
  nameWithType.vb: ObservableEnumerable(Of T).OnCollectionChanged
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnCollectionChanged
- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
  commentId: T:System.Collections.Specialized.NotifyCollectionChangedEventArgs
  parent: System.Collections.Specialized
  isExternal: true
  name: NotifyCollectionChangedEventArgs
  nameWithType: NotifyCollectionChangedEventArgs
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
- uid: System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  commentId: E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  parent: System.Collections.Specialized.INotifyCollectionChanged
  isExternal: true
  name: CollectionChanged
  nameWithType: INotifyCollectionChanged.CollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
- uid: System.Collections.Specialized.NotifyCollectionChangedEventHandler
  commentId: T:System.Collections.Specialized.NotifyCollectionChangedEventHandler
  parent: System.Collections.Specialized
  isExternal: true
  name: NotifyCollectionChangedEventHandler
  nameWithType: NotifyCollectionChangedEventHandler
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventHandler
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.GetEnumerator*
  commentId: Overload:NMF.Expressions.Linq.ObservableEnumerable`1.GetEnumerator
  name: GetEnumerator
  nameWithType: ObservableEnumerable<T>.GetEnumerator
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.GetEnumerator
  nameWithType.vb: ObservableEnumerable(Of T).GetEnumerator
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: ObservableEnumerable<T>.IEnumerable.GetEnumerator
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ObservableEnumerable(Of T).System.Collections.IEnumerable.GetEnumerator
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Dispose*
  commentId: Overload:NMF.Expressions.Linq.ObservableEnumerable`1.Dispose
  name: Dispose
  nameWithType: ObservableEnumerable<T>.Dispose
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Dispose
  nameWithType.vb: ObservableEnumerable(Of T).Dispose
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Add*
  commentId: Overload:NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Add
  name: ICollection<T>.Add
  nameWithType: ObservableEnumerable<T>.ICollection<T>.Add
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.System.Collections.Generic.ICollection<T>.Add
  nameWithType.vb: ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.Add
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.Add
  name.vb: System.Collections.Generic.ICollection<T>.Add
- uid: System.Collections.Generic.ICollection{{T}}.Add({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Add(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Clear*
  commentId: Overload:NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Clear
  name: ICollection<T>.Clear
  nameWithType: ObservableEnumerable<T>.ICollection<T>.Clear
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.System.Collections.Generic.ICollection<T>.Clear
  nameWithType.vb: ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.Clear
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.Clear
  name.vb: System.Collections.Generic.ICollection<T>.Clear
- uid: System.Collections.Generic.ICollection{{T}}.Clear
  commentId: M:System.Collections.Generic.ICollection{`0}.Clear
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#IsReadOnly*
  commentId: Overload:NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  name: ICollection<T>.IsReadOnly
  nameWithType: ObservableEnumerable<T>.ICollection<T>.IsReadOnly
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.ICollection{{T}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{`0}.IsReadOnly
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Remove*
  commentId: Overload:NMF.Expressions.Linq.ObservableEnumerable`1.System#Collections#Generic#ICollection{T}#Remove
  name: ICollection<T>.Remove
  nameWithType: ObservableEnumerable<T>.ICollection<T>.Remove
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.System.Collections.Generic.ICollection<T>.Remove
  nameWithType.vb: ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.Remove
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).System.Collections.Generic.ICollection<T>.Remove
  name.vb: System.Collections.Generic.ICollection<T>.Remove
- uid: System.Collections.Generic.ICollection{{T}}.Remove({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Remove(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Contains*
  commentId: Overload:NMF.Expressions.Linq.ObservableEnumerable`1.Contains
  name: Contains
  nameWithType: ObservableEnumerable<T>.Contains
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Contains
  nameWithType.vb: ObservableEnumerable(Of T).Contains
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Contains
- uid: System.Collections.Generic.ICollection{{T}}.Contains({T})
  commentId: M:System.Collections.Generic.ICollection{`0}.Contains(`0)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.CopyTo*
  commentId: Overload:NMF.Expressions.Linq.ObservableEnumerable`1.CopyTo
  name: CopyTo
  nameWithType: ObservableEnumerable<T>.CopyTo
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.CopyTo
  nameWithType.vb: ObservableEnumerable(Of T).CopyTo
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).CopyTo
- uid: System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{`0}.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Count*
  commentId: Overload:NMF.Expressions.Linq.ObservableEnumerable`1.Count
  name: Count
  nameWithType: ObservableEnumerable<T>.Count
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Count
  nameWithType.vb: ObservableEnumerable(Of T).Count
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Count
- uid: System.Collections.Generic.ICollection{{T}}.Count
  commentId: P:System.Collections.Generic.ICollection{`0}.Count
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Successors*
  commentId: Overload:NMF.Expressions.Linq.ObservableEnumerable`1.Successors
  name: Successors
  nameWithType: ObservableEnumerable<T>.Successors
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Successors
  nameWithType.vb: ObservableEnumerable(Of T).Successors
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Successors
- uid: NMF.Expressions.INotifiable.Successors
  commentId: P:NMF.Expressions.INotifiable.Successors
  parent: NMF.Expressions.INotifiable
  name: Successors
  nameWithType: INotifiable.Successors
  fullName: NMF.Expressions.INotifiable.Successors
- uid: NMF.Expressions.ISuccessorList
  commentId: T:NMF.Expressions.ISuccessorList
  parent: NMF.Expressions
  name: ISuccessorList
  nameWithType: ISuccessorList
  fullName: NMF.Expressions.ISuccessorList
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Dependencies*
  commentId: Overload:NMF.Expressions.Linq.ObservableEnumerable`1.Dependencies
  name: Dependencies
  nameWithType: ObservableEnumerable<T>.Dependencies
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Dependencies
  nameWithType.vb: ObservableEnumerable(Of T).Dependencies
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Dependencies
- uid: NMF.Expressions.INotifiable.Dependencies
  commentId: P:NMF.Expressions.INotifiable.Dependencies
  parent: NMF.Expressions.INotifiable
  name: Dependencies
  nameWithType: INotifiable.Dependencies
  fullName: NMF.Expressions.INotifiable.Dependencies
- uid: System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<INotifiable>
  nameWithType: IEnumerable<INotifiable>
  fullName: System.Collections.Generic.IEnumerable<NMF.Expressions.INotifiable>
  nameWithType.vb: IEnumerable(Of INotifiable)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Expressions.INotifiable)
  name.vb: IEnumerable(Of INotifiable)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
    nameWithType: INotifiable
    fullName: NMF.Expressions.INotifiable
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
    nameWithType: INotifiable
    fullName: NMF.Expressions.INotifiable
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.ExecutionMetaData*
  commentId: Overload:NMF.Expressions.Linq.ObservableEnumerable`1.ExecutionMetaData
  name: ExecutionMetaData
  nameWithType: ObservableEnumerable<T>.ExecutionMetaData
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.ExecutionMetaData
  nameWithType.vb: ObservableEnumerable(Of T).ExecutionMetaData
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).ExecutionMetaData
- uid: NMF.Expressions.INotifiable.ExecutionMetaData
  commentId: P:NMF.Expressions.INotifiable.ExecutionMetaData
  parent: NMF.Expressions.INotifiable
  name: ExecutionMetaData
  nameWithType: INotifiable.ExecutionMetaData
  fullName: NMF.Expressions.INotifiable.ExecutionMetaData
- uid: NMF.Expressions.ExecutionMetaData
  commentId: T:NMF.Expressions.ExecutionMetaData
  parent: NMF.Expressions
  name: ExecutionMetaData
  nameWithType: ExecutionMetaData
  fullName: NMF.Expressions.ExecutionMetaData
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAttach*
  commentId: Overload:NMF.Expressions.Linq.ObservableEnumerable`1.OnAttach
  name: OnAttach
  nameWithType: ObservableEnumerable<T>.OnAttach
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnAttach
  nameWithType.vb: ObservableEnumerable(Of T).OnAttach
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnAttach
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnDetach*
  commentId: Overload:NMF.Expressions.Linq.ObservableEnumerable`1.OnDetach
  name: OnDetach
  nameWithType: ObservableEnumerable<T>.OnDetach
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnDetach
  nameWithType.vb: ObservableEnumerable(Of T).OnDetach
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnDetach
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Notify*
  commentId: Overload:NMF.Expressions.Linq.ObservableEnumerable`1.Notify
  name: Notify
  nameWithType: ObservableEnumerable<T>.Notify
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Notify
  nameWithType.vb: ObservableEnumerable(Of T).Notify
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Notify
- uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  commentId: M:NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  parent: NMF.Expressions.INotifiable
  isExternal: true
  name: Notify(IList<INotificationResult>)
  nameWithType: INotifiable.Notify(IList<INotificationResult>)
  fullName: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList<NMF.Expressions.INotificationResult>)
  nameWithType.vb: INotifiable.Notify(IList(Of INotificationResult))
  fullName.vb: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
  spec.csharp:
  - uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
    nameWithType: INotifiable.Notify
    fullName: NMF.Expressions.INotifiable.Notify
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
    nameWithType: INotifiable.Notify
    fullName: NMF.Expressions.INotifiable.Notify
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  commentId: T:System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<INotificationResult>
  nameWithType: IList<INotificationResult>
  fullName: System.Collections.Generic.IList<NMF.Expressions.INotificationResult>
  nameWithType.vb: IList(Of INotificationResult)
  fullName.vb: System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult)
  name.vb: IList(Of INotificationResult)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotificationResult
  commentId: T:NMF.Expressions.INotificationResult
  parent: NMF.Expressions
  name: INotificationResult
  nameWithType: INotificationResult
  fullName: NMF.Expressions.INotificationResult
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
