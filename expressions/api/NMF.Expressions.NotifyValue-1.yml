### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.NotifyValue`1
  commentId: T:NMF.Expressions.NotifyValue`1
  id: NotifyValue`1
  parent: NMF.Expressions
  children:
  - NMF.Expressions.NotifyValue`1.Dependencies
  - NMF.Expressions.NotifyValue`1.Dispose
  - NMF.Expressions.NotifyValue`1.ExecutionMetaData
  - NMF.Expressions.NotifyValue`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  - NMF.Expressions.NotifyValue`1.OnValueChanged(`0,`0)
  - NMF.Expressions.NotifyValue`1.OnValueChanged(NMF.Expressions.ValueChangedEventArgs)
  - NMF.Expressions.NotifyValue`1.Successors
  - NMF.Expressions.NotifyValue`1.Value
  - NMF.Expressions.NotifyValue`1.ValueChanged
  langs:
  - csharp
  - vb
  name: NotifyValue<T>
  nameWithType: NotifyValue<T>
  fullName: NMF.Expressions.NotifyValue<T>
  type: Class
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NotifyValue
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 10
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: 'public abstract class NotifyValue<T> : INotifyValue<T>, INotifiable, IDisposable'
    typeParameters:
    - id: T
    content.vb: >-
      Public MustInherit Class NotifyValue(Of T)

          Implements INotifyValue(Of T), INotifiable, IDisposable
  inheritance:
  - System.Object
  derivedClasses:
  - NMF.Expressions.Linq.ObservableAggregate`3
  implements:
  - NMF.Expressions.INotifyValue{{T}}
  - NMF.Expressions.INotifiable
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - NMF.Expressions.INotifyValue{`0}.NMF.Expressions.ReversableExtensions.AsReversable``1(System.Action{{T}})
  nameWithType.vb: NotifyValue(Of T)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: NMF.Expressions.NotifyValue(Of T)
  name.vb: NotifyValue(Of T)
- uid: NMF.Expressions.NotifyValue`1.Value
  commentId: P:NMF.Expressions.NotifyValue`1.Value
  id: Value
  parent: NMF.Expressions.NotifyValue`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: NotifyValue<T>.Value
  fullName: NMF.Expressions.NotifyValue<T>.Value
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Value
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 15
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public abstract T Value { get; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public MustOverride ReadOnly Property Value As T
  overload: NMF.Expressions.NotifyValue`1.Value*
  implements:
  - NMF.Expressions.INotifyValue{{T}}.Value
  nameWithType.vb: NotifyValue(Of T).Value
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
  fullName.vb: NMF.Expressions.NotifyValue(Of T).Value
- uid: NMF.Expressions.NotifyValue`1.Successors
  commentId: P:NMF.Expressions.NotifyValue`1.Successors
  id: Successors
  parent: NMF.Expressions.NotifyValue`1
  langs:
  - csharp
  - vb
  name: Successors
  nameWithType: NotifyValue<T>.Successors
  fullName: NMF.Expressions.NotifyValue<T>.Successors
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Successors
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 17
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public ISuccessorList Successors { get; }
    parameters: []
    return:
      type: NMF.Expressions.ISuccessorList
    content.vb: Public ReadOnly Property Successors As ISuccessorList
  overload: NMF.Expressions.NotifyValue`1.Successors*
  implements:
  - NMF.Expressions.INotifiable.Successors
  nameWithType.vb: NotifyValue(Of T).Successors
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Expressions.NotifyValue(Of T).Successors
- uid: NMF.Expressions.NotifyValue`1.Dependencies
  commentId: P:NMF.Expressions.NotifyValue`1.Dependencies
  id: Dependencies
  parent: NMF.Expressions.NotifyValue`1
  langs:
  - csharp
  - vb
  name: Dependencies
  nameWithType: NotifyValue<T>.Dependencies
  fullName: NMF.Expressions.NotifyValue<T>.Dependencies
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Dependencies
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 19
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public abstract IEnumerable<INotifiable> Dependencies { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
    content.vb: Public MustOverride ReadOnly Property Dependencies As IEnumerable(Of INotifiable)
  overload: NMF.Expressions.NotifyValue`1.Dependencies*
  implements:
  - NMF.Expressions.INotifiable.Dependencies
  nameWithType.vb: NotifyValue(Of T).Dependencies
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
  fullName.vb: NMF.Expressions.NotifyValue(Of T).Dependencies
- uid: NMF.Expressions.NotifyValue`1.ExecutionMetaData
  commentId: P:NMF.Expressions.NotifyValue`1.ExecutionMetaData
  id: ExecutionMetaData
  parent: NMF.Expressions.NotifyValue`1
  langs:
  - csharp
  - vb
  name: ExecutionMetaData
  nameWithType: NotifyValue<T>.ExecutionMetaData
  fullName: NMF.Expressions.NotifyValue<T>.ExecutionMetaData
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ExecutionMetaData
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 21
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public ExecutionMetaData ExecutionMetaData { get; }
    parameters: []
    return:
      type: NMF.Expressions.ExecutionMetaData
    content.vb: Public ReadOnly Property ExecutionMetaData As ExecutionMetaData
  overload: NMF.Expressions.NotifyValue`1.ExecutionMetaData*
  implements:
  - NMF.Expressions.INotifiable.ExecutionMetaData
  nameWithType.vb: NotifyValue(Of T).ExecutionMetaData
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Expressions.NotifyValue(Of T).ExecutionMetaData
- uid: NMF.Expressions.NotifyValue`1.ValueChanged
  commentId: E:NMF.Expressions.NotifyValue`1.ValueChanged
  id: ValueChanged
  parent: NMF.Expressions.NotifyValue`1
  langs:
  - csharp
  - vb
  name: ValueChanged
  nameWithType: NotifyValue<T>.ValueChanged
  fullName: NMF.Expressions.NotifyValue<T>.ValueChanged
  type: Event
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ValueChanged
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 23
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public event EventHandler<ValueChangedEventArgs> ValueChanged
    return:
      type: System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
    content.vb: Public Event ValueChanged As EventHandler(Of ValueChangedEventArgs)
  implements:
  - NMF.Expressions.INotifyValue{{T}}.ValueChanged
  nameWithType.vb: NotifyValue(Of T).ValueChanged
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.NotifyValue(Of T).ValueChanged
- uid: NMF.Expressions.NotifyValue`1.OnValueChanged(NMF.Expressions.ValueChangedEventArgs)
  commentId: M:NMF.Expressions.NotifyValue`1.OnValueChanged(NMF.Expressions.ValueChangedEventArgs)
  id: OnValueChanged(NMF.Expressions.ValueChangedEventArgs)
  parent: NMF.Expressions.NotifyValue`1
  langs:
  - csharp
  - vb
  name: OnValueChanged(ValueChangedEventArgs)
  nameWithType: NotifyValue<T>.OnValueChanged(ValueChangedEventArgs)
  fullName: NMF.Expressions.NotifyValue<T>.OnValueChanged(NMF.Expressions.ValueChangedEventArgs)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnValueChanged
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 25
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected virtual void OnValueChanged(ValueChangedEventArgs e)
    parameters:
    - id: e
      type: NMF.Expressions.ValueChangedEventArgs
    content.vb: Protected Overridable Sub OnValueChanged(e As ValueChangedEventArgs)
  overload: NMF.Expressions.NotifyValue`1.OnValueChanged*
  nameWithType.vb: NotifyValue(Of T).OnValueChanged(ValueChangedEventArgs)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: NMF.Expressions.NotifyValue(Of T).OnValueChanged(NMF.Expressions.ValueChangedEventArgs)
- uid: NMF.Expressions.NotifyValue`1.OnValueChanged(`0,`0)
  commentId: M:NMF.Expressions.NotifyValue`1.OnValueChanged(`0,`0)
  id: OnValueChanged(`0,`0)
  parent: NMF.Expressions.NotifyValue`1
  langs:
  - csharp
  - vb
  name: OnValueChanged(T, T)
  nameWithType: NotifyValue<T>.OnValueChanged(T, T)
  fullName: NMF.Expressions.NotifyValue<T>.OnValueChanged(T, T)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnValueChanged
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 30
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected void OnValueChanged(T oldValue, T newValue)
    parameters:
    - id: oldValue
      type: '{T}'
    - id: newValue
      type: '{T}'
    content.vb: Protected Sub OnValueChanged(oldValue As T, newValue As T)
  overload: NMF.Expressions.NotifyValue`1.OnValueChanged*
  nameWithType.vb: NotifyValue(Of T).OnValueChanged(T, T)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NMF.Expressions.NotifyValue(Of T).OnValueChanged(T, T)
- uid: NMF.Expressions.NotifyValue`1.Dispose
  commentId: M:NMF.Expressions.NotifyValue`1.Dispose
  id: Dispose
  parent: NMF.Expressions.NotifyValue`1
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: NotifyValue<T>.Dispose()
  fullName: NMF.Expressions.NotifyValue<T>.Dispose()
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Dispose
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 38
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: NMF.Expressions.NotifyValue`1.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: NotifyValue(Of T).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.NotifyValue(Of T).Dispose()
- uid: NMF.Expressions.NotifyValue`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  commentId: M:NMF.Expressions.NotifyValue`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  id: Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  parent: NMF.Expressions.NotifyValue`1
  langs:
  - csharp
  - vb
  name: Notify(IList<INotificationResult>)
  nameWithType: NotifyValue<T>.Notify(IList<INotificationResult>)
  fullName: NMF.Expressions.NotifyValue<T>.Notify(System.Collections.Generic.IList<NMF.Expressions.INotificationResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Notify
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 43
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public abstract INotificationResult Notify(IList<INotificationResult> sources)
    parameters:
    - id: sources
      type: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
    return:
      type: NMF.Expressions.INotificationResult
    content.vb: Public MustOverride Function Notify(sources As IList(Of INotificationResult)) As INotificationResult
  overload: NMF.Expressions.NotifyValue`1.Notify*
  implements:
  - NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  nameWithType.vb: NotifyValue(Of T).Notify(IList(Of INotificationResult))
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: NMF.Expressions.NotifyValue(Of T).Notify(System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Expressions.INotifyValue{{T}}
  commentId: T:NMF.Expressions.INotifyValue{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<T>
  nameWithType: INotifyValue<T>
  fullName: NMF.Expressions.INotifyValue<T>
  nameWithType.vb: INotifyValue(Of T)
  fullName.vb: NMF.Expressions.INotifyValue(Of T)
  name.vb: INotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifiable
  commentId: T:NMF.Expressions.INotifiable
  parent: NMF.Expressions
  name: INotifiable
  nameWithType: INotifiable
  fullName: NMF.Expressions.INotifiable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue{`0}.NMF.Expressions.ReversableExtensions.AsReversable``1(System.Action{{T}})
  commentId: M:NMF.Expressions.ReversableExtensions.AsReversable``1(NMF.Expressions.INotifyValue{``0},System.Action{``0})
  parent: NMF.Expressions.ReversableExtensions
  definition: NMF.Expressions.ReversableExtensions.AsReversable``1(NMF.Expressions.INotifyValue{``0},System.Action{``0})
  name: AsReversable<T>(Action<T>)
  nameWithType: ReversableExtensions.AsReversable<T>(Action<T>)
  fullName: NMF.Expressions.ReversableExtensions.AsReversable<T>(System.Action<T>)
  nameWithType.vb: ReversableExtensions.AsReversable(Of T)(Action(Of T))
  fullName.vb: NMF.Expressions.ReversableExtensions.AsReversable(Of T)(System.Action(Of T))
  name.vb: AsReversable(Of T)(Action(Of T))
  spec.csharp:
  - uid: NMF.Expressions.ReversableExtensions.AsReversable``1(System.Action{``0})
    name: AsReversable<T>
    nameWithType: ReversableExtensions.AsReversable<T>
    fullName: NMF.Expressions.ReversableExtensions.AsReversable<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ReversableExtensions.AsReversable``1(System.Action{``0})
    name: AsReversable(Of T)
    nameWithType: ReversableExtensions.AsReversable(Of T)
    fullName: NMF.Expressions.ReversableExtensions.AsReversable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.INotifyValue`1
  commentId: T:NMF.Expressions.INotifyValue`1
  name: INotifyValue<T>
  nameWithType: INotifyValue<T>
  fullName: NMF.Expressions.INotifyValue<T>
  nameWithType.vb: INotifyValue(Of T)
  fullName.vb: NMF.Expressions.INotifyValue(Of T)
  name.vb: INotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ReversableExtensions.AsReversable``1(NMF.Expressions.INotifyValue{``0},System.Action{``0})
  commentId: M:NMF.Expressions.ReversableExtensions.AsReversable``1(NMF.Expressions.INotifyValue{``0},System.Action{``0})
  isExternal: true
  name: AsReversable<T>(INotifyValue<T>, Action<T>)
  nameWithType: ReversableExtensions.AsReversable<T>(INotifyValue<T>, Action<T>)
  fullName: NMF.Expressions.ReversableExtensions.AsReversable<T>(NMF.Expressions.INotifyValue<T>, System.Action<T>)
  nameWithType.vb: ReversableExtensions.AsReversable(Of T)(INotifyValue(Of T), Action(Of T))
  fullName.vb: NMF.Expressions.ReversableExtensions.AsReversable(Of T)(NMF.Expressions.INotifyValue(Of T), System.Action(Of T))
  name.vb: AsReversable(Of T)(INotifyValue(Of T), Action(Of T))
  spec.csharp:
  - uid: NMF.Expressions.ReversableExtensions.AsReversable``1(NMF.Expressions.INotifyValue{``0},System.Action{``0})
    name: AsReversable<T>
    nameWithType: ReversableExtensions.AsReversable<T>
    fullName: NMF.Expressions.ReversableExtensions.AsReversable<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.ReversableExtensions.AsReversable``1(NMF.Expressions.INotifyValue{``0},System.Action{``0})
    name: AsReversable(Of T)
    nameWithType: ReversableExtensions.AsReversable(Of T)
    fullName: NMF.Expressions.ReversableExtensions.AsReversable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ReversableExtensions
  commentId: T:NMF.Expressions.ReversableExtensions
  parent: NMF.Expressions
  name: ReversableExtensions
  nameWithType: ReversableExtensions
  fullName: NMF.Expressions.ReversableExtensions
- uid: NMF.Expressions.NotifyValue`1.Value*
  commentId: Overload:NMF.Expressions.NotifyValue`1.Value
  name: Value
  nameWithType: NotifyValue<T>.Value
  fullName: NMF.Expressions.NotifyValue<T>.Value
  nameWithType.vb: NotifyValue(Of T).Value
  fullName.vb: NMF.Expressions.NotifyValue(Of T).Value
- uid: NMF.Expressions.INotifyValue{{T}}.Value
  commentId: P:NMF.Expressions.INotifyValue{`0}.Value
  parent: NMF.Expressions.INotifyValue{{T}}
  definition: NMF.Expressions.INotifyValue`1.Value
  name: Value
  nameWithType: INotifyValue<T>.Value
  fullName: NMF.Expressions.INotifyValue<T>.Value
  nameWithType.vb: INotifyValue(Of T).Value
  fullName.vb: NMF.Expressions.INotifyValue(Of T).Value
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: NMF.Expressions.INotifyValue`1.Value
  commentId: P:NMF.Expressions.INotifyValue`1.Value
  name: Value
  nameWithType: INotifyValue<T>.Value
  fullName: NMF.Expressions.INotifyValue<T>.Value
  nameWithType.vb: INotifyValue(Of T).Value
  fullName.vb: NMF.Expressions.INotifyValue(Of T).Value
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: NMF.Expressions.NotifyValue`1.Successors*
  commentId: Overload:NMF.Expressions.NotifyValue`1.Successors
  name: Successors
  nameWithType: NotifyValue<T>.Successors
  fullName: NMF.Expressions.NotifyValue<T>.Successors
  nameWithType.vb: NotifyValue(Of T).Successors
  fullName.vb: NMF.Expressions.NotifyValue(Of T).Successors
- uid: NMF.Expressions.INotifiable.Successors
  commentId: P:NMF.Expressions.INotifiable.Successors
  parent: NMF.Expressions.INotifiable
  name: Successors
  nameWithType: INotifiable.Successors
  fullName: NMF.Expressions.INotifiable.Successors
- uid: NMF.Expressions.ISuccessorList
  commentId: T:NMF.Expressions.ISuccessorList
  parent: NMF.Expressions
  name: ISuccessorList
  nameWithType: ISuccessorList
  fullName: NMF.Expressions.ISuccessorList
- uid: NMF.Expressions.NotifyValue`1.Dependencies*
  commentId: Overload:NMF.Expressions.NotifyValue`1.Dependencies
  name: Dependencies
  nameWithType: NotifyValue<T>.Dependencies
  fullName: NMF.Expressions.NotifyValue<T>.Dependencies
  nameWithType.vb: NotifyValue(Of T).Dependencies
  fullName.vb: NMF.Expressions.NotifyValue(Of T).Dependencies
- uid: NMF.Expressions.INotifiable.Dependencies
  commentId: P:NMF.Expressions.INotifiable.Dependencies
  parent: NMF.Expressions.INotifiable
  name: Dependencies
  nameWithType: INotifiable.Dependencies
  fullName: NMF.Expressions.INotifiable.Dependencies
- uid: System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<INotifiable>
  nameWithType: IEnumerable<INotifiable>
  fullName: System.Collections.Generic.IEnumerable<NMF.Expressions.INotifiable>
  nameWithType.vb: IEnumerable(Of INotifiable)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Expressions.INotifiable)
  name.vb: IEnumerable(Of INotifiable)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
    nameWithType: INotifiable
    fullName: NMF.Expressions.INotifiable
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
    nameWithType: INotifiable
    fullName: NMF.Expressions.INotifiable
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.Expressions.NotifyValue`1.ExecutionMetaData*
  commentId: Overload:NMF.Expressions.NotifyValue`1.ExecutionMetaData
  name: ExecutionMetaData
  nameWithType: NotifyValue<T>.ExecutionMetaData
  fullName: NMF.Expressions.NotifyValue<T>.ExecutionMetaData
  nameWithType.vb: NotifyValue(Of T).ExecutionMetaData
  fullName.vb: NMF.Expressions.NotifyValue(Of T).ExecutionMetaData
- uid: NMF.Expressions.INotifiable.ExecutionMetaData
  commentId: P:NMF.Expressions.INotifiable.ExecutionMetaData
  parent: NMF.Expressions.INotifiable
  name: ExecutionMetaData
  nameWithType: INotifiable.ExecutionMetaData
  fullName: NMF.Expressions.INotifiable.ExecutionMetaData
- uid: NMF.Expressions.ExecutionMetaData
  commentId: T:NMF.Expressions.ExecutionMetaData
  parent: NMF.Expressions
  name: ExecutionMetaData
  nameWithType: ExecutionMetaData
  fullName: NMF.Expressions.ExecutionMetaData
- uid: NMF.Expressions.INotifyValue{{T}}.ValueChanged
  commentId: E:NMF.Expressions.INotifyValue{`0}.ValueChanged
  parent: NMF.Expressions.INotifyValue{{T}}
  definition: NMF.Expressions.INotifyValue`1.ValueChanged
  name: ValueChanged
  nameWithType: INotifyValue<T>.ValueChanged
  fullName: NMF.Expressions.INotifyValue<T>.ValueChanged
  nameWithType.vb: INotifyValue(Of T).ValueChanged
  fullName.vb: NMF.Expressions.INotifyValue(Of T).ValueChanged
- uid: System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
  commentId: T:System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<ValueChangedEventArgs>
  nameWithType: EventHandler<ValueChangedEventArgs>
  fullName: System.EventHandler<NMF.Expressions.ValueChangedEventArgs>
  nameWithType.vb: EventHandler(Of ValueChangedEventArgs)
  fullName.vb: System.EventHandler(Of NMF.Expressions.ValueChangedEventArgs)
  name.vb: EventHandler(Of ValueChangedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
    nameWithType: ValueChangedEventArgs
    fullName: NMF.Expressions.ValueChangedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
    nameWithType: ValueChangedEventArgs
    fullName: NMF.Expressions.ValueChangedEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue`1.ValueChanged
  commentId: E:NMF.Expressions.INotifyValue`1.ValueChanged
  name: ValueChanged
  nameWithType: INotifyValue<T>.ValueChanged
  fullName: NMF.Expressions.INotifyValue<T>.ValueChanged
  nameWithType.vb: INotifyValue(Of T).ValueChanged
  fullName.vb: NMF.Expressions.INotifyValue(Of T).ValueChanged
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.NotifyValue`1.OnValueChanged*
  commentId: Overload:NMF.Expressions.NotifyValue`1.OnValueChanged
  name: OnValueChanged
  nameWithType: NotifyValue<T>.OnValueChanged
  fullName: NMF.Expressions.NotifyValue<T>.OnValueChanged
  nameWithType.vb: NotifyValue(Of T).OnValueChanged
  fullName.vb: NMF.Expressions.NotifyValue(Of T).OnValueChanged
- uid: NMF.Expressions.ValueChangedEventArgs
  commentId: T:NMF.Expressions.ValueChangedEventArgs
  parent: NMF.Expressions
  name: ValueChangedEventArgs
  nameWithType: ValueChangedEventArgs
  fullName: NMF.Expressions.ValueChangedEventArgs
- uid: NMF.Expressions.NotifyValue`1.Dispose*
  commentId: Overload:NMF.Expressions.NotifyValue`1.Dispose
  name: Dispose
  nameWithType: NotifyValue<T>.Dispose
  fullName: NMF.Expressions.NotifyValue<T>.Dispose
  nameWithType.vb: NotifyValue(Of T).Dispose
  fullName.vb: NMF.Expressions.NotifyValue(Of T).Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.NotifyValue`1.Notify*
  commentId: Overload:NMF.Expressions.NotifyValue`1.Notify
  name: Notify
  nameWithType: NotifyValue<T>.Notify
  fullName: NMF.Expressions.NotifyValue<T>.Notify
  nameWithType.vb: NotifyValue(Of T).Notify
  fullName.vb: NMF.Expressions.NotifyValue(Of T).Notify
- uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  commentId: M:NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  parent: NMF.Expressions.INotifiable
  isExternal: true
  name: Notify(IList<INotificationResult>)
  nameWithType: INotifiable.Notify(IList<INotificationResult>)
  fullName: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList<NMF.Expressions.INotificationResult>)
  nameWithType.vb: INotifiable.Notify(IList(Of INotificationResult))
  fullName.vb: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
  spec.csharp:
  - uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
    nameWithType: INotifiable.Notify
    fullName: NMF.Expressions.INotifiable.Notify
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
    nameWithType: INotifiable.Notify
    fullName: NMF.Expressions.INotifiable.Notify
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  commentId: T:System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<INotificationResult>
  nameWithType: IList<INotificationResult>
  fullName: System.Collections.Generic.IList<NMF.Expressions.INotificationResult>
  nameWithType.vb: IList(Of INotificationResult)
  fullName.vb: System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult)
  name.vb: IList(Of INotificationResult)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotificationResult
  commentId: T:NMF.Expressions.INotificationResult
  parent: NMF.Expressions
  name: INotificationResult
  nameWithType: INotificationResult
  fullName: NMF.Expressions.INotificationResult
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
