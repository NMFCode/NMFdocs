### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.IEnumerableExpression
  commentId: T:NMF.Expressions.IEnumerableExpression
  id: IEnumerableExpression
  parent: NMF.Expressions
  children:
  - NMF.Expressions.IEnumerableExpression.AsNotifiable
  langs:
  - csharp
  - vb
  name: IEnumerableExpression
  nameWithType: IEnumerableExpression
  fullName: NMF.Expressions.IEnumerableExpression
  type: Interface
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/IEnumerableExpression.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IEnumerableExpression
    path: src/Expressions/Expressions.Linq/Facade/IEnumerableExpression.cs
    startLine: 24
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions
  summary: "\nRepresents a (non-generoc) collection that can be accessed incrementally, i.e. with change notifications\n"
  example: []
  syntax:
    content: 'public interface IEnumerableExpression : IEnumerable'
    content.vb: >-
      Public Interface IEnumerableExpression

          Inherits IEnumerable
  inheritedMembers:
  - System.Collections.IEnumerable.GetEnumerator
  extensionMethods:
  - NMF.Expressions.IEnumerableExpression.NMF.Expressions.Linq.ExpressionExtensions.Cast``1
  - NMF.Expressions.IEnumerableExpression.NMF.Expressions.Linq.ExpressionExtensions.OfType``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: NMF.Expressions.IEnumerableExpression.AsNotifiable
  commentId: M:NMF.Expressions.IEnumerableExpression.AsNotifiable
  id: AsNotifiable
  parent: NMF.Expressions.IEnumerableExpression
  langs:
  - csharp
  - vb
  name: AsNotifiable()
  nameWithType: IEnumerableExpression.AsNotifiable()
  fullName: NMF.Expressions.IEnumerableExpression.AsNotifiable()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/IEnumerableExpression.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AsNotifiable
    path: src/Expressions/Expressions.Linq/Facade/IEnumerableExpression.cs
    startLine: 30
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions
  summary: "\nGets notifications for this collection\n"
  example: []
  syntax:
    content: INotifyEnumerable AsNotifiable()
    return:
      type: NMF.Expressions.INotifyEnumerable
      description: A collection that will notify clients as new elements change
    content.vb: Function AsNotifiable As INotifyEnumerable
  overload: NMF.Expressions.IEnumerableExpression.AsNotifiable*
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression.NMF.Expressions.Linq.ExpressionExtensions.Cast``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
  name: Cast<TResult>()
  nameWithType: ExpressionExtensions.Cast<TResult>()
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Cast<TResult>()
  nameWithType.vb: ExpressionExtensions.Cast(Of TResult)()
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Cast(Of TResult)()
  name.vb: Cast(Of TResult)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Cast``1
    name: Cast<TResult>
    nameWithType: ExpressionExtensions.Cast<TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Cast<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Cast``1
    name: Cast(Of TResult)
    nameWithType: ExpressionExtensions.Cast(Of TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Cast(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression.NMF.Expressions.Linq.ExpressionExtensions.OfType``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
  name: OfType<TResult>()
  nameWithType: ExpressionExtensions.OfType<TResult>()
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OfType<TResult>()
  nameWithType.vb: ExpressionExtensions.OfType(Of TResult)()
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OfType(Of TResult)()
  name.vb: OfType(Of TResult)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OfType``1
    name: OfType<TResult>
    nameWithType: ExpressionExtensions.OfType<TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OfType<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OfType``1
    name: OfType(Of TResult)
    nameWithType: ExpressionExtensions.OfType(Of TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OfType(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
  name: Cast<TResult>(IEnumerableExpression)
  nameWithType: ExpressionExtensions.Cast<TResult>(IEnumerableExpression)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Cast<TResult>(NMF.Expressions.IEnumerableExpression)
  nameWithType.vb: ExpressionExtensions.Cast(Of TResult)(IEnumerableExpression)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Cast(Of TResult)(NMF.Expressions.IEnumerableExpression)
  name.vb: Cast(Of TResult)(IEnumerableExpression)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
    name: Cast<TResult>
    nameWithType: ExpressionExtensions.Cast<TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Cast<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
    name: Cast(Of TResult)
    nameWithType: ExpressionExtensions.Cast(Of TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Cast(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  parent: NMF.Expressions.Linq
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
- uid: NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
  name: OfType<TResult>(IEnumerableExpression)
  nameWithType: ExpressionExtensions.OfType<TResult>(IEnumerableExpression)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OfType<TResult>(NMF.Expressions.IEnumerableExpression)
  nameWithType.vb: ExpressionExtensions.OfType(Of TResult)(IEnumerableExpression)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OfType(Of TResult)(NMF.Expressions.IEnumerableExpression)
  name.vb: OfType(Of TResult)(IEnumerableExpression)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
    name: OfType<TResult>
    nameWithType: ExpressionExtensions.OfType<TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OfType<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
    name: OfType(Of TResult)
    nameWithType: ExpressionExtensions.OfType(Of TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OfType(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
- uid: NMF.Expressions.IEnumerableExpression.AsNotifiable*
  commentId: Overload:NMF.Expressions.IEnumerableExpression.AsNotifiable
  name: AsNotifiable
  nameWithType: IEnumerableExpression.AsNotifiable
  fullName: NMF.Expressions.IEnumerableExpression.AsNotifiable
- uid: NMF.Expressions.INotifyEnumerable
  commentId: T:NMF.Expressions.INotifyEnumerable
  parent: NMF.Expressions
  name: INotifyEnumerable
  nameWithType: INotifyEnumerable
  fullName: NMF.Expressions.INotifyEnumerable
