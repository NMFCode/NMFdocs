### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  commentId: T:NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  id: IChunkBalancingStrategyProvider
  parent: NMF.Expressions.Linq
  children:
  - NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy``2(NMF.Expressions.Linq.IObservableChunk{``0,``1})
  langs:
  - csharp
  - vb
  name: IChunkBalancingStrategyProvider
  nameWithType: IChunkBalancingStrategyProvider
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  type: Interface
  source:
    remote:
      path: Expressions/Expressions.Chunk/IChunkBalancingStrategyProvider.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IChunkBalancingStrategyProvider
    path: src/Expressions/Expressions.Chunk/IChunkBalancingStrategyProvider.cs
    startLine: 9
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nDenotes a component that can generically provide chunk balancing strategies\n"
  example: []
  syntax:
    content: public interface IChunkBalancingStrategyProvider
    content.vb: Public Interface IChunkBalancingStrategyProvider
  extensionMethods:
  - NMF.Expressions.Linq.IChunkBalancingStrategyProvider.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
- uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy``2(NMF.Expressions.Linq.IObservableChunk{``0,``1})
  commentId: M:NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy``2(NMF.Expressions.Linq.IObservableChunk{``0,``1})
  id: CreateStrategy``2(NMF.Expressions.Linq.IObservableChunk{``0,``1})
  parent: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  langs:
  - csharp
  - vb
  name: CreateStrategy<T, TChunk>(IObservableChunk<T, TChunk>)
  nameWithType: IChunkBalancingStrategyProvider.CreateStrategy<T, TChunk>(IObservableChunk<T, TChunk>)
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy<T, TChunk>(NMF.Expressions.Linq.IObservableChunk<T, TChunk>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Chunk/IChunkBalancingStrategyProvider.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateStrategy
    path: src/Expressions/Expressions.Chunk/IChunkBalancingStrategyProvider.cs
    startLine: 18
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nCreate a strategy for the given observable chunk collection\n"
  example: []
  syntax:
    content: IChunkBalancingStrategy<T, TChunk> CreateStrategy<T, TChunk>(IObservableChunk<T, TChunk> observableChunk)
    parameters:
    - id: observableChunk
      type: NMF.Expressions.Linq.IObservableChunk{{T},{TChunk}}
      description: The observable chunk collection
    typeParameters:
    - id: T
      description: The type of items
    - id: TChunk
      description: The type of the chunks
    return:
      type: NMF.Expressions.Linq.IChunkBalancingStrategy{{T},{TChunk}}
      description: A chunk balancing strategy
    content.vb: Function CreateStrategy(Of T, TChunk)(observableChunk As IObservableChunk(Of T, TChunk)) As IChunkBalancingStrategy(Of T, TChunk)
  overload: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy*
  nameWithType.vb: IChunkBalancingStrategyProvider.CreateStrategy(Of T, TChunk)(IObservableChunk(Of T, TChunk))
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy(Of T, TChunk)(NMF.Expressions.Linq.IObservableChunk(Of T, TChunk))
  name.vb: CreateStrategy(Of T, TChunk)(IObservableChunk(Of T, TChunk))
references:
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
- uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<IChunkBalancingStrategyProvider>(IChunkBalancingStrategyProvider)
  nameWithType: ExpressionExtensions.AsOne<IChunkBalancingStrategyProvider>(IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<NMF.Expressions.Linq.IChunkBalancingStrategyProvider>(NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  nameWithType.vb: ExpressionExtensions.AsOne(Of IChunkBalancingStrategyProvider)(IChunkBalancingStrategyProvider)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of NMF.Expressions.Linq.IChunkBalancingStrategyProvider)(NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: AsOne(Of IChunkBalancingStrategyProvider)(IChunkBalancingStrategyProvider)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: AsOne
  - name: <
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
  - name: '>'
  - name: (
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
  - name: )
  - name: (
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<T>(T)
  nameWithType: ExpressionExtensions.AsOne<T>(T)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<T>(T)
  nameWithType.vb: ExpressionExtensions.AsOne(Of T)(T)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of T)(T)
  name.vb: AsOne(Of T)(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  parent: NMF.Expressions.Linq
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
- uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy*
  commentId: Overload:NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy
  name: CreateStrategy
  nameWithType: IChunkBalancingStrategyProvider.CreateStrategy
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy
- uid: NMF.Expressions.Linq.IObservableChunk{{T},{TChunk}}
  commentId: T:NMF.Expressions.Linq.IObservableChunk{``0,``1}
  parent: NMF.Expressions.Linq
  definition: NMF.Expressions.Linq.IObservableChunk`2
  name: IObservableChunk<T, TChunk>
  nameWithType: IObservableChunk<T, TChunk>
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>
  nameWithType.vb: IObservableChunk(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk)
  name.vb: IObservableChunk(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TChunk
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TChunk
  - name: )
- uid: NMF.Expressions.Linq.IChunkBalancingStrategy{{T},{TChunk}}
  commentId: T:NMF.Expressions.Linq.IChunkBalancingStrategy{``0,``1}
  parent: NMF.Expressions.Linq
  definition: NMF.Expressions.Linq.IChunkBalancingStrategy`2
  name: IChunkBalancingStrategy<T, TChunk>
  nameWithType: IChunkBalancingStrategy<T, TChunk>
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategy<T, TChunk>
  nameWithType.vb: IChunkBalancingStrategy(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategy(Of T, TChunk)
  name.vb: IChunkBalancingStrategy(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2
    name: IChunkBalancingStrategy
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TChunk
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2
    name: IChunkBalancingStrategy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TChunk
  - name: )
- uid: NMF.Expressions.Linq.IObservableChunk`2
  commentId: T:NMF.Expressions.Linq.IObservableChunk`2
  name: IObservableChunk<T, TChunk>
  nameWithType: IObservableChunk<T, TChunk>
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>
  nameWithType.vb: IObservableChunk(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk)
  name.vb: IObservableChunk(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TChunk
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TChunk
  - name: )
- uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2
  commentId: T:NMF.Expressions.Linq.IChunkBalancingStrategy`2
  name: IChunkBalancingStrategy<T, TChunk>
  nameWithType: IChunkBalancingStrategy<T, TChunk>
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategy<T, TChunk>
  nameWithType.vb: IChunkBalancingStrategy(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategy(Of T, TChunk)
  name.vb: IChunkBalancingStrategy(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2
    name: IChunkBalancingStrategy
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TChunk
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2
    name: IChunkBalancingStrategy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TChunk
  - name: )
