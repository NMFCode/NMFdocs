### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  commentId: T:NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  id: IChunkBalancingStrategyProvider
  parent: NMF.Expressions.Linq
  children:
  - NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy``2(NMF.Expressions.Linq.IObservableChunk{``0,``1})
  langs:
  - csharp
  - vb
  name: IChunkBalancingStrategyProvider
  nameWithType: IChunkBalancingStrategyProvider
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  type: Interface
  source:
    remote:
      path: Expressions/Expressions.Chunk/IChunkBalancingStrategyProvider.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IChunkBalancingStrategyProvider
    path: src/Expressions/Expressions.Chunk/IChunkBalancingStrategyProvider.cs
    startLine: 9
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nDenotes a component that can generically provide chunk balancing strategies\n"
  example: []
  syntax:
    content: public interface IChunkBalancingStrategyProvider
    content.vb: Public Interface IChunkBalancingStrategyProvider
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy``2(NMF.Expressions.Linq.IObservableChunk{``0,``1})
  commentId: M:NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy``2(NMF.Expressions.Linq.IObservableChunk{``0,``1})
  id: CreateStrategy``2(NMF.Expressions.Linq.IObservableChunk{``0,``1})
  parent: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  langs:
  - csharp
  - vb
  name: CreateStrategy<T, TChunk>(IObservableChunk<T, TChunk>)
  nameWithType: IChunkBalancingStrategyProvider.CreateStrategy<T, TChunk>(IObservableChunk<T, TChunk>)
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy<T, TChunk>(NMF.Expressions.Linq.IObservableChunk<T, TChunk>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Chunk/IChunkBalancingStrategyProvider.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateStrategy
    path: src/Expressions/Expressions.Chunk/IChunkBalancingStrategyProvider.cs
    startLine: 18
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nCreate a strategy for the given observable chunk collection\n"
  example: []
  syntax:
    content: IChunkBalancingStrategy<T, TChunk> CreateStrategy<T, TChunk>(IObservableChunk<T, TChunk> observableChunk)
    parameters:
    - id: observableChunk
      type: NMF.Expressions.Linq.IObservableChunk{{T},{TChunk}}
      description: The observable chunk collection
    typeParameters:
    - id: T
      description: The type of items
    - id: TChunk
      description: The type of the chunks
    return:
      type: NMF.Expressions.Linq.IChunkBalancingStrategy{{T},{TChunk}}
      description: A chunk balancing strategy
    content.vb: Function CreateStrategy(Of T, TChunk)(observableChunk As IObservableChunk(Of T, TChunk)) As IChunkBalancingStrategy(Of T, TChunk)
  overload: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy*
  nameWithType.vb: IChunkBalancingStrategyProvider.CreateStrategy(Of T, TChunk)(IObservableChunk(Of T, TChunk))
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy(Of T, TChunk)(NMF.Expressions.Linq.IObservableChunk(Of T, TChunk))
  name.vb: CreateStrategy(Of T, TChunk)(IObservableChunk(Of T, TChunk))
references:
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
- uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy*
  commentId: Overload:NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy
  name: CreateStrategy
  nameWithType: IChunkBalancingStrategyProvider.CreateStrategy
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy
- uid: NMF.Expressions.Linq.IObservableChunk{{T},{TChunk}}
  commentId: T:NMF.Expressions.Linq.IObservableChunk{``0,``1}
  parent: NMF.Expressions.Linq
  definition: NMF.Expressions.Linq.IObservableChunk`2
  name: IObservableChunk<T, TChunk>
  nameWithType: IObservableChunk<T, TChunk>
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>
  nameWithType.vb: IObservableChunk(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk)
  name.vb: IObservableChunk(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    nameWithType: IObservableChunk
    fullName: NMF.Expressions.Linq.IObservableChunk
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    nameWithType: IObservableChunk
    fullName: NMF.Expressions.Linq.IObservableChunk
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IChunkBalancingStrategy{{T},{TChunk}}
  commentId: T:NMF.Expressions.Linq.IChunkBalancingStrategy{``0,``1}
  parent: NMF.Expressions.Linq
  definition: NMF.Expressions.Linq.IChunkBalancingStrategy`2
  name: IChunkBalancingStrategy<T, TChunk>
  nameWithType: IChunkBalancingStrategy<T, TChunk>
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategy<T, TChunk>
  nameWithType.vb: IChunkBalancingStrategy(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategy(Of T, TChunk)
  name.vb: IChunkBalancingStrategy(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2
    name: IChunkBalancingStrategy
    nameWithType: IChunkBalancingStrategy
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategy
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2
    name: IChunkBalancingStrategy
    nameWithType: IChunkBalancingStrategy
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategy
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IObservableChunk`2
  commentId: T:NMF.Expressions.Linq.IObservableChunk`2
  name: IObservableChunk<T, TChunk>
  nameWithType: IObservableChunk<T, TChunk>
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>
  nameWithType.vb: IObservableChunk(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk)
  name.vb: IObservableChunk(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    nameWithType: IObservableChunk
    fullName: NMF.Expressions.Linq.IObservableChunk
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    nameWithType: IObservableChunk
    fullName: NMF.Expressions.Linq.IObservableChunk
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2
  commentId: T:NMF.Expressions.Linq.IChunkBalancingStrategy`2
  name: IChunkBalancingStrategy<T, TChunk>
  nameWithType: IChunkBalancingStrategy<T, TChunk>
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategy<T, TChunk>
  nameWithType.vb: IChunkBalancingStrategy(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategy(Of T, TChunk)
  name.vb: IChunkBalancingStrategy(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2
    name: IChunkBalancingStrategy
    nameWithType: IChunkBalancingStrategy
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategy
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2
    name: IChunkBalancingStrategy
    nameWithType: IChunkBalancingStrategy
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategy
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
