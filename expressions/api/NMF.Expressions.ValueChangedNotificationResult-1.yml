### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.ValueChangedNotificationResult`1
  commentId: T:NMF.Expressions.ValueChangedNotificationResult`1
  id: ValueChangedNotificationResult`1
  parent: NMF.Expressions
  children:
  - NMF.Expressions.ValueChangedNotificationResult`1.#ctor(NMF.Expressions.INotifiable,`0,`0)
  - NMF.Expressions.ValueChangedNotificationResult`1.Changed
  - NMF.Expressions.ValueChangedNotificationResult`1.NewValue
  - NMF.Expressions.ValueChangedNotificationResult`1.NMF#Expressions#INotificationResult#FreeReference
  - NMF.Expressions.ValueChangedNotificationResult`1.NMF#Expressions#INotificationResult#IncreaseReferences(System.Int32)
  - NMF.Expressions.ValueChangedNotificationResult`1.NMF#Expressions#IValueChangedNotificationResult#NewValue
  - NMF.Expressions.ValueChangedNotificationResult`1.NMF#Expressions#IValueChangedNotificationResult#OldValue
  - NMF.Expressions.ValueChangedNotificationResult`1.OldValue
  - NMF.Expressions.ValueChangedNotificationResult`1.Source
  langs:
  - csharp
  - vb
  name: ValueChangedNotificationResult<T>
  nameWithType: ValueChangedNotificationResult<T>
  fullName: NMF.Expressions.ValueChangedNotificationResult<T>
  type: Class
  source:
    remote:
      path: Expressions/Expressions/Execution/ValueChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ValueChangedNotificationResult
    path: src/Expressions/Expressions/Execution/ValueChangedNotificationResult.cs
    startLine: 20
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: 'public class ValueChangedNotificationResult<T> : IValueChangedNotificationResult<T>, IValueChangedNotificationResult, INotificationResult'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class ValueChangedNotificationResult(Of T)

          Implements IValueChangedNotificationResult(Of T), IValueChangedNotificationResult, INotificationResult
  inheritance:
  - System.Object
  implements:
  - NMF.Expressions.IValueChangedNotificationResult{{T}}
  - NMF.Expressions.IValueChangedNotificationResult
  - NMF.Expressions.INotificationResult
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: ValueChangedNotificationResult(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: NMF.Expressions.ValueChangedNotificationResult(Of T)
  name.vb: ValueChangedNotificationResult(Of T)
- uid: NMF.Expressions.ValueChangedNotificationResult`1.Changed
  commentId: P:NMF.Expressions.ValueChangedNotificationResult`1.Changed
  id: Changed
  parent: NMF.Expressions.ValueChangedNotificationResult`1
  langs:
  - csharp
  - vb
  name: Changed
  nameWithType: ValueChangedNotificationResult<T>.Changed
  fullName: NMF.Expressions.ValueChangedNotificationResult<T>.Changed
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Execution/ValueChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Changed
    path: src/Expressions/Expressions/Execution/ValueChangedNotificationResult.cs
    startLine: 26
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public bool Changed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Changed As Boolean
  overload: NMF.Expressions.ValueChangedNotificationResult`1.Changed*
  implements:
  - NMF.Expressions.INotificationResult.Changed
  nameWithType.vb: ValueChangedNotificationResult(Of T).Changed
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Expressions.ValueChangedNotificationResult(Of T).Changed
- uid: NMF.Expressions.ValueChangedNotificationResult`1.Source
  commentId: P:NMF.Expressions.ValueChangedNotificationResult`1.Source
  id: Source
  parent: NMF.Expressions.ValueChangedNotificationResult`1
  langs:
  - csharp
  - vb
  name: Source
  nameWithType: ValueChangedNotificationResult<T>.Source
  fullName: NMF.Expressions.ValueChangedNotificationResult<T>.Source
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Execution/ValueChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Source
    path: src/Expressions/Expressions/Execution/ValueChangedNotificationResult.cs
    startLine: 28
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public INotifiable Source { get; }
    parameters: []
    return:
      type: NMF.Expressions.INotifiable
    content.vb: Public ReadOnly Property Source As INotifiable
  overload: NMF.Expressions.ValueChangedNotificationResult`1.Source*
  implements:
  - NMF.Expressions.INotificationResult.Source
  nameWithType.vb: ValueChangedNotificationResult(Of T).Source
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Expressions.ValueChangedNotificationResult(Of T).Source
- uid: NMF.Expressions.ValueChangedNotificationResult`1.OldValue
  commentId: P:NMF.Expressions.ValueChangedNotificationResult`1.OldValue
  id: OldValue
  parent: NMF.Expressions.ValueChangedNotificationResult`1
  langs:
  - csharp
  - vb
  name: OldValue
  nameWithType: ValueChangedNotificationResult<T>.OldValue
  fullName: NMF.Expressions.ValueChangedNotificationResult<T>.OldValue
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Execution/ValueChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OldValue
    path: src/Expressions/Expressions/Execution/ValueChangedNotificationResult.cs
    startLine: 30
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public T OldValue { get; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public ReadOnly Property OldValue As T
  overload: NMF.Expressions.ValueChangedNotificationResult`1.OldValue*
  implements:
  - NMF.Expressions.IValueChangedNotificationResult{{T}}.OldValue
  nameWithType.vb: ValueChangedNotificationResult(Of T).OldValue
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Expressions.ValueChangedNotificationResult(Of T).OldValue
- uid: NMF.Expressions.ValueChangedNotificationResult`1.NewValue
  commentId: P:NMF.Expressions.ValueChangedNotificationResult`1.NewValue
  id: NewValue
  parent: NMF.Expressions.ValueChangedNotificationResult`1
  langs:
  - csharp
  - vb
  name: NewValue
  nameWithType: ValueChangedNotificationResult<T>.NewValue
  fullName: NMF.Expressions.ValueChangedNotificationResult<T>.NewValue
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Execution/ValueChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NewValue
    path: src/Expressions/Expressions/Execution/ValueChangedNotificationResult.cs
    startLine: 32
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public T NewValue { get; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public ReadOnly Property NewValue As T
  overload: NMF.Expressions.ValueChangedNotificationResult`1.NewValue*
  implements:
  - NMF.Expressions.IValueChangedNotificationResult{{T}}.NewValue
  nameWithType.vb: ValueChangedNotificationResult(Of T).NewValue
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Expressions.ValueChangedNotificationResult(Of T).NewValue
- uid: NMF.Expressions.ValueChangedNotificationResult`1.NMF#Expressions#IValueChangedNotificationResult#OldValue
  commentId: P:NMF.Expressions.ValueChangedNotificationResult`1.NMF#Expressions#IValueChangedNotificationResult#OldValue
  id: NMF#Expressions#IValueChangedNotificationResult#OldValue
  isEii: true
  parent: NMF.Expressions.ValueChangedNotificationResult`1
  langs:
  - csharp
  - vb
  name: IValueChangedNotificationResult.OldValue
  nameWithType: ValueChangedNotificationResult<T>.IValueChangedNotificationResult.OldValue
  fullName: NMF.Expressions.ValueChangedNotificationResult<T>.NMF.Expressions.IValueChangedNotificationResult.OldValue
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Execution/ValueChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Expressions.IValueChangedNotificationResult.OldValue
    path: src/Expressions/Expressions/Execution/ValueChangedNotificationResult.cs
    startLine: 34
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: object IValueChangedNotificationResult.OldValue { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: ReadOnly WriteOnly Property NMF.Expressions.IValueChangedNotificationResult.OldValue As Object Implements IValueChangedNotificationResult.OldValue
  overload: NMF.Expressions.ValueChangedNotificationResult`1.NMF#Expressions#IValueChangedNotificationResult#OldValue*
  implements:
  - NMF.Expressions.IValueChangedNotificationResult.OldValue
  nameWithType.vb: ValueChangedNotificationResult(Of T).NMF.Expressions.IValueChangedNotificationResult.OldValue
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NMF.Expressions.ValueChangedNotificationResult(Of T).NMF.Expressions.IValueChangedNotificationResult.OldValue
  name.vb: NMF.Expressions.IValueChangedNotificationResult.OldValue
- uid: NMF.Expressions.ValueChangedNotificationResult`1.NMF#Expressions#IValueChangedNotificationResult#NewValue
  commentId: P:NMF.Expressions.ValueChangedNotificationResult`1.NMF#Expressions#IValueChangedNotificationResult#NewValue
  id: NMF#Expressions#IValueChangedNotificationResult#NewValue
  isEii: true
  parent: NMF.Expressions.ValueChangedNotificationResult`1
  langs:
  - csharp
  - vb
  name: IValueChangedNotificationResult.NewValue
  nameWithType: ValueChangedNotificationResult<T>.IValueChangedNotificationResult.NewValue
  fullName: NMF.Expressions.ValueChangedNotificationResult<T>.NMF.Expressions.IValueChangedNotificationResult.NewValue
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Execution/ValueChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Expressions.IValueChangedNotificationResult.NewValue
    path: src/Expressions/Expressions/Execution/ValueChangedNotificationResult.cs
    startLine: 36
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: object IValueChangedNotificationResult.NewValue { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: ReadOnly WriteOnly Property NMF.Expressions.IValueChangedNotificationResult.NewValue As Object Implements IValueChangedNotificationResult.NewValue
  overload: NMF.Expressions.ValueChangedNotificationResult`1.NMF#Expressions#IValueChangedNotificationResult#NewValue*
  implements:
  - NMF.Expressions.IValueChangedNotificationResult.NewValue
  nameWithType.vb: ValueChangedNotificationResult(Of T).NMF.Expressions.IValueChangedNotificationResult.NewValue
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NMF.Expressions.ValueChangedNotificationResult(Of T).NMF.Expressions.IValueChangedNotificationResult.NewValue
  name.vb: NMF.Expressions.IValueChangedNotificationResult.NewValue
- uid: NMF.Expressions.ValueChangedNotificationResult`1.#ctor(NMF.Expressions.INotifiable,`0,`0)
  commentId: M:NMF.Expressions.ValueChangedNotificationResult`1.#ctor(NMF.Expressions.INotifiable,`0,`0)
  id: '#ctor(NMF.Expressions.INotifiable,`0,`0)'
  parent: NMF.Expressions.ValueChangedNotificationResult`1
  langs:
  - csharp
  - vb
  name: ValueChangedNotificationResult(INotifiable, T, T)
  nameWithType: ValueChangedNotificationResult<T>.ValueChangedNotificationResult(INotifiable, T, T)
  fullName: NMF.Expressions.ValueChangedNotificationResult<T>.ValueChangedNotificationResult(NMF.Expressions.INotifiable, T, T)
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions/Execution/ValueChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions/Execution/ValueChangedNotificationResult.cs
    startLine: 38
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public ValueChangedNotificationResult(INotifiable source, T oldValue, T newValue)
    parameters:
    - id: source
      type: NMF.Expressions.INotifiable
    - id: oldValue
      type: '{T}'
    - id: newValue
      type: '{T}'
    content.vb: Public Sub New(source As INotifiable, oldValue As T, newValue As T)
  overload: NMF.Expressions.ValueChangedNotificationResult`1.#ctor*
  nameWithType.vb: ValueChangedNotificationResult(Of T).ValueChangedNotificationResult(INotifiable, T, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ValueChangedNotificationResult(Of T).ValueChangedNotificationResult(NMF.Expressions.INotifiable, T, T)
- uid: NMF.Expressions.ValueChangedNotificationResult`1.NMF#Expressions#INotificationResult#IncreaseReferences(System.Int32)
  commentId: M:NMF.Expressions.ValueChangedNotificationResult`1.NMF#Expressions#INotificationResult#IncreaseReferences(System.Int32)
  id: NMF#Expressions#INotificationResult#IncreaseReferences(System.Int32)
  isEii: true
  parent: NMF.Expressions.ValueChangedNotificationResult`1
  langs:
  - csharp
  - vb
  name: INotificationResult.IncreaseReferences(Int32)
  nameWithType: ValueChangedNotificationResult<T>.INotificationResult.IncreaseReferences(Int32)
  fullName: NMF.Expressions.ValueChangedNotificationResult<T>.NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Execution/ValueChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Expressions.INotificationResult.IncreaseReferences
    path: src/Expressions/Expressions/Execution/ValueChangedNotificationResult.cs
    startLine: 48
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: void INotificationResult.IncreaseReferences(int references)
    parameters:
    - id: references
      type: System.Int32
    content.vb: Sub NMF.Expressions.INotificationResult.IncreaseReferences(references As Integer) Implements INotificationResult.IncreaseReferences
  overload: NMF.Expressions.ValueChangedNotificationResult`1.NMF#Expressions#INotificationResult#IncreaseReferences*
  implements:
  - NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
  nameWithType.vb: ValueChangedNotificationResult(Of T).NMF.Expressions.INotificationResult.IncreaseReferences(Int32)
  fullName.vb: NMF.Expressions.ValueChangedNotificationResult(Of T).NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
  name.vb: NMF.Expressions.INotificationResult.IncreaseReferences(Int32)
- uid: NMF.Expressions.ValueChangedNotificationResult`1.NMF#Expressions#INotificationResult#FreeReference
  commentId: M:NMF.Expressions.ValueChangedNotificationResult`1.NMF#Expressions#INotificationResult#FreeReference
  id: NMF#Expressions#INotificationResult#FreeReference
  isEii: true
  parent: NMF.Expressions.ValueChangedNotificationResult`1
  langs:
  - csharp
  - vb
  name: INotificationResult.FreeReference()
  nameWithType: ValueChangedNotificationResult<T>.INotificationResult.FreeReference()
  fullName: NMF.Expressions.ValueChangedNotificationResult<T>.NMF.Expressions.INotificationResult.FreeReference()
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Execution/ValueChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Expressions.INotificationResult.FreeReference
    path: src/Expressions/Expressions/Execution/ValueChangedNotificationResult.cs
    startLine: 50
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: void INotificationResult.FreeReference()
    content.vb: Sub NMF.Expressions.INotificationResult.FreeReference Implements INotificationResult.FreeReference
  overload: NMF.Expressions.ValueChangedNotificationResult`1.NMF#Expressions#INotificationResult#FreeReference*
  implements:
  - NMF.Expressions.INotificationResult.FreeReference
  nameWithType.vb: ValueChangedNotificationResult(Of T).NMF.Expressions.INotificationResult.FreeReference()
  fullName.vb: NMF.Expressions.ValueChangedNotificationResult(Of T).NMF.Expressions.INotificationResult.FreeReference()
  name.vb: NMF.Expressions.INotificationResult.FreeReference()
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Expressions.IValueChangedNotificationResult{{T}}
  commentId: T:NMF.Expressions.IValueChangedNotificationResult{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.IValueChangedNotificationResult`1
  name: IValueChangedNotificationResult<T>
  nameWithType: IValueChangedNotificationResult<T>
  fullName: NMF.Expressions.IValueChangedNotificationResult<T>
  nameWithType.vb: IValueChangedNotificationResult(Of T)
  fullName.vb: NMF.Expressions.IValueChangedNotificationResult(Of T)
  name.vb: IValueChangedNotificationResult(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IValueChangedNotificationResult`1
    name: IValueChangedNotificationResult
    nameWithType: IValueChangedNotificationResult
    fullName: NMF.Expressions.IValueChangedNotificationResult
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IValueChangedNotificationResult`1
    name: IValueChangedNotificationResult
    nameWithType: IValueChangedNotificationResult
    fullName: NMF.Expressions.IValueChangedNotificationResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IValueChangedNotificationResult
  commentId: T:NMF.Expressions.IValueChangedNotificationResult
  parent: NMF.Expressions
  name: IValueChangedNotificationResult
  nameWithType: IValueChangedNotificationResult
  fullName: NMF.Expressions.IValueChangedNotificationResult
- uid: NMF.Expressions.INotificationResult
  commentId: T:NMF.Expressions.INotificationResult
  parent: NMF.Expressions
  name: INotificationResult
  nameWithType: INotificationResult
  fullName: NMF.Expressions.INotificationResult
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.IValueChangedNotificationResult`1
  commentId: T:NMF.Expressions.IValueChangedNotificationResult`1
  name: IValueChangedNotificationResult<T>
  nameWithType: IValueChangedNotificationResult<T>
  fullName: NMF.Expressions.IValueChangedNotificationResult<T>
  nameWithType.vb: IValueChangedNotificationResult(Of T)
  fullName.vb: NMF.Expressions.IValueChangedNotificationResult(Of T)
  name.vb: IValueChangedNotificationResult(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IValueChangedNotificationResult`1
    name: IValueChangedNotificationResult
    nameWithType: IValueChangedNotificationResult
    fullName: NMF.Expressions.IValueChangedNotificationResult
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IValueChangedNotificationResult`1
    name: IValueChangedNotificationResult
    nameWithType: IValueChangedNotificationResult
    fullName: NMF.Expressions.IValueChangedNotificationResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ValueChangedNotificationResult`1.Changed*
  commentId: Overload:NMF.Expressions.ValueChangedNotificationResult`1.Changed
  name: Changed
  nameWithType: ValueChangedNotificationResult<T>.Changed
  fullName: NMF.Expressions.ValueChangedNotificationResult<T>.Changed
  nameWithType.vb: ValueChangedNotificationResult(Of T).Changed
  fullName.vb: NMF.Expressions.ValueChangedNotificationResult(Of T).Changed
- uid: NMF.Expressions.INotificationResult.Changed
  commentId: P:NMF.Expressions.INotificationResult.Changed
  parent: NMF.Expressions.INotificationResult
  name: Changed
  nameWithType: INotificationResult.Changed
  fullName: NMF.Expressions.INotificationResult.Changed
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NMF.Expressions.ValueChangedNotificationResult`1.Source*
  commentId: Overload:NMF.Expressions.ValueChangedNotificationResult`1.Source
  name: Source
  nameWithType: ValueChangedNotificationResult<T>.Source
  fullName: NMF.Expressions.ValueChangedNotificationResult<T>.Source
  nameWithType.vb: ValueChangedNotificationResult(Of T).Source
  fullName.vb: NMF.Expressions.ValueChangedNotificationResult(Of T).Source
- uid: NMF.Expressions.INotificationResult.Source
  commentId: P:NMF.Expressions.INotificationResult.Source
  parent: NMF.Expressions.INotificationResult
  name: Source
  nameWithType: INotificationResult.Source
  fullName: NMF.Expressions.INotificationResult.Source
- uid: NMF.Expressions.INotifiable
  commentId: T:NMF.Expressions.INotifiable
  parent: NMF.Expressions
  name: INotifiable
  nameWithType: INotifiable
  fullName: NMF.Expressions.INotifiable
- uid: NMF.Expressions.ValueChangedNotificationResult`1.OldValue*
  commentId: Overload:NMF.Expressions.ValueChangedNotificationResult`1.OldValue
  name: OldValue
  nameWithType: ValueChangedNotificationResult<T>.OldValue
  fullName: NMF.Expressions.ValueChangedNotificationResult<T>.OldValue
  nameWithType.vb: ValueChangedNotificationResult(Of T).OldValue
  fullName.vb: NMF.Expressions.ValueChangedNotificationResult(Of T).OldValue
- uid: NMF.Expressions.IValueChangedNotificationResult{{T}}.OldValue
  commentId: P:NMF.Expressions.IValueChangedNotificationResult{`0}.OldValue
  parent: NMF.Expressions.IValueChangedNotificationResult{{T}}
  definition: NMF.Expressions.IValueChangedNotificationResult`1.OldValue
  name: OldValue
  nameWithType: IValueChangedNotificationResult<T>.OldValue
  fullName: NMF.Expressions.IValueChangedNotificationResult<T>.OldValue
  nameWithType.vb: IValueChangedNotificationResult(Of T).OldValue
  fullName.vb: NMF.Expressions.IValueChangedNotificationResult(Of T).OldValue
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: NMF.Expressions.IValueChangedNotificationResult`1.OldValue
  commentId: P:NMF.Expressions.IValueChangedNotificationResult`1.OldValue
  name: OldValue
  nameWithType: IValueChangedNotificationResult<T>.OldValue
  fullName: NMF.Expressions.IValueChangedNotificationResult<T>.OldValue
  nameWithType.vb: IValueChangedNotificationResult(Of T).OldValue
  fullName.vb: NMF.Expressions.IValueChangedNotificationResult(Of T).OldValue
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: NMF.Expressions.ValueChangedNotificationResult`1.NewValue*
  commentId: Overload:NMF.Expressions.ValueChangedNotificationResult`1.NewValue
  name: NewValue
  nameWithType: ValueChangedNotificationResult<T>.NewValue
  fullName: NMF.Expressions.ValueChangedNotificationResult<T>.NewValue
  nameWithType.vb: ValueChangedNotificationResult(Of T).NewValue
  fullName.vb: NMF.Expressions.ValueChangedNotificationResult(Of T).NewValue
- uid: NMF.Expressions.IValueChangedNotificationResult{{T}}.NewValue
  commentId: P:NMF.Expressions.IValueChangedNotificationResult{`0}.NewValue
  parent: NMF.Expressions.IValueChangedNotificationResult{{T}}
  definition: NMF.Expressions.IValueChangedNotificationResult`1.NewValue
  name: NewValue
  nameWithType: IValueChangedNotificationResult<T>.NewValue
  fullName: NMF.Expressions.IValueChangedNotificationResult<T>.NewValue
  nameWithType.vb: IValueChangedNotificationResult(Of T).NewValue
  fullName.vb: NMF.Expressions.IValueChangedNotificationResult(Of T).NewValue
- uid: NMF.Expressions.IValueChangedNotificationResult`1.NewValue
  commentId: P:NMF.Expressions.IValueChangedNotificationResult`1.NewValue
  name: NewValue
  nameWithType: IValueChangedNotificationResult<T>.NewValue
  fullName: NMF.Expressions.IValueChangedNotificationResult<T>.NewValue
  nameWithType.vb: IValueChangedNotificationResult(Of T).NewValue
  fullName.vb: NMF.Expressions.IValueChangedNotificationResult(Of T).NewValue
- uid: NMF.Expressions.ValueChangedNotificationResult`1.NMF#Expressions#IValueChangedNotificationResult#OldValue*
  commentId: Overload:NMF.Expressions.ValueChangedNotificationResult`1.NMF#Expressions#IValueChangedNotificationResult#OldValue
  name: IValueChangedNotificationResult.OldValue
  nameWithType: ValueChangedNotificationResult<T>.IValueChangedNotificationResult.OldValue
  fullName: NMF.Expressions.ValueChangedNotificationResult<T>.NMF.Expressions.IValueChangedNotificationResult.OldValue
  nameWithType.vb: ValueChangedNotificationResult(Of T).NMF.Expressions.IValueChangedNotificationResult.OldValue
  fullName.vb: NMF.Expressions.ValueChangedNotificationResult(Of T).NMF.Expressions.IValueChangedNotificationResult.OldValue
  name.vb: NMF.Expressions.IValueChangedNotificationResult.OldValue
- uid: NMF.Expressions.IValueChangedNotificationResult.OldValue
  commentId: P:NMF.Expressions.IValueChangedNotificationResult.OldValue
  parent: NMF.Expressions.IValueChangedNotificationResult
  name: OldValue
  nameWithType: IValueChangedNotificationResult.OldValue
  fullName: NMF.Expressions.IValueChangedNotificationResult.OldValue
- uid: NMF.Expressions.ValueChangedNotificationResult`1.NMF#Expressions#IValueChangedNotificationResult#NewValue*
  commentId: Overload:NMF.Expressions.ValueChangedNotificationResult`1.NMF#Expressions#IValueChangedNotificationResult#NewValue
  name: IValueChangedNotificationResult.NewValue
  nameWithType: ValueChangedNotificationResult<T>.IValueChangedNotificationResult.NewValue
  fullName: NMF.Expressions.ValueChangedNotificationResult<T>.NMF.Expressions.IValueChangedNotificationResult.NewValue
  nameWithType.vb: ValueChangedNotificationResult(Of T).NMF.Expressions.IValueChangedNotificationResult.NewValue
  fullName.vb: NMF.Expressions.ValueChangedNotificationResult(Of T).NMF.Expressions.IValueChangedNotificationResult.NewValue
  name.vb: NMF.Expressions.IValueChangedNotificationResult.NewValue
- uid: NMF.Expressions.IValueChangedNotificationResult.NewValue
  commentId: P:NMF.Expressions.IValueChangedNotificationResult.NewValue
  parent: NMF.Expressions.IValueChangedNotificationResult
  name: NewValue
  nameWithType: IValueChangedNotificationResult.NewValue
  fullName: NMF.Expressions.IValueChangedNotificationResult.NewValue
- uid: NMF.Expressions.ValueChangedNotificationResult`1.#ctor*
  commentId: Overload:NMF.Expressions.ValueChangedNotificationResult`1.#ctor
  name: ValueChangedNotificationResult
  nameWithType: ValueChangedNotificationResult<T>.ValueChangedNotificationResult
  fullName: NMF.Expressions.ValueChangedNotificationResult<T>.ValueChangedNotificationResult
  nameWithType.vb: ValueChangedNotificationResult(Of T).ValueChangedNotificationResult
  fullName.vb: NMF.Expressions.ValueChangedNotificationResult(Of T).ValueChangedNotificationResult
- uid: NMF.Expressions.ValueChangedNotificationResult`1.NMF#Expressions#INotificationResult#IncreaseReferences*
  commentId: Overload:NMF.Expressions.ValueChangedNotificationResult`1.NMF#Expressions#INotificationResult#IncreaseReferences
  name: INotificationResult.IncreaseReferences
  nameWithType: ValueChangedNotificationResult<T>.INotificationResult.IncreaseReferences
  fullName: NMF.Expressions.ValueChangedNotificationResult<T>.NMF.Expressions.INotificationResult.IncreaseReferences
  nameWithType.vb: ValueChangedNotificationResult(Of T).NMF.Expressions.INotificationResult.IncreaseReferences
  fullName.vb: NMF.Expressions.ValueChangedNotificationResult(Of T).NMF.Expressions.INotificationResult.IncreaseReferences
  name.vb: NMF.Expressions.INotificationResult.IncreaseReferences
- uid: NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
  commentId: M:NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
  parent: NMF.Expressions.INotificationResult
  isExternal: true
  name: IncreaseReferences(Int32)
  nameWithType: INotificationResult.IncreaseReferences(Int32)
  fullName: NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
  spec.csharp:
  - uid: NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
    name: IncreaseReferences
    nameWithType: INotificationResult.IncreaseReferences
    fullName: NMF.Expressions.INotificationResult.IncreaseReferences
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
    name: IncreaseReferences
    nameWithType: INotificationResult.IncreaseReferences
    fullName: NMF.Expressions.INotificationResult.IncreaseReferences
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NMF.Expressions.ValueChangedNotificationResult`1.NMF#Expressions#INotificationResult#FreeReference*
  commentId: Overload:NMF.Expressions.ValueChangedNotificationResult`1.NMF#Expressions#INotificationResult#FreeReference
  name: INotificationResult.FreeReference
  nameWithType: ValueChangedNotificationResult<T>.INotificationResult.FreeReference
  fullName: NMF.Expressions.ValueChangedNotificationResult<T>.NMF.Expressions.INotificationResult.FreeReference
  nameWithType.vb: ValueChangedNotificationResult(Of T).NMF.Expressions.INotificationResult.FreeReference
  fullName.vb: NMF.Expressions.ValueChangedNotificationResult(Of T).NMF.Expressions.INotificationResult.FreeReference
  name.vb: NMF.Expressions.INotificationResult.FreeReference
- uid: NMF.Expressions.INotificationResult.FreeReference
  commentId: M:NMF.Expressions.INotificationResult.FreeReference
  parent: NMF.Expressions.INotificationResult
  name: FreeReference()
  nameWithType: INotificationResult.FreeReference()
  fullName: NMF.Expressions.INotificationResult.FreeReference()
  spec.csharp:
  - uid: NMF.Expressions.INotificationResult.FreeReference
    name: FreeReference
    nameWithType: INotificationResult.FreeReference
    fullName: NMF.Expressions.INotificationResult.FreeReference
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.INotificationResult.FreeReference
    name: FreeReference
    nameWithType: INotificationResult.FreeReference
    fullName: NMF.Expressions.INotificationResult.FreeReference
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
