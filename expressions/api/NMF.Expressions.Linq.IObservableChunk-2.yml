### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.Linq.IObservableChunk`2
  commentId: T:NMF.Expressions.Linq.IObservableChunk`2
  id: IObservableChunk`2
  parent: NMF.Expressions.Linq
  children:
  - NMF.Expressions.Linq.IObservableChunk`2.AddToChunk(System.Int32,`0)
  - NMF.Expressions.Linq.IObservableChunk`2.ChunkCount
  - NMF.Expressions.Linq.IObservableChunk`2.ChunkSize
  - NMF.Expressions.Linq.IObservableChunk`2.Chunks
  - NMF.Expressions.Linq.IObservableChunk`2.CreateChunkForItem(`0)
  - NMF.Expressions.Linq.IObservableChunk`2.ElementCount
  - NMF.Expressions.Linq.IObservableChunk`2.GetAccumulatedElementCount(System.Int32)
  - NMF.Expressions.Linq.IObservableChunk`2.GetChunkItemAt(System.Int32,System.Int32)
  - NMF.Expressions.Linq.IObservableChunk`2.GetChunkSize(System.Int32)
  - NMF.Expressions.Linq.IObservableChunk`2.RemoveChunk(System.Int32,System.Collections.Generic.List{`1}@)
  - NMF.Expressions.Linq.IObservableChunk`2.RemoveFromChunk(System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: IObservableChunk<T, TChunk>
  nameWithType: IObservableChunk<T, TChunk>
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>
  type: Interface
  source:
    id: IObservableChunk
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions.Chunk\IObservableChunk.cs
    startLine: 11
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: Denotes an abstract observable chunk collection
  example: []
  syntax:
    content: public interface IObservableChunk<T, TChunk>
    typeParameters:
    - id: T
      description: The type of items
    - id: TChunk
      description: The type of chunks
    content.vb: Public Interface IObservableChunk(Of T, TChunk)
  extensionMethods:
  - NMF.Expressions.Linq.IObservableChunk`2.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  nameWithType.vb: IObservableChunk(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk)
  name.vb: IObservableChunk(Of T, TChunk)
- uid: NMF.Expressions.Linq.IObservableChunk`2.CreateChunkForItem(`0)
  commentId: M:NMF.Expressions.Linq.IObservableChunk`2.CreateChunkForItem(`0)
  id: CreateChunkForItem(`0)
  parent: NMF.Expressions.Linq.IObservableChunk`2
  langs:
  - csharp
  - vb
  name: CreateChunkForItem(T)
  nameWithType: IObservableChunk<T, TChunk>.CreateChunkForItem(T)
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>.CreateChunkForItem(T)
  type: Method
  source:
    id: CreateChunkForItem
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions.Chunk\IObservableChunk.cs
    startLine: 18
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: Creates a chunk for the given item
  example: []
  syntax:
    content: TChunk CreateChunkForItem(T item)
    parameters:
    - id: item
      type: '{T}'
      description: The item that should start a new chunk
    return:
      type: '{TChunk}'
      description: The created chunk
    content.vb: Function CreateChunkForItem(item As T) As TChunk
  overload: NMF.Expressions.Linq.IObservableChunk`2.CreateChunkForItem*
  nameWithType.vb: IObservableChunk(Of T, TChunk).CreateChunkForItem(T)
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk).CreateChunkForItem(T)
- uid: NMF.Expressions.Linq.IObservableChunk`2.ChunkCount
  commentId: P:NMF.Expressions.Linq.IObservableChunk`2.ChunkCount
  id: ChunkCount
  parent: NMF.Expressions.Linq.IObservableChunk`2
  langs:
  - csharp
  - vb
  name: ChunkCount
  nameWithType: IObservableChunk<T, TChunk>.ChunkCount
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>.ChunkCount
  type: Property
  source:
    id: ChunkCount
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions.Chunk\IObservableChunk.cs
    startLine: 23
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: Gets the amount of chunks
  example: []
  syntax:
    content: int ChunkCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property ChunkCount As Integer
  overload: NMF.Expressions.Linq.IObservableChunk`2.ChunkCount*
  nameWithType.vb: IObservableChunk(Of T, TChunk).ChunkCount
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk).ChunkCount
- uid: NMF.Expressions.Linq.IObservableChunk`2.ChunkSize
  commentId: P:NMF.Expressions.Linq.IObservableChunk`2.ChunkSize
  id: ChunkSize
  parent: NMF.Expressions.Linq.IObservableChunk`2
  langs:
  - csharp
  - vb
  name: ChunkSize
  nameWithType: IObservableChunk<T, TChunk>.ChunkSize
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>.ChunkSize
  type: Property
  source:
    id: ChunkSize
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions.Chunk\IObservableChunk.cs
    startLine: 28
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: Gets the size of the chunks
  example: []
  syntax:
    content: int ChunkSize { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property ChunkSize As Integer
  overload: NMF.Expressions.Linq.IObservableChunk`2.ChunkSize*
  nameWithType.vb: IObservableChunk(Of T, TChunk).ChunkSize
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk).ChunkSize
- uid: NMF.Expressions.Linq.IObservableChunk`2.ElementCount
  commentId: P:NMF.Expressions.Linq.IObservableChunk`2.ElementCount
  id: ElementCount
  parent: NMF.Expressions.Linq.IObservableChunk`2
  langs:
  - csharp
  - vb
  name: ElementCount
  nameWithType: IObservableChunk<T, TChunk>.ElementCount
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>.ElementCount
  type: Property
  source:
    id: ElementCount
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions.Chunk\IObservableChunk.cs
    startLine: 33
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: The the total number of elements
  example: []
  syntax:
    content: int ElementCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property ElementCount As Integer
  overload: NMF.Expressions.Linq.IObservableChunk`2.ElementCount*
  nameWithType.vb: IObservableChunk(Of T, TChunk).ElementCount
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk).ElementCount
- uid: NMF.Expressions.Linq.IObservableChunk`2.GetChunkSize(System.Int32)
  commentId: M:NMF.Expressions.Linq.IObservableChunk`2.GetChunkSize(System.Int32)
  id: GetChunkSize(System.Int32)
  parent: NMF.Expressions.Linq.IObservableChunk`2
  langs:
  - csharp
  - vb
  name: GetChunkSize(int)
  nameWithType: IObservableChunk<T, TChunk>.GetChunkSize(int)
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>.GetChunkSize(int)
  type: Method
  source:
    id: GetChunkSize
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions.Chunk\IObservableChunk.cs
    startLine: 40
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: Gets the current size of the chunk with the given index
  example: []
  syntax:
    content: int GetChunkSize(int chunkIndex)
    parameters:
    - id: chunkIndex
      type: System.Int32
      description: The index of the chunk
    return:
      type: System.Int32
      description: The number of elements in the chunk
    content.vb: Function GetChunkSize(chunkIndex As Integer) As Integer
  overload: NMF.Expressions.Linq.IObservableChunk`2.GetChunkSize*
  nameWithType.vb: IObservableChunk(Of T, TChunk).GetChunkSize(Integer)
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk).GetChunkSize(Integer)
  name.vb: GetChunkSize(Integer)
- uid: NMF.Expressions.Linq.IObservableChunk`2.AddToChunk(System.Int32,`0)
  commentId: M:NMF.Expressions.Linq.IObservableChunk`2.AddToChunk(System.Int32,`0)
  id: AddToChunk(System.Int32,`0)
  parent: NMF.Expressions.Linq.IObservableChunk`2
  langs:
  - csharp
  - vb
  name: AddToChunk(int, T)
  nameWithType: IObservableChunk<T, TChunk>.AddToChunk(int, T)
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>.AddToChunk(int, T)
  type: Method
  source:
    id: AddToChunk
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions.Chunk\IObservableChunk.cs
    startLine: 47
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: Adds the given element to the chunk with the provided index
  example: []
  syntax:
    content: void AddToChunk(int chunkIndex, T item)
    parameters:
    - id: chunkIndex
      type: System.Int32
      description: The index of the chunk
    - id: item
      type: '{T}'
      description: The item that should be added
    content.vb: Sub AddToChunk(chunkIndex As Integer, item As T)
  overload: NMF.Expressions.Linq.IObservableChunk`2.AddToChunk*
  nameWithType.vb: IObservableChunk(Of T, TChunk).AddToChunk(Integer, T)
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk).AddToChunk(Integer, T)
  name.vb: AddToChunk(Integer, T)
- uid: NMF.Expressions.Linq.IObservableChunk`2.RemoveFromChunk(System.Int32,System.Int32)
  commentId: M:NMF.Expressions.Linq.IObservableChunk`2.RemoveFromChunk(System.Int32,System.Int32)
  id: RemoveFromChunk(System.Int32,System.Int32)
  parent: NMF.Expressions.Linq.IObservableChunk`2
  langs:
  - csharp
  - vb
  name: RemoveFromChunk(int, int)
  nameWithType: IObservableChunk<T, TChunk>.RemoveFromChunk(int, int)
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>.RemoveFromChunk(int, int)
  type: Method
  source:
    id: RemoveFromChunk
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions.Chunk\IObservableChunk.cs
    startLine: 54
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: Removes the element with the given position from the chunk
  example: []
  syntax:
    content: void RemoveFromChunk(int chunkIndex, int chunkPosition)
    parameters:
    - id: chunkIndex
      type: System.Int32
      description: The index of the chunk
    - id: chunkPosition
      type: System.Int32
      description: The index within the chunk
    content.vb: Sub RemoveFromChunk(chunkIndex As Integer, chunkPosition As Integer)
  overload: NMF.Expressions.Linq.IObservableChunk`2.RemoveFromChunk*
  nameWithType.vb: IObservableChunk(Of T, TChunk).RemoveFromChunk(Integer, Integer)
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk).RemoveFromChunk(Integer, Integer)
  name.vb: RemoveFromChunk(Integer, Integer)
- uid: NMF.Expressions.Linq.IObservableChunk`2.RemoveChunk(System.Int32,System.Collections.Generic.List{`1}@)
  commentId: M:NMF.Expressions.Linq.IObservableChunk`2.RemoveChunk(System.Int32,System.Collections.Generic.List{`1}@)
  id: RemoveChunk(System.Int32,System.Collections.Generic.List{`1}@)
  parent: NMF.Expressions.Linq.IObservableChunk`2
  langs:
  - csharp
  - vb
  name: RemoveChunk(int, ref List<TChunk>)
  nameWithType: IObservableChunk<T, TChunk>.RemoveChunk(int, ref List<TChunk>)
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>.RemoveChunk(int, ref System.Collections.Generic.List<TChunk>)
  type: Method
  source:
    id: RemoveChunk
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions.Chunk\IObservableChunk.cs
    startLine: 61
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: Removes the provided chunk completely
  example: []
  syntax:
    content: void RemoveChunk(int chunkIndex, ref List<TChunk> removeList)
    parameters:
    - id: chunkIndex
      type: System.Int32
      description: The index of the chunk
    - id: removeList
      type: System.Collections.Generic.List{{TChunk}}
      description: A reference to a list used for notifications
    content.vb: Sub RemoveChunk(chunkIndex As Integer, removeList As List(Of TChunk))
  overload: NMF.Expressions.Linq.IObservableChunk`2.RemoveChunk*
  nameWithType.vb: IObservableChunk(Of T, TChunk).RemoveChunk(Integer, List(Of TChunk))
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk).RemoveChunk(Integer, System.Collections.Generic.List(Of TChunk))
  name.vb: RemoveChunk(Integer, List(Of TChunk))
- uid: NMF.Expressions.Linq.IObservableChunk`2.GetAccumulatedElementCount(System.Int32)
  commentId: M:NMF.Expressions.Linq.IObservableChunk`2.GetAccumulatedElementCount(System.Int32)
  id: GetAccumulatedElementCount(System.Int32)
  parent: NMF.Expressions.Linq.IObservableChunk`2
  langs:
  - csharp
  - vb
  name: GetAccumulatedElementCount(int)
  nameWithType: IObservableChunk<T, TChunk>.GetAccumulatedElementCount(int)
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>.GetAccumulatedElementCount(int)
  type: Method
  source:
    id: GetAccumulatedElementCount
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions.Chunk\IObservableChunk.cs
    startLine: 68
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: Gets the cumulative number of elements up the given chunk index
  example: []
  syntax:
    content: int GetAccumulatedElementCount(int chunkIndex)
    parameters:
    - id: chunkIndex
      type: System.Int32
      description: The index of the chunk
    return:
      type: System.Int32
      description: The number of all elements up to and including the provided chunk
    content.vb: Function GetAccumulatedElementCount(chunkIndex As Integer) As Integer
  overload: NMF.Expressions.Linq.IObservableChunk`2.GetAccumulatedElementCount*
  nameWithType.vb: IObservableChunk(Of T, TChunk).GetAccumulatedElementCount(Integer)
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk).GetAccumulatedElementCount(Integer)
  name.vb: GetAccumulatedElementCount(Integer)
- uid: NMF.Expressions.Linq.IObservableChunk`2.GetChunkItemAt(System.Int32,System.Int32)
  commentId: M:NMF.Expressions.Linq.IObservableChunk`2.GetChunkItemAt(System.Int32,System.Int32)
  id: GetChunkItemAt(System.Int32,System.Int32)
  parent: NMF.Expressions.Linq.IObservableChunk`2
  langs:
  - csharp
  - vb
  name: GetChunkItemAt(int, int)
  nameWithType: IObservableChunk<T, TChunk>.GetChunkItemAt(int, int)
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>.GetChunkItemAt(int, int)
  type: Method
  source:
    id: GetChunkItemAt
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions.Chunk\IObservableChunk.cs
    startLine: 76
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: Gets the item at the provided position
  example: []
  syntax:
    content: T GetChunkItemAt(int chunkIndex, int chunkPosition)
    parameters:
    - id: chunkIndex
      type: System.Int32
      description: The index of the chunk
    - id: chunkPosition
      type: System.Int32
      description: The position within the chunk
    return:
      type: '{T}'
      description: The item
    content.vb: Function GetChunkItemAt(chunkIndex As Integer, chunkPosition As Integer) As T
  overload: NMF.Expressions.Linq.IObservableChunk`2.GetChunkItemAt*
  nameWithType.vb: IObservableChunk(Of T, TChunk).GetChunkItemAt(Integer, Integer)
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk).GetChunkItemAt(Integer, Integer)
  name.vb: GetChunkItemAt(Integer, Integer)
- uid: NMF.Expressions.Linq.IObservableChunk`2.Chunks
  commentId: P:NMF.Expressions.Linq.IObservableChunk`2.Chunks
  id: Chunks
  parent: NMF.Expressions.Linq.IObservableChunk`2
  langs:
  - csharp
  - vb
  name: Chunks
  nameWithType: IObservableChunk<T, TChunk>.Chunks
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>.Chunks
  type: Property
  source:
    id: Chunks
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions.Chunk\IObservableChunk.cs
    startLine: 81
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: Gets the collection of chunks
  example: []
  syntax:
    content: IReadOnlyList<TChunk> Chunks { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyList{{TChunk}}
    content.vb: ReadOnly Property Chunks As IReadOnlyList(Of TChunk)
  overload: NMF.Expressions.Linq.IObservableChunk`2.Chunks*
  nameWithType.vb: IObservableChunk(Of T, TChunk).Chunks
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk).Chunks
references:
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  href: NMF.html
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
    href: NMF.Expressions.Linq.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
    href: NMF.Expressions.Linq.html
- uid: NMF.Expressions.Linq.IObservableChunk`2.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  name: AsOne<IObservableChunk<T, TChunk>>(IObservableChunk<T, TChunk>)
  nameWithType: ExpressionExtensions.AsOne<IObservableChunk<T, TChunk>>(IObservableChunk<T, TChunk>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<NMF.Expressions.Linq.IObservableChunk<T, TChunk>>(NMF.Expressions.Linq.IObservableChunk<T, TChunk>)
  nameWithType.vb: ExpressionExtensions.AsOne(Of IObservableChunk(Of T, TChunk))(IObservableChunk(Of T, TChunk))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of NMF.Expressions.Linq.IObservableChunk(Of T, TChunk))(NMF.Expressions.Linq.IObservableChunk(Of T, TChunk))
  name.vb: AsOne(Of IObservableChunk(Of T, TChunk))(IObservableChunk(Of T, TChunk))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.Linq.IObservableChunk{`0,`1})
    name: AsOne
    href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  - name: <
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    href: NMF.Expressions.Linq.IObservableChunk-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TChunk
  - name: '>'
  - name: '>'
  - name: (
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    href: NMF.Expressions.Linq.IObservableChunk-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TChunk
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.Linq.IObservableChunk{`0,`1})
    name: AsOne
    href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    href: NMF.Expressions.Linq.IObservableChunk-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TChunk
  - name: )
  - name: )
  - name: (
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    href: NMF.Expressions.Linq.IObservableChunk-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TChunk
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  name: AsOne<T>(T)
  nameWithType: ExpressionExtensions.AsOne<T>(T)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<T>(T)
  nameWithType.vb: ExpressionExtensions.AsOne(Of T)(T)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of T)(T)
  name.vb: AsOne(Of T)(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
    href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
    href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  parent: NMF.Expressions.Linq
  href: NMF.Expressions.Linq.ExpressionExtensions.html
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
- uid: NMF.Expressions.Linq.IObservableChunk`2.CreateChunkForItem*
  commentId: Overload:NMF.Expressions.Linq.IObservableChunk`2.CreateChunkForItem
  href: NMF.Expressions.Linq.IObservableChunk-2.html#NMF_Expressions_Linq_IObservableChunk_2_CreateChunkForItem__0_
  name: CreateChunkForItem
  nameWithType: IObservableChunk<T, TChunk>.CreateChunkForItem
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>.CreateChunkForItem
  nameWithType.vb: IObservableChunk(Of T, TChunk).CreateChunkForItem
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk).CreateChunkForItem
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: '{TChunk}'
  commentId: '!:TChunk'
  definition: TChunk
  name: TChunk
  nameWithType: TChunk
  fullName: TChunk
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: TChunk
  name: TChunk
  nameWithType: TChunk
  fullName: TChunk
- uid: NMF.Expressions.Linq.IObservableChunk`2.ChunkCount*
  commentId: Overload:NMF.Expressions.Linq.IObservableChunk`2.ChunkCount
  href: NMF.Expressions.Linq.IObservableChunk-2.html#NMF_Expressions_Linq_IObservableChunk_2_ChunkCount
  name: ChunkCount
  nameWithType: IObservableChunk<T, TChunk>.ChunkCount
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>.ChunkCount
  nameWithType.vb: IObservableChunk(Of T, TChunk).ChunkCount
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk).ChunkCount
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.Linq.IObservableChunk`2.ChunkSize*
  commentId: Overload:NMF.Expressions.Linq.IObservableChunk`2.ChunkSize
  href: NMF.Expressions.Linq.IObservableChunk-2.html#NMF_Expressions_Linq_IObservableChunk_2_ChunkSize
  name: ChunkSize
  nameWithType: IObservableChunk<T, TChunk>.ChunkSize
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>.ChunkSize
  nameWithType.vb: IObservableChunk(Of T, TChunk).ChunkSize
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk).ChunkSize
- uid: NMF.Expressions.Linq.IObservableChunk`2.ElementCount*
  commentId: Overload:NMF.Expressions.Linq.IObservableChunk`2.ElementCount
  href: NMF.Expressions.Linq.IObservableChunk-2.html#NMF_Expressions_Linq_IObservableChunk_2_ElementCount
  name: ElementCount
  nameWithType: IObservableChunk<T, TChunk>.ElementCount
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>.ElementCount
  nameWithType.vb: IObservableChunk(Of T, TChunk).ElementCount
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk).ElementCount
- uid: NMF.Expressions.Linq.IObservableChunk`2.GetChunkSize*
  commentId: Overload:NMF.Expressions.Linq.IObservableChunk`2.GetChunkSize
  href: NMF.Expressions.Linq.IObservableChunk-2.html#NMF_Expressions_Linq_IObservableChunk_2_GetChunkSize_System_Int32_
  name: GetChunkSize
  nameWithType: IObservableChunk<T, TChunk>.GetChunkSize
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>.GetChunkSize
  nameWithType.vb: IObservableChunk(Of T, TChunk).GetChunkSize
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk).GetChunkSize
- uid: NMF.Expressions.Linq.IObservableChunk`2.AddToChunk*
  commentId: Overload:NMF.Expressions.Linq.IObservableChunk`2.AddToChunk
  href: NMF.Expressions.Linq.IObservableChunk-2.html#NMF_Expressions_Linq_IObservableChunk_2_AddToChunk_System_Int32__0_
  name: AddToChunk
  nameWithType: IObservableChunk<T, TChunk>.AddToChunk
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>.AddToChunk
  nameWithType.vb: IObservableChunk(Of T, TChunk).AddToChunk
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk).AddToChunk
- uid: NMF.Expressions.Linq.IObservableChunk`2.RemoveFromChunk*
  commentId: Overload:NMF.Expressions.Linq.IObservableChunk`2.RemoveFromChunk
  href: NMF.Expressions.Linq.IObservableChunk-2.html#NMF_Expressions_Linq_IObservableChunk_2_RemoveFromChunk_System_Int32_System_Int32_
  name: RemoveFromChunk
  nameWithType: IObservableChunk<T, TChunk>.RemoveFromChunk
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>.RemoveFromChunk
  nameWithType.vb: IObservableChunk(Of T, TChunk).RemoveFromChunk
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk).RemoveFromChunk
- uid: NMF.Expressions.Linq.IObservableChunk`2.RemoveChunk*
  commentId: Overload:NMF.Expressions.Linq.IObservableChunk`2.RemoveChunk
  href: NMF.Expressions.Linq.IObservableChunk-2.html#NMF_Expressions_Linq_IObservableChunk_2_RemoveChunk_System_Int32_System_Collections_Generic_List__1___
  name: RemoveChunk
  nameWithType: IObservableChunk<T, TChunk>.RemoveChunk
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>.RemoveChunk
  nameWithType.vb: IObservableChunk(Of T, TChunk).RemoveChunk
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk).RemoveChunk
- uid: System.Collections.Generic.List{{TChunk}}
  commentId: T:System.Collections.Generic.List{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<TChunk>
  nameWithType: List<TChunk>
  fullName: System.Collections.Generic.List<TChunk>
  nameWithType.vb: List(Of TChunk)
  fullName.vb: System.Collections.Generic.List(Of TChunk)
  name.vb: List(Of TChunk)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: TChunk
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: TChunk
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: NMF.Expressions.Linq.IObservableChunk`2.GetAccumulatedElementCount*
  commentId: Overload:NMF.Expressions.Linq.IObservableChunk`2.GetAccumulatedElementCount
  href: NMF.Expressions.Linq.IObservableChunk-2.html#NMF_Expressions_Linq_IObservableChunk_2_GetAccumulatedElementCount_System_Int32_
  name: GetAccumulatedElementCount
  nameWithType: IObservableChunk<T, TChunk>.GetAccumulatedElementCount
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>.GetAccumulatedElementCount
  nameWithType.vb: IObservableChunk(Of T, TChunk).GetAccumulatedElementCount
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk).GetAccumulatedElementCount
- uid: NMF.Expressions.Linq.IObservableChunk`2.GetChunkItemAt*
  commentId: Overload:NMF.Expressions.Linq.IObservableChunk`2.GetChunkItemAt
  href: NMF.Expressions.Linq.IObservableChunk-2.html#NMF_Expressions_Linq_IObservableChunk_2_GetChunkItemAt_System_Int32_System_Int32_
  name: GetChunkItemAt
  nameWithType: IObservableChunk<T, TChunk>.GetChunkItemAt
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>.GetChunkItemAt
  nameWithType.vb: IObservableChunk(Of T, TChunk).GetChunkItemAt
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk).GetChunkItemAt
- uid: NMF.Expressions.Linq.IObservableChunk`2.Chunks*
  commentId: Overload:NMF.Expressions.Linq.IObservableChunk`2.Chunks
  href: NMF.Expressions.Linq.IObservableChunk-2.html#NMF_Expressions_Linq_IObservableChunk_2_Chunks
  name: Chunks
  nameWithType: IObservableChunk<T, TChunk>.Chunks
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>.Chunks
  nameWithType.vb: IObservableChunk(Of T, TChunk).Chunks
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk).Chunks
- uid: System.Collections.Generic.IReadOnlyList{{TChunk}}
  commentId: T:System.Collections.Generic.IReadOnlyList{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: IReadOnlyList<TChunk>
  nameWithType: IReadOnlyList<TChunk>
  fullName: System.Collections.Generic.IReadOnlyList<TChunk>
  nameWithType.vb: IReadOnlyList(Of TChunk)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of TChunk)
  name.vb: IReadOnlyList(Of TChunk)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - name: TChunk
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - name: TChunk
  - name: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
