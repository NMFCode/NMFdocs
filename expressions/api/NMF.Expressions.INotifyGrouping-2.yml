### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.INotifyGrouping`2
  commentId: T:NMF.Expressions.INotifyGrouping`2
  id: INotifyGrouping`2
  parent: NMF.Expressions
  children: []
  langs:
  - csharp
  - vb
  name: INotifyGrouping<TKey, TItem>
  nameWithType: INotifyGrouping<TKey, TItem>
  fullName: NMF.Expressions.INotifyGrouping<TKey, TItem>
  type: Interface
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/INotifyEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: INotifyGrouping
    path: src/Expressions/Expressions.Linq/Facade/INotifyEnumerable.cs
    startLine: 22
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions
  syntax:
    content: 'public interface INotifyGrouping<out TKey, out TItem> : INotifyEnumerable<TItem>, INotifyEnumerable, INotifyCollectionChanged, INotifiable, IDisposable, IGrouping<TKey, TItem>, IEnumerable<TItem>, IEnumerable'
    typeParameters:
    - id: TKey
    - id: TItem
    content.vb: Public Interface INotifyGrouping(Of Out TKey, Out TItem) Inherits INotifyEnumerable(Of TItem), INotifyEnumerable, INotifyCollectionChanged, INotifiable, IDisposable, IGrouping(Of TKey, TItem), IEnumerable(Of TItem), IEnumerable
  inheritedMembers:
  - System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  - NMF.Expressions.INotifiable.Successors
  - NMF.Expressions.INotifiable.Dependencies
  - NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  - NMF.Expressions.INotifiable.ExecutionMetaData
  - System.IDisposable.Dispose
  - System.Linq.IGrouping{{TKey},{TItem}}.Key
  - System.Collections.Generic.IEnumerable{{TItem}}.GetEnumerator
  extensionMethods:
  - NMF.Expressions.INotifiable.NMF.Expressions.Debug.DebugExtensions.ExportToDgml(System.String)
  - NMF.Expressions.INotifiable.NMF.Expressions.Debug.DebugExtensions.Visualize
  - NMF.Expressions.INotifyEnumerable.NMF.Expressions.Linq.ObservableExtensions.Cast``1
  - NMF.Expressions.INotifyEnumerable.NMF.Expressions.Linq.ObservableExtensions.OfType``1
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TItem}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TItem}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{{TItem},{TResult}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TItem}},System.Int32,{TResult}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TItem},System.Int32}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TItem},System.Int32}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{{TItem},System.Int32},{TResult}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TItem},System.Int32}},System.Int32,{TResult}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.All``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Any``1
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Any``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Decimal}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Double}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Int32}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Int64}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Decimal}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Double}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Int32}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Int64}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Single}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Single}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Concat``1(System.Collections.Generic.IEnumerable{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Contains``1({TItem},System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Contains``1({TItem})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Count``1
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Count``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Distinct``1
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Distinct``1(System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Except``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Except``1(System.Collections.Generic.IEnumerable{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Func{{TItem},{TKey}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Func{{TItem},{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Func{{TItem},{TKey}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TItem}},{TResult}}},System.Func{{TKey},System.Collections.Generic.IEnumerable{{TItem}},{TResult}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Func{{TItem},{TKey}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TItem}},{TResult}}},System.Func{{TKey},System.Collections.Generic.IEnumerable{{TItem}},{TResult}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TItem}},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TItem}},{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TItem},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TItem},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TItem},{TInner},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TItem},{TInner},{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``1(System.Collections.Generic.IComparer{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}},System.Collections.Generic.IComparer{{TResult}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{{TResult}}}},System.Collections.Generic.IComparer{{TResult}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{{TResult}}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``1(System.Collections.Generic.IComparer{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}},System.Collections.Generic.IComparer{{TResult}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{{TResult}}}},System.Collections.Generic.IComparer{{TResult}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{{TResult}}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}},System.Func{{TItem},{TResult}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Collections.Generic.IEnumerable{{TResult}}}},System.Func{{TItem},System.Collections.Generic.IEnumerable{{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Collections.Generic.IEnumerable{{TResult}}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(System.Linq.Expressions.Expression{System.Func{{TItem},System.Collections.Generic.IEnumerable{{TIntermediate}}}},System.Func{{TItem},System.Collections.Generic.IEnumerable{{TIntermediate}}},System.Linq.Expressions.Expression{System.Func{{TItem},{TIntermediate},{TResult}}},System.Func{{TItem},{TIntermediate},{TResult}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(System.Linq.Expressions.Expression{System.Func{{TItem},System.Collections.Generic.IEnumerable{{TIntermediate}}}},System.Linq.Expressions.Expression{System.Func{{TItem},{TIntermediate},{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Decimal}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Double}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Int32}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Int64}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Decimal}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Double}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Int32}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Int64}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Single}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Single}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Union``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Union``1(System.Collections.Generic.IEnumerable{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}},System.Func{{TItem},System.Boolean})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  - NMF.Expressions.INotifyGrouping`2.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  - System.Collections.Generic.IEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TItem}},System.Int32,{TResult}})
  - System.Collections.Generic.IEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TItem},System.Int32}},System.Int32,{TResult}})
  - System.Collections.Generic.IEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  nameWithType.vb: INotifyGrouping(Of TKey, TItem)
  fullName.vb: NMF.Expressions.INotifyGrouping(Of TKey, TItem)
  name.vb: INotifyGrouping(Of TKey, TItem)
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
- uid: System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  commentId: E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  parent: System.Collections.Specialized.INotifyCollectionChanged
  isExternal: true
  name: CollectionChanged
  nameWithType: INotifyCollectionChanged.CollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
- uid: NMF.Expressions.INotifiable.Successors
  commentId: P:NMF.Expressions.INotifiable.Successors
  parent: NMF.Expressions.INotifiable
  name: Successors
  nameWithType: INotifiable.Successors
  fullName: NMF.Expressions.INotifiable.Successors
- uid: NMF.Expressions.INotifiable.Dependencies
  commentId: P:NMF.Expressions.INotifiable.Dependencies
  parent: NMF.Expressions.INotifiable
  name: Dependencies
  nameWithType: INotifiable.Dependencies
  fullName: NMF.Expressions.INotifiable.Dependencies
- uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  commentId: M:NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  parent: NMF.Expressions.INotifiable
  isExternal: true
  name: Notify(IList<INotificationResult>)
  nameWithType: INotifiable.Notify(IList<INotificationResult>)
  fullName: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList<NMF.Expressions.INotificationResult>)
  nameWithType.vb: INotifiable.Notify(IList(Of INotificationResult))
  fullName.vb: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
  spec.csharp:
  - uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
  - name: )
  - name: )
- uid: NMF.Expressions.INotifiable.ExecutionMetaData
  commentId: P:NMF.Expressions.INotifiable.ExecutionMetaData
  parent: NMF.Expressions.INotifiable
  name: ExecutionMetaData
  nameWithType: INotifiable.ExecutionMetaData
  fullName: NMF.Expressions.INotifiable.ExecutionMetaData
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
  - name: (
  - name: )
- uid: System.Linq.IGrouping{{TKey},{TItem}}.Key
  commentId: P:System.Linq.IGrouping{`0,`1}.Key
  parent: System.Linq.IGrouping{{TKey},{TItem}}
  definition: System.Linq.IGrouping`2.Key
  name: Key
  nameWithType: IGrouping<TKey, TItem>.Key
  fullName: System.Linq.IGrouping<TKey, TItem>.Key
  nameWithType.vb: IGrouping(Of TKey, TItem).Key
  fullName.vb: System.Linq.IGrouping(Of TKey, TItem).Key
- uid: System.Collections.Generic.IEnumerable{{TItem}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`1}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{TItem}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<TItem>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<TItem>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of TItem).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of TItem).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable{`1}.GetEnumerator
    name: GetEnumerator
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable{`1}.GetEnumerator
    name: GetEnumerator
    isExternal: true
  - name: (
  - name: )
- uid: NMF.Expressions.INotifiable.NMF.Expressions.Debug.DebugExtensions.ExportToDgml(System.String)
  commentId: M:NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
  parent: NMF.Expressions.Debug.DebugExtensions
  definition: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
  name: ExportToDgml(INotifiable, string)
  nameWithType: DebugExtensions.ExportToDgml(INotifiable, string)
  fullName: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable, string)
  nameWithType.vb: DebugExtensions.ExportToDgml(INotifiable, String)
  fullName.vb: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable, String)
  name.vb: ExportToDgml(INotifiable, String)
  spec.csharp:
  - uid: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
    name: ExportToDgml
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
    name: ExportToDgml
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: NMF.Expressions.INotifiable.NMF.Expressions.Debug.DebugExtensions.Visualize
  commentId: M:NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
  parent: NMF.Expressions.Debug.DebugExtensions
  definition: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
  name: Visualize(INotifiable)
  nameWithType: DebugExtensions.Visualize(INotifiable)
  fullName: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
  spec.csharp:
  - uid: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
    name: Visualize
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
    name: Visualize
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: )
- uid: NMF.Expressions.INotifyEnumerable.NMF.Expressions.Linq.ObservableExtensions.Cast``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
  name: Cast<TResult>(INotifyEnumerable)
  nameWithType: ObservableExtensions.Cast<TResult>(INotifyEnumerable)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Cast<TResult>(NMF.Expressions.INotifyEnumerable)
  nameWithType.vb: ObservableExtensions.Cast(Of TResult)(INotifyEnumerable)
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Cast(Of TResult)(NMF.Expressions.INotifyEnumerable)
  name.vb: Cast(Of TResult)(INotifyEnumerable)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
    name: Cast
  - name: <
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable
    name: INotifyEnumerable
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
    name: Cast
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable
    name: INotifyEnumerable
  - name: )
- uid: NMF.Expressions.INotifyEnumerable.NMF.Expressions.Linq.ObservableExtensions.OfType``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
  name: OfType<TResult>(INotifyEnumerable)
  nameWithType: ObservableExtensions.OfType<TResult>(INotifyEnumerable)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OfType<TResult>(NMF.Expressions.INotifyEnumerable)
  nameWithType.vb: ObservableExtensions.OfType(Of TResult)(INotifyEnumerable)
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OfType(Of TResult)(NMF.Expressions.INotifyEnumerable)
  name.vb: OfType(Of TResult)(INotifyEnumerable)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
    name: OfType
  - name: <
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable
    name: INotifyEnumerable
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
    name: OfType
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable
    name: INotifyEnumerable
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TItem}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name: Chunk<TItem, TResult>(INotifyEnumerable<TItem>, int, Func<IEnumerableExpression<TItem>, int, TResult>, IChunkBalancingStrategyProvider)
  nameWithType: ChunkExtensions.Chunk<TItem, TResult>(INotifyEnumerable<TItem>, int, Func<IEnumerableExpression<TItem>, int, TResult>, IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<TItem, TResult>(NMF.Expressions.INotifyEnumerable<TItem>, int, System.Func<NMF.Expressions.IEnumerableExpression<TItem>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  nameWithType.vb: ChunkExtensions.Chunk(Of TItem, TResult)(INotifyEnumerable(Of TItem), Integer, Func(Of IEnumerableExpression(Of TItem), Integer, TResult), IChunkBalancingStrategyProvider)
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of TItem, TResult)(NMF.Expressions.INotifyEnumerable(Of TItem), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of TItem), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: Chunk(Of TItem, TResult)(INotifyEnumerable(Of TItem), Integer, Func(Of IEnumerableExpression(Of TItem), Integer, TResult), IChunkBalancingStrategyProvider)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{`1},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: Chunk
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{`1},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: Chunk
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TItem}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{{TItem},{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  name: Chunk<TItem, TResult>(INotifyEnumerable<TItem>, int, Func<IEnumerableExpression<TItem>, int, TResult>, IChunkBalancingStrategyProvider<TItem, TResult>)
  nameWithType: ChunkExtensions.Chunk<TItem, TResult>(INotifyEnumerable<TItem>, int, Func<IEnumerableExpression<TItem>, int, TResult>, IChunkBalancingStrategyProvider<TItem, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<TItem, TResult>(NMF.Expressions.INotifyEnumerable<TItem>, int, System.Func<NMF.Expressions.IEnumerableExpression<TItem>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider<TItem, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of TItem, TResult)(INotifyEnumerable(Of TItem), Integer, Func(Of IEnumerableExpression(Of TItem), Integer, TResult), IChunkBalancingStrategyProvider(Of TItem, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of TItem, TResult)(NMF.Expressions.INotifyEnumerable(Of TItem), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of TItem), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of TItem, TResult))
  name.vb: Chunk(Of TItem, TResult)(INotifyEnumerable(Of TItem), Integer, Func(Of IEnumerableExpression(Of TItem), Integer, TResult), IChunkBalancingStrategyProvider(Of TItem, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{`1},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{`1,``1})
    name: Chunk
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{`1},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{`1,``1})
    name: Chunk
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TItem}},System.Int32,{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  name: Chunk<TItem, TResult>(INotifyEnumerable<TItem>, int, Func<IEnumerableExpression<TItem>, int, TResult>)
  nameWithType: ChunkExtensions.Chunk<TItem, TResult>(INotifyEnumerable<TItem>, int, Func<IEnumerableExpression<TItem>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<TItem, TResult>(NMF.Expressions.INotifyEnumerable<TItem>, int, System.Func<NMF.Expressions.IEnumerableExpression<TItem>, int, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of TItem, TResult)(INotifyEnumerable(Of TItem), Integer, Func(Of IEnumerableExpression(Of TItem), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of TItem, TResult)(NMF.Expressions.INotifyEnumerable(Of TItem), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of TItem), Integer, TResult))
  name.vb: Chunk(Of TItem, TResult)(INotifyEnumerable(Of TItem), Integer, Func(Of IEnumerableExpression(Of TItem), Integer, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{`1},System.Int32,``1})
    name: Chunk
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{`1},System.Int32,``1})
    name: Chunk
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TItem},System.Int32}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name: ChunkIndexed<TItem, TResult>(INotifyEnumerable<TItem>, int, Func<IEnumerableExpression<(TItem, int)>, int, TResult>, IChunkBalancingStrategyProvider)
  nameWithType: ChunkExtensions.ChunkIndexed<TItem, TResult>(INotifyEnumerable<TItem>, int, Func<IEnumerableExpression<(TItem, int)>, int, TResult>, IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<TItem, TResult>(NMF.Expressions.INotifyEnumerable<TItem>, int, System.Func<NMF.Expressions.IEnumerableExpression<(TItem, int)>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of TItem, TResult)(INotifyEnumerable(Of TItem), Integer, Func(Of IEnumerableExpression(Of (TItem, Integer)), Integer, TResult), IChunkBalancingStrategyProvider)
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of TItem, TResult)(NMF.Expressions.INotifyEnumerable(Of TItem), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (TItem, Integer)), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: ChunkIndexed(Of TItem, TResult)(INotifyEnumerable(Of TItem), Integer, Func(Of IEnumerableExpression(Of (TItem, Integer)), Integer, TResult), IChunkBalancingStrategyProvider)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{`1,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: ChunkIndexed
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: (
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{`1,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: ChunkIndexed
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TItem},System.Int32}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{{TItem},System.Int32},{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  name: ChunkIndexed<TItem, TResult>(INotifyEnumerable<TItem>, int, Func<IEnumerableExpression<(TItem, int)>, int, TResult>, IChunkBalancingStrategyProvider<(TItem, int), TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<TItem, TResult>(INotifyEnumerable<TItem>, int, Func<IEnumerableExpression<(TItem, int)>, int, TResult>, IChunkBalancingStrategyProvider<(TItem, int), TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<TItem, TResult>(NMF.Expressions.INotifyEnumerable<TItem>, int, System.Func<NMF.Expressions.IEnumerableExpression<(TItem, int)>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider<(TItem, int), TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of TItem, TResult)(INotifyEnumerable(Of TItem), Integer, Func(Of IEnumerableExpression(Of (TItem, Integer)), Integer, TResult), IChunkBalancingStrategyProvider(Of (TItem, Integer), TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of TItem, TResult)(NMF.Expressions.INotifyEnumerable(Of TItem), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (TItem, Integer)), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of (TItem, Integer), TResult))
  name.vb: ChunkIndexed(Of TItem, TResult)(INotifyEnumerable(Of TItem), Integer, Func(Of IEnumerableExpression(Of (TItem, Integer)), Integer, TResult), IChunkBalancingStrategyProvider(Of (TItem, Integer), TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{`1,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{`1,System.Int32},``1})
    name: ChunkIndexed
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: (
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
  - name: <
  - name: (
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{`1,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{`1,System.Int32},``1})
    name: ChunkIndexed
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TItem},System.Int32}},System.Int32,{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  name: ChunkIndexed<TItem, TResult>(INotifyEnumerable<TItem>, int, Func<IEnumerableExpression<(TItem, int)>, int, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<TItem, TResult>(INotifyEnumerable<TItem>, int, Func<IEnumerableExpression<(TItem, int)>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<TItem, TResult>(NMF.Expressions.INotifyEnumerable<TItem>, int, System.Func<NMF.Expressions.IEnumerableExpression<(TItem, int)>, int, TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of TItem, TResult)(INotifyEnumerable(Of TItem), Integer, Func(Of IEnumerableExpression(Of (TItem, Integer)), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of TItem, TResult)(NMF.Expressions.INotifyEnumerable(Of TItem), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (TItem, Integer)), Integer, TResult))
  name.vb: ChunkIndexed(Of TItem, TResult)(INotifyEnumerable(Of TItem), Integer, Func(Of IEnumerableExpression(Of (TItem, Integer)), Integer, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{`1,System.Int32}},System.Int32,``1})
    name: ChunkIndexed
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: (
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{`1,System.Int32}},System.Int32,``1})
    name: ChunkIndexed
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  commentId: M:NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.LookupExtensions
  definition: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: ToLookup<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  nameWithType: LookupExtensions.ToLookup<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: LookupExtensions.ToLookup(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: ToLookup(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: ToLookup
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: ToLookup
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.All``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: All<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, bool>>)
  nameWithType: ObservableExtensions.All<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.All<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, bool>>)
  nameWithType.vb: ObservableExtensions.All(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.All(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, Boolean)))
  name.vb: All(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: All
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: All
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Any``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0})
  name: Any<TItem>(INotifyEnumerable<TItem>)
  nameWithType: ObservableExtensions.Any<TItem>(INotifyEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Any<TItem>(NMF.Expressions.INotifyEnumerable<TItem>)
  nameWithType.vb: ObservableExtensions.Any(Of TItem)(INotifyEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Any(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem))
  name.vb: Any(Of TItem)(INotifyEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{`1})
    name: Any
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{`1})
    name: Any
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Any``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Any<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, bool>>)
  nameWithType: ObservableExtensions.Any<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Any<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, bool>>)
  nameWithType.vb: ObservableExtensions.Any(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Any(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, Boolean)))
  name.vb: Any(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: Any
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: Any
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  name: Average<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, decimal>>)
  nameWithType: ObservableExtensions.Average<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, decimal>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, decimal>>)
  nameWithType.vb: ObservableExtensions.Average(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, Decimal)))
  name.vb: Average(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Decimal)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Decimal}})
    name: Average
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Decimal}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Double}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  name: Average<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, double>>)
  nameWithType: ObservableExtensions.Average<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, double>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, double>>)
  nameWithType.vb: ObservableExtensions.Average(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Double)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, Double)))
  name.vb: Average(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Double)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Double}})
    name: Average
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Double}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Int32}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  name: Average<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, int>>)
  nameWithType: ObservableExtensions.Average<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, int>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, int>>)
  nameWithType.vb: ObservableExtensions.Average(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Integer)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, Integer)))
  name.vb: Average(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Integer)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Int32}})
    name: Average
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Int32}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Int64}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  name: Average<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, long>>)
  nameWithType: ObservableExtensions.Average<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, long>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, long>>)
  nameWithType.vb: ObservableExtensions.Average(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Long)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, Long)))
  name.vb: Average(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Long)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Int64}})
    name: Average
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Int64}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  name: Average<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, decimal?>>)
  nameWithType: ObservableExtensions.Average<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, decimal?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, decimal?>>)
  nameWithType.vb: ObservableExtensions.Average(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Decimal?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, Decimal?)))
  name.vb: Average(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Decimal?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Decimal}}})
    name: Average
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Decimal}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  name: Average<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, double?>>)
  nameWithType: ObservableExtensions.Average<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, double?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, double?>>)
  nameWithType.vb: ObservableExtensions.Average(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Double?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, Double?)))
  name.vb: Average(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Double?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Double}}})
    name: Average
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Double}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  name: Average<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, int?>>)
  nameWithType: ObservableExtensions.Average<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, int?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, int?>>)
  nameWithType.vb: ObservableExtensions.Average(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Integer?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, Integer?)))
  name.vb: Average(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Integer?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int32}}})
    name: Average
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int32}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  name: Average<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, long?>>)
  nameWithType: ObservableExtensions.Average<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, long?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, long?>>)
  nameWithType.vb: ObservableExtensions.Average(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Long?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, Long?)))
  name.vb: Average(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Long?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int64}}})
    name: Average
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int64}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  name: Average<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, float?>>)
  nameWithType: ObservableExtensions.Average<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, float?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, float?>>)
  nameWithType.vb: ObservableExtensions.Average(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Single?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, Single?)))
  name.vb: Average(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Single?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Single}}})
    name: Average
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Single}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Single}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  name: Average<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, float>>)
  nameWithType: ObservableExtensions.Average<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, float>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, float>>)
  nameWithType.vb: ObservableExtensions.Average(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Single)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, Single)))
  name.vb: Average(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Single)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Single}})
    name: Average
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Single}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Concat``1(System.Collections.Generic.IEnumerable{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: Concat<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>)
  nameWithType: ObservableExtensions.Concat<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Concat<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Collections.Generic.IEnumerable<TItem>)
  nameWithType.vb: ObservableExtensions.Concat(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Concat(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Collections.Generic.IEnumerable(Of TItem))
  name.vb: Concat(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: Concat
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: Concat
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Contains``1({TItem},System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  name: Contains<TItem>(INotifyEnumerable<TItem>, TItem, IEqualityComparer<TItem>)
  nameWithType: ObservableExtensions.Contains<TItem>(INotifyEnumerable<TItem>, TItem, IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Contains<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, TItem, System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ObservableExtensions.Contains(Of TItem)(INotifyEnumerable(Of TItem), TItem, IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Contains(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), TItem, System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: Contains(Of TItem)(INotifyEnumerable(Of TItem), TItem, IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{`1},`1,System.Collections.Generic.IEqualityComparer{`1})
    name: Contains
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{`1},`1,System.Collections.Generic.IEqualityComparer{`1})
    name: Contains
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Contains``1({TItem})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0)
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0)
  name: Contains<TItem>(INotifyEnumerable<TItem>, TItem)
  nameWithType: ObservableExtensions.Contains<TItem>(INotifyEnumerable<TItem>, TItem)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Contains<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, TItem)
  nameWithType.vb: ObservableExtensions.Contains(Of TItem)(INotifyEnumerable(Of TItem), TItem)
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Contains(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), TItem)
  name.vb: Contains(Of TItem)(INotifyEnumerable(Of TItem), TItem)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{`1},`1)
    name: Contains
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - name: TItem
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{`1},`1)
    name: Contains
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - name: TItem
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Count``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0})
  name: Count<TItem>(INotifyEnumerable<TItem>)
  nameWithType: ObservableExtensions.Count<TItem>(INotifyEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Count<TItem>(NMF.Expressions.INotifyEnumerable<TItem>)
  nameWithType.vb: ObservableExtensions.Count(Of TItem)(INotifyEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Count(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem))
  name.vb: Count(Of TItem)(INotifyEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{`1})
    name: Count
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{`1})
    name: Count
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Count``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Count<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, bool>>)
  nameWithType: ObservableExtensions.Count<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Count<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, bool>>)
  nameWithType.vb: ObservableExtensions.Count(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Count(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, Boolean)))
  name.vb: Count(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: Count
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: Count
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Distinct``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0})
  name: Distinct<TItem>(INotifyEnumerable<TItem>)
  nameWithType: ObservableExtensions.Distinct<TItem>(INotifyEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct<TItem>(NMF.Expressions.INotifyEnumerable<TItem>)
  nameWithType.vb: ObservableExtensions.Distinct(Of TItem)(INotifyEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Distinct(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem))
  name.vb: Distinct(Of TItem)(INotifyEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{`1})
    name: Distinct
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{`1})
    name: Distinct
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Distinct``1(System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Distinct<TItem>(INotifyEnumerable<TItem>, IEqualityComparer<TItem>)
  nameWithType: ObservableExtensions.Distinct<TItem>(INotifyEnumerable<TItem>, IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ObservableExtensions.Distinct(Of TItem)(INotifyEnumerable(Of TItem), IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Distinct(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: Distinct(Of TItem)(INotifyEnumerable(Of TItem), IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: Distinct
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: Distinct
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Except``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Except<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>, IEqualityComparer<TItem>)
  nameWithType: ObservableExtensions.Except<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>, IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Except<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Collections.Generic.IEnumerable<TItem>, System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ObservableExtensions.Except(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Except(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Collections.Generic.IEnumerable(Of TItem), System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: Except(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: Except
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: Except
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Except``1(System.Collections.Generic.IEnumerable{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: Except<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>)
  nameWithType: ObservableExtensions.Except<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Except<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Collections.Generic.IEnumerable<TItem>)
  nameWithType.vb: ObservableExtensions.Except(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Except(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Collections.Generic.IEnumerable(Of TItem))
  name.vb: Except(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: Except
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: Except
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  name: FirstOrDefault<TItem>(INotifyEnumerable<TItem>)
  nameWithType: ObservableExtensions.FirstOrDefault<TItem>(INotifyEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault<TItem>(NMF.Expressions.INotifyEnumerable<TItem>)
  nameWithType.vb: ObservableExtensions.FirstOrDefault(Of TItem)(INotifyEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem))
  name.vb: FirstOrDefault(Of TItem)(INotifyEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{`1})
    name: FirstOrDefault
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{`1})
    name: FirstOrDefault
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: FirstOrDefault<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, bool>>)
  nameWithType: ObservableExtensions.FirstOrDefault<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, bool>>)
  nameWithType.vb: ObservableExtensions.FirstOrDefault(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, Boolean)))
  name.vb: FirstOrDefault(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: FirstOrDefault
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: FirstOrDefault
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  name: GroupBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Func{{TItem},{TKey}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  name: GroupBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, Func<TItem, TKey>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, Func<TItem, TKey>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Func<TItem, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), Func(Of TItem, TKey), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Func(Of TItem, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), Func(Of TItem, TKey), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Func{`1,``1},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Func{`1,``1},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Func{{TItem},{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  name: GroupBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, Func<TItem, TKey>)
  nameWithType: ObservableExtensions.GroupBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, Func<TItem, TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Func<TItem, TKey>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), Func(Of TItem, TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Func(Of TItem, TKey))
  name.vb: GroupBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), Func(Of TItem, TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Func{`1,``1})
    name: GroupBy
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Func{`1,``1})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: GroupBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  nameWithType: ObservableExtensions.GroupBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: GroupBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: GroupBy
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Func{{TItem},{TKey}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TItem}},{TResult}}},System.Func{{TKey},System.Collections.Generic.IEnumerable{{TItem}},{TResult}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  name: GroupBy<TItem, TKey, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, Func<TItem, TKey>, Expression<Func<TKey, IEnumerable<TItem>, TResult>>, Func<TKey, IEnumerable<TItem>, TResult>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupBy<TItem, TKey, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, Func<TItem, TKey>, Expression<Func<TKey, IEnumerable<TItem>, TResult>>, Func<TKey, IEnumerable<TItem>, TResult>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TItem, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Func<TItem, TKey>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TItem>, TResult>>, System.Func<TKey, System.Collections.Generic.IEnumerable<TItem>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TItem, TKey, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), Func(Of TItem, TKey), Expression(Of Func(Of TKey, IEnumerable(Of TItem), TResult)), Func(Of TKey, IEnumerable(Of TItem), TResult), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TItem, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Func(Of TItem, TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TItem), TResult)), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TItem), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TItem, TKey, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), Func(Of TItem, TKey), Expression(Of Func(Of TKey, IEnumerable(Of TItem), TResult)), Func(Of TKey, IEnumerable(Of TItem), TResult), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Func{`1,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{`1},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{`1},``2},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Func{`1,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{`1},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{`1},``2},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Func{{TItem},{TKey}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TItem}},{TResult}}},System.Func{{TKey},System.Collections.Generic.IEnumerable{{TItem}},{TResult}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  name: GroupBy<TItem, TKey, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, Func<TItem, TKey>, Expression<Func<TKey, IEnumerable<TItem>, TResult>>, Func<TKey, IEnumerable<TItem>, TResult>)
  nameWithType: ObservableExtensions.GroupBy<TItem, TKey, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, Func<TItem, TKey>, Expression<Func<TKey, IEnumerable<TItem>, TResult>>, Func<TKey, IEnumerable<TItem>, TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TItem, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Func<TItem, TKey>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TItem>, TResult>>, System.Func<TKey, System.Collections.Generic.IEnumerable<TItem>, TResult>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TItem, TKey, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), Func(Of TItem, TKey), Expression(Of Func(Of TKey, IEnumerable(Of TItem), TResult)), Func(Of TKey, IEnumerable(Of TItem), TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TItem, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Func(Of TItem, TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TItem), TResult)), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TItem), TResult))
  name.vb: GroupBy(Of TItem, TKey, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), Func(Of TItem, TKey), Expression(Of Func(Of TKey, IEnumerable(Of TItem), TResult)), Func(Of TKey, IEnumerable(Of TItem), TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Func{`1,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{`1},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{`1},``2})
    name: GroupBy
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Func{`1,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{`1},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{`1},``2})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TItem}},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  name: GroupBy<TItem, TKey, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, Expression<Func<TKey, IEnumerable<TItem>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupBy<TItem, TKey, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, Expression<Func<TKey, IEnumerable<TItem>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TItem, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TItem>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TItem, TKey, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TItem), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TItem, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TItem), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TItem, TKey, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TItem), TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{`1},``2}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{`1},``2}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TItem}},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  name: GroupBy<TItem, TKey, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, Expression<Func<TKey, IEnumerable<TItem>, TResult>>)
  nameWithType: ObservableExtensions.GroupBy<TItem, TKey, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, Expression<Func<TKey, IEnumerable<TItem>, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TItem, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TItem>, TResult>>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TItem, TKey, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TItem), TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TItem, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TItem), TResult)))
  name.vb: GroupBy(Of TItem, TKey, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TItem), TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{`1},``2}})
    name: GroupBy
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{`1},``2}})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TItem},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  name: GroupJoin<TItem, TInner, TKey, TResult>(INotifyEnumerable<TItem>, IEnumerable<TInner>, Expression<Func<TItem, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TItem, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupJoin<TItem, TInner, TKey, TResult>(INotifyEnumerable<TItem>, IEnumerable<TInner>, Expression<Func<TItem, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TItem, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin<TItem, TInner, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TItem>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TItem, System.Collections.Generic.IEnumerable<TInner>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupJoin(Of TItem, TInner, TKey, TResult)(INotifyEnumerable(Of TItem), IEnumerable(Of TInner), Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TItem, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupJoin(Of TItem, TInner, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Collections.Generic.IEnumerable(Of TInner), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupJoin(Of TItem, TInner, TKey, TResult)(INotifyEnumerable(Of TItem), IEnumerable(Of TInner), Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TItem, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{`1,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{`1,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TItem},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  name: GroupJoin<TItem, TInner, TKey, TResult>(INotifyEnumerable<TItem>, IEnumerable<TInner>, Expression<Func<TItem, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TItem, IEnumerable<TInner>, TResult>>)
  nameWithType: ObservableExtensions.GroupJoin<TItem, TInner, TKey, TResult>(INotifyEnumerable<TItem>, IEnumerable<TInner>, Expression<Func<TItem, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TItem, IEnumerable<TInner>, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin<TItem, TInner, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TItem>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TItem, System.Collections.Generic.IEnumerable<TInner>, TResult>>)
  nameWithType.vb: ObservableExtensions.GroupJoin(Of TItem, TInner, TKey, TResult)(INotifyEnumerable(Of TItem), IEnumerable(Of TInner), Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TItem, IEnumerable(Of TInner), TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupJoin(Of TItem, TInner, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Collections.Generic.IEnumerable(Of TInner), TResult)))
  name.vb: GroupJoin(Of TItem, TInner, TKey, TResult)(INotifyEnumerable(Of TItem), IEnumerable(Of TInner), Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TItem, IEnumerable(Of TInner), TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{`1,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{``1},``3}})
    name: GroupJoin
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{`1,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{``1},``3}})
    name: GroupJoin
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Intersect<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>, IEqualityComparer<TItem>)
  nameWithType: ObservableExtensions.Intersect<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>, IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Collections.Generic.IEnumerable<TItem>, System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ObservableExtensions.Intersect(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Intersect(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Collections.Generic.IEnumerable(Of TItem), System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: Intersect(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: Intersect
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: Intersect
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: Intersect<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>)
  nameWithType: ObservableExtensions.Intersect<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Collections.Generic.IEnumerable<TItem>)
  nameWithType.vb: ObservableExtensions.Intersect(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Intersect(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Collections.Generic.IEnumerable(Of TItem))
  name.vb: Intersect(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: Intersect
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: Intersect
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsProperSubsetOf<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>, IEqualityComparer<TItem>)
  nameWithType: ObservableExtensions.IsProperSubsetOf<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>, IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Collections.Generic.IEnumerable<TItem>, System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ObservableExtensions.IsProperSubsetOf(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Collections.Generic.IEnumerable(Of TItem), System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: IsProperSubsetOf(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: IsProperSubsetOf
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: IsProperSubsetOf
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsProperSubsetOf<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>)
  nameWithType: ObservableExtensions.IsProperSubsetOf<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Collections.Generic.IEnumerable<TItem>)
  nameWithType.vb: ObservableExtensions.IsProperSubsetOf(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Collections.Generic.IEnumerable(Of TItem))
  name.vb: IsProperSubsetOf(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: IsProperSubsetOf
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: IsProperSubsetOf
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsProperSupersetOf<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>, IEqualityComparer<TItem>)
  nameWithType: ObservableExtensions.IsProperSupersetOf<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>, IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Collections.Generic.IEnumerable<TItem>, System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ObservableExtensions.IsProperSupersetOf(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Collections.Generic.IEnumerable(Of TItem), System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: IsProperSupersetOf(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: IsProperSupersetOf
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: IsProperSupersetOf
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsProperSupersetOf<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>)
  nameWithType: ObservableExtensions.IsProperSupersetOf<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Collections.Generic.IEnumerable<TItem>)
  nameWithType.vb: ObservableExtensions.IsProperSupersetOf(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Collections.Generic.IEnumerable(Of TItem))
  name.vb: IsProperSupersetOf(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: IsProperSupersetOf
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: IsProperSupersetOf
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsSubsetOf<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>, IEqualityComparer<TItem>)
  nameWithType: ObservableExtensions.IsSubsetOf<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>, IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Collections.Generic.IEnumerable<TItem>, System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ObservableExtensions.IsSubsetOf(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Collections.Generic.IEnumerable(Of TItem), System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: IsSubsetOf(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: IsSubsetOf
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: IsSubsetOf
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsSubsetOf<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>)
  nameWithType: ObservableExtensions.IsSubsetOf<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Collections.Generic.IEnumerable<TItem>)
  nameWithType.vb: ObservableExtensions.IsSubsetOf(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Collections.Generic.IEnumerable(Of TItem))
  name.vb: IsSubsetOf(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: IsSubsetOf
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: IsSubsetOf
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsSupersetOf<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>, IEqualityComparer<TItem>)
  nameWithType: ObservableExtensions.IsSupersetOf<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>, IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Collections.Generic.IEnumerable<TItem>, System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ObservableExtensions.IsSupersetOf(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Collections.Generic.IEnumerable(Of TItem), System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: IsSupersetOf(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: IsSupersetOf
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: IsSupersetOf
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsSupersetOf<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>)
  nameWithType: ObservableExtensions.IsSupersetOf<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Collections.Generic.IEnumerable<TItem>)
  nameWithType.vb: ObservableExtensions.IsSupersetOf(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Collections.Generic.IEnumerable(Of TItem))
  name.vb: IsSupersetOf(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: IsSupersetOf
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: IsSupersetOf
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TItem},{TInner},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  name: Join<TItem, TInner, TKey, TResult>(INotifyEnumerable<TItem>, IEnumerable<TInner>, Expression<Func<TItem, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TItem, TInner, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.Join<TItem, TInner, TKey, TResult>(INotifyEnumerable<TItem>, IEnumerable<TInner>, Expression<Func<TItem, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TItem, TInner, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Join<TItem, TInner, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TItem>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TItem, TInner, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.Join(Of TItem, TInner, TKey, TResult)(INotifyEnumerable(Of TItem), IEnumerable(Of TInner), Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TItem, TInner, TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Join(Of TItem, TInner, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TInner, TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Join(Of TItem, TInner, TKey, TResult)(INotifyEnumerable(Of TItem), IEnumerable(Of TInner), Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TItem, TInner, TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{`1,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{`1,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: Join
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{`1,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{`1,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: Join
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TItem},{TInner},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  name: Join<TItem, TInner, TKey, TResult>(INotifyEnumerable<TItem>, IEnumerable<TInner>, Expression<Func<TItem, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TItem, TInner, TResult>>)
  nameWithType: ObservableExtensions.Join<TItem, TInner, TKey, TResult>(INotifyEnumerable<TItem>, IEnumerable<TInner>, Expression<Func<TItem, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TItem, TInner, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Join<TItem, TInner, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TItem>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TItem, TInner, TResult>>)
  nameWithType.vb: ObservableExtensions.Join(Of TItem, TInner, TKey, TResult)(INotifyEnumerable(Of TItem), IEnumerable(Of TInner), Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TItem, TInner, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Join(Of TItem, TInner, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TInner, TResult)))
  name.vb: Join(Of TItem, TInner, TKey, TResult)(INotifyEnumerable(Of TItem), IEnumerable(Of TInner), Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TItem, TInner, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{`1,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{`1,``1,``3}})
    name: Join
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{`1,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{`1,``1,``3}})
    name: Join
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``1(System.Collections.Generic.IComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  name: Max<TItem>(INotifyEnumerable<TItem>, IComparer<TItem>)
  nameWithType: ObservableExtensions.Max<TItem>(INotifyEnumerable<TItem>, IComparer<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Collections.Generic.IComparer<TItem>)
  nameWithType.vb: ObservableExtensions.Max(Of TItem)(INotifyEnumerable(Of TItem), IComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Collections.Generic.IComparer(Of TItem))
  name.vb: Max(Of TItem)(INotifyEnumerable(Of TItem), IComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IComparer{`1})
    name: Max
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IComparer{`1})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}},System.Collections.Generic.IComparer{{TResult}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: Max<TItem, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, TResult>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Max<TItem, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TItem, TResult>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TResult>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Max(Of TItem, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TItem, TResult)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of TItem, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TResult)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Collections.Generic.IComparer{``1})
    name: Max
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Collections.Generic.IComparer{``1})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: Max<TItem, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, TResult>>)
  nameWithType: ObservableExtensions.Max<TItem, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TItem, TResult>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TResult>>)
  nameWithType.vb: ObservableExtensions.Max(Of TItem, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TItem, TResult)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TResult)))
  name.vb: Max(Of TItem, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: Max
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{{TResult}}}},System.Collections.Generic.IComparer{{TResult}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  name: Max<TItem, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, TResult?>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Max<TItem, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, TResult?>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TItem, TResult>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TResult?>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Max(Of TItem, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TResult?)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TItem, TResult)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TResult?)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of TItem, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TResult?)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Max
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{{TResult}}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  name: Max<TItem, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, TResult?>>)
  nameWithType: ObservableExtensions.Max<TItem, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, TResult?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TItem, TResult>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TResult?>>)
  nameWithType.vb: ObservableExtensions.Max(Of TItem, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TResult?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TItem, TResult)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TResult?)))
  name.vb: Max(Of TItem, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TResult?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{``1}}})
    name: Max
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{``1}}})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``1(System.Collections.Generic.IComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  name: Min<TItem>(INotifyEnumerable<TItem>, IComparer<TItem>)
  nameWithType: ObservableExtensions.Min<TItem>(INotifyEnumerable<TItem>, IComparer<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Collections.Generic.IComparer<TItem>)
  nameWithType.vb: ObservableExtensions.Min(Of TItem)(INotifyEnumerable(Of TItem), IComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Collections.Generic.IComparer(Of TItem))
  name.vb: Min(Of TItem)(INotifyEnumerable(Of TItem), IComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IComparer{`1})
    name: Min
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IComparer{`1})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}},System.Collections.Generic.IComparer{{TResult}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: Min<TItem, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, TResult>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Min<TItem, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TItem, TResult>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TResult>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Min(Of TItem, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TItem, TResult)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of TItem, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TResult)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Collections.Generic.IComparer{``1})
    name: Min
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Collections.Generic.IComparer{``1})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: Min<TItem, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, TResult>>)
  nameWithType: ObservableExtensions.Min<TItem, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TItem, TResult>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TResult>>)
  nameWithType.vb: ObservableExtensions.Min(Of TItem, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TItem, TResult)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TResult)))
  name.vb: Min(Of TItem, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: Min
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{{TResult}}}},System.Collections.Generic.IComparer{{TResult}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  name: Min<TItem, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, TResult?>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Min<TItem, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, TResult?>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TItem, TResult>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TResult?>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Min(Of TItem, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TResult?)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TItem, TResult)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TResult?)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of TItem, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TResult?)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Min
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{{TResult}}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  name: Min<TItem, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, TResult?>>)
  nameWithType: ObservableExtensions.Min<TItem, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, TResult?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TItem, TResult>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TResult?>>)
  nameWithType.vb: ObservableExtensions.Min(Of TItem, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TResult?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TItem, TResult)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TResult?)))
  name.vb: Min(Of TItem, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TResult?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{``1}}})
    name: Min
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{``1}}})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: OrderBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.OrderBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ObservableExtensions.OrderBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderBy(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderBy
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderBy
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: OrderBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  nameWithType: ObservableExtensions.OrderBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ObservableExtensions.OrderBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderBy(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: OrderBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: OrderBy
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: OrderBy
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: OrderByDescending<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.OrderByDescending<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ObservableExtensions.OrderByDescending(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderByDescending(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: OrderByDescending<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  nameWithType: ObservableExtensions.OrderByDescending<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ObservableExtensions.OrderByDescending(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: OrderByDescending(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: OrderByDescending
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: OrderByDescending
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}},System.Func{{TItem},{TResult}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  name: Select<TItem, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, TResult>>, Func<TItem, TResult>)
  nameWithType: ObservableExtensions.Select<TItem, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, TResult>>, Func<TItem, TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Select<TItem, TResult>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TResult>>, System.Func<TItem, TResult>)
  nameWithType.vb: ObservableExtensions.Select(Of TItem, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TResult)), Func(Of TItem, TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Select(Of TItem, TResult)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TResult)), System.Func(Of TItem, TResult))
  name.vb: Select(Of TItem, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TResult)), Func(Of TItem, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Func{`1,``1})
    name: Select
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Func{`1,``1})
    name: Select
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: Select<TItem, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, TResult>>)
  nameWithType: ObservableExtensions.Select<TItem, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Select<TItem, TResult>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TResult>>)
  nameWithType.vb: ObservableExtensions.Select(Of TItem, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Select(Of TItem, TResult)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TResult)))
  name.vb: Select(Of TItem, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: Select
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: Select
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Collections.Generic.IEnumerable{{TResult}}}},System.Func{{TItem},System.Collections.Generic.IEnumerable{{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  name: SelectMany<TItem, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, IEnumerable<TResult>>>, Func<TItem, IEnumerable<TResult>>)
  nameWithType: ObservableExtensions.SelectMany<TItem, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, IEnumerable<TResult>>>, Func<TItem, IEnumerable<TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TItem, TResult>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, System.Collections.Generic.IEnumerable<TResult>>>, System.Func<TItem, System.Collections.Generic.IEnumerable<TResult>>)
  nameWithType.vb: ObservableExtensions.SelectMany(Of TItem, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, IEnumerable(Of TResult))), Func(Of TItem, IEnumerable(Of TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TItem, TResult)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Collections.Generic.IEnumerable(Of TResult))), System.Func(Of TItem, System.Collections.Generic.IEnumerable(Of TResult)))
  name.vb: SelectMany(Of TItem, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, IEnumerable(Of TResult))), Func(Of TItem, IEnumerable(Of TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{``1}}},System.Func{`1,System.Collections.Generic.IEnumerable{``1}})
    name: SelectMany
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{``1}}},System.Func{`1,System.Collections.Generic.IEnumerable{``1}})
    name: SelectMany
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Collections.Generic.IEnumerable{{TResult}}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  name: SelectMany<TItem, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, IEnumerable<TResult>>>)
  nameWithType: ObservableExtensions.SelectMany<TItem, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, IEnumerable<TResult>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TItem, TResult>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, System.Collections.Generic.IEnumerable<TResult>>>)
  nameWithType.vb: ObservableExtensions.SelectMany(Of TItem, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, IEnumerable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TItem, TResult)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Collections.Generic.IEnumerable(Of TResult))))
  name.vb: SelectMany(Of TItem, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, IEnumerable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{``1}}})
    name: SelectMany
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{``1}}})
    name: SelectMany
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(System.Linq.Expressions.Expression{System.Func{{TItem},System.Collections.Generic.IEnumerable{{TIntermediate}}}},System.Func{{TItem},System.Collections.Generic.IEnumerable{{TIntermediate}}},System.Linq.Expressions.Expression{System.Func{{TItem},{TIntermediate},{TResult}}},System.Func{{TItem},{TIntermediate},{TResult}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Func{``0,``1,``2})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Func{``0,``1,``2})
  name: SelectMany<TItem, TIntermediate, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, IEnumerable<TIntermediate>>>, Func<TItem, IEnumerable<TIntermediate>>, Expression<Func<TItem, TIntermediate, TResult>>, Func<TItem, TIntermediate, TResult>)
  nameWithType: ObservableExtensions.SelectMany<TItem, TIntermediate, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, IEnumerable<TIntermediate>>>, Func<TItem, IEnumerable<TIntermediate>>, Expression<Func<TItem, TIntermediate, TResult>>, Func<TItem, TIntermediate, TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TItem, TIntermediate, TResult>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, System.Collections.Generic.IEnumerable<TIntermediate>>>, System.Func<TItem, System.Collections.Generic.IEnumerable<TIntermediate>>, System.Linq.Expressions.Expression<System.Func<TItem, TIntermediate, TResult>>, System.Func<TItem, TIntermediate, TResult>)
  nameWithType.vb: ObservableExtensions.SelectMany(Of TItem, TIntermediate, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, IEnumerable(Of TIntermediate))), Func(Of TItem, IEnumerable(Of TIntermediate)), Expression(Of Func(Of TItem, TIntermediate, TResult)), Func(Of TItem, TIntermediate, TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TItem, TIntermediate, TResult)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Collections.Generic.IEnumerable(Of TIntermediate))), System.Func(Of TItem, System.Collections.Generic.IEnumerable(Of TIntermediate)), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TIntermediate, TResult)), System.Func(Of TItem, TIntermediate, TResult))
  name.vb: SelectMany(Of TItem, TIntermediate, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, IEnumerable(Of TIntermediate))), Func(Of TItem, IEnumerable(Of TIntermediate)), Expression(Of Func(Of TItem, TIntermediate, TResult)), Func(Of TItem, TIntermediate, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{``1}}},System.Func{`1,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{`1,``1,``2}},System.Func{`1,``1,``2})
    name: SelectMany
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIntermediate
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIntermediate
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{``1}}},System.Func{`1,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{`1,``1,``2}},System.Func{`1,``1,``2})
    name: SelectMany
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIntermediate
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIntermediate
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(System.Linq.Expressions.Expression{System.Func{{TItem},System.Collections.Generic.IEnumerable{{TIntermediate}}}},System.Linq.Expressions.Expression{System.Func{{TItem},{TIntermediate},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  name: SelectMany<TItem, TIntermediate, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, IEnumerable<TIntermediate>>>, Expression<Func<TItem, TIntermediate, TResult>>)
  nameWithType: ObservableExtensions.SelectMany<TItem, TIntermediate, TResult>(INotifyEnumerable<TItem>, Expression<Func<TItem, IEnumerable<TIntermediate>>>, Expression<Func<TItem, TIntermediate, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TItem, TIntermediate, TResult>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, System.Collections.Generic.IEnumerable<TIntermediate>>>, System.Linq.Expressions.Expression<System.Func<TItem, TIntermediate, TResult>>)
  nameWithType.vb: ObservableExtensions.SelectMany(Of TItem, TIntermediate, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, IEnumerable(Of TIntermediate))), Expression(Of Func(Of TItem, TIntermediate, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TItem, TIntermediate, TResult)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Collections.Generic.IEnumerable(Of TIntermediate))), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TIntermediate, TResult)))
  name.vb: SelectMany(Of TItem, TIntermediate, TResult)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, IEnumerable(Of TIntermediate))), Expression(Of Func(Of TItem, TIntermediate, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{`1,``1,``2}})
    name: SelectMany
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIntermediate
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{`1,``1,``2}})
    name: SelectMany
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIntermediate
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: SetEquals<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>, IEqualityComparer<TItem>)
  nameWithType: ObservableExtensions.SetEquals<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>, IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Collections.Generic.IEnumerable<TItem>, System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ObservableExtensions.SetEquals(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SetEquals(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Collections.Generic.IEnumerable(Of TItem), System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: SetEquals(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: SetEquals
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: SetEquals
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: SetEquals<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>)
  nameWithType: ObservableExtensions.SetEquals<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Collections.Generic.IEnumerable<TItem>)
  nameWithType.vb: ObservableExtensions.SetEquals(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SetEquals(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Collections.Generic.IEnumerable(Of TItem))
  name.vb: SetEquals(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: SetEquals
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: SetEquals
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  name: SingleOrDefault<TItem>(INotifyEnumerable<TItem>)
  nameWithType: ObservableExtensions.SingleOrDefault<TItem>(INotifyEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault<TItem>(NMF.Expressions.INotifyEnumerable<TItem>)
  nameWithType.vb: ObservableExtensions.SingleOrDefault(Of TItem)(INotifyEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem))
  name.vb: SingleOrDefault(Of TItem)(INotifyEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{`1})
    name: SingleOrDefault
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{`1})
    name: SingleOrDefault
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: SingleOrDefault<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, bool>>)
  nameWithType: ObservableExtensions.SingleOrDefault<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, bool>>)
  nameWithType.vb: ObservableExtensions.SingleOrDefault(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, Boolean)))
  name.vb: SingleOrDefault(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SingleOrDefault
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SingleOrDefault
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  name: Sum<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, decimal>>)
  nameWithType: ObservableExtensions.Sum<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, decimal>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, decimal>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, Decimal)))
  name.vb: Sum(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Decimal)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Decimal}})
    name: Sum
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Decimal}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Double}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  name: Sum<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, double>>)
  nameWithType: ObservableExtensions.Sum<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, double>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, double>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Double)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, Double)))
  name.vb: Sum(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Double)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Double}})
    name: Sum
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Double}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Int32}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  name: Sum<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, int>>)
  nameWithType: ObservableExtensions.Sum<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, int>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, int>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Integer)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, Integer)))
  name.vb: Sum(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Integer)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Int32}})
    name: Sum
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Int32}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Int64}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  name: Sum<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, long>>)
  nameWithType: ObservableExtensions.Sum<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, long>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, long>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Long)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, Long)))
  name.vb: Sum(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Long)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Int64}})
    name: Sum
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Int64}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  name: Sum<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, decimal?>>)
  nameWithType: ObservableExtensions.Sum<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, decimal?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, decimal?>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Decimal?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, Decimal?)))
  name.vb: Sum(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Decimal?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Decimal}}})
    name: Sum
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Decimal}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  name: Sum<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, double?>>)
  nameWithType: ObservableExtensions.Sum<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, double?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, double?>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Double?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, Double?)))
  name.vb: Sum(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Double?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Double}}})
    name: Sum
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Double}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  name: Sum<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, int?>>)
  nameWithType: ObservableExtensions.Sum<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, int?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, int?>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Integer?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, Integer?)))
  name.vb: Sum(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Integer?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int32}}})
    name: Sum
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int32}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  name: Sum<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, long?>>)
  nameWithType: ObservableExtensions.Sum<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, long?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, long?>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Long?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, Long?)))
  name.vb: Sum(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Long?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int64}}})
    name: Sum
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int64}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  name: Sum<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, float?>>)
  nameWithType: ObservableExtensions.Sum<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, float?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, float?>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Single?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, Single?)))
  name.vb: Sum(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Single?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Single}}})
    name: Sum
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Single}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Single}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  name: Sum<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, float>>)
  nameWithType: ObservableExtensions.Sum<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, float>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, float>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Single)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, Single)))
  name.vb: Sum(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Single)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Single}})
    name: Sum
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Single}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: TopX<TItem, TKey>(INotifyEnumerable<TItem>, int, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.TopX<TItem, TKey>(INotifyEnumerable<TItem>, int, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.TopX<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, int, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ObservableExtensions.TopX(Of TItem, TKey)(INotifyEnumerable(Of TItem), Integer, Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.TopX(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), Integer, System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: TopX(Of TItem, TKey)(INotifyEnumerable(Of TItem), Integer, Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Collections.Generic.IComparer{``1})
    name: TopX
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Collections.Generic.IComparer{``1})
    name: TopX
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: TopX<TItem, TKey>(INotifyEnumerable<TItem>, int, Expression<Func<TItem, TKey>>)
  nameWithType: ObservableExtensions.TopX<TItem, TKey>(INotifyEnumerable<TItem>, int, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.TopX<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, int, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ObservableExtensions.TopX(Of TItem, TKey)(INotifyEnumerable(Of TItem), Integer, Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.TopX(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), Integer, System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: TopX(Of TItem, TKey)(INotifyEnumerable(Of TItem), Integer, Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: TopX
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: TopX
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Union``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Union<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>, IEqualityComparer<TItem>)
  nameWithType: ObservableExtensions.Union<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>, IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Union<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Collections.Generic.IEnumerable<TItem>, System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ObservableExtensions.Union(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Union(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Collections.Generic.IEnumerable(Of TItem), System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: Union(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: Union
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: Union
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Union``1(System.Collections.Generic.IEnumerable{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: Union<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>)
  nameWithType: ObservableExtensions.Union<TItem>(INotifyEnumerable<TItem>, IEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Union<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Collections.Generic.IEnumerable<TItem>)
  nameWithType.vb: ObservableExtensions.Union(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Union(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Collections.Generic.IEnumerable(Of TItem))
  name.vb: Union(Of TItem)(INotifyEnumerable(Of TItem), IEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: Union
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: Union
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}},System.Func{{TItem},System.Boolean})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  name: Where<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, bool>>, Func<TItem, bool>)
  nameWithType: ObservableExtensions.Where<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, bool>>, Func<TItem, bool>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Where<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, bool>>, System.Func<TItem, bool>)
  nameWithType.vb: ObservableExtensions.Where(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Boolean)), Func(Of TItem, Boolean))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Where(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, Boolean)), System.Func(Of TItem, Boolean))
  name.vb: Where(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Boolean)), Func(Of TItem, Boolean))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Func{`1,System.Boolean})
    name: Where
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Func{`1,System.Boolean})
    name: Where
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Where<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, bool>>)
  nameWithType: ObservableExtensions.Where<TItem>(INotifyEnumerable<TItem>, Expression<Func<TItem, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Where<TItem>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, bool>>)
  nameWithType.vb: ObservableExtensions.Where(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Where(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, Boolean)))
  name.vb: Where(Of TItem)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: Where
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: Where
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyGrouping`2.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<INotifyGrouping<TKey, TItem>>(INotifyGrouping<TKey, TItem>)
  nameWithType: ExpressionExtensions.AsOne<INotifyGrouping<TKey, TItem>>(INotifyGrouping<TKey, TItem>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<NMF.Expressions.INotifyGrouping<TKey, TItem>>(NMF.Expressions.INotifyGrouping<TKey, TItem>)
  nameWithType.vb: ExpressionExtensions.AsOne(Of INotifyGrouping(Of TKey, TItem))(INotifyGrouping(Of TKey, TItem))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of NMF.Expressions.INotifyGrouping(Of TKey, TItem))(NMF.Expressions.INotifyGrouping(Of TKey, TItem))
  name.vb: AsOne(Of INotifyGrouping(Of TKey, TItem))(INotifyGrouping(Of TKey, TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.INotifyGrouping{`0,`1})
    name: AsOne
  - name: <
  - uid: NMF.Expressions.INotifyGrouping`2
    name: INotifyGrouping
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TItem
  - name: '>'
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyGrouping`2
    name: INotifyGrouping
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.INotifyGrouping{`0,`1})
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.INotifyGrouping`2
    name: INotifyGrouping
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TItem
  - name: )
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyGrouping`2
    name: INotifyGrouping
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TItem}},System.Int32,{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  name: Chunk<TItem, TResult>(IEnumerable<TItem>, int, Func<IEnumerableExpression<TItem>, int, TResult>)
  nameWithType: ChunkExtensions.Chunk<TItem, TResult>(IEnumerable<TItem>, int, Func<IEnumerableExpression<TItem>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<TItem, TResult>(System.Collections.Generic.IEnumerable<TItem>, int, System.Func<NMF.Expressions.IEnumerableExpression<TItem>, int, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of TItem, TResult)(IEnumerable(Of TItem), Integer, Func(Of IEnumerableExpression(Of TItem), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of TItem, TResult)(System.Collections.Generic.IEnumerable(Of TItem), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of TItem), Integer, TResult))
  name.vb: Chunk(Of TItem, TResult)(IEnumerable(Of TItem), Integer, Func(Of IEnumerableExpression(Of TItem), Integer, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{`1},System.Int32,``1})
    name: Chunk
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{`1},System.Int32,``1})
    name: Chunk
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TItem},System.Int32}},System.Int32,{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  name: ChunkIndexed<TItem, TResult>(IEnumerable<TItem>, int, Func<IEnumerableExpression<(TItem, int)>, int, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<TItem, TResult>(IEnumerable<TItem>, int, Func<IEnumerableExpression<(TItem, int)>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<TItem, TResult>(System.Collections.Generic.IEnumerable<TItem>, int, System.Func<NMF.Expressions.IEnumerableExpression<(TItem, int)>, int, TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of TItem, TResult)(IEnumerable(Of TItem), Integer, Func(Of IEnumerableExpression(Of (TItem, Integer)), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of TItem, TResult)(System.Collections.Generic.IEnumerable(Of TItem), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (TItem, Integer)), Integer, TResult))
  name.vb: ChunkIndexed(Of TItem, TResult)(IEnumerable(Of TItem), Integer, Func(Of IEnumerableExpression(Of (TItem, Integer)), Integer, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{`1,System.Int32}},System.Int32,``1})
    name: ChunkIndexed
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: (
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{`1,System.Int32}},System.Int32,``1})
    name: ChunkIndexed
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  name: WithUpdates<TElement>(IEnumerable<TElement>)
  nameWithType: ObservableExtensions.WithUpdates<TElement>(IEnumerable<TElement>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<TElement>(System.Collections.Generic.IEnumerable<TElement>)
  nameWithType.vb: ObservableExtensions.WithUpdates(Of TElement)(IEnumerable(Of TElement))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of TElement)(System.Collections.Generic.IEnumerable(Of TElement))
  name.vb: WithUpdates(Of TElement)(IEnumerable(Of TElement))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{`1})
    name: WithUpdates
  - name: <
  - name: TElement
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TElement
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{`1})
    name: WithUpdates
  - name: (
  - name: Of
  - name: " "
  - name: TElement
  - name: )
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TElement
  - name: )
  - name: )
- uid: System.Collections.Specialized.INotifyCollectionChanged
  commentId: T:System.Collections.Specialized.INotifyCollectionChanged
  parent: System.Collections.Specialized
  isExternal: true
  name: INotifyCollectionChanged
  nameWithType: INotifyCollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged
- uid: NMF.Expressions.INotifiable
  commentId: T:NMF.Expressions.INotifiable
  parent: NMF.Expressions
  name: INotifiable
  nameWithType: INotifiable
  fullName: NMF.Expressions.INotifiable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Linq.IGrouping`2.Key
  commentId: P:System.Linq.IGrouping`2.Key
  isExternal: true
  name: Key
  nameWithType: IGrouping<TKey, TElement>.Key
  fullName: System.Linq.IGrouping<TKey, TElement>.Key
  nameWithType.vb: IGrouping(Of TKey, TElement).Key
  fullName.vb: System.Linq.IGrouping(Of TKey, TElement).Key
- uid: System.Linq.IGrouping{{TKey},{TItem}}
  commentId: T:System.Linq.IGrouping{`0,`1}
  parent: System.Linq
  definition: System.Linq.IGrouping`2
  name: IGrouping<TKey, TItem>
  nameWithType: IGrouping<TKey, TItem>
  fullName: System.Linq.IGrouping<TKey, TItem>
  nameWithType.vb: IGrouping(Of TKey, TItem)
  fullName.vb: System.Linq.IGrouping(Of TKey, TItem)
  name.vb: IGrouping(Of TKey, TItem)
  spec.csharp:
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TItem
  - name: '>'
  spec.vb:
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TItem
  - name: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerable{{TItem}}
  commentId: T:System.Collections.Generic.IEnumerable{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TItem>
  nameWithType: IEnumerable<TItem>
  fullName: System.Collections.Generic.IEnumerable<TItem>
  nameWithType.vb: IEnumerable(Of TItem)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TItem)
  name.vb: IEnumerable(Of TItem)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TItem
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
- uid: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
  commentId: M:NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
  isExternal: true
  name: ExportToDgml(INotifiable, string)
  nameWithType: DebugExtensions.ExportToDgml(INotifiable, string)
  fullName: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable, string)
  nameWithType.vb: DebugExtensions.ExportToDgml(INotifiable, String)
  fullName.vb: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable, String)
  name.vb: ExportToDgml(INotifiable, String)
  spec.csharp:
  - uid: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
    name: ExportToDgml
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
    name: ExportToDgml
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: NMF.Expressions.Debug.DebugExtensions
  commentId: T:NMF.Expressions.Debug.DebugExtensions
  parent: NMF.Expressions.Debug
  name: DebugExtensions
  nameWithType: DebugExtensions
  fullName: NMF.Expressions.Debug.DebugExtensions
- uid: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
  commentId: M:NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
  name: Visualize(INotifiable)
  nameWithType: DebugExtensions.Visualize(INotifiable)
  fullName: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
  spec.csharp:
  - uid: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
    name: Visualize
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
    name: Visualize
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
  name: Cast<TResult>(INotifyEnumerable)
  nameWithType: ObservableExtensions.Cast<TResult>(INotifyEnumerable)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Cast<TResult>(NMF.Expressions.INotifyEnumerable)
  nameWithType.vb: ObservableExtensions.Cast(Of TResult)(INotifyEnumerable)
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Cast(Of TResult)(NMF.Expressions.INotifyEnumerable)
  name.vb: Cast(Of TResult)(INotifyEnumerable)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
    name: Cast
  - name: <
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable
    name: INotifyEnumerable
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
    name: Cast
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable
    name: INotifyEnumerable
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions
  commentId: T:NMF.Expressions.Linq.ObservableExtensions
  parent: NMF.Expressions.Linq
  name: ObservableExtensions
  nameWithType: ObservableExtensions
  fullName: NMF.Expressions.Linq.ObservableExtensions
- uid: NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
  name: OfType<TResult>(INotifyEnumerable)
  nameWithType: ObservableExtensions.OfType<TResult>(INotifyEnumerable)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OfType<TResult>(NMF.Expressions.INotifyEnumerable)
  nameWithType.vb: ObservableExtensions.OfType(Of TResult)(INotifyEnumerable)
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OfType(Of TResult)(NMF.Expressions.INotifyEnumerable)
  name.vb: OfType(Of TResult)(INotifyEnumerable)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
    name: OfType
  - name: <
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable
    name: INotifyEnumerable
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
    name: OfType
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable
    name: INotifyEnumerable
  - name: )
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  isExternal: true
  name: Chunk<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<T>, int, TResult>, IChunkBalancingStrategyProvider)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<T>, int, TResult>, IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.INotifyEnumerable<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<T>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult), IChunkBalancingStrategyProvider)
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.INotifyEnumerable(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: Chunk(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult), IChunkBalancingStrategyProvider)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: Chunk
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: Chunk
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
  - name: )
- uid: NMF.Expressions.Linq.ChunkExtensions
  commentId: T:NMF.Expressions.Linq.ChunkExtensions
  parent: NMF.Expressions.Linq
  name: ChunkExtensions
  nameWithType: ChunkExtensions
  fullName: NMF.Expressions.Linq.ChunkExtensions
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  isExternal: true
  name: Chunk<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<T>, int, TResult>, IChunkBalancingStrategyProvider<T, TResult>)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<T>, int, TResult>, IChunkBalancingStrategyProvider<T, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.INotifyEnumerable<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<T>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider<T, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult), IChunkBalancingStrategyProvider(Of T, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.INotifyEnumerable(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of T, TResult))
  name.vb: Chunk(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult), IChunkBalancingStrategyProvider(Of T, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
    name: Chunk
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
    name: Chunk
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  isExternal: true
  name: Chunk<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<T>, int, TResult>)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<T>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.INotifyEnumerable<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<T>, int, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.INotifyEnumerable(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), Integer, TResult))
  name.vb: Chunk(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
    name: Chunk
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
    name: Chunk
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  isExternal: true
  name: ChunkIndexed<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>, IChunkBalancingStrategyProvider)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>, IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.INotifyEnumerable<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<(T, int)>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult), IChunkBalancingStrategyProvider)
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.INotifyEnumerable(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (T, Integer)), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: ChunkIndexed(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult), IChunkBalancingStrategyProvider)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: ChunkIndexed
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: ChunkIndexed
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
  - name: )
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  isExternal: true
  name: ChunkIndexed<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>, IChunkBalancingStrategyProvider<(T, int), TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>, IChunkBalancingStrategyProvider<(T, int), TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.INotifyEnumerable<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<(T, int)>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider<(T, int), TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult), IChunkBalancingStrategyProvider(Of (T, Integer), TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.INotifyEnumerable(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (T, Integer)), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of (T, Integer), TResult))
  name.vb: ChunkIndexed(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult), IChunkBalancingStrategyProvider(Of (T, Integer), TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
    name: ChunkIndexed
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
  - name: <
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
    name: ChunkIndexed
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  isExternal: true
  name: ChunkIndexed<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.INotifyEnumerable<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<(T, int)>, int, TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.INotifyEnumerable(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  name.vb: ChunkIndexed(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: ToLookup<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>)
  nameWithType: LookupExtensions.ToLookup<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>)
  fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TSource, TKey>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  nameWithType.vb: LookupExtensions.ToLookup(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)))
  fullName.vb: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TSource, TKey)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: ToLookup(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.LookupExtensions
  commentId: T:NMF.Expressions.Linq.LookupExtensions
  parent: NMF.Expressions.Linq
  name: LookupExtensions
  nameWithType: LookupExtensions
  fullName: NMF.Expressions.Linq.LookupExtensions
- uid: NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: All<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  nameWithType: ObservableExtensions.All<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.All<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, bool>>)
  nameWithType.vb: ObservableExtensions.All(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.All(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Boolean)))
  name.vb: All(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: All
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: All
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0})
  name: Any<TSource>(INotifyEnumerable<TSource>)
  nameWithType: ObservableExtensions.Any<TSource>(INotifyEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Any<TSource>(NMF.Expressions.INotifyEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.Any(Of TSource)(INotifyEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Any(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource))
  name.vb: Any(Of TSource)(INotifyEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0})
    name: Any
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0})
    name: Any
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: Any<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  nameWithType: ObservableExtensions.Any<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Any<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, bool>>)
  nameWithType.vb: ObservableExtensions.Any(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Any(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Boolean)))
  name.vb: Any(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Any
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Any
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, decimal>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, decimal>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, decimal>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Decimal)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, double>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, double>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, double>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Double)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, int>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, int>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, int>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Integer)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Integer)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Integer)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, long>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, long>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, long>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Long)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Long)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Long)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, decimal?>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, decimal?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, decimal?>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Decimal?)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, double?>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, double?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, double?>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Double?)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, int?>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, int?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, int?>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Integer?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Integer?)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Integer?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, long?>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, long?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, long?>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Long?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Long?)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Long?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, float?>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, float?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, float?>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Single?)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, float>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, float>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, float>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Single)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Concat<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: ObservableExtensions.Concat<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Concat<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.Concat(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Concat(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Concat(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Concat
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Concat
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Contains<TSource>(INotifyEnumerable<TSource>, TSource, IEqualityComparer<TSource>)
  nameWithType: ObservableExtensions.Contains<TSource>(INotifyEnumerable<TSource>, TSource, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Contains<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ObservableExtensions.Contains(Of TSource)(INotifyEnumerable(Of TSource), TSource, IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Contains(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), TSource, System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Contains(Of TSource)(INotifyEnumerable(Of TSource), TSource, IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
    name: Contains
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
    name: Contains
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0)
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0)
  name: Contains<TSource>(INotifyEnumerable<TSource>, TSource)
  nameWithType: ObservableExtensions.Contains<TSource>(INotifyEnumerable<TSource>, TSource)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Contains<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, TSource)
  nameWithType.vb: ObservableExtensions.Contains(Of TSource)(INotifyEnumerable(Of TSource), TSource)
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Contains(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), TSource)
  name.vb: Contains(Of TSource)(INotifyEnumerable(Of TSource), TSource)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0)
    name: Contains
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - name: TSource
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0)
    name: Contains
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - name: TSource
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0})
  name: Count<TSource>(INotifyEnumerable<TSource>)
  nameWithType: ObservableExtensions.Count<TSource>(INotifyEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Count<TSource>(NMF.Expressions.INotifyEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.Count(Of TSource)(INotifyEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Count(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource))
  name.vb: Count(Of TSource)(INotifyEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0})
    name: Count
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0})
    name: Count
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: Count<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  nameWithType: ObservableExtensions.Count<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Count<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, bool>>)
  nameWithType.vb: ObservableExtensions.Count(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Count(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Boolean)))
  name.vb: Count(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Count
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Count
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0})
  name: Distinct<TSource>(INotifyEnumerable<TSource>)
  nameWithType: ObservableExtensions.Distinct<TSource>(INotifyEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct<TSource>(NMF.Expressions.INotifyEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.Distinct(Of TSource)(INotifyEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Distinct(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource))
  name.vb: Distinct(Of TSource)(INotifyEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0})
    name: Distinct
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0})
    name: Distinct
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Distinct<TSource>(INotifyEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ObservableExtensions.Distinct<TSource>(INotifyEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ObservableExtensions.Distinct(Of TSource)(INotifyEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Distinct(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Distinct(Of TSource)(INotifyEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Distinct
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Distinct
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Except<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ObservableExtensions.Except<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Except<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ObservableExtensions.Except(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Except(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Except(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Except
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Except
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Except<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: ObservableExtensions.Except<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Except<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.Except(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Except(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Except(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Except
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Except
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  name: FirstOrDefault<TSource>(INotifyEnumerable<TSource>)
  nameWithType: ObservableExtensions.FirstOrDefault<TSource>(INotifyEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault<TSource>(NMF.Expressions.INotifyEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.FirstOrDefault(Of TSource)(INotifyEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource))
  name.vb: FirstOrDefault(Of TSource)(INotifyEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
    name: FirstOrDefault
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
    name: FirstOrDefault
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: FirstOrDefault<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  nameWithType: ObservableExtensions.FirstOrDefault<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, bool>>)
  nameWithType.vb: ObservableExtensions.FirstOrDefault(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Boolean)))
  name.vb: FirstOrDefault(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: FirstOrDefault
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: FirstOrDefault
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  isExternal: true
  name: GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExternal: true
  name: GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  isExternal: true
  name: GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Func<TSource, TKey>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Func<TSource, TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Func<TSource, TKey>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Func(Of TSource, TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Func(Of TSource, TKey))
  name.vb: GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Func(Of TSource, TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
    name: GroupBy
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: GroupBy
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  isExternal: true
  name: GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Func<TSource, TKey>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, Func<TKey, IEnumerable<TSource>, TResult>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Func<TSource, TKey>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, Func<TKey, IEnumerable<TSource>, TResult>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Func<TSource, TKey>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Func(Of TSource, TKey), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), Func(Of TKey, IEnumerable(Of TSource), TResult), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Func(Of TSource, TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Func(Of TSource, TKey), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), Func(Of TKey, IEnumerable(Of TSource), TResult), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  isExternal: true
  name: GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Func<TSource, TKey>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, Func<TKey, IEnumerable<TSource>, TResult>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Func<TSource, TKey>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, Func<TKey, IEnumerable<TSource>, TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Func<TSource, TKey>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Func(Of TSource, TKey), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), Func(Of TKey, IEnumerable(Of TSource), TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Func(Of TSource, TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult))
  name.vb: GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Func(Of TSource, TKey), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), Func(Of TKey, IEnumerable(Of TSource), TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
    name: GroupBy
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  isExternal: true
  name: GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  isExternal: true
  name: GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)))
  name.vb: GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
    name: GroupBy
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  isExternal: true
  name: GroupJoin<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TOuter
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  isExternal: true
  name: GroupJoin<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>)
  nameWithType: ObservableExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>)
  nameWithType.vb: ObservableExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
    name: GroupJoin
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TOuter
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
    name: GroupJoin
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Intersect<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ObservableExtensions.Intersect<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ObservableExtensions.Intersect(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Intersect(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Intersect(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Intersect
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Intersect
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Intersect<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: ObservableExtensions.Intersect<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.Intersect(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Intersect(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Intersect(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Intersect
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Intersect
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsProperSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.IsProperSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.IsProperSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsProperSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSubsetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSubsetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsProperSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  nameWithType: ObservableExtensions.IsProperSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.IsProperSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsProperSubsetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsProperSubsetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsProperSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.IsProperSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.IsProperSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsProperSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSupersetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSupersetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsProperSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  nameWithType: ObservableExtensions.IsProperSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.IsProperSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsProperSupersetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsProperSupersetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.IsSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.IsSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSubsetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSubsetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  nameWithType: ObservableExtensions.IsSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.IsSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsSubsetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsSubsetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.IsSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.IsSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSupersetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSupersetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  nameWithType: ObservableExtensions.IsSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.IsSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsSupersetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsSupersetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  isExternal: true
  name: Join<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.Join<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Join<TOuter, TInner, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.Join(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Join(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: Join
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TOuter
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: Join
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  isExternal: true
  name: Join<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>)
  nameWithType: ObservableExtensions.Join<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Join<TOuter, TInner, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>)
  nameWithType.vb: ObservableExtensions.Join(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Join(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult)))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
    name: Join
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TOuter
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
    name: Join
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  isExternal: true
  name: Max<TSource>(INotifyEnumerable<TSource>, IComparer<TSource>)
  nameWithType: ObservableExtensions.Max<TSource>(INotifyEnumerable<TSource>, IComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IComparer<TSource>)
  nameWithType.vb: ObservableExtensions.Max(Of TSource)(INotifyEnumerable(Of TSource), IComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IComparer(Of TSource))
  name.vb: Max(Of TSource)(INotifyEnumerable(Of TSource), IComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
    name: Max
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Max
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  nameWithType: ObservableExtensions.Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  nameWithType.vb: ObservableExtensions.Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Max
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult?>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult?>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult?>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult?)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult?)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult?)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Max
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  isExternal: true
  name: Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult?>>)
  nameWithType: ObservableExtensions.Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult?>>)
  nameWithType.vb: ObservableExtensions.Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult?)))
  name.vb: Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Max
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  isExternal: true
  name: Min<TSource>(INotifyEnumerable<TSource>, IComparer<TSource>)
  nameWithType: ObservableExtensions.Min<TSource>(INotifyEnumerable<TSource>, IComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IComparer<TSource>)
  nameWithType.vb: ObservableExtensions.Min(Of TSource)(INotifyEnumerable(Of TSource), IComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IComparer(Of TSource))
  name.vb: Min(Of TSource)(INotifyEnumerable(Of TSource), IComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
    name: Min
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Min
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  nameWithType: ObservableExtensions.Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  nameWithType.vb: ObservableExtensions.Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Min
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult?>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult?>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult?>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult?)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult?)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult?)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Min
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  isExternal: true
  name: Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult?>>)
  nameWithType: ObservableExtensions.Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult?>>)
  nameWithType.vb: ObservableExtensions.Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult?)))
  name.vb: Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Min
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: OrderBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.OrderBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ObservableExtensions.OrderBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderBy(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderBy
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderBy
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: OrderBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  nameWithType: ObservableExtensions.OrderBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ObservableExtensions.OrderBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderBy(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: OrderBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderBy
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderBy
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: OrderByDescending<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.OrderByDescending<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ObservableExtensions.OrderByDescending(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderByDescending(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: OrderByDescending<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  nameWithType: ObservableExtensions.OrderByDescending<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ObservableExtensions.OrderByDescending(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: OrderByDescending(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderByDescending
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderByDescending
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  isExternal: true
  name: Select<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>, Func<TSource, TResult>)
  nameWithType: ObservableExtensions.Select<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>, Func<TSource, TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Select<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Func<TSource, TResult>)
  nameWithType.vb: ObservableExtensions.Select(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)), Func(Of TSource, TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Select(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Func(Of TSource, TResult))
  name.vb: Select(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)), Func(Of TSource, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
    name: Select
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
    name: Select
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: Select<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  nameWithType: ObservableExtensions.Select<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Select<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  nameWithType.vb: ObservableExtensions.Select(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Select(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Select(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Select
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Select
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  isExternal: true
  name: SelectMany<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TResult>>>, Func<TSource, IEnumerable<TResult>>)
  nameWithType: ObservableExtensions.SelectMany<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TResult>>>, Func<TSource, IEnumerable<TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>>, System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)
  nameWithType.vb: ObservableExtensions.SelectMany(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TResult))), Func(Of TSource, IEnumerable(Of TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult))), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult)))
  name.vb: SelectMany(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TResult))), Func(Of TSource, IEnumerable(Of TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
    name: SelectMany
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
    name: SelectMany
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  isExternal: true
  name: SelectMany<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TResult>>>)
  nameWithType: ObservableExtensions.SelectMany<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TResult>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>>)
  nameWithType.vb: ObservableExtensions.SelectMany(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult))))
  name.vb: SelectMany(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
    name: SelectMany
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
    name: SelectMany
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Func{``0,``1,``2})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Func{``0,``1,``2})
  isExternal: true
  name: SelectMany<TSource, TIntermediate, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TIntermediate>>>, Func<TSource, IEnumerable<TIntermediate>>, Expression<Func<TSource, TIntermediate, TResult>>, Func<TSource, TIntermediate, TResult>)
  nameWithType: ObservableExtensions.SelectMany<TSource, TIntermediate, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TIntermediate>>>, Func<TSource, IEnumerable<TIntermediate>>, Expression<Func<TSource, TIntermediate, TResult>>, Func<TSource, TIntermediate, TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TSource, TIntermediate, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TIntermediate>>>, System.Func<TSource, System.Collections.Generic.IEnumerable<TIntermediate>>, System.Linq.Expressions.Expression<System.Func<TSource, TIntermediate, TResult>>, System.Func<TSource, TIntermediate, TResult>)
  nameWithType.vb: ObservableExtensions.SelectMany(Of TSource, TIntermediate, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate))), Func(Of TSource, IEnumerable(Of TIntermediate)), Expression(Of Func(Of TSource, TIntermediate, TResult)), Func(Of TSource, TIntermediate, TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TSource, TIntermediate, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TIntermediate))), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TIntermediate)), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TIntermediate, TResult)), System.Func(Of TSource, TIntermediate, TResult))
  name.vb: SelectMany(Of TSource, TIntermediate, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate))), Func(Of TSource, IEnumerable(Of TIntermediate)), Expression(Of Func(Of TSource, TIntermediate, TResult)), Func(Of TSource, TIntermediate, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Func{``0,``1,``2})
    name: SelectMany
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIntermediate
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIntermediate
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Func{``0,``1,``2})
    name: SelectMany
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIntermediate
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIntermediate
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  isExternal: true
  name: SelectMany<TSource, TIntermediate, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TIntermediate>>>, Expression<Func<TSource, TIntermediate, TResult>>)
  nameWithType: ObservableExtensions.SelectMany<TSource, TIntermediate, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TIntermediate>>>, Expression<Func<TSource, TIntermediate, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TSource, TIntermediate, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TIntermediate>>>, System.Linq.Expressions.Expression<System.Func<TSource, TIntermediate, TResult>>)
  nameWithType.vb: ObservableExtensions.SelectMany(Of TSource, TIntermediate, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate))), Expression(Of Func(Of TSource, TIntermediate, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TSource, TIntermediate, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TIntermediate))), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TIntermediate, TResult)))
  name.vb: SelectMany(Of TSource, TIntermediate, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate))), Expression(Of Func(Of TSource, TIntermediate, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
    name: SelectMany
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIntermediate
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
    name: SelectMany
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIntermediate
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: SetEquals<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.SetEquals<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.SetEquals(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SetEquals(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: SetEquals(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: SetEquals
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: SetEquals
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: SetEquals<T>(INotifyEnumerable<T>, IEnumerable<T>)
  nameWithType: ObservableExtensions.SetEquals<T>(INotifyEnumerable<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.SetEquals(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SetEquals(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: SetEquals(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: SetEquals
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: SetEquals
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  name: SingleOrDefault<TSource>(INotifyEnumerable<TSource>)
  nameWithType: ObservableExtensions.SingleOrDefault<TSource>(INotifyEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault<TSource>(NMF.Expressions.INotifyEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.SingleOrDefault(Of TSource)(INotifyEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource))
  name.vb: SingleOrDefault(Of TSource)(INotifyEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
    name: SingleOrDefault
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
    name: SingleOrDefault
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: SingleOrDefault<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  nameWithType: ObservableExtensions.SingleOrDefault<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, bool>>)
  nameWithType.vb: ObservableExtensions.SingleOrDefault(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Boolean)))
  name.vb: SingleOrDefault(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: SingleOrDefault
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: SingleOrDefault
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, decimal>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, decimal>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, decimal>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Decimal)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, double>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, double>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, double>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Double)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, int>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, int>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, int>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Integer)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Integer)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Integer)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, long>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, long>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, long>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Long)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Long)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Long)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, decimal?>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, decimal?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, decimal?>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Decimal?)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, double?>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, double?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, double?>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Double?)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, int?>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, int?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, int?>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Integer?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Integer?)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Integer?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, long?>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, long?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, long?>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Long?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Long?)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Long?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, float?>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, float?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, float?>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Single?)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, float>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, float>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, float>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Single)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: TopX<TItem, TKey>(INotifyEnumerable<TItem>, int, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.TopX<TItem, TKey>(INotifyEnumerable<TItem>, int, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.TopX<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, int, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ObservableExtensions.TopX(Of TItem, TKey)(INotifyEnumerable(Of TItem), Integer, Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.TopX(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), Integer, System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: TopX(Of TItem, TKey)(INotifyEnumerable(Of TItem), Integer, Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: TopX
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: TopX
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: TopX<TItem, TKey>(INotifyEnumerable<TItem>, int, Expression<Func<TItem, TKey>>)
  nameWithType: ObservableExtensions.TopX<TItem, TKey>(INotifyEnumerable<TItem>, int, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.TopX<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, int, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ObservableExtensions.TopX(Of TItem, TKey)(INotifyEnumerable(Of TItem), Integer, Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.TopX(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), Integer, System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: TopX(Of TItem, TKey)(INotifyEnumerable(Of TItem), Integer, Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: TopX
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: TopX
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Union<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ObservableExtensions.Union<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Union<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ObservableExtensions.Union(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Union(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Union(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Union
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Union
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Union<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: ObservableExtensions.Union<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Union<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.Union(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Union(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Union(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Union
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Union
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  isExternal: true
  name: Where<T>(INotifyEnumerable<T>, Expression<Func<T, bool>>, Func<T, bool>)
  nameWithType: ObservableExtensions.Where<T>(INotifyEnumerable<T>, Expression<Func<T, bool>>, Func<T, bool>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Where<T>(NMF.Expressions.INotifyEnumerable<T>, System.Linq.Expressions.Expression<System.Func<T, bool>>, System.Func<T, bool>)
  nameWithType.vb: ObservableExtensions.Where(Of T)(INotifyEnumerable(Of T), Expression(Of Func(Of T, Boolean)), Func(Of T, Boolean))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Where(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)), System.Func(Of T, Boolean))
  name.vb: Where(Of T)(INotifyEnumerable(Of T), Expression(Of Func(Of T, Boolean)), Func(Of T, Boolean))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
    name: Where
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
    name: Where
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: Where<T>(INotifyEnumerable<T>, Expression<Func<T, bool>>)
  nameWithType: ObservableExtensions.Where<T>(INotifyEnumerable<T>, Expression<Func<T, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Where<T>(NMF.Expressions.INotifyEnumerable<T>, System.Linq.Expressions.Expression<System.Func<T, bool>>)
  nameWithType.vb: ObservableExtensions.Where(Of T)(INotifyEnumerable(Of T), Expression(Of Func(Of T, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Where(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)))
  name.vb: Where(Of T)(INotifyEnumerable(Of T), Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<T>(T)
  nameWithType: ExpressionExtensions.AsOne<T>(T)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<T>(T)
  nameWithType.vb: ExpressionExtensions.AsOne(Of T)(T)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of T)(T)
  name.vb: AsOne(Of T)(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  parent: NMF.Expressions.Linq
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  isExternal: true
  name: Chunk<T, TResult>(IEnumerable<T>, int, Func<IEnumerableExpression<T>, int, TResult>)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(IEnumerable<T>, int, Func<IEnumerableExpression<T>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<T>, int, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(IEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(System.Collections.Generic.IEnumerable(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), Integer, TResult))
  name.vb: Chunk(Of T, TResult)(IEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
    name: Chunk
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
    name: Chunk
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  isExternal: true
  name: ChunkIndexed<T, TResult>(IEnumerable<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(IEnumerable<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<(T, int)>, int, TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(IEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(System.Collections.Generic.IEnumerable(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  name.vb: ChunkIndexed(Of T, TResult)(IEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: WithUpdates<T>(IEnumerable<T>)
  nameWithType: ObservableExtensions.WithUpdates<T>(IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.WithUpdates(Of T)(IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: WithUpdates(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
    name: WithUpdates
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
    name: WithUpdates
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Collections.Specialized
  commentId: N:System.Collections.Specialized
  isExternal: true
  name: System.Collections.Specialized
  nameWithType: System.Collections.Specialized
  fullName: System.Collections.Specialized
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Specialized
    name: Specialized
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Specialized
    name: Specialized
    isExternal: true
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Linq.IGrouping`2
  commentId: T:System.Linq.IGrouping`2
  isExternal: true
  name: IGrouping<TKey, TElement>
  nameWithType: IGrouping<TKey, TElement>
  fullName: System.Linq.IGrouping<TKey, TElement>
  nameWithType.vb: IGrouping(Of TKey, TElement)
  fullName.vb: System.Linq.IGrouping(Of TKey, TElement)
  name.vb: IGrouping(Of TKey, TElement)
  spec.csharp:
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TElement
  - name: '>'
  spec.vb:
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TElement
  - name: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: true
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: NMF.Expressions.Debug
  commentId: N:NMF.Expressions.Debug
  name: NMF.Expressions.Debug
  nameWithType: NMF.Expressions.Debug
  fullName: NMF.Expressions.Debug
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Debug
    name: Debug
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Debug
    name: Debug
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
