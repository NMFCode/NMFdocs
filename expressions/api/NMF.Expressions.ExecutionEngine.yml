### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.ExecutionEngine
  commentId: T:NMF.Expressions.ExecutionEngine
  id: ExecutionEngine
  parent: NMF.Expressions
  children:
  - NMF.Expressions.ExecutionEngine.BeginTransaction
  - NMF.Expressions.ExecutionEngine.CommitTransaction
  - NMF.Expressions.ExecutionEngine.Current
  - NMF.Expressions.ExecutionEngine.Execute(System.Collections.Generic.List{NMF.Expressions.INotifiable})
  - NMF.Expressions.ExecutionEngine.ExecuteSingle(NMF.Expressions.INotifiable)
  - NMF.Expressions.ExecutionEngine.InvalidateNode(NMF.Expressions.INotifiable)
  - NMF.Expressions.ExecutionEngine.RollbackTransaction
  - NMF.Expressions.ExecutionEngine.TransactionActive
  langs:
  - csharp
  - vb
  name: ExecutionEngine
  nameWithType: ExecutionEngine
  fullName: NMF.Expressions.ExecutionEngine
  type: Class
  source:
    remote:
      path: Expressions/Expressions/Execution/ExecutionEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ExecutionEngine
    path: src/Expressions/Expressions/Execution/ExecutionEngine.cs
    startLine: 16
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nDeotes an execution engine for incremental computation\n"
  example: []
  syntax:
    content: public abstract class ExecutionEngine
    content.vb: Public MustInherit Class ExecutionEngine
  inheritance:
  - System.Object
  derivedClasses:
  - NMF.Expressions.ParallelExecutionEngine
  - NMF.Expressions.SequentialExecutionEngine
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - NMF.Expressions.ExecutionEngine.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
- uid: NMF.Expressions.ExecutionEngine.TransactionActive
  commentId: P:NMF.Expressions.ExecutionEngine.TransactionActive
  id: TransactionActive
  parent: NMF.Expressions.ExecutionEngine
  langs:
  - csharp
  - vb
  name: TransactionActive
  nameWithType: ExecutionEngine.TransactionActive
  fullName: NMF.Expressions.ExecutionEngine.TransactionActive
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Execution/ExecutionEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TransactionActive
    path: src/Expressions/Expressions/Execution/ExecutionEngine.cs
    startLine: 25
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nIndicates whether the system is in a transaction\n"
  example: []
  syntax:
    content: public bool TransactionActive { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property TransactionActive As Boolean
  overload: NMF.Expressions.ExecutionEngine.TransactionActive*
- uid: NMF.Expressions.ExecutionEngine.BeginTransaction
  commentId: M:NMF.Expressions.ExecutionEngine.BeginTransaction
  id: BeginTransaction
  parent: NMF.Expressions.ExecutionEngine
  langs:
  - csharp
  - vb
  name: BeginTransaction()
  nameWithType: ExecutionEngine.BeginTransaction()
  fullName: NMF.Expressions.ExecutionEngine.BeginTransaction()
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Execution/ExecutionEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: BeginTransaction
    path: src/Expressions/Expressions/Execution/ExecutionEngine.cs
    startLine: 30
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nStarts a new change transaction\n"
  example: []
  syntax:
    content: public void BeginTransaction()
    content.vb: Public Sub BeginTransaction()
  overload: NMF.Expressions.ExecutionEngine.BeginTransaction*
- uid: NMF.Expressions.ExecutionEngine.CommitTransaction
  commentId: M:NMF.Expressions.ExecutionEngine.CommitTransaction
  id: CommitTransaction
  parent: NMF.Expressions.ExecutionEngine
  langs:
  - csharp
  - vb
  name: CommitTransaction()
  nameWithType: ExecutionEngine.CommitTransaction()
  fullName: NMF.Expressions.ExecutionEngine.CommitTransaction()
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Execution/ExecutionEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CommitTransaction
    path: src/Expressions/Expressions/Execution/ExecutionEngine.cs
    startLine: 38
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nCommits the transaction\n"
  example: []
  syntax:
    content: public void CommitTransaction()
    content.vb: Public Sub CommitTransaction()
  overload: NMF.Expressions.ExecutionEngine.CommitTransaction*
- uid: NMF.Expressions.ExecutionEngine.RollbackTransaction
  commentId: M:NMF.Expressions.ExecutionEngine.RollbackTransaction
  id: RollbackTransaction
  parent: NMF.Expressions.ExecutionEngine
  langs:
  - csharp
  - vb
  name: RollbackTransaction()
  nameWithType: ExecutionEngine.RollbackTransaction()
  fullName: NMF.Expressions.ExecutionEngine.RollbackTransaction()
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Execution/ExecutionEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RollbackTransaction
    path: src/Expressions/Expressions/Execution/ExecutionEngine.cs
    startLine: 69
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nRolls back the transaction\n"
  example: []
  syntax:
    content: public void RollbackTransaction()
    content.vb: Public Sub RollbackTransaction()
  overload: NMF.Expressions.ExecutionEngine.RollbackTransaction*
- uid: NMF.Expressions.ExecutionEngine.InvalidateNode(NMF.Expressions.INotifiable)
  commentId: M:NMF.Expressions.ExecutionEngine.InvalidateNode(NMF.Expressions.INotifiable)
  id: InvalidateNode(NMF.Expressions.INotifiable)
  parent: NMF.Expressions.ExecutionEngine
  langs:
  - csharp
  - vb
  name: InvalidateNode(INotifiable)
  nameWithType: ExecutionEngine.InvalidateNode(INotifiable)
  fullName: NMF.Expressions.ExecutionEngine.InvalidateNode(NMF.Expressions.INotifiable)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Execution/ExecutionEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: InvalidateNode
    path: src/Expressions/Expressions/Execution/ExecutionEngine.cs
    startLine: 80
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvalidates the given DDG node\n"
  example: []
  syntax:
    content: public void InvalidateNode(INotifiable node)
    parameters:
    - id: node
      type: NMF.Expressions.INotifiable
      description: The DDG node
    content.vb: Public Sub InvalidateNode(node As INotifiable)
  overload: NMF.Expressions.ExecutionEngine.InvalidateNode*
- uid: NMF.Expressions.ExecutionEngine.ExecuteSingle(NMF.Expressions.INotifiable)
  commentId: M:NMF.Expressions.ExecutionEngine.ExecuteSingle(NMF.Expressions.INotifiable)
  id: ExecuteSingle(NMF.Expressions.INotifiable)
  parent: NMF.Expressions.ExecutionEngine
  langs:
  - csharp
  - vb
  name: ExecuteSingle(INotifiable)
  nameWithType: ExecutionEngine.ExecuteSingle(INotifiable)
  fullName: NMF.Expressions.ExecutionEngine.ExecuteSingle(NMF.Expressions.INotifiable)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Execution/ExecutionEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ExecuteSingle
    path: src/Expressions/Expressions/Execution/ExecutionEngine.cs
    startLine: 115
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nPropagates the changes of a single DDG node\n"
  example: []
  syntax:
    content: protected virtual void ExecuteSingle(INotifiable source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifiable
      description: The changed DDG node
    content.vb: Protected Overridable Sub ExecuteSingle(source As INotifiable)
  overload: NMF.Expressions.ExecutionEngine.ExecuteSingle*
- uid: NMF.Expressions.ExecutionEngine.Execute(System.Collections.Generic.List{NMF.Expressions.INotifiable})
  commentId: M:NMF.Expressions.ExecutionEngine.Execute(System.Collections.Generic.List{NMF.Expressions.INotifiable})
  id: Execute(System.Collections.Generic.List{NMF.Expressions.INotifiable})
  parent: NMF.Expressions.ExecutionEngine
  langs:
  - csharp
  - vb
  name: Execute(List<INotifiable>)
  nameWithType: ExecutionEngine.Execute(List<INotifiable>)
  fullName: NMF.Expressions.ExecutionEngine.Execute(System.Collections.Generic.List<NMF.Expressions.INotifiable>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Execution/ExecutionEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Execute
    path: src/Expressions/Expressions/Execution/ExecutionEngine.cs
    startLine: 147
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nPropagates changes of the given DDG nodes\n"
  example: []
  syntax:
    content: protected abstract void Execute(List<INotifiable> nodes)
    parameters:
    - id: nodes
      type: System.Collections.Generic.List{NMF.Expressions.INotifiable}
      description: The changed DDG nodes
    content.vb: Protected MustOverride Sub Execute(nodes As List(Of INotifiable))
  overload: NMF.Expressions.ExecutionEngine.Execute*
  nameWithType.vb: ExecutionEngine.Execute(List(Of INotifiable))
  fullName.vb: NMF.Expressions.ExecutionEngine.Execute(System.Collections.Generic.List(Of NMF.Expressions.INotifiable))
  name.vb: Execute(List(Of INotifiable))
- uid: NMF.Expressions.ExecutionEngine.Current
  commentId: P:NMF.Expressions.ExecutionEngine.Current
  id: Current
  parent: NMF.Expressions.ExecutionEngine
  langs:
  - csharp
  - vb
  name: Current
  nameWithType: ExecutionEngine.Current
  fullName: NMF.Expressions.ExecutionEngine.Current
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Execution/ExecutionEngine.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Current
    path: src/Expressions/Expressions/Execution/ExecutionEngine.cs
    startLine: 152
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nGets or sets the current execution engine\n"
  example: []
  syntax:
    content: public static ExecutionEngine Current { get; set; }
    parameters: []
    return:
      type: NMF.Expressions.ExecutionEngine
    content.vb: Public Shared Property Current As ExecutionEngine
  overload: NMF.Expressions.ExecutionEngine.Current*
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: NMF.Expressions.ExecutionEngine.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<ExecutionEngine>(ExecutionEngine)
  nameWithType: ExpressionExtensions.AsOne<ExecutionEngine>(ExecutionEngine)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<NMF.Expressions.ExecutionEngine>(NMF.Expressions.ExecutionEngine)
  nameWithType.vb: ExpressionExtensions.AsOne(Of ExecutionEngine)(ExecutionEngine)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of NMF.Expressions.ExecutionEngine)(NMF.Expressions.ExecutionEngine)
  name.vb: AsOne(Of ExecutionEngine)(ExecutionEngine)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.ExecutionEngine)
    name: AsOne
  - name: <
  - uid: NMF.Expressions.ExecutionEngine
    name: ExecutionEngine
  - name: '>'
  - name: (
  - uid: NMF.Expressions.ExecutionEngine
    name: ExecutionEngine
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.ExecutionEngine)
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.ExecutionEngine
    name: ExecutionEngine
  - name: )
  - name: (
  - uid: NMF.Expressions.ExecutionEngine
    name: ExecutionEngine
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<T>(T)
  nameWithType: ExpressionExtensions.AsOne<T>(T)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<T>(T)
  nameWithType.vb: ExpressionExtensions.AsOne(Of T)(T)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of T)(T)
  name.vb: AsOne(Of T)(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  parent: NMF.Expressions.Linq
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
- uid: NMF.Expressions.ExecutionEngine.TransactionActive*
  commentId: Overload:NMF.Expressions.ExecutionEngine.TransactionActive
  name: TransactionActive
  nameWithType: ExecutionEngine.TransactionActive
  fullName: NMF.Expressions.ExecutionEngine.TransactionActive
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: NMF.Expressions.ExecutionEngine.BeginTransaction*
  commentId: Overload:NMF.Expressions.ExecutionEngine.BeginTransaction
  name: BeginTransaction
  nameWithType: ExecutionEngine.BeginTransaction
  fullName: NMF.Expressions.ExecutionEngine.BeginTransaction
- uid: NMF.Expressions.ExecutionEngine.CommitTransaction*
  commentId: Overload:NMF.Expressions.ExecutionEngine.CommitTransaction
  name: CommitTransaction
  nameWithType: ExecutionEngine.CommitTransaction
  fullName: NMF.Expressions.ExecutionEngine.CommitTransaction
- uid: NMF.Expressions.ExecutionEngine.RollbackTransaction*
  commentId: Overload:NMF.Expressions.ExecutionEngine.RollbackTransaction
  name: RollbackTransaction
  nameWithType: ExecutionEngine.RollbackTransaction
  fullName: NMF.Expressions.ExecutionEngine.RollbackTransaction
- uid: NMF.Expressions.ExecutionEngine.InvalidateNode*
  commentId: Overload:NMF.Expressions.ExecutionEngine.InvalidateNode
  name: InvalidateNode
  nameWithType: ExecutionEngine.InvalidateNode
  fullName: NMF.Expressions.ExecutionEngine.InvalidateNode
- uid: NMF.Expressions.INotifiable
  commentId: T:NMF.Expressions.INotifiable
  parent: NMF.Expressions
  name: INotifiable
  nameWithType: INotifiable
  fullName: NMF.Expressions.INotifiable
- uid: NMF.Expressions.ExecutionEngine.ExecuteSingle*
  commentId: Overload:NMF.Expressions.ExecutionEngine.ExecuteSingle
  name: ExecuteSingle
  nameWithType: ExecutionEngine.ExecuteSingle
  fullName: NMF.Expressions.ExecutionEngine.ExecuteSingle
- uid: NMF.Expressions.ExecutionEngine.Execute*
  commentId: Overload:NMF.Expressions.ExecutionEngine.Execute
  name: Execute
  nameWithType: ExecutionEngine.Execute
  fullName: NMF.Expressions.ExecutionEngine.Execute
- uid: System.Collections.Generic.List{NMF.Expressions.INotifiable}
  commentId: T:System.Collections.Generic.List{NMF.Expressions.INotifiable}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<INotifiable>
  nameWithType: List<INotifiable>
  fullName: System.Collections.Generic.List<NMF.Expressions.INotifiable>
  nameWithType.vb: List(Of INotifiable)
  fullName.vb: System.Collections.Generic.List(Of NMF.Expressions.INotifiable)
  name.vb: List(Of INotifiable)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: NMF.Expressions.ExecutionEngine.Current*
  commentId: Overload:NMF.Expressions.ExecutionEngine.Current
  name: Current
  nameWithType: ExecutionEngine.Current
  fullName: NMF.Expressions.ExecutionEngine.Current
- uid: NMF.Expressions.ExecutionEngine
  commentId: T:NMF.Expressions.ExecutionEngine
  parent: NMF.Expressions
  name: ExecutionEngine
  nameWithType: ExecutionEngine
  fullName: NMF.Expressions.ExecutionEngine
