### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.Debug.DebugExtensions
  commentId: T:NMF.Expressions.Debug.DebugExtensions
  id: DebugExtensions
  parent: NMF.Expressions.Debug
  children:
  - NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
  - NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
  langs:
  - csharp
  - vb
  name: DebugExtensions
  nameWithType: DebugExtensions
  fullName: NMF.Expressions.Debug.DebugExtensions
  type: Class
  source:
    remote:
      path: Expressions/Expressions.Debug/DebugExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: DebugExtensions
    path: src/Expressions/Expressions.Debug/DebugExtensions.cs
    startLine: 11
  assemblies:
  - NMF.Expressions.Debug
  namespace: NMF.Expressions.Debug
  summary: "\nDenotes a class with debug helper functions\n"
  example: []
  syntax:
    content: public static class DebugExtensions
    content.vb: Public Module DebugExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
  commentId: M:NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
  id: Visualize(NMF.Expressions.INotifiable)
  isExtensionMethod: true
  parent: NMF.Expressions.Debug.DebugExtensions
  langs:
  - csharp
  - vb
  name: Visualize(INotifiable)
  nameWithType: DebugExtensions.Visualize(INotifiable)
  fullName: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Debug/DebugExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Visualize
    path: src/Expressions/Expressions.Debug/DebugExtensions.cs
    startLine: 18
  assemblies:
  - NMF.Expressions.Debug
  namespace: NMF.Expressions.Debug
  summary: "\nVisualizes the provided DDG node\n"
  remarks: This will generate a DGML file and open it. Therefore, a DGML viewer must be installed (e.g. Visual Studio with the required packages).
  example: []
  syntax:
    content: >-
      [Conditional("DEBUG")]

      public static void Visualize(this INotifiable node)
    parameters:
    - id: node
      type: NMF.Expressions.INotifiable
      description: The DDG node to visualize
    content.vb: >-
      <Conditional("DEBUG")>

      <ExtensionAttribute>

      Public Shared Sub Visualize(node As INotifiable)
  overload: NMF.Expressions.Debug.DebugExtensions.Visualize*
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEBUG
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
  commentId: M:NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
  id: ExportToDgml(NMF.Expressions.INotifiable,System.String)
  isExtensionMethod: true
  parent: NMF.Expressions.Debug.DebugExtensions
  langs:
  - csharp
  - vb
  name: ExportToDgml(INotifiable, String)
  nameWithType: DebugExtensions.ExportToDgml(INotifiable, String)
  fullName: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable, System.String)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Debug/DebugExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ExportToDgml
    path: src/Expressions/Expressions.Debug/DebugExtensions.cs
    startLine: 36
  assemblies:
  - NMF.Expressions.Debug
  namespace: NMF.Expressions.Debug
  summary: "\nExports the provided notifiable node to DGML and saves it\n"
  example: []
  syntax:
    content: public static void ExportToDgml(this INotifiable node, string path)
    parameters:
    - id: node
      type: NMF.Expressions.INotifiable
      description: The DDG node to export
    - id: path
      type: System.String
      description: The path where to export the file to
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ExportToDgml(node As INotifiable, path As String)
  overload: NMF.Expressions.Debug.DebugExtensions.ExportToDgml*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: NMF.Expressions.Debug
  commentId: N:NMF.Expressions.Debug
  name: NMF.Expressions.Debug
  nameWithType: NMF.Expressions.Debug
  fullName: NMF.Expressions.Debug
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.Debug.DebugExtensions.Visualize*
  commentId: Overload:NMF.Expressions.Debug.DebugExtensions.Visualize
  name: Visualize
  nameWithType: DebugExtensions.Visualize
  fullName: NMF.Expressions.Debug.DebugExtensions.Visualize
- uid: NMF.Expressions.INotifiable
  commentId: T:NMF.Expressions.INotifiable
  parent: NMF.Expressions
  name: INotifiable
  nameWithType: INotifiable
  fullName: NMF.Expressions.INotifiable
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: NMF.Expressions.Debug.DebugExtensions.ExportToDgml*
  commentId: Overload:NMF.Expressions.Debug.DebugExtensions.ExportToDgml
  name: ExportToDgml
  nameWithType: DebugExtensions.ExportToDgml
  fullName: NMF.Expressions.Debug.DebugExtensions.ExportToDgml
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
