### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  id: NMF.Expressions.Linq
  children:
  - NMF.Expressions.Linq.ChunkExtensions
  - NMF.Expressions.Linq.ExpressionExtensions
  - NMF.Expressions.Linq.IChunkBalancingStrategy`2
  - NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
  - NMF.Expressions.Linq.ILookupExpression`2
  - NMF.Expressions.Linq.IncrementalLookup`2
  - NMF.Expressions.Linq.INotifyLookup`2
  - NMF.Expressions.Linq.IObservableChunk`2
  - NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2
  - NMF.Expressions.Linq.LazyBalancingStrategy
  - NMF.Expressions.Linq.Lookup`2
  - NMF.Expressions.Linq.LookupExtensions
  - NMF.Expressions.Linq.NoBalancingStrategy
  - NMF.Expressions.Linq.NoBalancingStrategy`2
  - NMF.Expressions.Linq.ObservableAggregate`3
  - NMF.Expressions.Linq.ObservableEnumerable`1
  - NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
  type: Namespace
  assemblies:
  - NMF.Expressions.Chunk
references:
- uid: NMF.Expressions.Linq.ChunkExtensions
  commentId: T:NMF.Expressions.Linq.ChunkExtensions
  parent: NMF.Expressions.Linq
  name: ChunkExtensions
  nameWithType: ChunkExtensions
  fullName: NMF.Expressions.Linq.ChunkExtensions
- uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2
  commentId: T:NMF.Expressions.Linq.IChunkBalancingStrategy`2
  name: IChunkBalancingStrategy<T, TChunk>
  nameWithType: IChunkBalancingStrategy<T, TChunk>
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategy<T, TChunk>
  nameWithType.vb: IChunkBalancingStrategy(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategy(Of T, TChunk)
  name.vb: IChunkBalancingStrategy(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2
    name: IChunkBalancingStrategy
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TChunk
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2
    name: IChunkBalancingStrategy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TChunk
  - name: )
- uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  commentId: T:NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  parent: NMF.Expressions.Linq
  name: IChunkBalancingStrategyProvider
  nameWithType: IChunkBalancingStrategyProvider
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
- uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
  commentId: T:NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
  name: IChunkBalancingStrategyProvider<T, TChunk>
  nameWithType: IChunkBalancingStrategyProvider<T, TChunk>
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider<T, TChunk>
  nameWithType.vb: IChunkBalancingStrategyProvider(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of T, TChunk)
  name.vb: IChunkBalancingStrategyProvider(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TChunk
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TChunk
  - name: )
- uid: NMF.Expressions.Linq.IObservableChunk`2
  commentId: T:NMF.Expressions.Linq.IObservableChunk`2
  name: IObservableChunk<T, TChunk>
  nameWithType: IObservableChunk<T, TChunk>
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>
  nameWithType.vb: IObservableChunk(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk)
  name.vb: IObservableChunk(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TChunk
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TChunk
  - name: )
- uid: NMF.Expressions.Linq.LazyBalancingStrategy
  commentId: T:NMF.Expressions.Linq.LazyBalancingStrategy
  parent: NMF.Expressions.Linq
  name: LazyBalancingStrategy
  nameWithType: LazyBalancingStrategy
  fullName: NMF.Expressions.Linq.LazyBalancingStrategy
- uid: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2
  commentId: T:NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2
  parent: NMF.Expressions.Linq
  name: LazyBalancingOnRemoveStrategy<T, TChunk>
  nameWithType: LazyBalancingOnRemoveStrategy<T, TChunk>
  fullName: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy<T, TChunk>
  nameWithType.vb: LazyBalancingOnRemoveStrategy(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy(Of T, TChunk)
  name.vb: LazyBalancingOnRemoveStrategy(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2
    name: LazyBalancingOnRemoveStrategy
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TChunk
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2
    name: LazyBalancingOnRemoveStrategy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TChunk
  - name: )
- uid: NMF.Expressions.Linq.NoBalancingStrategy
  commentId: T:NMF.Expressions.Linq.NoBalancingStrategy
  name: NoBalancingStrategy
  nameWithType: NoBalancingStrategy
  fullName: NMF.Expressions.Linq.NoBalancingStrategy
- uid: NMF.Expressions.Linq.NoBalancingStrategy`2
  commentId: T:NMF.Expressions.Linq.NoBalancingStrategy`2
  parent: NMF.Expressions.Linq
  name: NoBalancingStrategy<T, TChunk>
  nameWithType: NoBalancingStrategy<T, TChunk>
  fullName: NMF.Expressions.Linq.NoBalancingStrategy<T, TChunk>
  nameWithType.vb: NoBalancingStrategy(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.NoBalancingStrategy(Of T, TChunk)
  name.vb: NoBalancingStrategy(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.NoBalancingStrategy`2
    name: NoBalancingStrategy
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TChunk
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.NoBalancingStrategy`2
    name: NoBalancingStrategy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TChunk
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  parent: NMF.Expressions.Linq
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
- uid: NMF.Expressions.Linq.ObservableExtensions
  commentId: T:NMF.Expressions.Linq.ObservableExtensions
  parent: NMF.Expressions.Linq
  name: ObservableExtensions
  nameWithType: ObservableExtensions
  fullName: NMF.Expressions.Linq.ObservableExtensions
- uid: NMF.Expressions.Linq.ObservableAggregate`3
  commentId: T:NMF.Expressions.Linq.ObservableAggregate`3
  name: ObservableAggregate<TSource, TAccumulator, TResult>
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult)
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult)
  name.vb: ObservableAggregate(Of TSource, TAccumulator, TResult)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableAggregate`3
    name: ObservableAggregate
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TAccumulator
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableAggregate`3
    name: ObservableAggregate
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TAccumulator
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1
  commentId: T:NMF.Expressions.Linq.ObservableEnumerable`1
  name: ObservableEnumerable<T>
  nameWithType: ObservableEnumerable<T>
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>
  nameWithType.vb: ObservableEnumerable(Of T)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T)
  name.vb: ObservableEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1
    name: ObservableEnumerable
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1
    name: ObservableEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ILookupExpression`2
  commentId: T:NMF.Expressions.Linq.ILookupExpression`2
  name: ILookupExpression<TSource, TKey>
  nameWithType: ILookupExpression<TSource, TKey>
  fullName: NMF.Expressions.Linq.ILookupExpression<TSource, TKey>
  nameWithType.vb: ILookupExpression(Of TSource, TKey)
  fullName.vb: NMF.Expressions.Linq.ILookupExpression(Of TSource, TKey)
  name.vb: ILookupExpression(Of TSource, TKey)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ILookupExpression`2
    name: ILookupExpression
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.ILookupExpression`2
    name: ILookupExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
- uid: NMF.Expressions.Linq.INotifyLookup`2
  commentId: T:NMF.Expressions.Linq.INotifyLookup`2
  name: INotifyLookup<TSource, TKey>
  nameWithType: INotifyLookup<TSource, TKey>
  fullName: NMF.Expressions.Linq.INotifyLookup<TSource, TKey>
  nameWithType.vb: INotifyLookup(Of TSource, TKey)
  fullName.vb: NMF.Expressions.Linq.INotifyLookup(Of TSource, TKey)
  name.vb: INotifyLookup(Of TSource, TKey)
  spec.csharp:
  - uid: NMF.Expressions.Linq.INotifyLookup`2
    name: INotifyLookup
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.INotifyLookup`2
    name: INotifyLookup
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
- uid: NMF.Expressions.Linq.IncrementalLookup`2
  commentId: T:NMF.Expressions.Linq.IncrementalLookup`2
  name: IncrementalLookup<TSource, TKey>
  nameWithType: IncrementalLookup<TSource, TKey>
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>
  nameWithType.vb: IncrementalLookup(Of TSource, TKey)
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey)
  name.vb: IncrementalLookup(Of TSource, TKey)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IncrementalLookup`2
    name: IncrementalLookup
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IncrementalLookup`2
    name: IncrementalLookup
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
- uid: NMF.Expressions.Linq.Lookup`2
  commentId: T:NMF.Expressions.Linq.Lookup`2
  name: Lookup<TSource, TKey>
  nameWithType: Lookup<TSource, TKey>
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>
  nameWithType.vb: Lookup(Of TSource, TKey)
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey)
  name.vb: Lookup(Of TSource, TKey)
  spec.csharp:
  - uid: NMF.Expressions.Linq.Lookup`2
    name: Lookup
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.Lookup`2
    name: Lookup
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
- uid: NMF.Expressions.Linq.LookupExtensions
  commentId: T:NMF.Expressions.Linq.LookupExtensions
  parent: NMF.Expressions.Linq
  name: LookupExtensions
  nameWithType: LookupExtensions
  fullName: NMF.Expressions.Linq.LookupExtensions
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
