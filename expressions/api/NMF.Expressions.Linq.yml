### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  id: NMF.Expressions.Linq
  children:
  - NMF.Expressions.Linq.ExpressionExtensions
  - NMF.Expressions.Linq.ILookupExpression`2
  - NMF.Expressions.Linq.IncrementalLookup`2
  - NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave
  - NMF.Expressions.Linq.IncrementalLookup`2.Notification
  - NMF.Expressions.Linq.INotifyLookup`2
  - NMF.Expressions.Linq.Lookup`2
  - NMF.Expressions.Linq.Lookup`2.LookupSlave
  - NMF.Expressions.Linq.LookupExtensions
  - NMF.Expressions.Linq.ObservableAggregate`3
  - NMF.Expressions.Linq.ObservableEnumerable`1
  - NMF.Expressions.Linq.ObservableExtensions
  - NMF.Expressions.Linq.ObservableGroup`2
  langs:
  - csharp
  - vb
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
  type: Namespace
  assemblies:
  - NMF.Expressions.Linq
references:
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  parent: NMF.Expressions.Linq
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
- uid: NMF.Expressions.Linq.ObservableExtensions
  commentId: T:NMF.Expressions.Linq.ObservableExtensions
  parent: NMF.Expressions.Linq
  name: ObservableExtensions
  nameWithType: ObservableExtensions
  fullName: NMF.Expressions.Linq.ObservableExtensions
- uid: NMF.Expressions.Linq.ObservableAggregate`3
  commentId: T:NMF.Expressions.Linq.ObservableAggregate`3
  name: ObservableAggregate<TSource, TAccumulator, TResult>
  nameWithType: ObservableAggregate<TSource, TAccumulator, TResult>
  fullName: NMF.Expressions.Linq.ObservableAggregate<TSource, TAccumulator, TResult>
  nameWithType.vb: ObservableAggregate(Of TSource, TAccumulator, TResult)
  fullName.vb: NMF.Expressions.Linq.ObservableAggregate(Of TSource, TAccumulator, TResult)
  name.vb: ObservableAggregate(Of TSource, TAccumulator, TResult)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableAggregate`3
    name: ObservableAggregate
    nameWithType: ObservableAggregate
    fullName: NMF.Expressions.Linq.ObservableAggregate
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAccumulator
    nameWithType: TAccumulator
    fullName: TAccumulator
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableAggregate`3
    name: ObservableAggregate
    nameWithType: ObservableAggregate
    fullName: NMF.Expressions.Linq.ObservableAggregate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TAccumulator
    nameWithType: TAccumulator
    fullName: TAccumulator
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1
  commentId: T:NMF.Expressions.Linq.ObservableEnumerable`1
  name: ObservableEnumerable<T>
  nameWithType: ObservableEnumerable<T>
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>
  nameWithType.vb: ObservableEnumerable(Of T)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T)
  name.vb: ObservableEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1
    name: ObservableEnumerable
    nameWithType: ObservableEnumerable
    fullName: NMF.Expressions.Linq.ObservableEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1
    name: ObservableEnumerable
    nameWithType: ObservableEnumerable
    fullName: NMF.Expressions.Linq.ObservableEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableGroup`2
  commentId: T:NMF.Expressions.Linq.ObservableGroup`2
  name: ObservableGroup<TKey, TItem>
  nameWithType: ObservableGroup<TKey, TItem>
  fullName: NMF.Expressions.Linq.ObservableGroup<TKey, TItem>
  nameWithType.vb: ObservableGroup(Of TKey, TItem)
  fullName.vb: NMF.Expressions.Linq.ObservableGroup(Of TKey, TItem)
  name.vb: ObservableGroup(Of TKey, TItem)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableGroup`2
    name: ObservableGroup
    nameWithType: ObservableGroup
    fullName: NMF.Expressions.Linq.ObservableGroup
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableGroup`2
    name: ObservableGroup
    nameWithType: ObservableGroup
    fullName: NMF.Expressions.Linq.ObservableGroup
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ILookupExpression`2
  commentId: T:NMF.Expressions.Linq.ILookupExpression`2
  name: ILookupExpression<TSource, TKey>
  nameWithType: ILookupExpression<TSource, TKey>
  fullName: NMF.Expressions.Linq.ILookupExpression<TSource, TKey>
  nameWithType.vb: ILookupExpression(Of TSource, TKey)
  fullName.vb: NMF.Expressions.Linq.ILookupExpression(Of TSource, TKey)
  name.vb: ILookupExpression(Of TSource, TKey)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ILookupExpression`2
    name: ILookupExpression
    nameWithType: ILookupExpression
    fullName: NMF.Expressions.Linq.ILookupExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.ILookupExpression`2
    name: ILookupExpression
    nameWithType: ILookupExpression
    fullName: NMF.Expressions.Linq.ILookupExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.INotifyLookup`2
  commentId: T:NMF.Expressions.Linq.INotifyLookup`2
  name: INotifyLookup<TSource, TKey>
  nameWithType: INotifyLookup<TSource, TKey>
  fullName: NMF.Expressions.Linq.INotifyLookup<TSource, TKey>
  nameWithType.vb: INotifyLookup(Of TSource, TKey)
  fullName.vb: NMF.Expressions.Linq.INotifyLookup(Of TSource, TKey)
  name.vb: INotifyLookup(Of TSource, TKey)
  spec.csharp:
  - uid: NMF.Expressions.Linq.INotifyLookup`2
    name: INotifyLookup
    nameWithType: INotifyLookup
    fullName: NMF.Expressions.Linq.INotifyLookup
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.INotifyLookup`2
    name: INotifyLookup
    nameWithType: INotifyLookup
    fullName: NMF.Expressions.Linq.INotifyLookup
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IncrementalLookup`2
  commentId: T:NMF.Expressions.Linq.IncrementalLookup`2
  parent: NMF.Expressions.Linq
  name: IncrementalLookup<TSource, TKey>
  nameWithType: IncrementalLookup<TSource, TKey>
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>
  nameWithType.vb: IncrementalLookup(Of TSource, TKey)
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey)
  name.vb: IncrementalLookup(Of TSource, TKey)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IncrementalLookup`2
    name: IncrementalLookup
    nameWithType: IncrementalLookup
    fullName: NMF.Expressions.Linq.IncrementalLookup
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IncrementalLookup`2
    name: IncrementalLookup
    nameWithType: IncrementalLookup
    fullName: NMF.Expressions.Linq.IncrementalLookup
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave
  commentId: T:NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave
  name: IncrementalLookup.IncrementalLookupSlave<>
  nameWithType: IncrementalLookup.IncrementalLookupSlave<>
  fullName: NMF.Expressions.Linq.IncrementalLookup.IncrementalLookupSlave<>
  nameWithType.vb: IncrementalLookup.IncrementalLookupSlave(Of )
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup.IncrementalLookupSlave(Of )
  name.vb: IncrementalLookup.IncrementalLookupSlave(Of )
  spec.csharp:
  - uid: NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave
    name: IncrementalLookup.IncrementalLookupSlave
    nameWithType: IncrementalLookup.IncrementalLookupSlave
    fullName: NMF.Expressions.Linq.IncrementalLookup.IncrementalLookupSlave
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IncrementalLookup`2.IncrementalLookupSlave
    name: IncrementalLookup.IncrementalLookupSlave
    nameWithType: IncrementalLookup.IncrementalLookupSlave
    fullName: NMF.Expressions.Linq.IncrementalLookup.IncrementalLookupSlave
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification
  commentId: T:NMF.Expressions.Linq.IncrementalLookup`2.Notification
  name: IncrementalLookup.Notification<>
  nameWithType: IncrementalLookup.Notification<>
  fullName: NMF.Expressions.Linq.IncrementalLookup.Notification<>
  nameWithType.vb: IncrementalLookup.Notification(Of )
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup.Notification(Of )
  name.vb: IncrementalLookup.Notification(Of )
  spec.csharp:
  - uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification
    name: IncrementalLookup.Notification
    nameWithType: IncrementalLookup.Notification
    fullName: NMF.Expressions.Linq.IncrementalLookup.Notification
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification
    name: IncrementalLookup.Notification
    nameWithType: IncrementalLookup.Notification
    fullName: NMF.Expressions.Linq.IncrementalLookup.Notification
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.Lookup`2
  commentId: T:NMF.Expressions.Linq.Lookup`2
  parent: NMF.Expressions.Linq
  name: Lookup<TSource, TKey>
  nameWithType: Lookup<TSource, TKey>
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>
  nameWithType.vb: Lookup(Of TSource, TKey)
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey)
  name.vb: Lookup(Of TSource, TKey)
  spec.csharp:
  - uid: NMF.Expressions.Linq.Lookup`2
    name: Lookup
    nameWithType: Lookup
    fullName: NMF.Expressions.Linq.Lookup
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.Lookup`2
    name: Lookup
    nameWithType: Lookup
    fullName: NMF.Expressions.Linq.Lookup
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.Lookup`2.LookupSlave
  commentId: T:NMF.Expressions.Linq.Lookup`2.LookupSlave
  name: Lookup.LookupSlave<>
  nameWithType: Lookup.LookupSlave<>
  fullName: NMF.Expressions.Linq.Lookup.LookupSlave<>
  nameWithType.vb: Lookup.LookupSlave(Of )
  fullName.vb: NMF.Expressions.Linq.Lookup.LookupSlave(Of )
  name.vb: Lookup.LookupSlave(Of )
  spec.csharp:
  - uid: NMF.Expressions.Linq.Lookup`2.LookupSlave
    name: Lookup.LookupSlave
    nameWithType: Lookup.LookupSlave
    fullName: NMF.Expressions.Linq.Lookup.LookupSlave
  - name: <
    nameWithType: <
    fullName: <
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.Lookup`2.LookupSlave
    name: Lookup.LookupSlave
    nameWithType: Lookup.LookupSlave
    fullName: NMF.Expressions.Linq.Lookup.LookupSlave
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.LookupExtensions
  commentId: T:NMF.Expressions.Linq.LookupExtensions
  parent: NMF.Expressions.Linq
  name: LookupExtensions
  nameWithType: LookupExtensions
  fullName: NMF.Expressions.Linq.LookupExtensions
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
