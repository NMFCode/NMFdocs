### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.Linq.ObservableGroup`2
  commentId: T:NMF.Expressions.Linq.ObservableGroup`2
  id: ObservableGroup`2
  parent: NMF.Expressions.Linq
  children:
  - NMF.Expressions.Linq.ObservableGroup`2.#ctor(`0)
  - NMF.Expressions.Linq.ObservableGroup`2.AsNotifiable
  - NMF.Expressions.Linq.ObservableGroup`2.Dependencies
  - NMF.Expressions.Linq.ObservableGroup`2.Dispose
  - NMF.Expressions.Linq.ObservableGroup`2.ExecutionMetaData
  - NMF.Expressions.Linq.ObservableGroup`2.Key
  - NMF.Expressions.Linq.ObservableGroup`2.NMF#Expressions#IEnumerableExpression#AsNotifiable
  - NMF.Expressions.Linq.ObservableGroup`2.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  - NMF.Expressions.Linq.ObservableGroup`2.Successors
  langs:
  - csharp
  - vb
  name: ObservableGroup<TKey, TItem>
  nameWithType: ObservableGroup<TKey, TItem>
  fullName: NMF.Expressions.Linq.ObservableGroup<TKey, TItem>
  type: Class
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableGroup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ObservableGroup
    path: src/Expressions/Expressions.Linq/Linq/ObservableGroup.cs
    startLine: 9
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: 'public sealed class ObservableGroup<TKey, TItem> : ReadOnlyObservableCollection<TItem>, IList<TItem>, ICollection<TItem>, IList, ICollection, IReadOnlyList<TItem>, IReadOnlyCollection<TItem>, INotifyPropertyChanged, INotifyGrouping<TKey, TItem>, INotifyEnumerable<TItem>, INotifyEnumerable, INotifyCollectionChanged, INotifiable, IDisposable, IGroupingExpression<TKey, TItem>, IGrouping<TKey, TItem>, IEnumerableExpression<TItem>, IEnumerable<TItem>, IEnumerableExpression, IEnumerable'
    typeParameters:
    - id: TKey
    - id: TItem
    content.vb: >-
      Public NotInheritable Class ObservableGroup(Of TKey, TItem)

          Inherits ReadOnlyObservableCollection(Of TItem)

          Implements IList(Of TItem), ICollection(Of TItem), IList, ICollection, IReadOnlyList(Of TItem), IReadOnlyCollection(Of TItem), INotifyPropertyChanged, INotifyGrouping(Of TKey, TItem), INotifyEnumerable(Of TItem), INotifyEnumerable, INotifyCollectionChanged, INotifiable, IDisposable, IGroupingExpression(Of TKey, TItem), IGrouping(Of TKey, TItem), IEnumerableExpression(Of TItem), IEnumerable(Of TItem), IEnumerableExpression, IEnumerable
  inheritance:
  - System.Object
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  - System.Collections.ObjectModel.ReadOnlyObservableCollection{{TItem}}
  implements:
  - System.Collections.Generic.IList{{TItem}}
  - System.Collections.Generic.ICollection{{TItem}}
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.Generic.IReadOnlyList{{TItem}}
  - System.Collections.Generic.IReadOnlyCollection{{TItem}}
  - System.ComponentModel.INotifyPropertyChanged
  - NMF.Expressions.INotifyGrouping{{TKey},{TItem}}
  - NMF.Expressions.INotifyEnumerable{{TItem}}
  - NMF.Expressions.INotifyEnumerable
  - System.Collections.Specialized.INotifyCollectionChanged
  - NMF.Expressions.INotifiable
  - System.IDisposable
  - NMF.Expressions.IGroupingExpression{{TKey},{TItem}}
  - System.Linq.IGrouping{{TKey},{TItem}}
  - NMF.Expressions.IEnumerableExpression{{TItem}}
  - System.Collections.Generic.IEnumerable{{TItem}}
  - NMF.Expressions.IEnumerableExpression
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Collections.ObjectModel.ReadOnlyObservableCollection{{TItem}}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  - System.Collections.ObjectModel.ReadOnlyObservableCollection{{TItem}}.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  - System.Collections.ObjectModel.ReadOnlyObservableCollection{{TItem}}.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged
  - System.Collections.ObjectModel.ReadOnlyObservableCollection{{TItem}}.CollectionChanged
  - System.Collections.ObjectModel.ReadOnlyObservableCollection{{TItem}}.System#ComponentModel#INotifyPropertyChanged#PropertyChanged
  - System.Collections.ObjectModel.ReadOnlyObservableCollection{{TItem}}.PropertyChanged
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.Contains({TItem})
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.CopyTo({TItem}[],System.Int32)
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.GetEnumerator
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.IndexOf({TItem})
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#Generic#IList{T}#get_Item(System.Int32)
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#Generic#IList{T}#set_Item(System.Int32,{TItem})
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#Generic#ICollection{T}#Add({TItem})
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#Generic#ICollection{T}#Clear
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#Generic#IList{T}#Insert(System.Int32,{TItem})
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#Generic#ICollection{T}#Remove({TItem})
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#IList#get_Item(System.Int32)
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#IList#set_Item(System.Int32,System.Object)
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#IList#Add(System.Object)
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#IList#Clear
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#IList#Contains(System.Object)
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#IList#Remove(System.Object)
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#IList#RemoveAt(System.Int32)
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.Count
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.Item(System.Int32)
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.Items
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#Generic#IList{T}#Item(System.Int32)
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#ICollection#IsSynchronized
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#ICollection#SyncRoot
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#IList#IsFixedSize
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#IList#IsReadOnly
  - System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#IList#Item(System.Int32)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.All``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Any``1
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Any``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Int32}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Int64}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Single}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Double}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Decimal}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Int32}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Int64}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Single}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Double}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Decimal}}})
  - NMF.Expressions.IEnumerableExpression.NMF.Expressions.Linq.ExpressionExtensions.Cast``1
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Concat``1(System.Collections.Generic.IEnumerable{{TItem}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Contains``1({TItem})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Contains``1({TItem},System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Count``1
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Count``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Distinct``1
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Except``1(System.Collections.Generic.IEnumerable{{TItem}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Except``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TItem}},{TResult}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TItem}},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TItem},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TItem},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(System.Collections.Generic.IEnumerable{{TItem}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{{TItem}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{{TItem}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{{TItem}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{{TItem}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TItem},{TInner},{TResult}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TItem},{TInner},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Max``1(System.Collections.Generic.IComparer{{TItem}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}},System.Func{{TItem},{TResult}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}},System.Collections.Generic.IComparer{{TResult}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{{TResult}}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{{TResult}}}},System.Collections.Generic.IComparer{{TResult}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Min``1(System.Collections.Generic.IComparer{{TItem}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}},System.Collections.Generic.IComparer{{TResult}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{{TResult}}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{{TResult}}}},System.Collections.Generic.IComparer{{TResult}})
  - NMF.Expressions.IEnumerableExpression.NMF.Expressions.Linq.ExpressionExtensions.OfType``1
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}},System.Func{{TItem},{TResult}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(System.Linq.Expressions.Expression{System.Func{{TItem},System.Collections.Generic.IEnumerable{{TIntermediate}}}},System.Linq.Expressions.Expression{System.Func{{TItem},{TIntermediate},{TResult}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Collections.Generic.IEnumerable{{TResult}}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{{TItem}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}},System.Func{{TItem},System.Boolean})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Int32}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Int64}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Single}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Double}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Decimal}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Int32}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Int64}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Single}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Double}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Decimal}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Union``1(System.Collections.Generic.IEnumerable{{TItem}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Union``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}},System.Func{{TItem},System.Boolean})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.All``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Any``1
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Any``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Int32}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Int64}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Single}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Double}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Decimal}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Int32}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Int64}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Single}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Double}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Decimal}}})
  - NMF.Expressions.INotifyEnumerable.NMF.Expressions.Linq.ObservableExtensions.Cast``1
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Concat``1(System.Collections.Generic.IEnumerable{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Contains``1({TItem})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Contains``1({TItem},System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Count``1
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Count``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Distinct``1
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Distinct``1(System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Except``1(System.Collections.Generic.IEnumerable{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Except``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TItem}},{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TItem}},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TItem},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TItem},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TItem},{TInner},{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TItem},{TInner},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``1(System.Collections.Generic.IComparer{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}},System.Collections.Generic.IComparer{{TResult}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{{TResult}}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{{TResult}}}},System.Collections.Generic.IComparer{{TResult}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``1(System.Collections.Generic.IComparer{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}},System.Collections.Generic.IComparer{{TResult}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{{TResult}}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{{TResult}}}},System.Collections.Generic.IComparer{{TResult}})
  - NMF.Expressions.INotifyEnumerable.NMF.Expressions.Linq.ObservableExtensions.OfType``1
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(System.Linq.Expressions.Expression{System.Func{{TItem},System.Collections.Generic.IEnumerable{{TIntermediate}}}},System.Linq.Expressions.Expression{System.Func{{TItem},{TIntermediate},{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Collections.Generic.IEnumerable{{TResult}}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Int32}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Int64}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Single}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Double}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Decimal}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Int32}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Int64}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Single}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Double}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Decimal}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Union``1(System.Collections.Generic.IEnumerable{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Union``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  - System.Collections.Generic.IEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  - System.Collections.Generic.ICollection{`1}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  nameWithType.vb: ObservableGroup(Of TKey, TItem)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: NMF.Expressions.Linq.ObservableGroup(Of TKey, TItem)
  name.vb: ObservableGroup(Of TKey, TItem)
- uid: NMF.Expressions.Linq.ObservableGroup`2.#ctor(`0)
  commentId: M:NMF.Expressions.Linq.ObservableGroup`2.#ctor(`0)
  id: '#ctor(`0)'
  parent: NMF.Expressions.Linq.ObservableGroup`2
  langs:
  - csharp
  - vb
  name: ObservableGroup(TKey)
  nameWithType: ObservableGroup<TKey, TItem>.ObservableGroup(TKey)
  fullName: NMF.Expressions.Linq.ObservableGroup<TKey, TItem>.ObservableGroup(TKey)
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableGroup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions.Linq/Linq/ObservableGroup.cs
    startLine: 15
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: public ObservableGroup(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
    content.vb: Public Sub New(key As TKey)
  overload: NMF.Expressions.Linq.ObservableGroup`2.#ctor*
  nameWithType.vb: ObservableGroup(Of TKey, TItem).ObservableGroup(TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.Linq.ObservableGroup(Of TKey, TItem).ObservableGroup(TKey)
- uid: NMF.Expressions.Linq.ObservableGroup`2.Key
  commentId: P:NMF.Expressions.Linq.ObservableGroup`2.Key
  id: Key
  parent: NMF.Expressions.Linq.ObservableGroup`2
  langs:
  - csharp
  - vb
  name: Key
  nameWithType: ObservableGroup<TKey, TItem>.Key
  fullName: NMF.Expressions.Linq.ObservableGroup<TKey, TItem>.Key
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableGroup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Key
    path: src/Expressions/Expressions.Linq/Linq/ObservableGroup.cs
    startLine: 21
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: public TKey Key { get; }
    parameters: []
    return:
      type: '{TKey}'
    content.vb: Public ReadOnly Property Key As TKey
  overload: NMF.Expressions.Linq.ObservableGroup`2.Key*
  implements:
  - System.Linq.IGrouping{{TKey},{TItem}}.Key
  nameWithType.vb: ObservableGroup(Of TKey, TItem).Key
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.ObservableGroup(Of TKey, TItem).Key
- uid: NMF.Expressions.Linq.ObservableGroup`2.Successors
  commentId: P:NMF.Expressions.Linq.ObservableGroup`2.Successors
  id: Successors
  parent: NMF.Expressions.Linq.ObservableGroup`2
  langs:
  - csharp
  - vb
  name: Successors
  nameWithType: ObservableGroup<TKey, TItem>.Successors
  fullName: NMF.Expressions.Linq.ObservableGroup<TKey, TItem>.Successors
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableGroup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Successors
    path: src/Expressions/Expressions.Linq/Linq/ObservableGroup.cs
    startLine: 23
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: public ISuccessorList Successors { get; }
    parameters: []
    return:
      type: NMF.Expressions.ISuccessorList
    content.vb: Public ReadOnly Property Successors As ISuccessorList
  overload: NMF.Expressions.Linq.ObservableGroup`2.Successors*
  implements:
  - NMF.Expressions.INotifiable.Successors
  nameWithType.vb: ObservableGroup(Of TKey, TItem).Successors
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.ObservableGroup(Of TKey, TItem).Successors
- uid: NMF.Expressions.Linq.ObservableGroup`2.Dependencies
  commentId: P:NMF.Expressions.Linq.ObservableGroup`2.Dependencies
  id: Dependencies
  parent: NMF.Expressions.Linq.ObservableGroup`2
  langs:
  - csharp
  - vb
  name: Dependencies
  nameWithType: ObservableGroup<TKey, TItem>.Dependencies
  fullName: NMF.Expressions.Linq.ObservableGroup<TKey, TItem>.Dependencies
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableGroup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Dependencies
    path: src/Expressions/Expressions.Linq/Linq/ObservableGroup.cs
    startLine: 25
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: public IEnumerable<INotifiable> Dependencies { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
    content.vb: Public ReadOnly Property Dependencies As IEnumerable(Of INotifiable)
  overload: NMF.Expressions.Linq.ObservableGroup`2.Dependencies*
  implements:
  - NMF.Expressions.INotifiable.Dependencies
  nameWithType.vb: ObservableGroup(Of TKey, TItem).Dependencies
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.ObservableGroup(Of TKey, TItem).Dependencies
- uid: NMF.Expressions.Linq.ObservableGroup`2.ExecutionMetaData
  commentId: P:NMF.Expressions.Linq.ObservableGroup`2.ExecutionMetaData
  id: ExecutionMetaData
  parent: NMF.Expressions.Linq.ObservableGroup`2
  langs:
  - csharp
  - vb
  name: ExecutionMetaData
  nameWithType: ObservableGroup<TKey, TItem>.ExecutionMetaData
  fullName: NMF.Expressions.Linq.ObservableGroup<TKey, TItem>.ExecutionMetaData
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableGroup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ExecutionMetaData
    path: src/Expressions/Expressions.Linq/Linq/ObservableGroup.cs
    startLine: 27
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: public ExecutionMetaData ExecutionMetaData { get; }
    parameters: []
    return:
      type: NMF.Expressions.ExecutionMetaData
    content.vb: Public ReadOnly Property ExecutionMetaData As ExecutionMetaData
  overload: NMF.Expressions.Linq.ObservableGroup`2.ExecutionMetaData*
  implements:
  - NMF.Expressions.INotifiable.ExecutionMetaData
  nameWithType.vb: ObservableGroup(Of TKey, TItem).ExecutionMetaData
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.ObservableGroup(Of TKey, TItem).ExecutionMetaData
- uid: NMF.Expressions.Linq.ObservableGroup`2.AsNotifiable
  commentId: M:NMF.Expressions.Linq.ObservableGroup`2.AsNotifiable
  id: AsNotifiable
  parent: NMF.Expressions.Linq.ObservableGroup`2
  langs:
  - csharp
  - vb
  name: AsNotifiable()
  nameWithType: ObservableGroup<TKey, TItem>.AsNotifiable()
  fullName: NMF.Expressions.Linq.ObservableGroup<TKey, TItem>.AsNotifiable()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableGroup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AsNotifiable
    path: src/Expressions/Expressions.Linq/Linq/ObservableGroup.cs
    startLine: 29
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: public INotifyEnumerable<TItem> AsNotifiable()
    return:
      type: NMF.Expressions.INotifyEnumerable{{TItem}}
    content.vb: Public Function AsNotifiable As INotifyEnumerable(Of TItem)
  overload: NMF.Expressions.Linq.ObservableGroup`2.AsNotifiable*
  implements:
  - NMF.Expressions.IEnumerableExpression{{TItem}}.AsNotifiable
  nameWithType.vb: ObservableGroup(Of TKey, TItem).AsNotifiable()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.Linq.ObservableGroup(Of TKey, TItem).AsNotifiable()
- uid: NMF.Expressions.Linq.ObservableGroup`2.NMF#Expressions#IEnumerableExpression#AsNotifiable
  commentId: M:NMF.Expressions.Linq.ObservableGroup`2.NMF#Expressions#IEnumerableExpression#AsNotifiable
  id: NMF#Expressions#IEnumerableExpression#AsNotifiable
  isEii: true
  parent: NMF.Expressions.Linq.ObservableGroup`2
  langs:
  - csharp
  - vb
  name: IEnumerableExpression.AsNotifiable()
  nameWithType: ObservableGroup<TKey, TItem>.IEnumerableExpression.AsNotifiable()
  fullName: NMF.Expressions.Linq.ObservableGroup<TKey, TItem>.NMF.Expressions.IEnumerableExpression.AsNotifiable()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableGroup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Expressions.IEnumerableExpression.AsNotifiable
    path: src/Expressions/Expressions.Linq/Linq/ObservableGroup.cs
    startLine: 34
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: INotifyEnumerable IEnumerableExpression.AsNotifiable()
    return:
      type: NMF.Expressions.INotifyEnumerable
    content.vb: Function NMF.Expressions.IEnumerableExpression.AsNotifiable As INotifyEnumerable Implements IEnumerableExpression.AsNotifiable
  overload: NMF.Expressions.Linq.ObservableGroup`2.NMF#Expressions#IEnumerableExpression#AsNotifiable*
  implements:
  - NMF.Expressions.IEnumerableExpression.AsNotifiable
  nameWithType.vb: ObservableGroup(Of TKey, TItem).NMF.Expressions.IEnumerableExpression.AsNotifiable()
  fullName.vb: NMF.Expressions.Linq.ObservableGroup(Of TKey, TItem).NMF.Expressions.IEnumerableExpression.AsNotifiable()
  name.vb: NMF.Expressions.IEnumerableExpression.AsNotifiable()
- uid: NMF.Expressions.Linq.ObservableGroup`2.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  commentId: M:NMF.Expressions.Linq.ObservableGroup`2.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  id: Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  parent: NMF.Expressions.Linq.ObservableGroup`2
  langs:
  - csharp
  - vb
  name: Notify(IList<INotificationResult>)
  nameWithType: ObservableGroup<TKey, TItem>.Notify(IList<INotificationResult>)
  fullName: NMF.Expressions.Linq.ObservableGroup<TKey, TItem>.Notify(System.Collections.Generic.IList<NMF.Expressions.INotificationResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableGroup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Notify
    path: src/Expressions/Expressions.Linq/Linq/ObservableGroup.cs
    startLine: 39
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: public INotificationResult Notify(IList<INotificationResult> sources)
    parameters:
    - id: sources
      type: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
    return:
      type: NMF.Expressions.INotificationResult
    content.vb: Public Function Notify(sources As IList(Of INotificationResult)) As INotificationResult
  overload: NMF.Expressions.Linq.ObservableGroup`2.Notify*
  implements:
  - NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  nameWithType.vb: ObservableGroup(Of TKey, TItem).Notify(IList(Of INotificationResult))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.Linq.ObservableGroup(Of TKey, TItem).Notify(System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
- uid: NMF.Expressions.Linq.ObservableGroup`2.Dispose
  commentId: M:NMF.Expressions.Linq.ObservableGroup`2.Dispose
  id: Dispose
  parent: NMF.Expressions.Linq.ObservableGroup`2
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ObservableGroup<TKey, TItem>.Dispose()
  fullName: NMF.Expressions.Linq.ObservableGroup<TKey, TItem>.Dispose()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ObservableGroup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Dispose
    path: src/Expressions/Expressions.Linq/Linq/ObservableGroup.cs
    startLine: 44
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: NMF.Expressions.Linq.ObservableGroup`2.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: ObservableGroup(Of TKey, TItem).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.Linq.ObservableGroup(Of TKey, TItem).Dispose()
references:
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{`1}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<TItem>
  nameWithType: ReadOnlyCollection<TItem>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>
  nameWithType.vb: ReadOnlyCollection(Of TItem)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem)
  name.vb: ReadOnlyCollection(Of TItem)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyObservableCollection{{TItem}}
  commentId: T:System.Collections.ObjectModel.ReadOnlyObservableCollection{`1}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyObservableCollection`1
  name: ReadOnlyObservableCollection<TItem>
  nameWithType: ReadOnlyObservableCollection<TItem>
  fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection<TItem>
  nameWithType.vb: ReadOnlyObservableCollection(Of TItem)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyObservableCollection(Of TItem)
  name.vb: ReadOnlyObservableCollection(Of TItem)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1
    name: ReadOnlyObservableCollection
    nameWithType: ReadOnlyObservableCollection
    fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1
    name: ReadOnlyObservableCollection
    nameWithType: ReadOnlyObservableCollection
    fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{{TItem}}
  commentId: T:System.Collections.Generic.IList{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<TItem>
  nameWithType: IList<TItem>
  fullName: System.Collections.Generic.IList<TItem>
  nameWithType.vb: IList(Of TItem)
  fullName.vb: System.Collections.Generic.IList(Of TItem)
  name.vb: IList(Of TItem)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{TItem}}
  commentId: T:System.Collections.Generic.ICollection{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TItem>
  nameWithType: ICollection<TItem>
  fullName: System.Collections.Generic.ICollection<TItem>
  nameWithType.vb: ICollection(Of TItem)
  fullName.vb: System.Collections.Generic.ICollection(Of TItem)
  name.vb: ICollection(Of TItem)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.Generic.IReadOnlyList{{TItem}}
  commentId: T:System.Collections.Generic.IReadOnlyList{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<TItem>
  nameWithType: IReadOnlyList<TItem>
  fullName: System.Collections.Generic.IReadOnlyList<TItem>
  nameWithType.vb: IReadOnlyList(Of TItem)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of TItem)
  name.vb: IReadOnlyList(Of TItem)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{{TItem}}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<TItem>
  nameWithType: IReadOnlyCollection<TItem>
  fullName: System.Collections.Generic.IReadOnlyCollection<TItem>
  nameWithType.vb: IReadOnlyCollection(Of TItem)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of TItem)
  name.vb: IReadOnlyCollection(Of TItem)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ComponentModel.INotifyPropertyChanged
  commentId: T:System.ComponentModel.INotifyPropertyChanged
  parent: System.ComponentModel
  isExternal: true
  name: INotifyPropertyChanged
  nameWithType: INotifyPropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged
- uid: NMF.Expressions.INotifyGrouping{{TKey},{TItem}}
  commentId: T:NMF.Expressions.INotifyGrouping{`0,`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyGrouping`2
  name: INotifyGrouping<TKey, TItem>
  nameWithType: INotifyGrouping<TKey, TItem>
  fullName: NMF.Expressions.INotifyGrouping<TKey, TItem>
  nameWithType.vb: INotifyGrouping(Of TKey, TItem)
  fullName.vb: NMF.Expressions.INotifyGrouping(Of TKey, TItem)
  name.vb: INotifyGrouping(Of TKey, TItem)
  spec.csharp:
  - uid: NMF.Expressions.INotifyGrouping`2
    name: INotifyGrouping
    nameWithType: INotifyGrouping
    fullName: NMF.Expressions.INotifyGrouping
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyGrouping`2
    name: INotifyGrouping
    nameWithType: INotifyGrouping
    fullName: NMF.Expressions.INotifyGrouping
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{{TItem}}
  commentId: T:NMF.Expressions.INotifyEnumerable{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<TItem>
  nameWithType: INotifyEnumerable<TItem>
  fullName: NMF.Expressions.INotifyEnumerable<TItem>
  nameWithType.vb: INotifyEnumerable(Of TItem)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of TItem)
  name.vb: INotifyEnumerable(Of TItem)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable
  commentId: T:NMF.Expressions.INotifyEnumerable
  parent: NMF.Expressions
  name: INotifyEnumerable
  nameWithType: INotifyEnumerable
  fullName: NMF.Expressions.INotifyEnumerable
- uid: System.Collections.Specialized.INotifyCollectionChanged
  commentId: T:System.Collections.Specialized.INotifyCollectionChanged
  parent: System.Collections.Specialized
  isExternal: true
  name: INotifyCollectionChanged
  nameWithType: INotifyCollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged
- uid: NMF.Expressions.INotifiable
  commentId: T:NMF.Expressions.INotifiable
  parent: NMF.Expressions
  name: INotifiable
  nameWithType: INotifiable
  fullName: NMF.Expressions.INotifiable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: NMF.Expressions.IGroupingExpression{{TKey},{TItem}}
  commentId: T:NMF.Expressions.IGroupingExpression{`0,`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.IGroupingExpression`2
  name: IGroupingExpression<TKey, TItem>
  nameWithType: IGroupingExpression<TKey, TItem>
  fullName: NMF.Expressions.IGroupingExpression<TKey, TItem>
  nameWithType.vb: IGroupingExpression(Of TKey, TItem)
  fullName.vb: NMF.Expressions.IGroupingExpression(Of TKey, TItem)
  name.vb: IGroupingExpression(Of TKey, TItem)
  spec.csharp:
  - uid: NMF.Expressions.IGroupingExpression`2
    name: IGroupingExpression
    nameWithType: IGroupingExpression
    fullName: NMF.Expressions.IGroupingExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IGroupingExpression`2
    name: IGroupingExpression
    nameWithType: IGroupingExpression
    fullName: NMF.Expressions.IGroupingExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IGrouping{{TKey},{TItem}}
  commentId: T:System.Linq.IGrouping{`0,`1}
  parent: System.Linq
  definition: System.Linq.IGrouping`2
  name: IGrouping<TKey, TItem>
  nameWithType: IGrouping<TKey, TItem>
  fullName: System.Linq.IGrouping<TKey, TItem>
  nameWithType.vb: IGrouping(Of TKey, TItem)
  fullName.vb: System.Linq.IGrouping(Of TKey, TItem)
  name.vb: IGrouping(Of TKey, TItem)
  spec.csharp:
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{{TItem}}
  commentId: T:NMF.Expressions.IEnumerableExpression{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<TItem>
  nameWithType: IEnumerableExpression<TItem>
  fullName: NMF.Expressions.IEnumerableExpression<TItem>
  nameWithType.vb: IEnumerableExpression(Of TItem)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of TItem)
  name.vb: IEnumerableExpression(Of TItem)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TItem}}
  commentId: T:System.Collections.Generic.IEnumerable{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TItem>
  nameWithType: IEnumerable<TItem>
  fullName: System.Collections.Generic.IEnumerable<TItem>
  nameWithType.vb: IEnumerable(Of TItem)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TItem)
  name.vb: IEnumerable(Of TItem)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression
  commentId: T:NMF.Expressions.IEnumerableExpression
  parent: NMF.Expressions
  name: IEnumerableExpression
  nameWithType: IEnumerableExpression
  fullName: NMF.Expressions.IEnumerableExpression
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.ObjectModel.ReadOnlyObservableCollection{{TItem}}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:System.Collections.ObjectModel.ReadOnlyObservableCollection{`1}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  parent: System.Collections.ObjectModel.ReadOnlyObservableCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  name: OnCollectionChanged(NotifyCollectionChangedEventArgs)
  nameWithType: ReadOnlyObservableCollection<TItem>.OnCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection<TItem>.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  nameWithType.vb: ReadOnlyObservableCollection(Of TItem).OnCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyObservableCollection(Of TItem).OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanged
    nameWithType: ReadOnlyObservableCollection<TItem>.OnCollectionChanged
    fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection<TItem>.OnCollectionChanged
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    nameWithType: NotifyCollectionChangedEventArgs
    fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanged
    nameWithType: ReadOnlyObservableCollection(Of TItem).OnCollectionChanged
    fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection(Of TItem).OnCollectionChanged
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    nameWithType: NotifyCollectionChangedEventArgs
    fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyObservableCollection{{TItem}}.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  commentId: M:System.Collections.ObjectModel.ReadOnlyObservableCollection{`1}.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Collections.ObjectModel.ReadOnlyObservableCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  name: OnPropertyChanged(PropertyChangedEventArgs)
  nameWithType: ReadOnlyObservableCollection<TItem>.OnPropertyChanged(PropertyChangedEventArgs)
  fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection<TItem>.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  nameWithType.vb: ReadOnlyObservableCollection(Of TItem).OnPropertyChanged(PropertyChangedEventArgs)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyObservableCollection(Of TItem).OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
    name: OnPropertyChanged
    nameWithType: ReadOnlyObservableCollection<TItem>.OnPropertyChanged
    fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection<TItem>.OnPropertyChanged
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.PropertyChangedEventArgs
    name: PropertyChangedEventArgs
    nameWithType: PropertyChangedEventArgs
    fullName: System.ComponentModel.PropertyChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
    name: OnPropertyChanged
    nameWithType: ReadOnlyObservableCollection(Of TItem).OnPropertyChanged
    fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection(Of TItem).OnPropertyChanged
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.PropertyChangedEventArgs
    name: PropertyChangedEventArgs
    nameWithType: PropertyChangedEventArgs
    fullName: System.ComponentModel.PropertyChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyObservableCollection{{TItem}}.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged
  commentId: E:System.Collections.ObjectModel.ReadOnlyObservableCollection{`1}.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged
  parent: System.Collections.ObjectModel.ReadOnlyObservableCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged
  name: INotifyCollectionChanged.CollectionChanged
  nameWithType: ReadOnlyObservableCollection<TItem>.INotifyCollectionChanged.CollectionChanged
  fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection<TItem>.System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  nameWithType.vb: ReadOnlyObservableCollection(Of TItem).System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  fullName.vb: System.Collections.ObjectModel.ReadOnlyObservableCollection(Of TItem).System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  name.vb: System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
- uid: System.Collections.ObjectModel.ReadOnlyObservableCollection{{TItem}}.CollectionChanged
  commentId: E:System.Collections.ObjectModel.ReadOnlyObservableCollection{`1}.CollectionChanged
  parent: System.Collections.ObjectModel.ReadOnlyObservableCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged
  name: CollectionChanged
  nameWithType: ReadOnlyObservableCollection<TItem>.CollectionChanged
  fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection<TItem>.CollectionChanged
  nameWithType.vb: ReadOnlyObservableCollection(Of TItem).CollectionChanged
  fullName.vb: System.Collections.ObjectModel.ReadOnlyObservableCollection(Of TItem).CollectionChanged
- uid: System.Collections.ObjectModel.ReadOnlyObservableCollection{{TItem}}.System#ComponentModel#INotifyPropertyChanged#PropertyChanged
  commentId: E:System.Collections.ObjectModel.ReadOnlyObservableCollection{`1}.System#ComponentModel#INotifyPropertyChanged#PropertyChanged
  parent: System.Collections.ObjectModel.ReadOnlyObservableCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged
  name: INotifyPropertyChanged.PropertyChanged
  nameWithType: ReadOnlyObservableCollection<TItem>.INotifyPropertyChanged.PropertyChanged
  fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection<TItem>.System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  nameWithType.vb: ReadOnlyObservableCollection(Of TItem).System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  fullName.vb: System.Collections.ObjectModel.ReadOnlyObservableCollection(Of TItem).System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  name.vb: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
- uid: System.Collections.ObjectModel.ReadOnlyObservableCollection{{TItem}}.PropertyChanged
  commentId: E:System.Collections.ObjectModel.ReadOnlyObservableCollection{`1}.PropertyChanged
  parent: System.Collections.ObjectModel.ReadOnlyObservableCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged
  name: PropertyChanged
  nameWithType: ReadOnlyObservableCollection<TItem>.PropertyChanged
  fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection<TItem>.PropertyChanged
  nameWithType.vb: ReadOnlyObservableCollection(Of TItem).PropertyChanged
  fullName.vb: System.Collections.ObjectModel.ReadOnlyObservableCollection(Of TItem).PropertyChanged
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.Contains({TItem})
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection{`1}.Contains(`1)
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)
  name: Contains(TItem)
  nameWithType: ReadOnlyCollection<TItem>.Contains(TItem)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.Contains(TItem)
  nameWithType.vb: ReadOnlyCollection(Of TItem).Contains(TItem)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).Contains(TItem)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)
    name: Contains
    nameWithType: ReadOnlyCollection<TItem>.Contains
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)
    name: Contains
    nameWithType: ReadOnlyCollection(Of TItem).Contains
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.CopyTo({TItem}[],System.Int32)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection{`1}.CopyTo(`1[],System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(TItem[], Int32)
  nameWithType: ReadOnlyCollection<TItem>.CopyTo(TItem[], Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.CopyTo(TItem[], System.Int32)
  nameWithType.vb: ReadOnlyCollection(Of TItem).CopyTo(TItem(), Int32)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).CopyTo(TItem(), System.Int32)
  name.vb: CopyTo(TItem(), Int32)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ReadOnlyCollection<TItem>.CopyTo
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ReadOnlyCollection(Of TItem).CopyTo
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.GetEnumerator
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection{`1}.GetEnumerator
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: ReadOnlyCollection<TItem>.GetEnumerator()
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.GetEnumerator()
  nameWithType.vb: ReadOnlyCollection(Of TItem).GetEnumerator()
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator
    name: GetEnumerator
    nameWithType: ReadOnlyCollection<TItem>.GetEnumerator
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator
    name: GetEnumerator
    nameWithType: ReadOnlyCollection(Of TItem).GetEnumerator
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.IndexOf({TItem})
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection{`1}.IndexOf(`1)
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)
  name: IndexOf(TItem)
  nameWithType: ReadOnlyCollection<TItem>.IndexOf(TItem)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.IndexOf(TItem)
  nameWithType.vb: ReadOnlyCollection(Of TItem).IndexOf(TItem)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).IndexOf(TItem)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)
    name: IndexOf
    nameWithType: ReadOnlyCollection<TItem>.IndexOf
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)
    name: IndexOf
    nameWithType: ReadOnlyCollection(Of TItem).IndexOf
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#Generic#IList{T}#get_Item(System.Int32)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection{`1}.System#Collections#Generic#IList{T}#get_Item(System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#get_Item(System.Int32)
  name: IList<TItem>.get_Item(Int32)
  nameWithType: ReadOnlyCollection<TItem>.IList<TItem>.get_Item(Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.Generic.IList<TItem>.get_Item(System.Int32)
  nameWithType.vb: ReadOnlyCollection(Of TItem).System.Collections.Generic.IList<T>.get_Item(Int32)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.Generic.IList<T>.get_Item(System.Int32)
  name.vb: System.Collections.Generic.IList<T>.get_Item(Int32)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#get_Item(System.Int32)
    name: IList<TItem>.get_Item
    nameWithType: ReadOnlyCollection<TItem>.IList<TItem>.get_Item
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.Generic.IList<TItem>.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#get_Item(System.Int32)
    name: System.Collections.Generic.IList<T>.get_Item
    nameWithType: ReadOnlyCollection(Of TItem).System.Collections.Generic.IList<T>.get_Item
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.Generic.IList<T>.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#Generic#IList{T}#set_Item(System.Int32,{TItem})
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection{`1}.System#Collections#Generic#IList{T}#set_Item(System.Int32,`1)
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#set_Item(System.Int32,`0)
  name: IList<TItem>.set_Item(Int32, TItem)
  nameWithType: ReadOnlyCollection<TItem>.IList<TItem>.set_Item(Int32, TItem)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.Generic.IList<TItem>.set_Item(System.Int32, TItem)
  nameWithType.vb: ReadOnlyCollection(Of TItem).System.Collections.Generic.IList<T>.set_Item(Int32, TItem)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.Generic.IList<T>.set_Item(System.Int32, TItem)
  name.vb: System.Collections.Generic.IList<T>.set_Item(Int32, TItem)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#set_Item(System.Int32,`0)
    name: IList<TItem>.set_Item
    nameWithType: ReadOnlyCollection<TItem>.IList<TItem>.set_Item
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.Generic.IList<TItem>.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#set_Item(System.Int32,`0)
    name: System.Collections.Generic.IList<T>.set_Item
    nameWithType: ReadOnlyCollection(Of TItem).System.Collections.Generic.IList<T>.set_Item
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.Generic.IList<T>.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#Generic#ICollection{T}#Add({TItem})
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection{`1}.System#Collections#Generic#ICollection{T}#Add(`1)
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)
  name: ICollection<TItem>.Add(TItem)
  nameWithType: ReadOnlyCollection<TItem>.ICollection<TItem>.Add(TItem)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.Generic.ICollection<TItem>.Add(TItem)
  nameWithType.vb: ReadOnlyCollection(Of TItem).System.Collections.Generic.ICollection<T>.Add(TItem)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.Generic.ICollection<T>.Add(TItem)
  name.vb: System.Collections.Generic.ICollection<T>.Add(TItem)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)
    name: ICollection<TItem>.Add
    nameWithType: ReadOnlyCollection<TItem>.ICollection<TItem>.Add
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.Generic.ICollection<TItem>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)
    name: System.Collections.Generic.ICollection<T>.Add
    nameWithType: ReadOnlyCollection(Of TItem).System.Collections.Generic.ICollection<T>.Add
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#Generic#ICollection{T}#Clear
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection{`1}.System#Collections#Generic#ICollection{T}#Clear
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear
  name: ICollection<TItem>.Clear()
  nameWithType: ReadOnlyCollection<TItem>.ICollection<TItem>.Clear()
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.Generic.ICollection<TItem>.Clear()
  nameWithType.vb: ReadOnlyCollection(Of TItem).System.Collections.Generic.ICollection<T>.Clear()
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.Generic.ICollection<T>.Clear()
  name.vb: System.Collections.Generic.ICollection<T>.Clear()
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear
    name: ICollection<TItem>.Clear
    nameWithType: ReadOnlyCollection<TItem>.ICollection<TItem>.Clear
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.Generic.ICollection<TItem>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear
    name: System.Collections.Generic.ICollection<T>.Clear
    nameWithType: ReadOnlyCollection(Of TItem).System.Collections.Generic.ICollection<T>.Clear
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#Generic#IList{T}#Insert(System.Int32,{TItem})
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection{`1}.System#Collections#Generic#IList{T}#Insert(System.Int32,`1)
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  name: IList<TItem>.Insert(Int32, TItem)
  nameWithType: ReadOnlyCollection<TItem>.IList<TItem>.Insert(Int32, TItem)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.Generic.IList<TItem>.Insert(System.Int32, TItem)
  nameWithType.vb: ReadOnlyCollection(Of TItem).System.Collections.Generic.IList<T>.Insert(Int32, TItem)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.Generic.IList<T>.Insert(System.Int32, TItem)
  name.vb: System.Collections.Generic.IList<T>.Insert(Int32, TItem)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
    name: IList<TItem>.Insert
    nameWithType: ReadOnlyCollection<TItem>.IList<TItem>.Insert
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.Generic.IList<TItem>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
    name: System.Collections.Generic.IList<T>.Insert
    nameWithType: ReadOnlyCollection(Of TItem).System.Collections.Generic.IList<T>.Insert
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#Generic#ICollection{T}#Remove({TItem})
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection{`1}.System#Collections#Generic#ICollection{T}#Remove(`1)
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  name: ICollection<TItem>.Remove(TItem)
  nameWithType: ReadOnlyCollection<TItem>.ICollection<TItem>.Remove(TItem)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.Generic.ICollection<TItem>.Remove(TItem)
  nameWithType.vb: ReadOnlyCollection(Of TItem).System.Collections.Generic.ICollection<T>.Remove(TItem)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.Generic.ICollection<T>.Remove(TItem)
  name.vb: System.Collections.Generic.ICollection<T>.Remove(TItem)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)
    name: ICollection<TItem>.Remove
    nameWithType: ReadOnlyCollection<TItem>.ICollection<TItem>.Remove
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.Generic.ICollection<TItem>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)
    name: System.Collections.Generic.ICollection<T>.Remove
    nameWithType: ReadOnlyCollection(Of TItem).System.Collections.Generic.ICollection<T>.Remove
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection{`1}.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  name: IList<TItem>.RemoveAt(Int32)
  nameWithType: ReadOnlyCollection<TItem>.IList<TItem>.RemoveAt(Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.Generic.IList<TItem>.RemoveAt(System.Int32)
  nameWithType.vb: ReadOnlyCollection(Of TItem).System.Collections.Generic.IList<T>.RemoveAt(Int32)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  name.vb: System.Collections.Generic.IList<T>.RemoveAt(Int32)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
    name: IList<TItem>.RemoveAt
    nameWithType: ReadOnlyCollection<TItem>.IList<TItem>.RemoveAt
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.Generic.IList<TItem>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
    name: System.Collections.Generic.IList<T>.RemoveAt
    nameWithType: ReadOnlyCollection(Of TItem).System.Collections.Generic.IList<T>.RemoveAt
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection{`1}.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator()
  nameWithType: ReadOnlyCollection<TItem>.IEnumerable.GetEnumerator()
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: ReadOnlyCollection(Of TItem).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: ReadOnlyCollection<TItem>.IEnumerable.GetEnumerator
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: ReadOnlyCollection(Of TItem).System.Collections.IEnumerable.GetEnumerator
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection{`1}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: ReadOnlyCollection<TItem>.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: ReadOnlyCollection(Of TItem).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: ReadOnlyCollection<TItem>.ICollection.CopyTo
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: ReadOnlyCollection(Of TItem).System.Collections.ICollection.CopyTo
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#IList#get_Item(System.Int32)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection{`1}.System#Collections#IList#get_Item(System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#get_Item(System.Int32)
  name: IList.get_Item(Int32)
  nameWithType: ReadOnlyCollection<TItem>.IList.get_Item(Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.IList.get_Item(System.Int32)
  nameWithType.vb: ReadOnlyCollection(Of TItem).System.Collections.IList.get_Item(Int32)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.IList.get_Item(System.Int32)
  name.vb: System.Collections.IList.get_Item(Int32)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#get_Item(System.Int32)
    name: IList.get_Item
    nameWithType: ReadOnlyCollection<TItem>.IList.get_Item
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#get_Item(System.Int32)
    name: System.Collections.IList.get_Item
    nameWithType: ReadOnlyCollection(Of TItem).System.Collections.IList.get_Item
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#IList#set_Item(System.Int32,System.Object)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection{`1}.System#Collections#IList#set_Item(System.Int32,System.Object)
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#set_Item(System.Int32,System.Object)
  name: IList.set_Item(Int32, Object)
  nameWithType: ReadOnlyCollection<TItem>.IList.set_Item(Int32, Object)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.IList.set_Item(System.Int32, System.Object)
  nameWithType.vb: ReadOnlyCollection(Of TItem).System.Collections.IList.set_Item(Int32, Object)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.IList.set_Item(System.Int32, System.Object)
  name.vb: System.Collections.IList.set_Item(Int32, Object)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: IList.set_Item
    nameWithType: ReadOnlyCollection<TItem>.IList.set_Item
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: System.Collections.IList.set_Item
    nameWithType: ReadOnlyCollection(Of TItem).System.Collections.IList.set_Item
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#IList#Add(System.Object)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection{`1}.System#Collections#IList#Add(System.Object)
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)
  name: IList.Add(Object)
  nameWithType: ReadOnlyCollection<TItem>.IList.Add(Object)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.IList.Add(System.Object)
  nameWithType.vb: ReadOnlyCollection(Of TItem).System.Collections.IList.Add(Object)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)
    name: IList.Add
    nameWithType: ReadOnlyCollection<TItem>.IList.Add
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)
    name: System.Collections.IList.Add
    nameWithType: ReadOnlyCollection(Of TItem).System.Collections.IList.Add
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#IList#Clear
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection{`1}.System#Collections#IList#Clear
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear
  name: IList.Clear()
  nameWithType: ReadOnlyCollection<TItem>.IList.Clear()
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.IList.Clear()
  nameWithType.vb: ReadOnlyCollection(Of TItem).System.Collections.IList.Clear()
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.IList.Clear()
  name.vb: System.Collections.IList.Clear()
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear
    name: IList.Clear
    nameWithType: ReadOnlyCollection<TItem>.IList.Clear
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.IList.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear
    name: System.Collections.IList.Clear
    nameWithType: ReadOnlyCollection(Of TItem).System.Collections.IList.Clear
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.IList.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection{`1}.System#Collections#IList#Contains(System.Object)
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)
  name: IList.Contains(Object)
  nameWithType: ReadOnlyCollection<TItem>.IList.Contains(Object)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.IList.Contains(System.Object)
  nameWithType.vb: ReadOnlyCollection(Of TItem).System.Collections.IList.Contains(Object)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)
    name: IList.Contains
    nameWithType: ReadOnlyCollection<TItem>.IList.Contains
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)
    name: System.Collections.IList.Contains
    nameWithType: ReadOnlyCollection(Of TItem).System.Collections.IList.Contains
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection{`1}.System#Collections#IList#IndexOf(System.Object)
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)
  name: IList.IndexOf(Object)
  nameWithType: ReadOnlyCollection<TItem>.IList.IndexOf(Object)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: ReadOnlyCollection(Of TItem).System.Collections.IList.IndexOf(Object)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)
    name: IList.IndexOf
    nameWithType: ReadOnlyCollection<TItem>.IList.IndexOf
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)
    name: System.Collections.IList.IndexOf
    nameWithType: ReadOnlyCollection(Of TItem).System.Collections.IList.IndexOf
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection{`1}.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  name: IList.Insert(Int32, Object)
  nameWithType: ReadOnlyCollection<TItem>.IList.Insert(Int32, Object)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.IList.Insert(System.Int32, System.Object)
  nameWithType.vb: ReadOnlyCollection(Of TItem).System.Collections.IList.Insert(Int32, Object)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.IList.Insert(System.Int32, System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: IList.Insert
    nameWithType: ReadOnlyCollection<TItem>.IList.Insert
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: System.Collections.IList.Insert
    nameWithType: ReadOnlyCollection(Of TItem).System.Collections.IList.Insert
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection{`1}.System#Collections#IList#Remove(System.Object)
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)
  name: IList.Remove(Object)
  nameWithType: ReadOnlyCollection<TItem>.IList.Remove(Object)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.IList.Remove(System.Object)
  nameWithType.vb: ReadOnlyCollection(Of TItem).System.Collections.IList.Remove(Object)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)
    name: IList.Remove
    nameWithType: ReadOnlyCollection<TItem>.IList.Remove
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)
    name: System.Collections.IList.Remove
    nameWithType: ReadOnlyCollection(Of TItem).System.Collections.IList.Remove
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#IList#RemoveAt(System.Int32)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection{`1}.System#Collections#IList#RemoveAt(System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)
  name: IList.RemoveAt(Int32)
  nameWithType: ReadOnlyCollection<TItem>.IList.RemoveAt(Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.IList.RemoveAt(System.Int32)
  nameWithType.vb: ReadOnlyCollection(Of TItem).System.Collections.IList.RemoveAt(Int32)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.IList.RemoveAt(System.Int32)
  name.vb: System.Collections.IList.RemoveAt(Int32)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)
    name: IList.RemoveAt
    nameWithType: ReadOnlyCollection<TItem>.IList.RemoveAt
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.IList.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)
    name: System.Collections.IList.RemoveAt
    nameWithType: ReadOnlyCollection(Of TItem).System.Collections.IList.RemoveAt
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.IList.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.Count
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection{`1}.Count
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.Count
  name: Count
  nameWithType: ReadOnlyCollection<TItem>.Count
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.Count
  nameWithType.vb: ReadOnlyCollection(Of TItem).Count
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).Count
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.Item(System.Int32)
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection{`1}.Item(System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: ReadOnlyCollection<TItem>.Item[Int32]
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.Item[System.Int32]
  nameWithType.vb: ReadOnlyCollection(Of TItem).Item(Int32)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)
    name: Item
    nameWithType: ReadOnlyCollection<TItem>.Item
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)
    name: Item
    nameWithType: ReadOnlyCollection(Of TItem).Item
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.Items
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection{`1}.Items
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.Items
  name: Items
  nameWithType: ReadOnlyCollection<TItem>.Items
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.Items
  nameWithType.vb: ReadOnlyCollection(Of TItem).Items
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).Items
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection{`1}.System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  name: ICollection<TItem>.IsReadOnly
  nameWithType: ReadOnlyCollection<TItem>.ICollection<TItem>.IsReadOnly
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.Generic.ICollection<TItem>.IsReadOnly
  nameWithType.vb: ReadOnlyCollection(Of TItem).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#Generic#IList{T}#Item(System.Int32)
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection{`1}.System#Collections#Generic#IList{T}#Item(System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  name: IList<TItem>.Item[Int32]
  nameWithType: ReadOnlyCollection<TItem>.IList<TItem>.Item[Int32]
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.Generic.IList<TItem>.Item[System.Int32]
  nameWithType.vb: ReadOnlyCollection(Of TItem).System.Collections.Generic.IList<T>.Item(Int32)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.Generic.IList<T>.Item(System.Int32)
  name.vb: System.Collections.Generic.IList<T>.Item(Int32)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)
    name: IList<TItem>.Item
    nameWithType: ReadOnlyCollection<TItem>.IList<TItem>.Item
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.Generic.IList<TItem>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)
    name: System.Collections.Generic.IList<T>.Item
    nameWithType: ReadOnlyCollection(Of TItem).System.Collections.Generic.IList<T>.Item
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection{`1}.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized
  name: ICollection.IsSynchronized
  nameWithType: ReadOnlyCollection<TItem>.ICollection.IsSynchronized
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: ReadOnlyCollection(Of TItem).System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection{`1}.System#Collections#ICollection#SyncRoot
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot
  name: ICollection.SyncRoot
  nameWithType: ReadOnlyCollection<TItem>.ICollection.SyncRoot
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: ReadOnlyCollection(Of TItem).System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#IList#IsFixedSize
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection{`1}.System#Collections#IList#IsFixedSize
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize
  name: IList.IsFixedSize
  nameWithType: ReadOnlyCollection<TItem>.IList.IsFixedSize
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.IList.IsFixedSize
  nameWithType.vb: ReadOnlyCollection(Of TItem).System.Collections.IList.IsFixedSize
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#IList#IsReadOnly
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection{`1}.System#Collections#IList#IsReadOnly
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly
  name: IList.IsReadOnly
  nameWithType: ReadOnlyCollection<TItem>.IList.IsReadOnly
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.IList.IsReadOnly
  nameWithType.vb: ReadOnlyCollection(Of TItem).System.Collections.IList.IsReadOnly
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection{`1}.System#Collections#IList#Item(System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyCollection{{TItem}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)
  name: IList.Item[Int32]
  nameWithType: ReadOnlyCollection<TItem>.IList.Item[Int32]
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.IList.Item[System.Int32]
  nameWithType.vb: ReadOnlyCollection(Of TItem).System.Collections.IList.Item(Int32)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)
    name: IList.Item
    nameWithType: ReadOnlyCollection<TItem>.IList.Item
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<TItem>.System.Collections.IList.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)
    name: System.Collections.IList.Item
    nameWithType: ReadOnlyCollection(Of TItem).System.Collections.IList.Item
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of TItem).System.Collections.IList.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  commentId: M:NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.LookupExtensions
  definition: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: ToLookup<TItem, TKey>(Expression<Func<TItem, TKey>>)
  nameWithType: LookupExtensions.ToLookup<TItem, TKey>(Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TItem, TKey>(System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: LookupExtensions.ToLookup(Of TItem, TKey)(Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TItem, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: ToLookup(Of TItem, TKey)(Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup<TItem, TKey>
    nameWithType: LookupExtensions.ToLookup<TItem, TKey>
    fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup(Of TItem, TKey)
    nameWithType: LookupExtensions.ToLookup(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  commentId: M:NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.LookupExtensions
  definition: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: ToLookup<TItem, TKey>(Expression<Func<TItem, TKey>>)
  nameWithType: LookupExtensions.ToLookup<TItem, TKey>(Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TItem, TKey>(System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: LookupExtensions.ToLookup(Of TItem, TKey)(Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TItem, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: ToLookup(Of TItem, TKey)(Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup<TItem, TKey>
    nameWithType: LookupExtensions.ToLookup<TItem, TKey>
    fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup(Of TItem, TKey)
    nameWithType: LookupExtensions.ToLookup(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.All``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.All``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.All``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: All<TItem>(Expression<Func<TItem, Boolean>>)
  nameWithType: ExpressionExtensions.All<TItem>(Expression<Func<TItem, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.All<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Boolean>>)
  nameWithType.vb: ExpressionExtensions.All(Of TItem)(Expression(Of Func(Of TItem, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.All(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Boolean)))
  name.vb: All(Of TItem)(Expression(Of Func(Of TItem, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.All``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: All<TItem>
    nameWithType: ExpressionExtensions.All<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.All<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.All``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: All(Of TItem)
    nameWithType: ExpressionExtensions.All(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.All(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Any``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0})
  name: Any<TElement>()
  nameWithType: ExpressionExtensions.Any<TElement>()
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Any<TElement>()
  nameWithType.vb: ExpressionExtensions.Any(Of TElement)()
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Any(Of TElement)()
  name.vb: Any(Of TElement)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1
    name: Any<TElement>
    nameWithType: ExpressionExtensions.Any<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Any<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1
    name: Any(Of TElement)
    nameWithType: ExpressionExtensions.Any(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Any(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Any``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Any<TItem>(Expression<Func<TItem, Boolean>>)
  nameWithType: ExpressionExtensions.Any<TItem>(Expression<Func<TItem, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Any<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Boolean>>)
  nameWithType.vb: ExpressionExtensions.Any(Of TItem)(Expression(Of Func(Of TItem, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Any(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Boolean)))
  name.vb: Any(Of TItem)(Expression(Of Func(Of TItem, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Any<TItem>
    nameWithType: ExpressionExtensions.Any<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Any<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Any(Of TItem)
    nameWithType: ExpressionExtensions.Any(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Any(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Int32}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  name: Average<TItem>(Expression<Func<TItem, Int32>>)
  nameWithType: ExpressionExtensions.Average<TItem>(Expression<Func<TItem, Int32>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Int32>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TItem)(Expression(Of Func(Of TItem, Int32)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Int32)))
  name.vb: Average(Of TItem)(Expression(Of Func(Of TItem, Int32)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Average<TItem>
    nameWithType: ExpressionExtensions.Average<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Average(Of TItem)
    nameWithType: ExpressionExtensions.Average(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Int64}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  name: Average<TItem>(Expression<Func<TItem, Int64>>)
  nameWithType: ExpressionExtensions.Average<TItem>(Expression<Func<TItem, Int64>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Int64>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TItem)(Expression(Of Func(Of TItem, Int64)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Int64)))
  name.vb: Average(Of TItem)(Expression(Of Func(Of TItem, Int64)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Average<TItem>
    nameWithType: ExpressionExtensions.Average<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Average(Of TItem)
    nameWithType: ExpressionExtensions.Average(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Single}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  name: Average<TItem>(Expression<Func<TItem, Single>>)
  nameWithType: ExpressionExtensions.Average<TItem>(Expression<Func<TItem, Single>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Single>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TItem)(Expression(Of Func(Of TItem, Single)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Single)))
  name.vb: Average(Of TItem)(Expression(Of Func(Of TItem, Single)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Average<TItem>
    nameWithType: ExpressionExtensions.Average<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Average(Of TItem)
    nameWithType: ExpressionExtensions.Average(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Double}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  name: Average<TItem>(Expression<Func<TItem, Double>>)
  nameWithType: ExpressionExtensions.Average<TItem>(Expression<Func<TItem, Double>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Double>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TItem)(Expression(Of Func(Of TItem, Double)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Double)))
  name.vb: Average(Of TItem)(Expression(Of Func(Of TItem, Double)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Average<TItem>
    nameWithType: ExpressionExtensions.Average<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Average(Of TItem)
    nameWithType: ExpressionExtensions.Average(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  name: Average<TItem>(Expression<Func<TItem, Decimal>>)
  nameWithType: ExpressionExtensions.Average<TItem>(Expression<Func<TItem, Decimal>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Decimal>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TItem)(Expression(Of Func(Of TItem, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Decimal)))
  name.vb: Average(Of TItem)(Expression(Of Func(Of TItem, Decimal)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Average<TItem>
    nameWithType: ExpressionExtensions.Average<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Average(Of TItem)
    nameWithType: ExpressionExtensions.Average(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  name: Average<TItem>(Expression<Func<TItem, Nullable<Int32>>>)
  nameWithType: ExpressionExtensions.Average<TItem>(Expression<Func<TItem, Nullable<Int32>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Nullable<System.Int32>>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Int32))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Nullable(Of System.Int32))))
  name.vb: Average(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Int32))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Average<TItem>
    nameWithType: ExpressionExtensions.Average<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Average(Of TItem)
    nameWithType: ExpressionExtensions.Average(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  name: Average<TItem>(Expression<Func<TItem, Nullable<Int64>>>)
  nameWithType: ExpressionExtensions.Average<TItem>(Expression<Func<TItem, Nullable<Int64>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Nullable<System.Int64>>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Int64))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Nullable(Of System.Int64))))
  name.vb: Average(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Int64))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Average<TItem>
    nameWithType: ExpressionExtensions.Average<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Average(Of TItem)
    nameWithType: ExpressionExtensions.Average(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  name: Average<TItem>(Expression<Func<TItem, Nullable<Single>>>)
  nameWithType: ExpressionExtensions.Average<TItem>(Expression<Func<TItem, Nullable<Single>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Nullable<System.Single>>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Single))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Nullable(Of System.Single))))
  name.vb: Average(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Single))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Average<TItem>
    nameWithType: ExpressionExtensions.Average<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Average(Of TItem)
    nameWithType: ExpressionExtensions.Average(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  name: Average<TItem>(Expression<Func<TItem, Nullable<Double>>>)
  nameWithType: ExpressionExtensions.Average<TItem>(Expression<Func<TItem, Nullable<Double>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Nullable<System.Double>>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Double))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Nullable(Of System.Double))))
  name.vb: Average(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Double))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Average<TItem>
    nameWithType: ExpressionExtensions.Average<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Average(Of TItem)
    nameWithType: ExpressionExtensions.Average(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  name: Average<TItem>(Expression<Func<TItem, Nullable<Decimal>>>)
  nameWithType: ExpressionExtensions.Average<TItem>(Expression<Func<TItem, Nullable<Decimal>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Nullable<System.Decimal>>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Decimal))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Nullable(Of System.Decimal))))
  name.vb: Average(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Decimal))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Average<TItem>
    nameWithType: ExpressionExtensions.Average<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Average(Of TItem)
    nameWithType: ExpressionExtensions.Average(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression.NMF.Expressions.Linq.ExpressionExtensions.Cast``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
  name: Cast<TResult>()
  nameWithType: ExpressionExtensions.Cast<TResult>()
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Cast<TResult>()
  nameWithType.vb: ExpressionExtensions.Cast(Of TResult)()
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Cast(Of TResult)()
  name.vb: Cast(Of TResult)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Cast``1
    name: Cast<TResult>
    nameWithType: ExpressionExtensions.Cast<TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Cast<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Cast``1
    name: Cast(Of TResult)
    nameWithType: ExpressionExtensions.Cast(Of TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Cast(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Concat``1(System.Collections.Generic.IEnumerable{{TItem}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Concat``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Concat``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  name: Concat<TItem>(IEnumerable<TItem>)
  nameWithType: ExpressionExtensions.Concat<TItem>(IEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Concat<TItem>(System.Collections.Generic.IEnumerable<TItem>)
  nameWithType.vb: ExpressionExtensions.Concat(Of TItem)(IEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Concat(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem))
  name.vb: Concat(Of TItem)(IEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0})
    name: Concat<TItem>
    nameWithType: ExpressionExtensions.Concat<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Concat<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0})
    name: Concat(Of TItem)
    nameWithType: ExpressionExtensions.Concat(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Concat(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Contains``1({TItem})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0)
  name: Contains<TItem>(TItem)
  nameWithType: ExpressionExtensions.Contains<TItem>(TItem)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains<TItem>(TItem)
  nameWithType.vb: ExpressionExtensions.Contains(Of TItem)(TItem)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Contains(Of TItem)(TItem)
  name.vb: Contains(Of TItem)(TItem)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(``0)
    name: Contains<TItem>
    nameWithType: ExpressionExtensions.Contains<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(``0)
    name: Contains(Of TItem)
    nameWithType: ExpressionExtensions.Contains(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Contains``1({TItem},System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  name: Contains<TItem>(TItem, IEqualityComparer<TItem>)
  nameWithType: ExpressionExtensions.Contains<TItem>(TItem, IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains<TItem>(TItem, System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ExpressionExtensions.Contains(Of TItem)(TItem, IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Contains(Of TItem)(TItem, System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: Contains(Of TItem)(TItem, IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(``0,System.Collections.Generic.IEqualityComparer{``0})
    name: Contains<TItem>
    nameWithType: ExpressionExtensions.Contains<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(``0,System.Collections.Generic.IEqualityComparer{``0})
    name: Contains(Of TItem)
    nameWithType: ExpressionExtensions.Contains(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Count``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0})
  name: Count<TElement>()
  nameWithType: ExpressionExtensions.Count<TElement>()
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Count<TElement>()
  nameWithType.vb: ExpressionExtensions.Count(Of TElement)()
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Count(Of TElement)()
  name.vb: Count(Of TElement)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1
    name: Count<TElement>
    nameWithType: ExpressionExtensions.Count<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Count<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1
    name: Count(Of TElement)
    nameWithType: ExpressionExtensions.Count(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Count(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Count``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Count<TItem>(Expression<Func<TItem, Boolean>>)
  nameWithType: ExpressionExtensions.Count<TItem>(Expression<Func<TItem, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Count<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Boolean>>)
  nameWithType.vb: ExpressionExtensions.Count(Of TItem)(Expression(Of Func(Of TItem, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Count(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Boolean)))
  name.vb: Count(Of TItem)(Expression(Of Func(Of TItem, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Count<TItem>
    nameWithType: ExpressionExtensions.Count<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Count<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Count(Of TItem)
    nameWithType: ExpressionExtensions.Count(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Count(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Distinct``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0})
  name: Distinct<TElement>()
  nameWithType: ExpressionExtensions.Distinct<TElement>()
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct<TElement>()
  nameWithType.vb: ExpressionExtensions.Distinct(Of TElement)()
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Distinct(Of TElement)()
  name.vb: Distinct(Of TElement)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1
    name: Distinct<TElement>
    nameWithType: ExpressionExtensions.Distinct<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1
    name: Distinct(Of TElement)
    nameWithType: ExpressionExtensions.Distinct(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Distinct<TItem>(IEqualityComparer<TItem>)
  nameWithType: ExpressionExtensions.Distinct<TItem>(IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct<TItem>(System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ExpressionExtensions.Distinct(Of TItem)(IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Distinct(Of TItem)(System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: Distinct(Of TItem)(IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(System.Collections.Generic.IEqualityComparer{``0})
    name: Distinct<TItem>
    nameWithType: ExpressionExtensions.Distinct<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(System.Collections.Generic.IEqualityComparer{``0})
    name: Distinct(Of TItem)
    nameWithType: ExpressionExtensions.Distinct(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Except``1(System.Collections.Generic.IEnumerable{{TItem}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  name: Except<TItem>(IEnumerable<TItem>)
  nameWithType: ExpressionExtensions.Except<TItem>(IEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Except<TItem>(System.Collections.Generic.IEnumerable<TItem>)
  nameWithType.vb: ExpressionExtensions.Except(Of TItem)(IEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Except(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem))
  name.vb: Except(Of TItem)(IEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(System.Collections.Generic.IEnumerable{``0})
    name: Except<TItem>
    nameWithType: ExpressionExtensions.Except<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Except<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(System.Collections.Generic.IEnumerable{``0})
    name: Except(Of TItem)
    nameWithType: ExpressionExtensions.Except(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Except(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Except``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Except<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  nameWithType: ExpressionExtensions.Except<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Except<TItem>(System.Collections.Generic.IEnumerable<TItem>, System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ExpressionExtensions.Except(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Except(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem), System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: Except(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Except<TItem>
    nameWithType: ExpressionExtensions.Except<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Except<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Except(Of TItem)
    nameWithType: ExpressionExtensions.Except(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Except(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  name: FirstOrDefault<TElement>()
  nameWithType: ExpressionExtensions.FirstOrDefault<TElement>()
  fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault<TElement>()
  nameWithType.vb: ExpressionExtensions.FirstOrDefault(Of TElement)()
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault(Of TElement)()
  name.vb: FirstOrDefault(Of TElement)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1
    name: FirstOrDefault<TElement>
    nameWithType: ExpressionExtensions.FirstOrDefault<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1
    name: FirstOrDefault(Of TElement)
    nameWithType: ExpressionExtensions.FirstOrDefault(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: FirstOrDefault<TItem>(Expression<Func<TItem, Boolean>>)
  nameWithType: ExpressionExtensions.FirstOrDefault<TItem>(Expression<Func<TItem, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Boolean>>)
  nameWithType.vb: ExpressionExtensions.FirstOrDefault(Of TItem)(Expression(Of Func(Of TItem, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Boolean)))
  name.vb: FirstOrDefault(Of TItem)(Expression(Of Func(Of TItem, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: FirstOrDefault<TItem>
    nameWithType: ExpressionExtensions.FirstOrDefault<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: FirstOrDefault(Of TItem)
    nameWithType: ExpressionExtensions.FirstOrDefault(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: GroupBy<TItem, TKey>(Expression<Func<TItem, TKey>>)
  nameWithType: ExpressionExtensions.GroupBy<TItem, TKey>(Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TItem, TKey>(System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ExpressionExtensions.GroupBy(Of TItem, TKey)(Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TItem, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: GroupBy(Of TItem, TKey)(Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: GroupBy<TItem, TKey>
    nameWithType: ExpressionExtensions.GroupBy<TItem, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: GroupBy(Of TItem, TKey)
    nameWithType: ExpressionExtensions.GroupBy(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  name: GroupBy<TItem, TKey>(Expression<Func<TItem, TKey>>, IEqualityComparer<TKey>)
  nameWithType: ExpressionExtensions.GroupBy<TItem, TKey>(Expression<Func<TItem, TKey>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TItem, TKey>(System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.GroupBy(Of TItem, TKey)(Expression(Of Func(Of TItem, TKey)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TItem, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TItem, TKey)(Expression(Of Func(Of TItem, TKey)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy<TItem, TKey>
    nameWithType: ExpressionExtensions.GroupBy<TItem, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy(Of TItem, TKey)
    nameWithType: ExpressionExtensions.GroupBy(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TItem}},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  name: GroupBy<TItem, TKey, TResult>(Expression<Func<TItem, TKey>>, Expression<Func<TKey, IEnumerable<TItem>, TResult>>)
  nameWithType: ExpressionExtensions.GroupBy<TItem, TKey, TResult>(Expression<Func<TItem, TKey>>, Expression<Func<TKey, IEnumerable<TItem>, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TItem, TKey, TResult>(System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TItem>, TResult>>)
  nameWithType.vb: ExpressionExtensions.GroupBy(Of TItem, TKey, TResult)(Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TItem), TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TItem, TKey, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TItem), TResult)))
  name.vb: GroupBy(Of TItem, TKey, TResult)(Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TItem), TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
    name: GroupBy<TItem, TKey, TResult>
    nameWithType: ExpressionExtensions.GroupBy<TItem, TKey, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TItem, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
    name: GroupBy(Of TItem, TKey, TResult)
    nameWithType: ExpressionExtensions.GroupBy(Of TItem, TKey, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TItem, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TItem}},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  name: GroupBy<TItem, TKey, TResult>(Expression<Func<TItem, TKey>>, Expression<Func<TKey, IEnumerable<TItem>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ExpressionExtensions.GroupBy<TItem, TKey, TResult>(Expression<Func<TItem, TKey>>, Expression<Func<TKey, IEnumerable<TItem>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TItem, TKey, TResult>(System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TItem>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.GroupBy(Of TItem, TKey, TResult)(Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TItem), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TItem, TKey, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TItem), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TItem, TKey, TResult)(Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TItem), TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy<TItem, TKey, TResult>
    nameWithType: ExpressionExtensions.GroupBy<TItem, TKey, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TItem, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy(Of TItem, TKey, TResult)
    nameWithType: ExpressionExtensions.GroupBy(Of TItem, TKey, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TItem, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TItem},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  name: GroupJoin<TItem, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<TItem, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TItem, IEnumerable<TInner>, TResult>>)
  nameWithType: ExpressionExtensions.GroupJoin<TItem, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<TItem, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TItem, IEnumerable<TInner>, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin<TItem, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TItem, System.Collections.Generic.IEnumerable<TInner>, TResult>>)
  nameWithType.vb: ExpressionExtensions.GroupJoin(Of TItem, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TItem, IEnumerable(Of TInner), TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin(Of TItem, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Collections.Generic.IEnumerable(Of TInner), TResult)))
  name.vb: GroupJoin(Of TItem, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TItem, IEnumerable(Of TInner), TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
    name: GroupJoin<TItem, TInner, TKey, TResult>
    nameWithType: ExpressionExtensions.GroupJoin<TItem, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin<TItem, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
    name: GroupJoin(Of TItem, TInner, TKey, TResult)
    nameWithType: ExpressionExtensions.GroupJoin(Of TItem, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin(Of TItem, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TItem},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  name: GroupJoin<TItem, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<TItem, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TItem, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ExpressionExtensions.GroupJoin<TItem, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<TItem, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TItem, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin<TItem, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TItem, System.Collections.Generic.IEnumerable<TInner>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.GroupJoin(Of TItem, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TItem, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin(Of TItem, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Collections.Generic.IEnumerable(Of TInner), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupJoin(Of TItem, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TItem, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin<TItem, TInner, TKey, TResult>
    nameWithType: ExpressionExtensions.GroupJoin<TItem, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin<TItem, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin(Of TItem, TInner, TKey, TResult)
    nameWithType: ExpressionExtensions.GroupJoin(Of TItem, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin(Of TItem, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(System.Collections.Generic.IEnumerable{{TItem}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  name: Intersect<TItem>(IEnumerable<TItem>)
  nameWithType: ExpressionExtensions.Intersect<TItem>(IEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect<TItem>(System.Collections.Generic.IEnumerable<TItem>)
  nameWithType.vb: ExpressionExtensions.Intersect(Of TItem)(IEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Intersect(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem))
  name.vb: Intersect(Of TItem)(IEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(System.Collections.Generic.IEnumerable{``0})
    name: Intersect<TItem>
    nameWithType: ExpressionExtensions.Intersect<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(System.Collections.Generic.IEnumerable{``0})
    name: Intersect(Of TItem)
    nameWithType: ExpressionExtensions.Intersect(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Intersect<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  nameWithType: ExpressionExtensions.Intersect<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect<TItem>(System.Collections.Generic.IEnumerable<TItem>, System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ExpressionExtensions.Intersect(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Intersect(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem), System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: Intersect(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Intersect<TItem>
    nameWithType: ExpressionExtensions.Intersect<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Intersect(Of TItem)
    nameWithType: ExpressionExtensions.Intersect(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{{TItem}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsProperSubsetOf<TItem>(IEnumerable<TItem>)
  nameWithType: ExpressionExtensions.IsProperSubsetOf<TItem>(IEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf<TItem>(System.Collections.Generic.IEnumerable<TItem>)
  nameWithType.vb: ExpressionExtensions.IsProperSubsetOf(Of TItem)(IEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem))
  name.vb: IsProperSubsetOf(Of TItem)(IEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsProperSubsetOf<TItem>
    nameWithType: ExpressionExtensions.IsProperSubsetOf<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsProperSubsetOf(Of TItem)
    nameWithType: ExpressionExtensions.IsProperSubsetOf(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsProperSubsetOf<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  nameWithType: ExpressionExtensions.IsProperSubsetOf<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf<TItem>(System.Collections.Generic.IEnumerable<TItem>, System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ExpressionExtensions.IsProperSubsetOf(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem), System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: IsProperSubsetOf(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSubsetOf<TItem>
    nameWithType: ExpressionExtensions.IsProperSubsetOf<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSubsetOf(Of TItem)
    nameWithType: ExpressionExtensions.IsProperSubsetOf(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{{TItem}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsProperSupersetOf<TItem>(IEnumerable<TItem>)
  nameWithType: ExpressionExtensions.IsProperSupersetOf<TItem>(IEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf<TItem>(System.Collections.Generic.IEnumerable<TItem>)
  nameWithType.vb: ExpressionExtensions.IsProperSupersetOf(Of TItem)(IEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem))
  name.vb: IsProperSupersetOf(Of TItem)(IEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsProperSupersetOf<TItem>
    nameWithType: ExpressionExtensions.IsProperSupersetOf<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsProperSupersetOf(Of TItem)
    nameWithType: ExpressionExtensions.IsProperSupersetOf(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsProperSupersetOf<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  nameWithType: ExpressionExtensions.IsProperSupersetOf<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf<TItem>(System.Collections.Generic.IEnumerable<TItem>, System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ExpressionExtensions.IsProperSupersetOf(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem), System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: IsProperSupersetOf(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSupersetOf<TItem>
    nameWithType: ExpressionExtensions.IsProperSupersetOf<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSupersetOf(Of TItem)
    nameWithType: ExpressionExtensions.IsProperSupersetOf(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{{TItem}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsSubsetOf<TItem>(IEnumerable<TItem>)
  nameWithType: ExpressionExtensions.IsSubsetOf<TItem>(IEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf<TItem>(System.Collections.Generic.IEnumerable<TItem>)
  nameWithType.vb: ExpressionExtensions.IsSubsetOf(Of TItem)(IEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem))
  name.vb: IsSubsetOf(Of TItem)(IEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsSubsetOf<TItem>
    nameWithType: ExpressionExtensions.IsSubsetOf<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsSubsetOf(Of TItem)
    nameWithType: ExpressionExtensions.IsSubsetOf(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsSubsetOf<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  nameWithType: ExpressionExtensions.IsSubsetOf<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf<TItem>(System.Collections.Generic.IEnumerable<TItem>, System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ExpressionExtensions.IsSubsetOf(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem), System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: IsSubsetOf(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSubsetOf<TItem>
    nameWithType: ExpressionExtensions.IsSubsetOf<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSubsetOf(Of TItem)
    nameWithType: ExpressionExtensions.IsSubsetOf(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{{TItem}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsSupersetOf<TItem>(IEnumerable<TItem>)
  nameWithType: ExpressionExtensions.IsSupersetOf<TItem>(IEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf<TItem>(System.Collections.Generic.IEnumerable<TItem>)
  nameWithType.vb: ExpressionExtensions.IsSupersetOf(Of TItem)(IEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem))
  name.vb: IsSupersetOf(Of TItem)(IEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsSupersetOf<TItem>
    nameWithType: ExpressionExtensions.IsSupersetOf<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsSupersetOf(Of TItem)
    nameWithType: ExpressionExtensions.IsSupersetOf(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsSupersetOf<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  nameWithType: ExpressionExtensions.IsSupersetOf<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf<TItem>(System.Collections.Generic.IEnumerable<TItem>, System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ExpressionExtensions.IsSupersetOf(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem), System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: IsSupersetOf(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSupersetOf<TItem>
    nameWithType: ExpressionExtensions.IsSupersetOf<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSupersetOf(Of TItem)
    nameWithType: ExpressionExtensions.IsSupersetOf(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TItem},{TInner},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  name: Join<TItem, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<TItem, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TItem, TInner, TResult>>)
  nameWithType: ExpressionExtensions.Join<TItem, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<TItem, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TItem, TInner, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Join<TItem, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TItem, TInner, TResult>>)
  nameWithType.vb: ExpressionExtensions.Join(Of TItem, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TItem, TInner, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Join(Of TItem, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TInner, TResult)))
  name.vb: Join(Of TItem, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TItem, TInner, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
    name: Join<TItem, TInner, TKey, TResult>
    nameWithType: ExpressionExtensions.Join<TItem, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Join<TItem, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
    name: Join(Of TItem, TInner, TKey, TResult)
    nameWithType: ExpressionExtensions.Join(Of TItem, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Join(Of TItem, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TItem},{TInner},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  name: Join<TItem, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<TItem, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TItem, TInner, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ExpressionExtensions.Join<TItem, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<TItem, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TItem, TInner, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Join<TItem, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TItem, TInner, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.Join(Of TItem, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TItem, TInner, TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Join(Of TItem, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TInner, TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Join(Of TItem, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TItem, TInner, TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: Join<TItem, TInner, TKey, TResult>
    nameWithType: ExpressionExtensions.Join<TItem, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Join<TItem, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: Join(Of TItem, TInner, TKey, TResult)
    nameWithType: ExpressionExtensions.Join(Of TItem, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Join(Of TItem, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Max``1(System.Collections.Generic.IComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  name: Max<TItem>(IComparer<TItem>)
  nameWithType: ExpressionExtensions.Max<TItem>(IComparer<TItem>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TItem>(System.Collections.Generic.IComparer<TItem>)
  nameWithType.vb: ExpressionExtensions.Max(Of TItem)(IComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TItem)(System.Collections.Generic.IComparer(Of TItem))
  name.vb: Max(Of TItem)(IComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``1(System.Collections.Generic.IComparer{``0})
    name: Max<TItem>
    nameWithType: ExpressionExtensions.Max<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``1(System.Collections.Generic.IComparer{``0})
    name: Max(Of TItem)
    nameWithType: ExpressionExtensions.Max(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: Max<TItem, TResult>(Expression<Func<TItem, TResult>>)
  nameWithType: ExpressionExtensions.Max<TItem, TResult>(Expression<Func<TItem, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TItem, TResult>(System.Linq.Expressions.Expression<System.Func<TItem, TResult>>)
  nameWithType.vb: ExpressionExtensions.Max(Of TItem, TResult)(Expression(Of Func(Of TItem, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TItem, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TResult)))
  name.vb: Max(Of TItem, TResult)(Expression(Of Func(Of TItem, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Max<TItem, TResult>
    nameWithType: ExpressionExtensions.Max<TItem, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TItem, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Max(Of TItem, TResult)
    nameWithType: ExpressionExtensions.Max(Of TItem, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TItem, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}},System.Func{{TItem},{TResult}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  name: Max<TItem, TResult>(Expression<Func<TItem, TResult>>, Func<TItem, TResult>)
  nameWithType: ExpressionExtensions.Max<TItem, TResult>(Expression<Func<TItem, TResult>>, Func<TItem, TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TItem, TResult>(System.Linq.Expressions.Expression<System.Func<TItem, TResult>>, System.Func<TItem, TResult>)
  nameWithType.vb: ExpressionExtensions.Max(Of TItem, TResult)(Expression(Of Func(Of TItem, TResult)), Func(Of TItem, TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TItem, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TResult)), System.Func(Of TItem, TResult))
  name.vb: Max(Of TItem, TResult)(Expression(Of Func(Of TItem, TResult)), Func(Of TItem, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
    name: Max<TItem, TResult>
    nameWithType: ExpressionExtensions.Max<TItem, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TItem, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
    name: Max(Of TItem, TResult)
    nameWithType: ExpressionExtensions.Max(Of TItem, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TItem, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}},System.Collections.Generic.IComparer{{TResult}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: Max<TItem, TResult>(Expression<Func<TItem, TResult>>, IComparer<TResult>)
  nameWithType: ExpressionExtensions.Max<TItem, TResult>(Expression<Func<TItem, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TItem, TResult>(System.Linq.Expressions.Expression<System.Func<TItem, TResult>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ExpressionExtensions.Max(Of TItem, TResult)(Expression(Of Func(Of TItem, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TItem, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of TItem, TResult)(Expression(Of Func(Of TItem, TResult)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Max<TItem, TResult>
    nameWithType: ExpressionExtensions.Max<TItem, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TItem, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Max(Of TItem, TResult)
    nameWithType: ExpressionExtensions.Max(Of TItem, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TItem, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{{TResult}}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  name: Max<TItem, TResult>(Expression<Func<TItem, Nullable<TResult>>>)
  nameWithType: ExpressionExtensions.Max<TItem, TResult>(Expression<Func<TItem, Nullable<TResult>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TItem, TResult>(System.Linq.Expressions.Expression<System.Func<TItem, System.Nullable<TResult>>>)
  nameWithType.vb: ExpressionExtensions.Max(Of TItem, TResult)(Expression(Of Func(Of TItem, Nullable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TItem, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Nullable(Of TResult))))
  name.vb: Max(Of TItem, TResult)(Expression(Of Func(Of TItem, Nullable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Max<TItem, TResult>
    nameWithType: ExpressionExtensions.Max<TItem, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TItem, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Max(Of TItem, TResult)
    nameWithType: ExpressionExtensions.Max(Of TItem, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TItem, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{{TResult}}}},System.Collections.Generic.IComparer{{TResult}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  name: Max<TItem, TResult>(Expression<Func<TItem, Nullable<TResult>>>, IComparer<TResult>)
  nameWithType: ExpressionExtensions.Max<TItem, TResult>(Expression<Func<TItem, Nullable<TResult>>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TItem, TResult>(System.Linq.Expressions.Expression<System.Func<TItem, System.Nullable<TResult>>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ExpressionExtensions.Max(Of TItem, TResult)(Expression(Of Func(Of TItem, Nullable(Of TResult))), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TItem, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Nullable(Of TResult))), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of TItem, TResult)(Expression(Of Func(Of TItem, Nullable(Of TResult))), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Max<TItem, TResult>
    nameWithType: ExpressionExtensions.Max<TItem, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TItem, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Max(Of TItem, TResult)
    nameWithType: ExpressionExtensions.Max(Of TItem, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TItem, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Min``1(System.Collections.Generic.IComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  name: Min<TItem>(IComparer<TItem>)
  nameWithType: ExpressionExtensions.Min<TItem>(IComparer<TItem>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TItem>(System.Collections.Generic.IComparer<TItem>)
  nameWithType.vb: ExpressionExtensions.Min(Of TItem)(IComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TItem)(System.Collections.Generic.IComparer(Of TItem))
  name.vb: Min(Of TItem)(IComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``1(System.Collections.Generic.IComparer{``0})
    name: Min<TItem>
    nameWithType: ExpressionExtensions.Min<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``1(System.Collections.Generic.IComparer{``0})
    name: Min(Of TItem)
    nameWithType: ExpressionExtensions.Min(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: Min<TItem, TResult>(Expression<Func<TItem, TResult>>)
  nameWithType: ExpressionExtensions.Min<TItem, TResult>(Expression<Func<TItem, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TItem, TResult>(System.Linq.Expressions.Expression<System.Func<TItem, TResult>>)
  nameWithType.vb: ExpressionExtensions.Min(Of TItem, TResult)(Expression(Of Func(Of TItem, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TItem, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TResult)))
  name.vb: Min(Of TItem, TResult)(Expression(Of Func(Of TItem, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Min<TItem, TResult>
    nameWithType: ExpressionExtensions.Min<TItem, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TItem, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Min(Of TItem, TResult)
    nameWithType: ExpressionExtensions.Min(Of TItem, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TItem, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}},System.Collections.Generic.IComparer{{TResult}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: Min<TItem, TResult>(Expression<Func<TItem, TResult>>, IComparer<TResult>)
  nameWithType: ExpressionExtensions.Min<TItem, TResult>(Expression<Func<TItem, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TItem, TResult>(System.Linq.Expressions.Expression<System.Func<TItem, TResult>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ExpressionExtensions.Min(Of TItem, TResult)(Expression(Of Func(Of TItem, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TItem, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of TItem, TResult)(Expression(Of Func(Of TItem, TResult)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Min<TItem, TResult>
    nameWithType: ExpressionExtensions.Min<TItem, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TItem, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Min(Of TItem, TResult)
    nameWithType: ExpressionExtensions.Min(Of TItem, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TItem, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{{TResult}}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  name: Min<TItem, TResult>(Expression<Func<TItem, Nullable<TResult>>>)
  nameWithType: ExpressionExtensions.Min<TItem, TResult>(Expression<Func<TItem, Nullable<TResult>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TItem, TResult>(System.Linq.Expressions.Expression<System.Func<TItem, System.Nullable<TResult>>>)
  nameWithType.vb: ExpressionExtensions.Min(Of TItem, TResult)(Expression(Of Func(Of TItem, Nullable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TItem, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Nullable(Of TResult))))
  name.vb: Min(Of TItem, TResult)(Expression(Of Func(Of TItem, Nullable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Min<TItem, TResult>
    nameWithType: ExpressionExtensions.Min<TItem, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TItem, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Min(Of TItem, TResult)
    nameWithType: ExpressionExtensions.Min(Of TItem, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TItem, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{{TResult}}}},System.Collections.Generic.IComparer{{TResult}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  name: Min<TItem, TResult>(Expression<Func<TItem, Nullable<TResult>>>, IComparer<TResult>)
  nameWithType: ExpressionExtensions.Min<TItem, TResult>(Expression<Func<TItem, Nullable<TResult>>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TItem, TResult>(System.Linq.Expressions.Expression<System.Func<TItem, System.Nullable<TResult>>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ExpressionExtensions.Min(Of TItem, TResult)(Expression(Of Func(Of TItem, Nullable(Of TResult))), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TItem, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Nullable(Of TResult))), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of TItem, TResult)(Expression(Of Func(Of TItem, Nullable(Of TResult))), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Min<TItem, TResult>
    nameWithType: ExpressionExtensions.Min<TItem, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TItem, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Min(Of TItem, TResult)
    nameWithType: ExpressionExtensions.Min(Of TItem, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TItem, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression.NMF.Expressions.Linq.ExpressionExtensions.OfType``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
  name: OfType<TResult>()
  nameWithType: ExpressionExtensions.OfType<TResult>()
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OfType<TResult>()
  nameWithType.vb: ExpressionExtensions.OfType(Of TResult)()
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OfType(Of TResult)()
  name.vb: OfType(Of TResult)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OfType``1
    name: OfType<TResult>
    nameWithType: ExpressionExtensions.OfType<TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OfType<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OfType``1
    name: OfType(Of TResult)
    nameWithType: ExpressionExtensions.OfType(Of TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OfType(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: OrderBy<TItem, TKey>(Expression<Func<TItem, TKey>>)
  nameWithType: ExpressionExtensions.OrderBy<TItem, TKey>(Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy<TItem, TKey>(System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ExpressionExtensions.OrderBy(Of TItem, TKey)(Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OrderBy(Of TItem, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: OrderBy(Of TItem, TKey)(Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderBy<TItem, TKey>
    nameWithType: ExpressionExtensions.OrderBy<TItem, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderBy(Of TItem, TKey)
    nameWithType: ExpressionExtensions.OrderBy(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: OrderBy<TItem, TKey>(Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ExpressionExtensions.OrderBy<TItem, TKey>(Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy<TItem, TKey>(System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.OrderBy(Of TItem, TKey)(Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OrderBy(Of TItem, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderBy(Of TItem, TKey)(Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderBy<TItem, TKey>
    nameWithType: ExpressionExtensions.OrderBy<TItem, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderBy(Of TItem, TKey)
    nameWithType: ExpressionExtensions.OrderBy(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: OrderByDescending<TItem, TKey>(Expression<Func<TItem, TKey>>)
  nameWithType: ExpressionExtensions.OrderByDescending<TItem, TKey>(Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending<TItem, TKey>(System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ExpressionExtensions.OrderByDescending(Of TItem, TKey)(Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending(Of TItem, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: OrderByDescending(Of TItem, TKey)(Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderByDescending<TItem, TKey>
    nameWithType: ExpressionExtensions.OrderByDescending<TItem, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderByDescending(Of TItem, TKey)
    nameWithType: ExpressionExtensions.OrderByDescending(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: OrderByDescending<TItem, TKey>(Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ExpressionExtensions.OrderByDescending<TItem, TKey>(Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending<TItem, TKey>(System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.OrderByDescending(Of TItem, TKey)(Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending(Of TItem, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderByDescending(Of TItem, TKey)(Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending<TItem, TKey>
    nameWithType: ExpressionExtensions.OrderByDescending<TItem, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending(Of TItem, TKey)
    nameWithType: ExpressionExtensions.OrderByDescending(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: Select<TItem, TResult>(Expression<Func<TItem, TResult>>)
  nameWithType: ExpressionExtensions.Select<TItem, TResult>(Expression<Func<TItem, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Select<TItem, TResult>(System.Linq.Expressions.Expression<System.Func<TItem, TResult>>)
  nameWithType.vb: ExpressionExtensions.Select(Of TItem, TResult)(Expression(Of Func(Of TItem, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Select(Of TItem, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TResult)))
  name.vb: Select(Of TItem, TResult)(Expression(Of Func(Of TItem, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Select<TItem, TResult>
    nameWithType: ExpressionExtensions.Select<TItem, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Select<TItem, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Select(Of TItem, TResult)
    nameWithType: ExpressionExtensions.Select(Of TItem, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Select(Of TItem, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}},System.Func{{TItem},{TResult}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  name: Select<TItem, TResult>(Expression<Func<TItem, TResult>>, Func<TItem, TResult>)
  nameWithType: ExpressionExtensions.Select<TItem, TResult>(Expression<Func<TItem, TResult>>, Func<TItem, TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Select<TItem, TResult>(System.Linq.Expressions.Expression<System.Func<TItem, TResult>>, System.Func<TItem, TResult>)
  nameWithType.vb: ExpressionExtensions.Select(Of TItem, TResult)(Expression(Of Func(Of TItem, TResult)), Func(Of TItem, TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Select(Of TItem, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TResult)), System.Func(Of TItem, TResult))
  name.vb: Select(Of TItem, TResult)(Expression(Of Func(Of TItem, TResult)), Func(Of TItem, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
    name: Select<TItem, TResult>
    nameWithType: ExpressionExtensions.Select<TItem, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Select<TItem, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
    name: Select(Of TItem, TResult)
    nameWithType: ExpressionExtensions.Select(Of TItem, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Select(Of TItem, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(System.Linq.Expressions.Expression{System.Func{{TItem},System.Collections.Generic.IEnumerable{{TIntermediate}}}},System.Linq.Expressions.Expression{System.Func{{TItem},{TIntermediate},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  name: SelectMany<TItem, TIntermediate, TResult>(Expression<Func<TItem, IEnumerable<TIntermediate>>>, Expression<Func<TItem, TIntermediate, TResult>>)
  nameWithType: ExpressionExtensions.SelectMany<TItem, TIntermediate, TResult>(Expression<Func<TItem, IEnumerable<TIntermediate>>>, Expression<Func<TItem, TIntermediate, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany<TItem, TIntermediate, TResult>(System.Linq.Expressions.Expression<System.Func<TItem, System.Collections.Generic.IEnumerable<TIntermediate>>>, System.Linq.Expressions.Expression<System.Func<TItem, TIntermediate, TResult>>)
  nameWithType.vb: ExpressionExtensions.SelectMany(Of TItem, TIntermediate, TResult)(Expression(Of Func(Of TItem, IEnumerable(Of TIntermediate))), Expression(Of Func(Of TItem, TIntermediate, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SelectMany(Of TItem, TIntermediate, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Collections.Generic.IEnumerable(Of TIntermediate))), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TIntermediate, TResult)))
  name.vb: SelectMany(Of TItem, TIntermediate, TResult)(Expression(Of Func(Of TItem, IEnumerable(Of TIntermediate))), Expression(Of Func(Of TItem, TIntermediate, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
    name: SelectMany<TItem, TIntermediate, TResult>
    nameWithType: ExpressionExtensions.SelectMany<TItem, TIntermediate, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany<TItem, TIntermediate, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
    name: SelectMany(Of TItem, TIntermediate, TResult)
    nameWithType: ExpressionExtensions.SelectMany(Of TItem, TIntermediate, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany(Of TItem, TIntermediate, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Collections.Generic.IEnumerable{{TResult}}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  name: SelectMany<TItem, TResult>(Expression<Func<TItem, IEnumerable<TResult>>>)
  nameWithType: ExpressionExtensions.SelectMany<TItem, TResult>(Expression<Func<TItem, IEnumerable<TResult>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany<TItem, TResult>(System.Linq.Expressions.Expression<System.Func<TItem, System.Collections.Generic.IEnumerable<TResult>>>)
  nameWithType.vb: ExpressionExtensions.SelectMany(Of TItem, TResult)(Expression(Of Func(Of TItem, IEnumerable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SelectMany(Of TItem, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Collections.Generic.IEnumerable(Of TResult))))
  name.vb: SelectMany(Of TItem, TResult)(Expression(Of Func(Of TItem, IEnumerable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
    name: SelectMany<TItem, TResult>
    nameWithType: ExpressionExtensions.SelectMany<TItem, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany<TItem, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
    name: SelectMany(Of TItem, TResult)
    nameWithType: ExpressionExtensions.SelectMany(Of TItem, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany(Of TItem, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{{TItem}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  name: SetEquals<TItem>(IEnumerable<TItem>)
  nameWithType: ExpressionExtensions.SetEquals<TItem>(IEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals<TItem>(System.Collections.Generic.IEnumerable<TItem>)
  nameWithType.vb: ExpressionExtensions.SetEquals(Of TItem)(IEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SetEquals(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem))
  name.vb: SetEquals(Of TItem)(IEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{``0})
    name: SetEquals<TItem>
    nameWithType: ExpressionExtensions.SetEquals<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{``0})
    name: SetEquals(Of TItem)
    nameWithType: ExpressionExtensions.SetEquals(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: SetEquals<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  nameWithType: ExpressionExtensions.SetEquals<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals<TItem>(System.Collections.Generic.IEnumerable<TItem>, System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ExpressionExtensions.SetEquals(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SetEquals(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem), System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: SetEquals(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: SetEquals<TItem>
    nameWithType: ExpressionExtensions.SetEquals<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: SetEquals(Of TItem)
    nameWithType: ExpressionExtensions.SetEquals(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  name: SingleOrDefault<TElement>()
  nameWithType: ExpressionExtensions.SingleOrDefault<TElement>()
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TElement>()
  nameWithType.vb: ExpressionExtensions.SingleOrDefault(Of TElement)()
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TElement)()
  name.vb: SingleOrDefault(Of TElement)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1
    name: SingleOrDefault<TElement>
    nameWithType: ExpressionExtensions.SingleOrDefault<TElement>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1
    name: SingleOrDefault(Of TElement)
    nameWithType: ExpressionExtensions.SingleOrDefault(Of TElement)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: SingleOrDefault<TItem>(Expression<Func<TItem, Boolean>>)
  nameWithType: ExpressionExtensions.SingleOrDefault<TItem>(Expression<Func<TItem, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Boolean>>)
  nameWithType.vb: ExpressionExtensions.SingleOrDefault(Of TItem)(Expression(Of Func(Of TItem, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Boolean)))
  name.vb: SingleOrDefault(Of TItem)(Expression(Of Func(Of TItem, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: SingleOrDefault<TItem>
    nameWithType: ExpressionExtensions.SingleOrDefault<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: SingleOrDefault(Of TItem)
    nameWithType: ExpressionExtensions.SingleOrDefault(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}},System.Func{{TItem},System.Boolean})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  name: SingleOrDefault<TItem>(Expression<Func<TItem, Boolean>>, Func<TItem, Boolean>)
  nameWithType: ExpressionExtensions.SingleOrDefault<TItem>(Expression<Func<TItem, Boolean>>, Func<TItem, Boolean>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Boolean>>, System.Func<TItem, System.Boolean>)
  nameWithType.vb: ExpressionExtensions.SingleOrDefault(Of TItem)(Expression(Of Func(Of TItem, Boolean)), Func(Of TItem, Boolean))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Boolean)), System.Func(Of TItem, System.Boolean))
  name.vb: SingleOrDefault(Of TItem)(Expression(Of Func(Of TItem, Boolean)), Func(Of TItem, Boolean))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
    name: SingleOrDefault<TItem>
    nameWithType: ExpressionExtensions.SingleOrDefault<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
    name: SingleOrDefault(Of TItem)
    nameWithType: ExpressionExtensions.SingleOrDefault(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Int32}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  name: Sum<TItem>(Expression<Func<TItem, Int32>>)
  nameWithType: ExpressionExtensions.Sum<TItem>(Expression<Func<TItem, Int32>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Int32>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TItem)(Expression(Of Func(Of TItem, Int32)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Int32)))
  name.vb: Sum(Of TItem)(Expression(Of Func(Of TItem, Int32)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Sum<TItem>
    nameWithType: ExpressionExtensions.Sum<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Sum(Of TItem)
    nameWithType: ExpressionExtensions.Sum(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Int64}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  name: Sum<TItem>(Expression<Func<TItem, Int64>>)
  nameWithType: ExpressionExtensions.Sum<TItem>(Expression<Func<TItem, Int64>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Int64>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TItem)(Expression(Of Func(Of TItem, Int64)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Int64)))
  name.vb: Sum(Of TItem)(Expression(Of Func(Of TItem, Int64)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Sum<TItem>
    nameWithType: ExpressionExtensions.Sum<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Sum(Of TItem)
    nameWithType: ExpressionExtensions.Sum(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Single}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  name: Sum<TItem>(Expression<Func<TItem, Single>>)
  nameWithType: ExpressionExtensions.Sum<TItem>(Expression<Func<TItem, Single>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Single>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TItem)(Expression(Of Func(Of TItem, Single)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Single)))
  name.vb: Sum(Of TItem)(Expression(Of Func(Of TItem, Single)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Sum<TItem>
    nameWithType: ExpressionExtensions.Sum<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Sum(Of TItem)
    nameWithType: ExpressionExtensions.Sum(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Double}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  name: Sum<TItem>(Expression<Func<TItem, Double>>)
  nameWithType: ExpressionExtensions.Sum<TItem>(Expression<Func<TItem, Double>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Double>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TItem)(Expression(Of Func(Of TItem, Double)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Double)))
  name.vb: Sum(Of TItem)(Expression(Of Func(Of TItem, Double)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Sum<TItem>
    nameWithType: ExpressionExtensions.Sum<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Sum(Of TItem)
    nameWithType: ExpressionExtensions.Sum(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  name: Sum<TItem>(Expression<Func<TItem, Decimal>>)
  nameWithType: ExpressionExtensions.Sum<TItem>(Expression<Func<TItem, Decimal>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Decimal>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TItem)(Expression(Of Func(Of TItem, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Decimal)))
  name.vb: Sum(Of TItem)(Expression(Of Func(Of TItem, Decimal)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Sum<TItem>
    nameWithType: ExpressionExtensions.Sum<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Sum(Of TItem)
    nameWithType: ExpressionExtensions.Sum(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  name: Sum<TItem>(Expression<Func<TItem, Nullable<Int32>>>)
  nameWithType: ExpressionExtensions.Sum<TItem>(Expression<Func<TItem, Nullable<Int32>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Nullable<System.Int32>>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Int32))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Nullable(Of System.Int32))))
  name.vb: Sum(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Int32))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Sum<TItem>
    nameWithType: ExpressionExtensions.Sum<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Sum(Of TItem)
    nameWithType: ExpressionExtensions.Sum(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  name: Sum<TItem>(Expression<Func<TItem, Nullable<Int64>>>)
  nameWithType: ExpressionExtensions.Sum<TItem>(Expression<Func<TItem, Nullable<Int64>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Nullable<System.Int64>>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Int64))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Nullable(Of System.Int64))))
  name.vb: Sum(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Int64))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Sum<TItem>
    nameWithType: ExpressionExtensions.Sum<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Sum(Of TItem)
    nameWithType: ExpressionExtensions.Sum(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  name: Sum<TItem>(Expression<Func<TItem, Nullable<Single>>>)
  nameWithType: ExpressionExtensions.Sum<TItem>(Expression<Func<TItem, Nullable<Single>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Nullable<System.Single>>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Single))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Nullable(Of System.Single))))
  name.vb: Sum(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Single))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Sum<TItem>
    nameWithType: ExpressionExtensions.Sum<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Sum(Of TItem)
    nameWithType: ExpressionExtensions.Sum(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  name: Sum<TItem>(Expression<Func<TItem, Nullable<Double>>>)
  nameWithType: ExpressionExtensions.Sum<TItem>(Expression<Func<TItem, Nullable<Double>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Nullable<System.Double>>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Double))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Nullable(Of System.Double))))
  name.vb: Sum(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Double))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Sum<TItem>
    nameWithType: ExpressionExtensions.Sum<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Sum(Of TItem)
    nameWithType: ExpressionExtensions.Sum(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  name: Sum<TItem>(Expression<Func<TItem, Nullable<Decimal>>>)
  nameWithType: ExpressionExtensions.Sum<TItem>(Expression<Func<TItem, Nullable<Decimal>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Nullable<System.Decimal>>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Decimal))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Decimal))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Sum<TItem>
    nameWithType: ExpressionExtensions.Sum<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Sum(Of TItem)
    nameWithType: ExpressionExtensions.Sum(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: TopX<TItem, TKey>(Int32, Expression<Func<TItem, TKey>>)
  nameWithType: ExpressionExtensions.TopX<TItem, TKey>(Int32, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX<TItem, TKey>(System.Int32, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ExpressionExtensions.TopX(Of TItem, TKey)(Int32, Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.TopX(Of TItem, TKey)(System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: TopX(Of TItem, TKey)(Int32, Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: TopX<TItem, TKey>
    nameWithType: ExpressionExtensions.TopX<TItem, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: TopX(Of TItem, TKey)
    nameWithType: ExpressionExtensions.TopX(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: TopX<TItem, TKey>(Int32, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ExpressionExtensions.TopX<TItem, TKey>(Int32, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX<TItem, TKey>(System.Int32, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.TopX(Of TItem, TKey)(Int32, Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.TopX(Of TItem, TKey)(System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: TopX(Of TItem, TKey)(Int32, Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: TopX<TItem, TKey>
    nameWithType: ExpressionExtensions.TopX<TItem, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: TopX(Of TItem, TKey)
    nameWithType: ExpressionExtensions.TopX(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Union``1(System.Collections.Generic.IEnumerable{{TItem}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  name: Union<TItem>(IEnumerable<TItem>)
  nameWithType: ExpressionExtensions.Union<TItem>(IEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Union<TItem>(System.Collections.Generic.IEnumerable<TItem>)
  nameWithType.vb: ExpressionExtensions.Union(Of TItem)(IEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Union(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem))
  name.vb: Union(Of TItem)(IEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(System.Collections.Generic.IEnumerable{``0})
    name: Union<TItem>
    nameWithType: ExpressionExtensions.Union<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Union<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(System.Collections.Generic.IEnumerable{``0})
    name: Union(Of TItem)
    nameWithType: ExpressionExtensions.Union(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Union(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Union``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Union<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  nameWithType: ExpressionExtensions.Union<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Union<TItem>(System.Collections.Generic.IEnumerable<TItem>, System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ExpressionExtensions.Union(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Union(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem), System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: Union(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Union<TItem>
    nameWithType: ExpressionExtensions.Union<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Union<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Union(Of TItem)
    nameWithType: ExpressionExtensions.Union(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Union(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Where<TItem>(Expression<Func<TItem, Boolean>>)
  nameWithType: ExpressionExtensions.Where<TItem>(Expression<Func<TItem, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Where<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Boolean>>)
  nameWithType.vb: ExpressionExtensions.Where(Of TItem)(Expression(Of Func(Of TItem, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Where(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Boolean)))
  name.vb: Where(Of TItem)(Expression(Of Func(Of TItem, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where<TItem>
    nameWithType: ExpressionExtensions.Where<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Where<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where(Of TItem)
    nameWithType: ExpressionExtensions.Where(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Where(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ExpressionExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}},System.Func{{TItem},System.Boolean})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  name: Where<TItem>(Expression<Func<TItem, Boolean>>, Func<TItem, Boolean>)
  nameWithType: ExpressionExtensions.Where<TItem>(Expression<Func<TItem, Boolean>>, Func<TItem, Boolean>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Where<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Boolean>>, System.Func<TItem, System.Boolean>)
  nameWithType.vb: ExpressionExtensions.Where(Of TItem)(Expression(Of Func(Of TItem, Boolean)), Func(Of TItem, Boolean))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Where(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Boolean)), System.Func(Of TItem, System.Boolean))
  name.vb: Where(Of TItem)(Expression(Of Func(Of TItem, Boolean)), Func(Of TItem, Boolean))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
    name: Where<TItem>
    nameWithType: ExpressionExtensions.Where<TItem>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Where<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
    name: Where(Of TItem)
    nameWithType: ExpressionExtensions.Where(Of TItem)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Where(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.All``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: All<TItem>(Expression<Func<TItem, Boolean>>)
  nameWithType: ObservableExtensions.All<TItem>(Expression<Func<TItem, Boolean>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.All<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Boolean>>)
  nameWithType.vb: ObservableExtensions.All(Of TItem)(Expression(Of Func(Of TItem, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.All(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Boolean)))
  name.vb: All(Of TItem)(Expression(Of Func(Of TItem, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.All``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: All<TItem>
    nameWithType: ObservableExtensions.All<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.All<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.All``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: All(Of TItem)
    nameWithType: ObservableExtensions.All(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.All(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Any``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0})
  name: Any<TItem>()
  nameWithType: ObservableExtensions.Any<TItem>()
  fullName: NMF.Expressions.Linq.ObservableExtensions.Any<TItem>()
  nameWithType.vb: ObservableExtensions.Any(Of TItem)()
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Any(Of TItem)()
  name.vb: Any(Of TItem)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1
    name: Any<TItem>
    nameWithType: ObservableExtensions.Any<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Any<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1
    name: Any(Of TItem)
    nameWithType: ObservableExtensions.Any(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Any(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Any``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Any<TItem>(Expression<Func<TItem, Boolean>>)
  nameWithType: ObservableExtensions.Any<TItem>(Expression<Func<TItem, Boolean>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Any<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Boolean>>)
  nameWithType.vb: ObservableExtensions.Any(Of TItem)(Expression(Of Func(Of TItem, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Any(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Boolean)))
  name.vb: Any(Of TItem)(Expression(Of Func(Of TItem, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Any<TItem>
    nameWithType: ObservableExtensions.Any<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Any<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Any(Of TItem)
    nameWithType: ObservableExtensions.Any(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Any(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Int32}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  name: Average<TItem>(Expression<Func<TItem, Int32>>)
  nameWithType: ObservableExtensions.Average<TItem>(Expression<Func<TItem, Int32>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Int32>>)
  nameWithType.vb: ObservableExtensions.Average(Of TItem)(Expression(Of Func(Of TItem, Int32)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Int32)))
  name.vb: Average(Of TItem)(Expression(Of Func(Of TItem, Int32)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Average<TItem>
    nameWithType: ObservableExtensions.Average<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Average(Of TItem)
    nameWithType: ObservableExtensions.Average(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Int64}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  name: Average<TItem>(Expression<Func<TItem, Int64>>)
  nameWithType: ObservableExtensions.Average<TItem>(Expression<Func<TItem, Int64>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Int64>>)
  nameWithType.vb: ObservableExtensions.Average(Of TItem)(Expression(Of Func(Of TItem, Int64)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Int64)))
  name.vb: Average(Of TItem)(Expression(Of Func(Of TItem, Int64)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Average<TItem>
    nameWithType: ObservableExtensions.Average<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Average(Of TItem)
    nameWithType: ObservableExtensions.Average(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Single}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  name: Average<TItem>(Expression<Func<TItem, Single>>)
  nameWithType: ObservableExtensions.Average<TItem>(Expression<Func<TItem, Single>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Single>>)
  nameWithType.vb: ObservableExtensions.Average(Of TItem)(Expression(Of Func(Of TItem, Single)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Single)))
  name.vb: Average(Of TItem)(Expression(Of Func(Of TItem, Single)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Average<TItem>
    nameWithType: ObservableExtensions.Average<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Average(Of TItem)
    nameWithType: ObservableExtensions.Average(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Double}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  name: Average<TItem>(Expression<Func<TItem, Double>>)
  nameWithType: ObservableExtensions.Average<TItem>(Expression<Func<TItem, Double>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Double>>)
  nameWithType.vb: ObservableExtensions.Average(Of TItem)(Expression(Of Func(Of TItem, Double)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Double)))
  name.vb: Average(Of TItem)(Expression(Of Func(Of TItem, Double)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Average<TItem>
    nameWithType: ObservableExtensions.Average<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Average(Of TItem)
    nameWithType: ObservableExtensions.Average(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  name: Average<TItem>(Expression<Func<TItem, Decimal>>)
  nameWithType: ObservableExtensions.Average<TItem>(Expression<Func<TItem, Decimal>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Decimal>>)
  nameWithType.vb: ObservableExtensions.Average(Of TItem)(Expression(Of Func(Of TItem, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Decimal)))
  name.vb: Average(Of TItem)(Expression(Of Func(Of TItem, Decimal)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Average<TItem>
    nameWithType: ObservableExtensions.Average<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Average(Of TItem)
    nameWithType: ObservableExtensions.Average(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  name: Average<TItem>(Expression<Func<TItem, Nullable<Int32>>>)
  nameWithType: ObservableExtensions.Average<TItem>(Expression<Func<TItem, Nullable<Int32>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Nullable<System.Int32>>>)
  nameWithType.vb: ObservableExtensions.Average(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Int32))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Nullable(Of System.Int32))))
  name.vb: Average(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Int32))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Average<TItem>
    nameWithType: ObservableExtensions.Average<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Average(Of TItem)
    nameWithType: ObservableExtensions.Average(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  name: Average<TItem>(Expression<Func<TItem, Nullable<Int64>>>)
  nameWithType: ObservableExtensions.Average<TItem>(Expression<Func<TItem, Nullable<Int64>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Nullable<System.Int64>>>)
  nameWithType.vb: ObservableExtensions.Average(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Int64))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Nullable(Of System.Int64))))
  name.vb: Average(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Int64))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Average<TItem>
    nameWithType: ObservableExtensions.Average<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Average(Of TItem)
    nameWithType: ObservableExtensions.Average(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  name: Average<TItem>(Expression<Func<TItem, Nullable<Single>>>)
  nameWithType: ObservableExtensions.Average<TItem>(Expression<Func<TItem, Nullable<Single>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Nullable<System.Single>>>)
  nameWithType.vb: ObservableExtensions.Average(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Single))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Nullable(Of System.Single))))
  name.vb: Average(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Single))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Average<TItem>
    nameWithType: ObservableExtensions.Average<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Average(Of TItem)
    nameWithType: ObservableExtensions.Average(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  name: Average<TItem>(Expression<Func<TItem, Nullable<Double>>>)
  nameWithType: ObservableExtensions.Average<TItem>(Expression<Func<TItem, Nullable<Double>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Nullable<System.Double>>>)
  nameWithType.vb: ObservableExtensions.Average(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Double))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Nullable(Of System.Double))))
  name.vb: Average(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Double))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Average<TItem>
    nameWithType: ObservableExtensions.Average<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Average(Of TItem)
    nameWithType: ObservableExtensions.Average(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  name: Average<TItem>(Expression<Func<TItem, Nullable<Decimal>>>)
  nameWithType: ObservableExtensions.Average<TItem>(Expression<Func<TItem, Nullable<Decimal>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Nullable<System.Decimal>>>)
  nameWithType.vb: ObservableExtensions.Average(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Decimal))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Nullable(Of System.Decimal))))
  name.vb: Average(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Decimal))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Average<TItem>
    nameWithType: ObservableExtensions.Average<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Average(Of TItem)
    nameWithType: ObservableExtensions.Average(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable.NMF.Expressions.Linq.ObservableExtensions.Cast``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
  name: Cast<TResult>()
  nameWithType: ObservableExtensions.Cast<TResult>()
  fullName: NMF.Expressions.Linq.ObservableExtensions.Cast<TResult>()
  nameWithType.vb: ObservableExtensions.Cast(Of TResult)()
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Cast(Of TResult)()
  name.vb: Cast(Of TResult)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Cast``1
    name: Cast<TResult>
    nameWithType: ObservableExtensions.Cast<TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Cast<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Cast``1
    name: Cast(Of TResult)
    nameWithType: ObservableExtensions.Cast(Of TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Cast(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Concat``1(System.Collections.Generic.IEnumerable{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: Concat<TItem>(IEnumerable<TItem>)
  nameWithType: ObservableExtensions.Concat<TItem>(IEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Concat<TItem>(System.Collections.Generic.IEnumerable<TItem>)
  nameWithType.vb: ObservableExtensions.Concat(Of TItem)(IEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Concat(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem))
  name.vb: Concat(Of TItem)(IEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0})
    name: Concat<TItem>
    nameWithType: ObservableExtensions.Concat<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Concat<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0})
    name: Concat(Of TItem)
    nameWithType: ObservableExtensions.Concat(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Concat(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Contains``1({TItem})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0)
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0)
  name: Contains<TItem>(TItem)
  nameWithType: ObservableExtensions.Contains<TItem>(TItem)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Contains<TItem>(TItem)
  nameWithType.vb: ObservableExtensions.Contains(Of TItem)(TItem)
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Contains(Of TItem)(TItem)
  name.vb: Contains(Of TItem)(TItem)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(``0)
    name: Contains<TItem>
    nameWithType: ObservableExtensions.Contains<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Contains<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(``0)
    name: Contains(Of TItem)
    nameWithType: ObservableExtensions.Contains(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Contains(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Contains``1({TItem},System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  name: Contains<TItem>(TItem, IEqualityComparer<TItem>)
  nameWithType: ObservableExtensions.Contains<TItem>(TItem, IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Contains<TItem>(TItem, System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ObservableExtensions.Contains(Of TItem)(TItem, IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Contains(Of TItem)(TItem, System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: Contains(Of TItem)(TItem, IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(``0,System.Collections.Generic.IEqualityComparer{``0})
    name: Contains<TItem>
    nameWithType: ObservableExtensions.Contains<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Contains<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(``0,System.Collections.Generic.IEqualityComparer{``0})
    name: Contains(Of TItem)
    nameWithType: ObservableExtensions.Contains(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Contains(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Count``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0})
  name: Count<TItem>()
  nameWithType: ObservableExtensions.Count<TItem>()
  fullName: NMF.Expressions.Linq.ObservableExtensions.Count<TItem>()
  nameWithType.vb: ObservableExtensions.Count(Of TItem)()
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Count(Of TItem)()
  name.vb: Count(Of TItem)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1
    name: Count<TItem>
    nameWithType: ObservableExtensions.Count<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Count<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1
    name: Count(Of TItem)
    nameWithType: ObservableExtensions.Count(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Count(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Count``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Count<TItem>(Expression<Func<TItem, Boolean>>)
  nameWithType: ObservableExtensions.Count<TItem>(Expression<Func<TItem, Boolean>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Count<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Boolean>>)
  nameWithType.vb: ObservableExtensions.Count(Of TItem)(Expression(Of Func(Of TItem, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Count(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Boolean)))
  name.vb: Count(Of TItem)(Expression(Of Func(Of TItem, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Count<TItem>
    nameWithType: ObservableExtensions.Count<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Count<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Count(Of TItem)
    nameWithType: ObservableExtensions.Count(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Count(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Distinct``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0})
  name: Distinct<TItem>()
  nameWithType: ObservableExtensions.Distinct<TItem>()
  fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct<TItem>()
  nameWithType.vb: ObservableExtensions.Distinct(Of TItem)()
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Distinct(Of TItem)()
  name.vb: Distinct(Of TItem)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1
    name: Distinct<TItem>
    nameWithType: ObservableExtensions.Distinct<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1
    name: Distinct(Of TItem)
    nameWithType: ObservableExtensions.Distinct(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Distinct``1(System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Distinct<TItem>(IEqualityComparer<TItem>)
  nameWithType: ObservableExtensions.Distinct<TItem>(IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct<TItem>(System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ObservableExtensions.Distinct(Of TItem)(IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Distinct(Of TItem)(System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: Distinct(Of TItem)(IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(System.Collections.Generic.IEqualityComparer{``0})
    name: Distinct<TItem>
    nameWithType: ObservableExtensions.Distinct<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(System.Collections.Generic.IEqualityComparer{``0})
    name: Distinct(Of TItem)
    nameWithType: ObservableExtensions.Distinct(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Except``1(System.Collections.Generic.IEnumerable{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: Except<TItem>(IEnumerable<TItem>)
  nameWithType: ObservableExtensions.Except<TItem>(IEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Except<TItem>(System.Collections.Generic.IEnumerable<TItem>)
  nameWithType.vb: ObservableExtensions.Except(Of TItem)(IEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Except(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem))
  name.vb: Except(Of TItem)(IEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(System.Collections.Generic.IEnumerable{``0})
    name: Except<TItem>
    nameWithType: ObservableExtensions.Except<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Except<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(System.Collections.Generic.IEnumerable{``0})
    name: Except(Of TItem)
    nameWithType: ObservableExtensions.Except(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Except(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Except``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Except<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  nameWithType: ObservableExtensions.Except<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Except<TItem>(System.Collections.Generic.IEnumerable<TItem>, System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ObservableExtensions.Except(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Except(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem), System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: Except(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Except<TItem>
    nameWithType: ObservableExtensions.Except<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Except<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Except(Of TItem)
    nameWithType: ObservableExtensions.Except(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Except(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  name: FirstOrDefault<TItem>()
  nameWithType: ObservableExtensions.FirstOrDefault<TItem>()
  fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault<TItem>()
  nameWithType.vb: ObservableExtensions.FirstOrDefault(Of TItem)()
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault(Of TItem)()
  name.vb: FirstOrDefault(Of TItem)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1
    name: FirstOrDefault<TItem>
    nameWithType: ObservableExtensions.FirstOrDefault<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1
    name: FirstOrDefault(Of TItem)
    nameWithType: ObservableExtensions.FirstOrDefault(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: FirstOrDefault<TItem>(Expression<Func<TItem, Boolean>>)
  nameWithType: ObservableExtensions.FirstOrDefault<TItem>(Expression<Func<TItem, Boolean>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Boolean>>)
  nameWithType.vb: ObservableExtensions.FirstOrDefault(Of TItem)(Expression(Of Func(Of TItem, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Boolean)))
  name.vb: FirstOrDefault(Of TItem)(Expression(Of Func(Of TItem, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: FirstOrDefault<TItem>
    nameWithType: ObservableExtensions.FirstOrDefault<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: FirstOrDefault(Of TItem)
    nameWithType: ObservableExtensions.FirstOrDefault(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: GroupBy<TItem, TKey>(Expression<Func<TItem, TKey>>)
  nameWithType: ObservableExtensions.GroupBy<TItem, TKey>(Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TItem, TKey>(System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TItem, TKey)(Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TItem, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: GroupBy(Of TItem, TKey)(Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: GroupBy<TItem, TKey>
    nameWithType: ObservableExtensions.GroupBy<TItem, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: GroupBy(Of TItem, TKey)
    nameWithType: ObservableExtensions.GroupBy(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  name: GroupBy<TItem, TKey>(Expression<Func<TItem, TKey>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupBy<TItem, TKey>(Expression<Func<TItem, TKey>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TItem, TKey>(System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TItem, TKey)(Expression(Of Func(Of TItem, TKey)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TItem, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TItem, TKey)(Expression(Of Func(Of TItem, TKey)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy<TItem, TKey>
    nameWithType: ObservableExtensions.GroupBy<TItem, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy(Of TItem, TKey)
    nameWithType: ObservableExtensions.GroupBy(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TItem}},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  name: GroupBy<TItem, TKey, TResult>(Expression<Func<TItem, TKey>>, Expression<Func<TKey, IEnumerable<TItem>, TResult>>)
  nameWithType: ObservableExtensions.GroupBy<TItem, TKey, TResult>(Expression<Func<TItem, TKey>>, Expression<Func<TKey, IEnumerable<TItem>, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TItem, TKey, TResult>(System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TItem>, TResult>>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TItem, TKey, TResult)(Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TItem), TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TItem, TKey, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TItem), TResult)))
  name.vb: GroupBy(Of TItem, TKey, TResult)(Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TItem), TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
    name: GroupBy<TItem, TKey, TResult>
    nameWithType: ObservableExtensions.GroupBy<TItem, TKey, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TItem, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
    name: GroupBy(Of TItem, TKey, TResult)
    nameWithType: ObservableExtensions.GroupBy(Of TItem, TKey, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TItem, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TItem}},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  name: GroupBy<TItem, TKey, TResult>(Expression<Func<TItem, TKey>>, Expression<Func<TKey, IEnumerable<TItem>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupBy<TItem, TKey, TResult>(Expression<Func<TItem, TKey>>, Expression<Func<TKey, IEnumerable<TItem>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TItem, TKey, TResult>(System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TItem>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TItem, TKey, TResult)(Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TItem), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TItem, TKey, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TItem), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TItem, TKey, TResult)(Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TItem), TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy<TItem, TKey, TResult>
    nameWithType: ObservableExtensions.GroupBy<TItem, TKey, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TItem, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy(Of TItem, TKey, TResult)
    nameWithType: ObservableExtensions.GroupBy(Of TItem, TKey, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TItem, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TItem},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  name: GroupJoin<TItem, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<TItem, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TItem, IEnumerable<TInner>, TResult>>)
  nameWithType: ObservableExtensions.GroupJoin<TItem, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<TItem, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TItem, IEnumerable<TInner>, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin<TItem, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TItem, System.Collections.Generic.IEnumerable<TInner>, TResult>>)
  nameWithType.vb: ObservableExtensions.GroupJoin(Of TItem, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TItem, IEnumerable(Of TInner), TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupJoin(Of TItem, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Collections.Generic.IEnumerable(Of TInner), TResult)))
  name.vb: GroupJoin(Of TItem, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TItem, IEnumerable(Of TInner), TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
    name: GroupJoin<TItem, TInner, TKey, TResult>
    nameWithType: ObservableExtensions.GroupJoin<TItem, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin<TItem, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
    name: GroupJoin(Of TItem, TInner, TKey, TResult)
    nameWithType: ObservableExtensions.GroupJoin(Of TItem, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin(Of TItem, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TItem},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  name: GroupJoin<TItem, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<TItem, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TItem, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupJoin<TItem, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<TItem, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TItem, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin<TItem, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TItem, System.Collections.Generic.IEnumerable<TInner>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupJoin(Of TItem, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TItem, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupJoin(Of TItem, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Collections.Generic.IEnumerable(Of TInner), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupJoin(Of TItem, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TItem, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin<TItem, TInner, TKey, TResult>
    nameWithType: ObservableExtensions.GroupJoin<TItem, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin<TItem, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin(Of TItem, TInner, TKey, TResult)
    nameWithType: ObservableExtensions.GroupJoin(Of TItem, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin(Of TItem, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: Intersect<TItem>(IEnumerable<TItem>)
  nameWithType: ObservableExtensions.Intersect<TItem>(IEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect<TItem>(System.Collections.Generic.IEnumerable<TItem>)
  nameWithType.vb: ObservableExtensions.Intersect(Of TItem)(IEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Intersect(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem))
  name.vb: Intersect(Of TItem)(IEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{``0})
    name: Intersect<TItem>
    nameWithType: ObservableExtensions.Intersect<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{``0})
    name: Intersect(Of TItem)
    nameWithType: ObservableExtensions.Intersect(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Intersect<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  nameWithType: ObservableExtensions.Intersect<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect<TItem>(System.Collections.Generic.IEnumerable<TItem>, System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ObservableExtensions.Intersect(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Intersect(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem), System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: Intersect(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Intersect<TItem>
    nameWithType: ObservableExtensions.Intersect<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Intersect(Of TItem)
    nameWithType: ObservableExtensions.Intersect(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsProperSubsetOf<TItem>(IEnumerable<TItem>)
  nameWithType: ObservableExtensions.IsProperSubsetOf<TItem>(IEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf<TItem>(System.Collections.Generic.IEnumerable<TItem>)
  nameWithType.vb: ObservableExtensions.IsProperSubsetOf(Of TItem)(IEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem))
  name.vb: IsProperSubsetOf(Of TItem)(IEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsProperSubsetOf<TItem>
    nameWithType: ObservableExtensions.IsProperSubsetOf<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsProperSubsetOf(Of TItem)
    nameWithType: ObservableExtensions.IsProperSubsetOf(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsProperSubsetOf<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  nameWithType: ObservableExtensions.IsProperSubsetOf<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf<TItem>(System.Collections.Generic.IEnumerable<TItem>, System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ObservableExtensions.IsProperSubsetOf(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem), System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: IsProperSubsetOf(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSubsetOf<TItem>
    nameWithType: ObservableExtensions.IsProperSubsetOf<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSubsetOf(Of TItem)
    nameWithType: ObservableExtensions.IsProperSubsetOf(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsProperSupersetOf<TItem>(IEnumerable<TItem>)
  nameWithType: ObservableExtensions.IsProperSupersetOf<TItem>(IEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf<TItem>(System.Collections.Generic.IEnumerable<TItem>)
  nameWithType.vb: ObservableExtensions.IsProperSupersetOf(Of TItem)(IEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem))
  name.vb: IsProperSupersetOf(Of TItem)(IEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsProperSupersetOf<TItem>
    nameWithType: ObservableExtensions.IsProperSupersetOf<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsProperSupersetOf(Of TItem)
    nameWithType: ObservableExtensions.IsProperSupersetOf(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsProperSupersetOf<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  nameWithType: ObservableExtensions.IsProperSupersetOf<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf<TItem>(System.Collections.Generic.IEnumerable<TItem>, System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ObservableExtensions.IsProperSupersetOf(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem), System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: IsProperSupersetOf(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSupersetOf<TItem>
    nameWithType: ObservableExtensions.IsProperSupersetOf<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSupersetOf(Of TItem)
    nameWithType: ObservableExtensions.IsProperSupersetOf(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsSubsetOf<TItem>(IEnumerable<TItem>)
  nameWithType: ObservableExtensions.IsSubsetOf<TItem>(IEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf<TItem>(System.Collections.Generic.IEnumerable<TItem>)
  nameWithType.vb: ObservableExtensions.IsSubsetOf(Of TItem)(IEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem))
  name.vb: IsSubsetOf(Of TItem)(IEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsSubsetOf<TItem>
    nameWithType: ObservableExtensions.IsSubsetOf<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsSubsetOf(Of TItem)
    nameWithType: ObservableExtensions.IsSubsetOf(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsSubsetOf<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  nameWithType: ObservableExtensions.IsSubsetOf<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf<TItem>(System.Collections.Generic.IEnumerable<TItem>, System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ObservableExtensions.IsSubsetOf(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem), System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: IsSubsetOf(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSubsetOf<TItem>
    nameWithType: ObservableExtensions.IsSubsetOf<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSubsetOf(Of TItem)
    nameWithType: ObservableExtensions.IsSubsetOf(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsSupersetOf<TItem>(IEnumerable<TItem>)
  nameWithType: ObservableExtensions.IsSupersetOf<TItem>(IEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf<TItem>(System.Collections.Generic.IEnumerable<TItem>)
  nameWithType.vb: ObservableExtensions.IsSupersetOf(Of TItem)(IEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem))
  name.vb: IsSupersetOf(Of TItem)(IEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsSupersetOf<TItem>
    nameWithType: ObservableExtensions.IsSupersetOf<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{``0})
    name: IsSupersetOf(Of TItem)
    nameWithType: ObservableExtensions.IsSupersetOf(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsSupersetOf<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  nameWithType: ObservableExtensions.IsSupersetOf<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf<TItem>(System.Collections.Generic.IEnumerable<TItem>, System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ObservableExtensions.IsSupersetOf(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem), System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: IsSupersetOf(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSupersetOf<TItem>
    nameWithType: ObservableExtensions.IsSupersetOf<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSupersetOf(Of TItem)
    nameWithType: ObservableExtensions.IsSupersetOf(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TItem},{TInner},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  name: Join<TItem, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<TItem, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TItem, TInner, TResult>>)
  nameWithType: ObservableExtensions.Join<TItem, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<TItem, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TItem, TInner, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Join<TItem, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TItem, TInner, TResult>>)
  nameWithType.vb: ObservableExtensions.Join(Of TItem, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TItem, TInner, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Join(Of TItem, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TInner, TResult)))
  name.vb: Join(Of TItem, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TItem, TInner, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
    name: Join<TItem, TInner, TKey, TResult>
    nameWithType: ObservableExtensions.Join<TItem, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Join<TItem, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
    name: Join(Of TItem, TInner, TKey, TResult)
    nameWithType: ObservableExtensions.Join(Of TItem, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Join(Of TItem, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TItem},{TInner},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  name: Join<TItem, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<TItem, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TItem, TInner, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.Join<TItem, TInner, TKey, TResult>(IEnumerable<TInner>, Expression<Func<TItem, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TItem, TInner, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Join<TItem, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TItem, TInner, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.Join(Of TItem, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TItem, TInner, TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Join(Of TItem, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TInner, TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Join(Of TItem, TInner, TKey, TResult)(IEnumerable(Of TInner), Expression(Of Func(Of TItem, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TItem, TInner, TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: Join<TItem, TInner, TKey, TResult>
    nameWithType: ObservableExtensions.Join<TItem, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Join<TItem, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: Join(Of TItem, TInner, TKey, TResult)
    nameWithType: ObservableExtensions.Join(Of TItem, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Join(Of TItem, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``1(System.Collections.Generic.IComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  name: Max<TItem>(IComparer<TItem>)
  nameWithType: ObservableExtensions.Max<TItem>(IComparer<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TItem>(System.Collections.Generic.IComparer<TItem>)
  nameWithType.vb: ObservableExtensions.Max(Of TItem)(IComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TItem)(System.Collections.Generic.IComparer(Of TItem))
  name.vb: Max(Of TItem)(IComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``1(System.Collections.Generic.IComparer{``0})
    name: Max<TItem>
    nameWithType: ObservableExtensions.Max<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``1(System.Collections.Generic.IComparer{``0})
    name: Max(Of TItem)
    nameWithType: ObservableExtensions.Max(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: Max<TItem, TResult>(Expression<Func<TItem, TResult>>)
  nameWithType: ObservableExtensions.Max<TItem, TResult>(Expression<Func<TItem, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TItem, TResult>(System.Linq.Expressions.Expression<System.Func<TItem, TResult>>)
  nameWithType.vb: ObservableExtensions.Max(Of TItem, TResult)(Expression(Of Func(Of TItem, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TItem, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TResult)))
  name.vb: Max(Of TItem, TResult)(Expression(Of Func(Of TItem, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Max<TItem, TResult>
    nameWithType: ObservableExtensions.Max<TItem, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TItem, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Max(Of TItem, TResult)
    nameWithType: ObservableExtensions.Max(Of TItem, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max(Of TItem, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}},System.Collections.Generic.IComparer{{TResult}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: Max<TItem, TResult>(Expression<Func<TItem, TResult>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Max<TItem, TResult>(Expression<Func<TItem, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TItem, TResult>(System.Linq.Expressions.Expression<System.Func<TItem, TResult>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Max(Of TItem, TResult)(Expression(Of Func(Of TItem, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TItem, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of TItem, TResult)(Expression(Of Func(Of TItem, TResult)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Max<TItem, TResult>
    nameWithType: ObservableExtensions.Max<TItem, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TItem, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Max(Of TItem, TResult)
    nameWithType: ObservableExtensions.Max(Of TItem, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max(Of TItem, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{{TResult}}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  name: Max<TItem, TResult>(Expression<Func<TItem, Nullable<TResult>>>)
  nameWithType: ObservableExtensions.Max<TItem, TResult>(Expression<Func<TItem, Nullable<TResult>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TItem, TResult>(System.Linq.Expressions.Expression<System.Func<TItem, System.Nullable<TResult>>>)
  nameWithType.vb: ObservableExtensions.Max(Of TItem, TResult)(Expression(Of Func(Of TItem, Nullable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TItem, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Nullable(Of TResult))))
  name.vb: Max(Of TItem, TResult)(Expression(Of Func(Of TItem, Nullable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Max<TItem, TResult>
    nameWithType: ObservableExtensions.Max<TItem, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TItem, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Max(Of TItem, TResult)
    nameWithType: ObservableExtensions.Max(Of TItem, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max(Of TItem, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{{TResult}}}},System.Collections.Generic.IComparer{{TResult}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  name: Max<TItem, TResult>(Expression<Func<TItem, Nullable<TResult>>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Max<TItem, TResult>(Expression<Func<TItem, Nullable<TResult>>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TItem, TResult>(System.Linq.Expressions.Expression<System.Func<TItem, System.Nullable<TResult>>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Max(Of TItem, TResult)(Expression(Of Func(Of TItem, Nullable(Of TResult))), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TItem, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Nullable(Of TResult))), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of TItem, TResult)(Expression(Of Func(Of TItem, Nullable(Of TResult))), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Max<TItem, TResult>
    nameWithType: ObservableExtensions.Max<TItem, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TItem, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Max(Of TItem, TResult)
    nameWithType: ObservableExtensions.Max(Of TItem, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max(Of TItem, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``1(System.Collections.Generic.IComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  name: Min<TItem>(IComparer<TItem>)
  nameWithType: ObservableExtensions.Min<TItem>(IComparer<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TItem>(System.Collections.Generic.IComparer<TItem>)
  nameWithType.vb: ObservableExtensions.Min(Of TItem)(IComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TItem)(System.Collections.Generic.IComparer(Of TItem))
  name.vb: Min(Of TItem)(IComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``1(System.Collections.Generic.IComparer{``0})
    name: Min<TItem>
    nameWithType: ObservableExtensions.Min<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``1(System.Collections.Generic.IComparer{``0})
    name: Min(Of TItem)
    nameWithType: ObservableExtensions.Min(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: Min<TItem, TResult>(Expression<Func<TItem, TResult>>)
  nameWithType: ObservableExtensions.Min<TItem, TResult>(Expression<Func<TItem, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TItem, TResult>(System.Linq.Expressions.Expression<System.Func<TItem, TResult>>)
  nameWithType.vb: ObservableExtensions.Min(Of TItem, TResult)(Expression(Of Func(Of TItem, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TItem, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TResult)))
  name.vb: Min(Of TItem, TResult)(Expression(Of Func(Of TItem, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Min<TItem, TResult>
    nameWithType: ObservableExtensions.Min<TItem, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TItem, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Min(Of TItem, TResult)
    nameWithType: ObservableExtensions.Min(Of TItem, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min(Of TItem, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}},System.Collections.Generic.IComparer{{TResult}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: Min<TItem, TResult>(Expression<Func<TItem, TResult>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Min<TItem, TResult>(Expression<Func<TItem, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TItem, TResult>(System.Linq.Expressions.Expression<System.Func<TItem, TResult>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Min(Of TItem, TResult)(Expression(Of Func(Of TItem, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TItem, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of TItem, TResult)(Expression(Of Func(Of TItem, TResult)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Min<TItem, TResult>
    nameWithType: ObservableExtensions.Min<TItem, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TItem, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Min(Of TItem, TResult)
    nameWithType: ObservableExtensions.Min(Of TItem, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min(Of TItem, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{{TResult}}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  name: Min<TItem, TResult>(Expression<Func<TItem, Nullable<TResult>>>)
  nameWithType: ObservableExtensions.Min<TItem, TResult>(Expression<Func<TItem, Nullable<TResult>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TItem, TResult>(System.Linq.Expressions.Expression<System.Func<TItem, System.Nullable<TResult>>>)
  nameWithType.vb: ObservableExtensions.Min(Of TItem, TResult)(Expression(Of Func(Of TItem, Nullable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TItem, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Nullable(Of TResult))))
  name.vb: Min(Of TItem, TResult)(Expression(Of Func(Of TItem, Nullable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Min<TItem, TResult>
    nameWithType: ObservableExtensions.Min<TItem, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TItem, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Min(Of TItem, TResult)
    nameWithType: ObservableExtensions.Min(Of TItem, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min(Of TItem, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{{TResult}}}},System.Collections.Generic.IComparer{{TResult}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  name: Min<TItem, TResult>(Expression<Func<TItem, Nullable<TResult>>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Min<TItem, TResult>(Expression<Func<TItem, Nullable<TResult>>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TItem, TResult>(System.Linq.Expressions.Expression<System.Func<TItem, System.Nullable<TResult>>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Min(Of TItem, TResult)(Expression(Of Func(Of TItem, Nullable(Of TResult))), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TItem, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Nullable(Of TResult))), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of TItem, TResult)(Expression(Of Func(Of TItem, Nullable(Of TResult))), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Min<TItem, TResult>
    nameWithType: ObservableExtensions.Min<TItem, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TItem, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Min(Of TItem, TResult)
    nameWithType: ObservableExtensions.Min(Of TItem, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min(Of TItem, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable.NMF.Expressions.Linq.ObservableExtensions.OfType``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
  name: OfType<TResult>()
  nameWithType: ObservableExtensions.OfType<TResult>()
  fullName: NMF.Expressions.Linq.ObservableExtensions.OfType<TResult>()
  nameWithType.vb: ObservableExtensions.OfType(Of TResult)()
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OfType(Of TResult)()
  name.vb: OfType(Of TResult)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OfType``1
    name: OfType<TResult>
    nameWithType: ObservableExtensions.OfType<TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.OfType<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OfType``1
    name: OfType(Of TResult)
    nameWithType: ObservableExtensions.OfType(Of TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.OfType(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: OrderBy<TItem, TKey>(Expression<Func<TItem, TKey>>)
  nameWithType: ObservableExtensions.OrderBy<TItem, TKey>(Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy<TItem, TKey>(System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ObservableExtensions.OrderBy(Of TItem, TKey)(Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderBy(Of TItem, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: OrderBy(Of TItem, TKey)(Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderBy<TItem, TKey>
    nameWithType: ObservableExtensions.OrderBy<TItem, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderBy(Of TItem, TKey)
    nameWithType: ObservableExtensions.OrderBy(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: OrderBy<TItem, TKey>(Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.OrderBy<TItem, TKey>(Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy<TItem, TKey>(System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ObservableExtensions.OrderBy(Of TItem, TKey)(Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderBy(Of TItem, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderBy(Of TItem, TKey)(Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderBy<TItem, TKey>
    nameWithType: ObservableExtensions.OrderBy<TItem, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderBy(Of TItem, TKey)
    nameWithType: ObservableExtensions.OrderBy(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: OrderByDescending<TItem, TKey>(Expression<Func<TItem, TKey>>)
  nameWithType: ObservableExtensions.OrderByDescending<TItem, TKey>(Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending<TItem, TKey>(System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ObservableExtensions.OrderByDescending(Of TItem, TKey)(Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending(Of TItem, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: OrderByDescending(Of TItem, TKey)(Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderByDescending<TItem, TKey>
    nameWithType: ObservableExtensions.OrderByDescending<TItem, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderByDescending(Of TItem, TKey)
    nameWithType: ObservableExtensions.OrderByDescending(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: OrderByDescending<TItem, TKey>(Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.OrderByDescending<TItem, TKey>(Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending<TItem, TKey>(System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ObservableExtensions.OrderByDescending(Of TItem, TKey)(Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending(Of TItem, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderByDescending(Of TItem, TKey)(Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending<TItem, TKey>
    nameWithType: ObservableExtensions.OrderByDescending<TItem, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending(Of TItem, TKey)
    nameWithType: ObservableExtensions.OrderByDescending(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{{TItem},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: Select<TItem, TResult>(Expression<Func<TItem, TResult>>)
  nameWithType: ObservableExtensions.Select<TItem, TResult>(Expression<Func<TItem, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Select<TItem, TResult>(System.Linq.Expressions.Expression<System.Func<TItem, TResult>>)
  nameWithType.vb: ObservableExtensions.Select(Of TItem, TResult)(Expression(Of Func(Of TItem, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Select(Of TItem, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, TResult)))
  name.vb: Select(Of TItem, TResult)(Expression(Of Func(Of TItem, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Select<TItem, TResult>
    nameWithType: ObservableExtensions.Select<TItem, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Select<TItem, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Select(Of TItem, TResult)
    nameWithType: ObservableExtensions.Select(Of TItem, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Select(Of TItem, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(System.Linq.Expressions.Expression{System.Func{{TItem},System.Collections.Generic.IEnumerable{{TIntermediate}}}},System.Linq.Expressions.Expression{System.Func{{TItem},{TIntermediate},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  name: SelectMany<TItem, TIntermediate, TResult>(Expression<Func<TItem, IEnumerable<TIntermediate>>>, Expression<Func<TItem, TIntermediate, TResult>>)
  nameWithType: ObservableExtensions.SelectMany<TItem, TIntermediate, TResult>(Expression<Func<TItem, IEnumerable<TIntermediate>>>, Expression<Func<TItem, TIntermediate, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TItem, TIntermediate, TResult>(System.Linq.Expressions.Expression<System.Func<TItem, System.Collections.Generic.IEnumerable<TIntermediate>>>, System.Linq.Expressions.Expression<System.Func<TItem, TIntermediate, TResult>>)
  nameWithType.vb: ObservableExtensions.SelectMany(Of TItem, TIntermediate, TResult)(Expression(Of Func(Of TItem, IEnumerable(Of TIntermediate))), Expression(Of Func(Of TItem, TIntermediate, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TItem, TIntermediate, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Collections.Generic.IEnumerable(Of TIntermediate))), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TIntermediate, TResult)))
  name.vb: SelectMany(Of TItem, TIntermediate, TResult)(Expression(Of Func(Of TItem, IEnumerable(Of TIntermediate))), Expression(Of Func(Of TItem, TIntermediate, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
    name: SelectMany<TItem, TIntermediate, TResult>
    nameWithType: ObservableExtensions.SelectMany<TItem, TIntermediate, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TItem, TIntermediate, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
    name: SelectMany(Of TItem, TIntermediate, TResult)
    nameWithType: ObservableExtensions.SelectMany(Of TItem, TIntermediate, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TItem, TIntermediate, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(System.Linq.Expressions.Expression{System.Func{{TItem},System.Collections.Generic.IEnumerable{{TResult}}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  name: SelectMany<TItem, TResult>(Expression<Func<TItem, IEnumerable<TResult>>>)
  nameWithType: ObservableExtensions.SelectMany<TItem, TResult>(Expression<Func<TItem, IEnumerable<TResult>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TItem, TResult>(System.Linq.Expressions.Expression<System.Func<TItem, System.Collections.Generic.IEnumerable<TResult>>>)
  nameWithType.vb: ObservableExtensions.SelectMany(Of TItem, TResult)(Expression(Of Func(Of TItem, IEnumerable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TItem, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Collections.Generic.IEnumerable(Of TResult))))
  name.vb: SelectMany(Of TItem, TResult)(Expression(Of Func(Of TItem, IEnumerable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
    name: SelectMany<TItem, TResult>
    nameWithType: ObservableExtensions.SelectMany<TItem, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TItem, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
    name: SelectMany(Of TItem, TResult)
    nameWithType: ObservableExtensions.SelectMany(Of TItem, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TItem, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: SetEquals<TItem>(IEnumerable<TItem>)
  nameWithType: ObservableExtensions.SetEquals<TItem>(IEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals<TItem>(System.Collections.Generic.IEnumerable<TItem>)
  nameWithType.vb: ObservableExtensions.SetEquals(Of TItem)(IEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SetEquals(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem))
  name.vb: SetEquals(Of TItem)(IEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{``0})
    name: SetEquals<TItem>
    nameWithType: ObservableExtensions.SetEquals<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{``0})
    name: SetEquals(Of TItem)
    nameWithType: ObservableExtensions.SetEquals(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: SetEquals<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  nameWithType: ObservableExtensions.SetEquals<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals<TItem>(System.Collections.Generic.IEnumerable<TItem>, System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ObservableExtensions.SetEquals(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SetEquals(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem), System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: SetEquals(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: SetEquals<TItem>
    nameWithType: ObservableExtensions.SetEquals<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: SetEquals(Of TItem)
    nameWithType: ObservableExtensions.SetEquals(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  name: SingleOrDefault<TItem>()
  nameWithType: ObservableExtensions.SingleOrDefault<TItem>()
  fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault<TItem>()
  nameWithType.vb: ObservableExtensions.SingleOrDefault(Of TItem)()
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault(Of TItem)()
  name.vb: SingleOrDefault(Of TItem)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1
    name: SingleOrDefault<TItem>
    nameWithType: ObservableExtensions.SingleOrDefault<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1
    name: SingleOrDefault(Of TItem)
    nameWithType: ObservableExtensions.SingleOrDefault(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: SingleOrDefault<TItem>(Expression<Func<TItem, Boolean>>)
  nameWithType: ObservableExtensions.SingleOrDefault<TItem>(Expression<Func<TItem, Boolean>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Boolean>>)
  nameWithType.vb: ObservableExtensions.SingleOrDefault(Of TItem)(Expression(Of Func(Of TItem, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Boolean)))
  name.vb: SingleOrDefault(Of TItem)(Expression(Of Func(Of TItem, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: SingleOrDefault<TItem>
    nameWithType: ObservableExtensions.SingleOrDefault<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: SingleOrDefault(Of TItem)
    nameWithType: ObservableExtensions.SingleOrDefault(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Int32}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  name: Sum<TItem>(Expression<Func<TItem, Int32>>)
  nameWithType: ObservableExtensions.Sum<TItem>(Expression<Func<TItem, Int32>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Int32>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TItem)(Expression(Of Func(Of TItem, Int32)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Int32)))
  name.vb: Sum(Of TItem)(Expression(Of Func(Of TItem, Int32)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Sum<TItem>
    nameWithType: ObservableExtensions.Sum<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Sum(Of TItem)
    nameWithType: ObservableExtensions.Sum(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Int64}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  name: Sum<TItem>(Expression<Func<TItem, Int64>>)
  nameWithType: ObservableExtensions.Sum<TItem>(Expression<Func<TItem, Int64>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Int64>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TItem)(Expression(Of Func(Of TItem, Int64)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Int64)))
  name.vb: Sum(Of TItem)(Expression(Of Func(Of TItem, Int64)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Sum<TItem>
    nameWithType: ObservableExtensions.Sum<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Sum(Of TItem)
    nameWithType: ObservableExtensions.Sum(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Single}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  name: Sum<TItem>(Expression<Func<TItem, Single>>)
  nameWithType: ObservableExtensions.Sum<TItem>(Expression<Func<TItem, Single>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Single>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TItem)(Expression(Of Func(Of TItem, Single)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Single)))
  name.vb: Sum(Of TItem)(Expression(Of Func(Of TItem, Single)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Sum<TItem>
    nameWithType: ObservableExtensions.Sum<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Sum(Of TItem)
    nameWithType: ObservableExtensions.Sum(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Double}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  name: Sum<TItem>(Expression<Func<TItem, Double>>)
  nameWithType: ObservableExtensions.Sum<TItem>(Expression<Func<TItem, Double>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Double>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TItem)(Expression(Of Func(Of TItem, Double)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Double)))
  name.vb: Sum(Of TItem)(Expression(Of Func(Of TItem, Double)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Sum<TItem>
    nameWithType: ObservableExtensions.Sum<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Sum(Of TItem)
    nameWithType: ObservableExtensions.Sum(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  name: Sum<TItem>(Expression<Func<TItem, Decimal>>)
  nameWithType: ObservableExtensions.Sum<TItem>(Expression<Func<TItem, Decimal>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Decimal>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TItem)(Expression(Of Func(Of TItem, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Decimal)))
  name.vb: Sum(Of TItem)(Expression(Of Func(Of TItem, Decimal)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Sum<TItem>
    nameWithType: ObservableExtensions.Sum<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Sum(Of TItem)
    nameWithType: ObservableExtensions.Sum(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  name: Sum<TItem>(Expression<Func<TItem, Nullable<Int32>>>)
  nameWithType: ObservableExtensions.Sum<TItem>(Expression<Func<TItem, Nullable<Int32>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Nullable<System.Int32>>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Int32))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Nullable(Of System.Int32))))
  name.vb: Sum(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Int32))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Sum<TItem>
    nameWithType: ObservableExtensions.Sum<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Sum(Of TItem)
    nameWithType: ObservableExtensions.Sum(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  name: Sum<TItem>(Expression<Func<TItem, Nullable<Int64>>>)
  nameWithType: ObservableExtensions.Sum<TItem>(Expression<Func<TItem, Nullable<Int64>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Nullable<System.Int64>>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Int64))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Nullable(Of System.Int64))))
  name.vb: Sum(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Int64))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Sum<TItem>
    nameWithType: ObservableExtensions.Sum<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Sum(Of TItem)
    nameWithType: ObservableExtensions.Sum(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  name: Sum<TItem>(Expression<Func<TItem, Nullable<Single>>>)
  nameWithType: ObservableExtensions.Sum<TItem>(Expression<Func<TItem, Nullable<Single>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Nullable<System.Single>>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Single))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Nullable(Of System.Single))))
  name.vb: Sum(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Single))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Sum<TItem>
    nameWithType: ObservableExtensions.Sum<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Sum(Of TItem)
    nameWithType: ObservableExtensions.Sum(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  name: Sum<TItem>(Expression<Func<TItem, Nullable<Double>>>)
  nameWithType: ObservableExtensions.Sum<TItem>(Expression<Func<TItem, Nullable<Double>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Nullable<System.Double>>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Double))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Nullable(Of System.Double))))
  name.vb: Sum(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Double))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Sum<TItem>
    nameWithType: ObservableExtensions.Sum<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Sum(Of TItem)
    nameWithType: ObservableExtensions.Sum(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  name: Sum<TItem>(Expression<Func<TItem, Nullable<Decimal>>>)
  nameWithType: ObservableExtensions.Sum<TItem>(Expression<Func<TItem, Nullable<Decimal>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Nullable<System.Decimal>>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Decimal))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Of TItem)(Expression(Of Func(Of TItem, Nullable(Of Decimal))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Sum<TItem>
    nameWithType: ObservableExtensions.Sum<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Sum(Of TItem)
    nameWithType: ObservableExtensions.Sum(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: TopX<TItem, TKey>(Int32, Expression<Func<TItem, TKey>>)
  nameWithType: ObservableExtensions.TopX<TItem, TKey>(Int32, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.TopX<TItem, TKey>(System.Int32, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ObservableExtensions.TopX(Of TItem, TKey)(Int32, Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.TopX(Of TItem, TKey)(System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: TopX(Of TItem, TKey)(Int32, Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: TopX<TItem, TKey>
    nameWithType: ObservableExtensions.TopX<TItem, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.TopX<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: TopX(Of TItem, TKey)
    nameWithType: ObservableExtensions.TopX(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.TopX(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: TopX<TItem, TKey>(Int32, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.TopX<TItem, TKey>(Int32, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.TopX<TItem, TKey>(System.Int32, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ObservableExtensions.TopX(Of TItem, TKey)(Int32, Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.TopX(Of TItem, TKey)(System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: TopX(Of TItem, TKey)(Int32, Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: TopX<TItem, TKey>
    nameWithType: ObservableExtensions.TopX<TItem, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.TopX<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: TopX(Of TItem, TKey)
    nameWithType: ObservableExtensions.TopX(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.TopX(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Union``1(System.Collections.Generic.IEnumerable{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: Union<TItem>(IEnumerable<TItem>)
  nameWithType: ObservableExtensions.Union<TItem>(IEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Union<TItem>(System.Collections.Generic.IEnumerable<TItem>)
  nameWithType.vb: ObservableExtensions.Union(Of TItem)(IEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Union(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem))
  name.vb: Union(Of TItem)(IEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(System.Collections.Generic.IEnumerable{``0})
    name: Union<TItem>
    nameWithType: ObservableExtensions.Union<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Union<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(System.Collections.Generic.IEnumerable{``0})
    name: Union(Of TItem)
    nameWithType: ObservableExtensions.Union(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Union(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Union``1(System.Collections.Generic.IEnumerable{{TItem}},System.Collections.Generic.IEqualityComparer{{TItem}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Union<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  nameWithType: ObservableExtensions.Union<TItem>(IEnumerable<TItem>, IEqualityComparer<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Union<TItem>(System.Collections.Generic.IEnumerable<TItem>, System.Collections.Generic.IEqualityComparer<TItem>)
  nameWithType.vb: ObservableExtensions.Union(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Union(Of TItem)(System.Collections.Generic.IEnumerable(Of TItem), System.Collections.Generic.IEqualityComparer(Of TItem))
  name.vb: Union(Of TItem)(IEnumerable(Of TItem), IEqualityComparer(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Union<TItem>
    nameWithType: ObservableExtensions.Union<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Union<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Union(Of TItem)
    nameWithType: ObservableExtensions.Union(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Union(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{{TItem},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Where<TItem>(Expression<Func<TItem, Boolean>>)
  nameWithType: ObservableExtensions.Where<TItem>(Expression<Func<TItem, Boolean>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Where<TItem>(System.Linq.Expressions.Expression<System.Func<TItem, System.Boolean>>)
  nameWithType.vb: ObservableExtensions.Where(Of TItem)(Expression(Of Func(Of TItem, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Where(Of TItem)(System.Linq.Expressions.Expression(Of System.Func(Of TItem, System.Boolean)))
  name.vb: Where(Of TItem)(Expression(Of Func(Of TItem, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where<TItem>
    nameWithType: ObservableExtensions.Where<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Where<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where(Of TItem)
    nameWithType: ObservableExtensions.Where(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Where(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  name: WithUpdates<TElement>()
  nameWithType: ObservableExtensions.WithUpdates<TElement>()
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<TElement>()
  nameWithType.vb: ObservableExtensions.WithUpdates(Of TElement)()
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of TElement)()
  name.vb: WithUpdates(Of TElement)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
    name: WithUpdates<TElement>
    nameWithType: ObservableExtensions.WithUpdates<TElement>
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
    name: WithUpdates(Of TElement)
    nameWithType: ObservableExtensions.WithUpdates(Of TElement)
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{`1}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
  name: WithUpdates<TItem>()
  nameWithType: ObservableExtensions.WithUpdates<TItem>()
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<TItem>()
  nameWithType.vb: ObservableExtensions.WithUpdates(Of TItem)()
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of TItem)()
  name.vb: WithUpdates(Of TItem)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
    name: WithUpdates<TItem>
    nameWithType: ObservableExtensions.WithUpdates<TItem>
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<TItem>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
    name: WithUpdates(Of TItem)
    nameWithType: ObservableExtensions.WithUpdates(Of TItem)
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of TItem)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: true
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1
  isExternal: true
  name: ReadOnlyObservableCollection<T>
  nameWithType: ReadOnlyObservableCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection<T>
  nameWithType.vb: ReadOnlyObservableCollection(Of T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyObservableCollection(Of T)
  name.vb: ReadOnlyObservableCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1
    name: ReadOnlyObservableCollection
    nameWithType: ReadOnlyObservableCollection
    fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1
    name: ReadOnlyObservableCollection
    nameWithType: ReadOnlyObservableCollection
    fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ComponentModel
  commentId: N:System.ComponentModel
  isExternal: true
  name: System.ComponentModel
  nameWithType: System.ComponentModel
  fullName: System.ComponentModel
- uid: NMF.Expressions.INotifyGrouping`2
  commentId: T:NMF.Expressions.INotifyGrouping`2
  name: INotifyGrouping<TKey, TItem>
  nameWithType: INotifyGrouping<TKey, TItem>
  fullName: NMF.Expressions.INotifyGrouping<TKey, TItem>
  nameWithType.vb: INotifyGrouping(Of TKey, TItem)
  fullName.vb: NMF.Expressions.INotifyGrouping(Of TKey, TItem)
  name.vb: INotifyGrouping(Of TKey, TItem)
  spec.csharp:
  - uid: NMF.Expressions.INotifyGrouping`2
    name: INotifyGrouping
    nameWithType: INotifyGrouping
    fullName: NMF.Expressions.INotifyGrouping
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyGrouping`2
    name: INotifyGrouping
    nameWithType: INotifyGrouping
    fullName: NMF.Expressions.INotifyGrouping
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: NMF.Expressions.INotifyEnumerable`1
  commentId: T:NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<T>
  nameWithType: INotifyEnumerable<T>
  fullName: NMF.Expressions.INotifyEnumerable<T>
  nameWithType.vb: INotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of T)
  name.vb: INotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Specialized
  commentId: N:System.Collections.Specialized
  isExternal: true
  name: System.Collections.Specialized
  nameWithType: System.Collections.Specialized
  fullName: System.Collections.Specialized
- uid: NMF.Expressions.IGroupingExpression`2
  commentId: T:NMF.Expressions.IGroupingExpression`2
  name: IGroupingExpression<TKey, TElement>
  nameWithType: IGroupingExpression<TKey, TElement>
  fullName: NMF.Expressions.IGroupingExpression<TKey, TElement>
  nameWithType.vb: IGroupingExpression(Of TKey, TElement)
  fullName.vb: NMF.Expressions.IGroupingExpression(Of TKey, TElement)
  name.vb: IGroupingExpression(Of TKey, TElement)
  spec.csharp:
  - uid: NMF.Expressions.IGroupingExpression`2
    name: IGroupingExpression
    nameWithType: IGroupingExpression
    fullName: NMF.Expressions.IGroupingExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IGroupingExpression`2
    name: IGroupingExpression
    nameWithType: IGroupingExpression
    fullName: NMF.Expressions.IGroupingExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IGrouping`2
  commentId: T:System.Linq.IGrouping`2
  isExternal: true
  name: IGrouping<TKey, TElement>
  nameWithType: IGrouping<TKey, TElement>
  fullName: System.Linq.IGrouping<TKey, TElement>
  nameWithType.vb: IGrouping(Of TKey, TElement)
  fullName.vb: System.Linq.IGrouping(Of TKey, TElement)
  name.vb: IGrouping(Of TKey, TElement)
  spec.csharp:
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: true
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: NMF.Expressions.IEnumerableExpression`1
  commentId: T:NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<T>
  nameWithType: IEnumerableExpression<T>
  fullName: NMF.Expressions.IEnumerableExpression<T>
  nameWithType.vb: IEnumerableExpression(Of T)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T)
  name.vb: IEnumerableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  isExternal: true
  name: OnCollectionChanged(NotifyCollectionChangedEventArgs)
  nameWithType: ReadOnlyObservableCollection<T>.OnCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection<T>.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  nameWithType.vb: ReadOnlyObservableCollection(Of T).OnCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyObservableCollection(Of T).OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanged
    nameWithType: ReadOnlyObservableCollection<T>.OnCollectionChanged
    fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection<T>.OnCollectionChanged
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    nameWithType: NotifyCollectionChangedEventArgs
    fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanged
    nameWithType: ReadOnlyObservableCollection(Of T).OnCollectionChanged
    fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection(Of T).OnCollectionChanged
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    nameWithType: NotifyCollectionChangedEventArgs
    fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  commentId: M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  isExternal: true
  name: OnPropertyChanged(PropertyChangedEventArgs)
  nameWithType: ReadOnlyObservableCollection<T>.OnPropertyChanged(PropertyChangedEventArgs)
  fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection<T>.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  nameWithType.vb: ReadOnlyObservableCollection(Of T).OnPropertyChanged(PropertyChangedEventArgs)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyObservableCollection(Of T).OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
    name: OnPropertyChanged
    nameWithType: ReadOnlyObservableCollection<T>.OnPropertyChanged
    fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection<T>.OnPropertyChanged
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.PropertyChangedEventArgs
    name: PropertyChangedEventArgs
    nameWithType: PropertyChangedEventArgs
    fullName: System.ComponentModel.PropertyChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
    name: OnPropertyChanged
    nameWithType: ReadOnlyObservableCollection(Of T).OnPropertyChanged
    fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection(Of T).OnPropertyChanged
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ComponentModel.PropertyChangedEventArgs
    name: PropertyChangedEventArgs
    nameWithType: PropertyChangedEventArgs
    fullName: System.ComponentModel.PropertyChangedEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged
  commentId: E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged
  isExternal: true
  name: INotifyCollectionChanged.CollectionChanged
  nameWithType: ReadOnlyObservableCollection<T>.INotifyCollectionChanged.CollectionChanged
  fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection<T>.System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  nameWithType.vb: ReadOnlyObservableCollection(Of T).System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  fullName.vb: System.Collections.ObjectModel.ReadOnlyObservableCollection(Of T).System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  name.vb: System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
- uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged
  commentId: E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged
  isExternal: true
  name: CollectionChanged
  nameWithType: ReadOnlyObservableCollection<T>.CollectionChanged
  fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection<T>.CollectionChanged
  nameWithType.vb: ReadOnlyObservableCollection(Of T).CollectionChanged
  fullName.vb: System.Collections.ObjectModel.ReadOnlyObservableCollection(Of T).CollectionChanged
- uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged
  commentId: E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged
  isExternal: true
  name: INotifyPropertyChanged.PropertyChanged
  nameWithType: ReadOnlyObservableCollection<T>.INotifyPropertyChanged.PropertyChanged
  fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection<T>.System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  nameWithType.vb: ReadOnlyObservableCollection(Of T).System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  fullName.vb: System.Collections.ObjectModel.ReadOnlyObservableCollection(Of T).System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  name.vb: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
- uid: System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged
  commentId: E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged
  isExternal: true
  name: PropertyChanged
  nameWithType: ReadOnlyObservableCollection<T>.PropertyChanged
  fullName: System.Collections.ObjectModel.ReadOnlyObservableCollection<T>.PropertyChanged
  nameWithType.vb: ReadOnlyObservableCollection(Of T).PropertyChanged
  fullName.vb: System.Collections.ObjectModel.ReadOnlyObservableCollection(Of T).PropertyChanged
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ReadOnlyCollection<T>.Contains(T)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.Contains(T)
  nameWithType.vb: ReadOnlyCollection(Of T).Contains(T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)
    name: Contains
    nameWithType: ReadOnlyCollection<T>.Contains
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)
    name: Contains
    nameWithType: ReadOnlyCollection(Of T).Contains
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ReadOnlyCollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ReadOnlyCollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ReadOnlyCollection<T>.CopyTo
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ReadOnlyCollection(Of T).CopyTo
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: ReadOnlyCollection<T>.GetEnumerator()
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.GetEnumerator()
  nameWithType.vb: ReadOnlyCollection(Of T).GetEnumerator()
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator
    name: GetEnumerator
    nameWithType: ReadOnlyCollection<T>.GetEnumerator
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator
    name: GetEnumerator
    nameWithType: ReadOnlyCollection(Of T).GetEnumerator
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: ReadOnlyCollection<T>.IndexOf(T)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IndexOf(T)
  nameWithType.vb: ReadOnlyCollection(Of T).IndexOf(T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)
    name: IndexOf
    nameWithType: ReadOnlyCollection<T>.IndexOf
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)
    name: IndexOf
    nameWithType: ReadOnlyCollection(Of T).IndexOf
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#get_Item(System.Int32)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#get_Item(System.Int32)
  isExternal: true
  name: IList<T>.get_Item(Int32)
  nameWithType: ReadOnlyCollection<T>.IList<T>.get_Item(Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.get_Item(System.Int32)
  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.get_Item(Int32)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.get_Item(System.Int32)
  name.vb: System.Collections.Generic.IList<T>.get_Item(Int32)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#get_Item(System.Int32)
    name: IList<T>.get_Item
    nameWithType: ReadOnlyCollection<T>.IList<T>.get_Item
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#get_Item(System.Int32)
    name: System.Collections.Generic.IList<T>.get_Item
    nameWithType: ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.get_Item
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#set_Item(System.Int32,`0)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#set_Item(System.Int32,`0)
  isExternal: true
  name: IList<T>.set_Item(Int32, T)
  nameWithType: ReadOnlyCollection<T>.IList<T>.set_Item(Int32, T)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.set_Item(System.Int32, T)
  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.set_Item(Int32, T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.set_Item(System.Int32, T)
  name.vb: System.Collections.Generic.IList<T>.set_Item(Int32, T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#set_Item(System.Int32,`0)
    name: IList<T>.set_Item
    nameWithType: ReadOnlyCollection<T>.IList<T>.set_Item
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#set_Item(System.Int32,`0)
    name: System.Collections.Generic.IList<T>.set_Item
    nameWithType: ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.set_Item
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)
  isExternal: true
  name: ICollection<T>.Add(T)
  nameWithType: ReadOnlyCollection<T>.ICollection<T>.Add(T)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  name.vb: System.Collections.Generic.ICollection<T>.Add(T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)
    name: ICollection<T>.Add
    nameWithType: ReadOnlyCollection<T>.ICollection<T>.Add
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)
    name: System.Collections.Generic.ICollection<T>.Add
    nameWithType: ReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Add
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear
  isExternal: true
  name: ICollection<T>.Clear()
  nameWithType: ReadOnlyCollection<T>.ICollection<T>.Clear()
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Clear()
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Clear()
  name.vb: System.Collections.Generic.ICollection<T>.Clear()
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear
    name: ICollection<T>.Clear
    nameWithType: ReadOnlyCollection<T>.ICollection<T>.Clear
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear
    name: System.Collections.Generic.ICollection<T>.Clear
    nameWithType: ReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Clear
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  isExternal: true
  name: IList<T>.Insert(Int32, T)
  nameWithType: ReadOnlyCollection<T>.IList<T>.Insert(Int32, T)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.Insert(Int32, T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  name.vb: System.Collections.Generic.IList<T>.Insert(Int32, T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
    name: IList<T>.Insert
    nameWithType: ReadOnlyCollection<T>.IList<T>.Insert
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
    name: System.Collections.Generic.IList<T>.Insert
    nameWithType: ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.Insert
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  isExternal: true
  name: ICollection<T>.Remove(T)
  nameWithType: ReadOnlyCollection<T>.ICollection<T>.Remove(T)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Remove(T)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Remove(T)
  name.vb: System.Collections.Generic.ICollection<T>.Remove(T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)
    name: ICollection<T>.Remove
    nameWithType: ReadOnlyCollection<T>.ICollection<T>.Remove
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)
    name: System.Collections.Generic.ICollection<T>.Remove
    nameWithType: ReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Remove
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  isExternal: true
  name: IList<T>.RemoveAt(Int32)
  nameWithType: ReadOnlyCollection<T>.IList<T>.RemoveAt(Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.RemoveAt(Int32)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  name.vb: System.Collections.Generic.IList<T>.RemoveAt(Int32)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
    name: IList<T>.RemoveAt
    nameWithType: ReadOnlyCollection<T>.IList<T>.RemoveAt
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
    name: System.Collections.Generic.IList<T>.RemoveAt
    nameWithType: ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.RemoveAt
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator
  isExternal: true
  name: IEnumerable.GetEnumerator()
  nameWithType: ReadOnlyCollection<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: ReadOnlyCollection<T>.IEnumerable.GetEnumerator
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: ReadOnlyCollection(Of T).System.Collections.IEnumerable.GetEnumerator
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isExternal: true
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: ReadOnlyCollection<T>.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: ReadOnlyCollection<T>.ICollection.CopyTo
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: ReadOnlyCollection(Of T).System.Collections.ICollection.CopyTo
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#get_Item(System.Int32)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#get_Item(System.Int32)
  isExternal: true
  name: IList.get_Item(Int32)
  nameWithType: ReadOnlyCollection<T>.IList.get_Item(Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.get_Item(System.Int32)
  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.IList.get_Item(Int32)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.get_Item(System.Int32)
  name.vb: System.Collections.IList.get_Item(Int32)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#get_Item(System.Int32)
    name: IList.get_Item
    nameWithType: ReadOnlyCollection<T>.IList.get_Item
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#get_Item(System.Int32)
    name: System.Collections.IList.get_Item
    nameWithType: ReadOnlyCollection(Of T).System.Collections.IList.get_Item
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#set_Item(System.Int32,System.Object)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#set_Item(System.Int32,System.Object)
  isExternal: true
  name: IList.set_Item(Int32, Object)
  nameWithType: ReadOnlyCollection<T>.IList.set_Item(Int32, Object)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.set_Item(System.Int32, System.Object)
  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.IList.set_Item(Int32, Object)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.set_Item(System.Int32, System.Object)
  name.vb: System.Collections.IList.set_Item(Int32, Object)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: IList.set_Item
    nameWithType: ReadOnlyCollection<T>.IList.set_Item
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: System.Collections.IList.set_Item
    nameWithType: ReadOnlyCollection(Of T).System.Collections.IList.set_Item
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)
  isExternal: true
  name: IList.Add(Object)
  nameWithType: ReadOnlyCollection<T>.IList.Add(Object)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Add(System.Object)
  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.IList.Add(Object)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)
    name: IList.Add
    nameWithType: ReadOnlyCollection<T>.IList.Add
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)
    name: System.Collections.IList.Add
    nameWithType: ReadOnlyCollection(Of T).System.Collections.IList.Add
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear
  isExternal: true
  name: IList.Clear()
  nameWithType: ReadOnlyCollection<T>.IList.Clear()
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Clear()
  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.IList.Clear()
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.Clear()
  name.vb: System.Collections.IList.Clear()
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear
    name: IList.Clear
    nameWithType: ReadOnlyCollection<T>.IList.Clear
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear
    name: System.Collections.IList.Clear
    nameWithType: ReadOnlyCollection(Of T).System.Collections.IList.Clear
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)
  isExternal: true
  name: IList.Contains(Object)
  nameWithType: ReadOnlyCollection<T>.IList.Contains(Object)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Contains(System.Object)
  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.IList.Contains(Object)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)
    name: IList.Contains
    nameWithType: ReadOnlyCollection<T>.IList.Contains
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)
    name: System.Collections.IList.Contains
    nameWithType: ReadOnlyCollection(Of T).System.Collections.IList.Contains
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)
  isExternal: true
  name: IList.IndexOf(Object)
  nameWithType: ReadOnlyCollection<T>.IList.IndexOf(Object)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.IList.IndexOf(Object)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)
    name: IList.IndexOf
    nameWithType: ReadOnlyCollection<T>.IList.IndexOf
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)
    name: System.Collections.IList.IndexOf
    nameWithType: ReadOnlyCollection(Of T).System.Collections.IList.IndexOf
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  isExternal: true
  name: IList.Insert(Int32, Object)
  nameWithType: ReadOnlyCollection<T>.IList.Insert(Int32, Object)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Insert(System.Int32, System.Object)
  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.IList.Insert(Int32, Object)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.Insert(System.Int32, System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: IList.Insert
    nameWithType: ReadOnlyCollection<T>.IList.Insert
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: System.Collections.IList.Insert
    nameWithType: ReadOnlyCollection(Of T).System.Collections.IList.Insert
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)
  isExternal: true
  name: IList.Remove(Object)
  nameWithType: ReadOnlyCollection<T>.IList.Remove(Object)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Remove(System.Object)
  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.IList.Remove(Object)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)
    name: IList.Remove
    nameWithType: ReadOnlyCollection<T>.IList.Remove
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)
    name: System.Collections.IList.Remove
    nameWithType: ReadOnlyCollection(Of T).System.Collections.IList.Remove
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)
  isExternal: true
  name: IList.RemoveAt(Int32)
  nameWithType: ReadOnlyCollection<T>.IList.RemoveAt(Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.RemoveAt(System.Int32)
  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.IList.RemoveAt(Int32)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.RemoveAt(System.Int32)
  name.vb: System.Collections.IList.RemoveAt(Int32)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)
    name: IList.RemoveAt
    nameWithType: ReadOnlyCollection<T>.IList.RemoveAt
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)
    name: System.Collections.IList.RemoveAt
    nameWithType: ReadOnlyCollection(Of T).System.Collections.IList.RemoveAt
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Count
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ReadOnlyCollection<T>.Count
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.Count
  nameWithType.vb: ReadOnlyCollection(Of T).Count
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).Count
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: ReadOnlyCollection<T>.Item[Int32]
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.Item[System.Int32]
  nameWithType.vb: ReadOnlyCollection(Of T).Item(Int32)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)
    name: Item
    nameWithType: ReadOnlyCollection<T>.Item
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)
    name: Item
    nameWithType: ReadOnlyCollection(Of T).Item
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Items
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.Items
  isExternal: true
  name: Items
  nameWithType: ReadOnlyCollection<T>.Items
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.Items
  nameWithType.vb: ReadOnlyCollection(Of T).Items
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).Items
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  isExternal: true
  name: ICollection<T>.IsReadOnly
  nameWithType: ReadOnlyCollection<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  isExternal: true
  name: IList<T>.Item[Int32]
  nameWithType: ReadOnlyCollection<T>.IList<T>.Item[Int32]
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.Item(Int32)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.Item(System.Int32)
  name.vb: System.Collections.Generic.IList<T>.Item(Int32)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)
    name: IList<T>.Item
    nameWithType: ReadOnlyCollection<T>.IList<T>.Item
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)
    name: System.Collections.Generic.IList<T>.Item
    nameWithType: ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.Item
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized
  isExternal: true
  name: ICollection.IsSynchronized
  nameWithType: ReadOnlyCollection<T>.ICollection.IsSynchronized
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot
  isExternal: true
  name: ICollection.SyncRoot
  nameWithType: ReadOnlyCollection<T>.ICollection.SyncRoot
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize
  isExternal: true
  name: IList.IsFixedSize
  nameWithType: ReadOnlyCollection<T>.IList.IsFixedSize
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.IsFixedSize
  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.IList.IsFixedSize
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly
  isExternal: true
  name: IList.IsReadOnly
  nameWithType: ReadOnlyCollection<T>.IList.IsReadOnly
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.IsReadOnly
  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.IList.IsReadOnly
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)
  isExternal: true
  name: IList.Item[Int32]
  nameWithType: ReadOnlyCollection<T>.IList.Item[Int32]
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Item[System.Int32]
  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.IList.Item(Int32)
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)
    name: IList.Item
    nameWithType: ReadOnlyCollection<T>.IList.Item
    fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)
    name: System.Collections.IList.Item
    nameWithType: ReadOnlyCollection(Of T).System.Collections.IList.Item
    fullName: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: ToLookup<TSource, TKey>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>)
  nameWithType: LookupExtensions.ToLookup<TSource, TKey>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>)
  fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TSource, TKey>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  nameWithType.vb: LookupExtensions.ToLookup(Of TSource, TKey)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)))
  fullName.vb: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TSource, TKey)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: ToLookup(Of TSource, TKey)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup<TSource, TKey>
    nameWithType: LookupExtensions.ToLookup<TSource, TKey>
    fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TSource, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup(Of TSource, TKey)
    nameWithType: LookupExtensions.ToLookup(Of TSource, TKey)
    fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TSource, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.LookupExtensions
  commentId: T:NMF.Expressions.Linq.LookupExtensions
  parent: NMF.Expressions.Linq
  name: LookupExtensions
  nameWithType: LookupExtensions
  fullName: NMF.Expressions.Linq.LookupExtensions
- uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: ToLookup<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>)
  nameWithType: LookupExtensions.ToLookup<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>)
  fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TSource, TKey>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  nameWithType.vb: LookupExtensions.ToLookup(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)))
  fullName.vb: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TSource, TKey)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: ToLookup(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup<TSource, TKey>
    nameWithType: LookupExtensions.ToLookup<TSource, TKey>
    fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TSource, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup(Of TSource, TKey)
    nameWithType: LookupExtensions.ToLookup(Of TSource, TKey)
    fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TSource, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.All``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.All``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: All<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  nameWithType: ExpressionExtensions.All<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.All<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  nameWithType.vb: ExpressionExtensions.All(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.All(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: All(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.All``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: All<TSource>
    nameWithType: ExpressionExtensions.All<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.All<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.All``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: All(Of TSource)
    nameWithType: ExpressionExtensions.All(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.All(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  parent: NMF.Expressions.Linq
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
- uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0})
  name: Any<TSource>(IEnumerableExpression<TSource>)
  nameWithType: ExpressionExtensions.Any<TSource>(IEnumerableExpression<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Any<TSource>(NMF.Expressions.IEnumerableExpression<TSource>)
  nameWithType.vb: ExpressionExtensions.Any(Of TSource)(IEnumerableExpression(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Any(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource))
  name.vb: Any(Of TSource)(IEnumerableExpression(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0})
    name: Any<TSource>
    nameWithType: ExpressionExtensions.Any<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Any<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0})
    name: Any(Of TSource)
    nameWithType: ExpressionExtensions.Any(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Any(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: Any<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  nameWithType: ExpressionExtensions.Any<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Any<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  nameWithType.vb: ExpressionExtensions.Any(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Any(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: Any(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Any<TSource>
    nameWithType: ExpressionExtensions.Any<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Any<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Any(Of TSource)
    nameWithType: ExpressionExtensions.Any(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Any(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Int32>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Int32>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Int32)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32)))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Int32)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Average<TSource>
    nameWithType: ExpressionExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Average(Of TSource)
    nameWithType: ExpressionExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Int64>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Int64>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Int64)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int64)))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Int64)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Average<TSource>
    nameWithType: ExpressionExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Average(Of TSource)
    nameWithType: ExpressionExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Single>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Single>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Single>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Single)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Single)))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Single)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Average<TSource>
    nameWithType: ExpressionExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Average(Of TSource)
    nameWithType: ExpressionExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Double>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Double>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Double>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Double)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Double)))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Double)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Average<TSource>
    nameWithType: ExpressionExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Average(Of TSource)
    nameWithType: ExpressionExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Decimal>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Decimal>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Decimal)))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Average<TSource>
    nameWithType: ExpressionExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Average(Of TSource)
    nameWithType: ExpressionExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Int32>>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Int32>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int32))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32))))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int32))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Average<TSource>
    nameWithType: ExpressionExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Average(Of TSource)
    nameWithType: ExpressionExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Int64>>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Int64>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int64))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64))))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int64))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Average<TSource>
    nameWithType: ExpressionExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Average(Of TSource)
    nameWithType: ExpressionExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Single>>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Single>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Single))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single))))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Single))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Average<TSource>
    nameWithType: ExpressionExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Average(Of TSource)
    nameWithType: ExpressionExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Double>>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Double>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Double))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double))))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Double))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Average<TSource>
    nameWithType: ExpressionExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Average(Of TSource)
    nameWithType: ExpressionExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Decimal>>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Decimal>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Decimal))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal))))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Decimal))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Average<TSource>
    nameWithType: ExpressionExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Average(Of TSource)
    nameWithType: ExpressionExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
  name: Cast<TResult>(IEnumerableExpression)
  nameWithType: ExpressionExtensions.Cast<TResult>(IEnumerableExpression)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Cast<TResult>(NMF.Expressions.IEnumerableExpression)
  nameWithType.vb: ExpressionExtensions.Cast(Of TResult)(IEnumerableExpression)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Cast(Of TResult)(NMF.Expressions.IEnumerableExpression)
  name.vb: Cast(Of TResult)(IEnumerableExpression)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
    name: Cast<TResult>
    nameWithType: ExpressionExtensions.Cast<TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Cast<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
    name: Cast(Of TResult)
    nameWithType: ExpressionExtensions.Cast(Of TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Cast(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Concat``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Concat``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Concat<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  nameWithType: ExpressionExtensions.Concat<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Concat<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: ExpressionExtensions.Concat(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Concat(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Concat(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Concat``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: Concat<TSource>
    nameWithType: ExpressionExtensions.Concat<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Concat<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Concat``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: Concat(Of TSource)
    nameWithType: ExpressionExtensions.Concat(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Concat(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0)
  name: Contains<TSource>(IEnumerableExpression<TSource>, TSource)
  nameWithType: ExpressionExtensions.Contains<TSource>(IEnumerableExpression<TSource>, TSource)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, TSource)
  nameWithType.vb: ExpressionExtensions.Contains(Of TSource)(IEnumerableExpression(Of TSource), TSource)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Contains(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), TSource)
  name.vb: Contains(Of TSource)(IEnumerableExpression(Of TSource), TSource)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0)
    name: Contains<TSource>
    nameWithType: ExpressionExtensions.Contains<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0)
    name: Contains(Of TSource)
    nameWithType: ExpressionExtensions.Contains(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Contains<TSource>(IEnumerableExpression<TSource>, TSource, IEqualityComparer<TSource>)
  nameWithType: ExpressionExtensions.Contains<TSource>(IEnumerableExpression<TSource>, TSource, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ExpressionExtensions.Contains(Of TSource)(IEnumerableExpression(Of TSource), TSource, IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Contains(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), TSource, System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Contains(Of TSource)(IEnumerableExpression(Of TSource), TSource, IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
    name: Contains<TSource>
    nameWithType: ExpressionExtensions.Contains<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
    name: Contains(Of TSource)
    nameWithType: ExpressionExtensions.Contains(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0})
  name: Count<TSource>(IEnumerableExpression<TSource>)
  nameWithType: ExpressionExtensions.Count<TSource>(IEnumerableExpression<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Count<TSource>(NMF.Expressions.IEnumerableExpression<TSource>)
  nameWithType.vb: ExpressionExtensions.Count(Of TSource)(IEnumerableExpression(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Count(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource))
  name.vb: Count(Of TSource)(IEnumerableExpression(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0})
    name: Count<TSource>
    nameWithType: ExpressionExtensions.Count<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Count<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0})
    name: Count(Of TSource)
    nameWithType: ExpressionExtensions.Count(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Count(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: Count<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  nameWithType: ExpressionExtensions.Count<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Count<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  nameWithType.vb: ExpressionExtensions.Count(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Count(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: Count(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Count<TSource>
    nameWithType: ExpressionExtensions.Count<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Count<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Count(Of TSource)
    nameWithType: ExpressionExtensions.Count(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Count(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0})
  name: Distinct<TSource>(IEnumerableExpression<TSource>)
  nameWithType: ExpressionExtensions.Distinct<TSource>(IEnumerableExpression<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct<TSource>(NMF.Expressions.IEnumerableExpression<TSource>)
  nameWithType.vb: ExpressionExtensions.Distinct(Of TSource)(IEnumerableExpression(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Distinct(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource))
  name.vb: Distinct(Of TSource)(IEnumerableExpression(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0})
    name: Distinct<TSource>
    nameWithType: ExpressionExtensions.Distinct<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0})
    name: Distinct(Of TSource)
    nameWithType: ExpressionExtensions.Distinct(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Distinct<TSource>(IEnumerableExpression<TSource>, IEqualityComparer<TSource>)
  nameWithType: ExpressionExtensions.Distinct<TSource>(IEnumerableExpression<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ExpressionExtensions.Distinct(Of TSource)(IEnumerableExpression(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Distinct(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Distinct(Of TSource)(IEnumerableExpression(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Distinct<TSource>
    nameWithType: ExpressionExtensions.Distinct<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Distinct(Of TSource)
    nameWithType: ExpressionExtensions.Distinct(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Except<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  nameWithType: ExpressionExtensions.Except<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Except<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: ExpressionExtensions.Except(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Except(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Except(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: Except<TSource>
    nameWithType: ExpressionExtensions.Except<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Except<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: Except(Of TSource)
    nameWithType: ExpressionExtensions.Except(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Except(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Except<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ExpressionExtensions.Except<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Except<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ExpressionExtensions.Except(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Except(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Except(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Except<TSource>
    nameWithType: ExpressionExtensions.Except<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Except<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Except(Of TSource)
    nameWithType: ExpressionExtensions.Except(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Except(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  name: FirstOrDefault<TSource>(IEnumerableExpression<TSource>)
  nameWithType: ExpressionExtensions.FirstOrDefault<TSource>(IEnumerableExpression<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault<TSource>(NMF.Expressions.IEnumerableExpression<TSource>)
  nameWithType.vb: ExpressionExtensions.FirstOrDefault(Of TSource)(IEnumerableExpression(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource))
  name.vb: FirstOrDefault(Of TSource)(IEnumerableExpression(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
    name: FirstOrDefault<TSource>
    nameWithType: ExpressionExtensions.FirstOrDefault<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
    name: FirstOrDefault(Of TSource)
    nameWithType: ExpressionExtensions.FirstOrDefault(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: FirstOrDefault<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  nameWithType: ExpressionExtensions.FirstOrDefault<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  nameWithType.vb: ExpressionExtensions.FirstOrDefault(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: FirstOrDefault(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: FirstOrDefault<TSource>
    nameWithType: ExpressionExtensions.FirstOrDefault<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: FirstOrDefault(Of TSource)
    nameWithType: ExpressionExtensions.FirstOrDefault(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: GroupBy<TSource, TKey>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>)
  nameWithType: ExpressionExtensions.GroupBy<TSource, TKey>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TSource, TKey>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  nameWithType.vb: ExpressionExtensions.GroupBy(Of TSource, TKey)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TSource, TKey)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: GroupBy(Of TSource, TKey)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: GroupBy<TSource, TKey>
    nameWithType: ExpressionExtensions.GroupBy<TSource, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TSource, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: GroupBy(Of TSource, TKey)
    nameWithType: ExpressionExtensions.GroupBy(Of TSource, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TSource, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  isExternal: true
  name: GroupBy<TSource, TKey>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>, IEqualityComparer<TKey>)
  nameWithType: ExpressionExtensions.GroupBy<TSource, TKey>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TSource, TKey>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.GroupBy(Of TSource, TKey)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TSource, TKey)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy<TSource, TKey>
    nameWithType: ExpressionExtensions.GroupBy<TSource, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TSource, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy(Of TSource, TKey)
    nameWithType: ExpressionExtensions.GroupBy(Of TSource, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TSource, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  isExternal: true
  name: GroupBy<TSource, TKey, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>)
  nameWithType: ExpressionExtensions.GroupBy<TSource, TKey, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TSource, TKey, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>)
  nameWithType.vb: ExpressionExtensions.GroupBy(Of TSource, TKey, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TSource, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)))
  name.vb: GroupBy(Of TSource, TKey, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
    name: GroupBy<TSource, TKey, TResult>
    nameWithType: ExpressionExtensions.GroupBy<TSource, TKey, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TSource, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
    name: GroupBy(Of TSource, TKey, TResult)
    nameWithType: ExpressionExtensions.GroupBy(Of TSource, TKey, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TSource, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  isExternal: true
  name: GroupBy<TSource, TKey, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ExpressionExtensions.GroupBy<TSource, TKey, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TSource, TKey, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.GroupBy(Of TSource, TKey, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TSource, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy<TSource, TKey, TResult>
    nameWithType: ExpressionExtensions.GroupBy<TSource, TKey, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TSource, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy(Of TSource, TKey, TResult)
    nameWithType: ExpressionExtensions.GroupBy(Of TSource, TKey, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TSource, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  isExternal: true
  name: GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>)
  nameWithType: ExpressionExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(NMF.Expressions.IEnumerableExpression<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>)
  nameWithType.vb: ExpressionExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
    name: GroupJoin<TOuter, TInner, TKey, TResult>
    nameWithType: ExpressionExtensions.GroupJoin<TOuter, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin<TOuter, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
    name: GroupJoin(Of TOuter, TInner, TKey, TResult)
    nameWithType: ExpressionExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  isExternal: true
  name: GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ExpressionExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(NMF.Expressions.IEnumerableExpression<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin<TOuter, TInner, TKey, TResult>
    nameWithType: ExpressionExtensions.GroupJoin<TOuter, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin<TOuter, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin(Of TOuter, TInner, TKey, TResult)
    nameWithType: ExpressionExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Intersect<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  nameWithType: ExpressionExtensions.Intersect<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: ExpressionExtensions.Intersect(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Intersect(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Intersect(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: Intersect<TSource>
    nameWithType: ExpressionExtensions.Intersect<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: Intersect(Of TSource)
    nameWithType: ExpressionExtensions.Intersect(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Intersect<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ExpressionExtensions.Intersect<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ExpressionExtensions.Intersect(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Intersect(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Intersect(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Intersect<TSource>
    nameWithType: ExpressionExtensions.Intersect<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Intersect(Of TSource)
    nameWithType: ExpressionExtensions.Intersect(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsProperSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.IsProperSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ExpressionExtensions.IsProperSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsProperSubsetOf<T>
    nameWithType: ExpressionExtensions.IsProperSubsetOf<T>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsProperSubsetOf(Of T)
    nameWithType: ExpressionExtensions.IsProperSubsetOf(Of T)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsProperSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.IsProperSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ExpressionExtensions.IsProperSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsProperSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSubsetOf<T>
    nameWithType: ExpressionExtensions.IsProperSubsetOf<T>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSubsetOf(Of T)
    nameWithType: ExpressionExtensions.IsProperSubsetOf(Of T)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsProperSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.IsProperSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ExpressionExtensions.IsProperSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsProperSupersetOf<T>
    nameWithType: ExpressionExtensions.IsProperSupersetOf<T>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsProperSupersetOf(Of T)
    nameWithType: ExpressionExtensions.IsProperSupersetOf(Of T)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsProperSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.IsProperSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ExpressionExtensions.IsProperSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsProperSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSupersetOf<T>
    nameWithType: ExpressionExtensions.IsProperSupersetOf<T>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSupersetOf(Of T)
    nameWithType: ExpressionExtensions.IsProperSupersetOf(Of T)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.IsSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ExpressionExtensions.IsSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsSubsetOf<T>
    nameWithType: ExpressionExtensions.IsSubsetOf<T>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsSubsetOf(Of T)
    nameWithType: ExpressionExtensions.IsSubsetOf(Of T)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.IsSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ExpressionExtensions.IsSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSubsetOf<T>
    nameWithType: ExpressionExtensions.IsSubsetOf<T>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSubsetOf(Of T)
    nameWithType: ExpressionExtensions.IsSubsetOf(Of T)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.IsSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ExpressionExtensions.IsSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsSupersetOf<T>
    nameWithType: ExpressionExtensions.IsSupersetOf<T>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsSupersetOf(Of T)
    nameWithType: ExpressionExtensions.IsSupersetOf(Of T)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.IsSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ExpressionExtensions.IsSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSupersetOf<T>
    nameWithType: ExpressionExtensions.IsSupersetOf<T>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSupersetOf(Of T)
    nameWithType: ExpressionExtensions.IsSupersetOf(Of T)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  isExternal: true
  name: Join<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>)
  nameWithType: ExpressionExtensions.Join<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Join<TOuter, TInner, TKey, TResult>(NMF.Expressions.IEnumerableExpression<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>)
  nameWithType.vb: ExpressionExtensions.Join(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Join(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult)))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
    name: Join<TOuter, TInner, TKey, TResult>
    nameWithType: ExpressionExtensions.Join<TOuter, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Join<TOuter, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
    name: Join(Of TOuter, TInner, TKey, TResult)
    nameWithType: ExpressionExtensions.Join(Of TOuter, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Join(Of TOuter, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  isExternal: true
  name: Join<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ExpressionExtensions.Join<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Join<TOuter, TInner, TKey, TResult>(NMF.Expressions.IEnumerableExpression<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.Join(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Join(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: Join<TOuter, TInner, TKey, TResult>
    nameWithType: ExpressionExtensions.Join<TOuter, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Join<TOuter, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: Join(Of TOuter, TInner, TKey, TResult)
    nameWithType: ExpressionExtensions.Join(Of TOuter, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Join(Of TOuter, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  isExternal: true
  name: Max<TSource>(IEnumerableExpression<TSource>, IComparer<TSource>)
  nameWithType: ExpressionExtensions.Max<TSource>(IEnumerableExpression<TSource>, IComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IComparer<TSource>)
  nameWithType.vb: ExpressionExtensions.Max(Of TSource)(IEnumerableExpression(Of TSource), IComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IComparer(Of TSource))
  name.vb: Max(Of TSource)(IEnumerableExpression(Of TSource), IComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
    name: Max<TSource>
    nameWithType: ExpressionExtensions.Max<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
    name: Max(Of TSource)
    nameWithType: ExpressionExtensions.Max(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>)
  nameWithType: ExpressionExtensions.Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  nameWithType.vb: ExpressionExtensions.Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Max<TSource, TResult>
    nameWithType: ExpressionExtensions.Max<TSource, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Max(Of TSource, TResult)
    nameWithType: ExpressionExtensions.Max(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  isExternal: true
  name: Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, Func<TSource, TResult>)
  nameWithType: ExpressionExtensions.Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, Func<TSource, TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Func<TSource, TResult>)
  nameWithType.vb: ExpressionExtensions.Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), Func(Of TSource, TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Func(Of TSource, TResult))
  name.vb: Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), Func(Of TSource, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
    name: Max<TSource, TResult>
    nameWithType: ExpressionExtensions.Max<TSource, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
    name: Max(Of TSource, TResult)
    nameWithType: ExpressionExtensions.Max(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  nameWithType: ExpressionExtensions.Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ExpressionExtensions.Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Max<TSource, TResult>
    nameWithType: ExpressionExtensions.Max<TSource, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Max(Of TSource, TResult)
    nameWithType: ExpressionExtensions.Max(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  isExternal: true
  name: Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<TResult>>>)
  nameWithType: ExpressionExtensions.Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<TResult>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<TResult>>>)
  nameWithType.vb: ExpressionExtensions.Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of TResult))))
  name.vb: Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Max<TSource, TResult>
    nameWithType: ExpressionExtensions.Max<TSource, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Max(Of TSource, TResult)
    nameWithType: ExpressionExtensions.Max(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<TResult>>>, IComparer<TResult>)
  nameWithType: ExpressionExtensions.Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<TResult>>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<TResult>>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ExpressionExtensions.Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of TResult))), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Max<TSource, TResult>
    nameWithType: ExpressionExtensions.Max<TSource, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Max(Of TSource, TResult)
    nameWithType: ExpressionExtensions.Max(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  isExternal: true
  name: Min<TSource>(IEnumerableExpression<TSource>, IComparer<TSource>)
  nameWithType: ExpressionExtensions.Min<TSource>(IEnumerableExpression<TSource>, IComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IComparer<TSource>)
  nameWithType.vb: ExpressionExtensions.Min(Of TSource)(IEnumerableExpression(Of TSource), IComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IComparer(Of TSource))
  name.vb: Min(Of TSource)(IEnumerableExpression(Of TSource), IComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
    name: Min<TSource>
    nameWithType: ExpressionExtensions.Min<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
    name: Min(Of TSource)
    nameWithType: ExpressionExtensions.Min(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>)
  nameWithType: ExpressionExtensions.Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  nameWithType.vb: ExpressionExtensions.Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Min<TSource, TResult>
    nameWithType: ExpressionExtensions.Min<TSource, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Min(Of TSource, TResult)
    nameWithType: ExpressionExtensions.Min(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  nameWithType: ExpressionExtensions.Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ExpressionExtensions.Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Min<TSource, TResult>
    nameWithType: ExpressionExtensions.Min<TSource, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Min(Of TSource, TResult)
    nameWithType: ExpressionExtensions.Min(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  isExternal: true
  name: Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<TResult>>>)
  nameWithType: ExpressionExtensions.Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<TResult>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<TResult>>>)
  nameWithType.vb: ExpressionExtensions.Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of TResult))))
  name.vb: Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Min<TSource, TResult>
    nameWithType: ExpressionExtensions.Min<TSource, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Min(Of TSource, TResult)
    nameWithType: ExpressionExtensions.Min(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<TResult>>>, IComparer<TResult>)
  nameWithType: ExpressionExtensions.Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<TResult>>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<TResult>>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ExpressionExtensions.Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of TResult))), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Min<TSource, TResult>
    nameWithType: ExpressionExtensions.Min<TSource, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Min(Of TSource, TResult)
    nameWithType: ExpressionExtensions.Min(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
  name: OfType<TResult>(IEnumerableExpression)
  nameWithType: ExpressionExtensions.OfType<TResult>(IEnumerableExpression)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OfType<TResult>(NMF.Expressions.IEnumerableExpression)
  nameWithType.vb: ExpressionExtensions.OfType(Of TResult)(IEnumerableExpression)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OfType(Of TResult)(NMF.Expressions.IEnumerableExpression)
  name.vb: OfType(Of TResult)(IEnumerableExpression)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
    name: OfType<TResult>
    nameWithType: ExpressionExtensions.OfType<TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OfType<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
    name: OfType(Of TResult)
    nameWithType: ExpressionExtensions.OfType(Of TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OfType(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: OrderBy<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>)
  nameWithType: ExpressionExtensions.OrderBy<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy<TItem, TKey>(NMF.Expressions.IEnumerableExpression<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ExpressionExtensions.OrderBy(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OrderBy(Of TItem, TKey)(NMF.Expressions.IEnumerableExpression(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: OrderBy(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderBy<TItem, TKey>
    nameWithType: ExpressionExtensions.OrderBy<TItem, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderBy(Of TItem, TKey)
    nameWithType: ExpressionExtensions.OrderBy(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: OrderBy<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ExpressionExtensions.OrderBy<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy<TItem, TKey>(NMF.Expressions.IEnumerableExpression<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.OrderBy(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OrderBy(Of TItem, TKey)(NMF.Expressions.IEnumerableExpression(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderBy(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderBy<TItem, TKey>
    nameWithType: ExpressionExtensions.OrderBy<TItem, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderBy(Of TItem, TKey)
    nameWithType: ExpressionExtensions.OrderBy(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: OrderByDescending<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>)
  nameWithType: ExpressionExtensions.OrderByDescending<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending<TItem, TKey>(NMF.Expressions.IEnumerableExpression<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ExpressionExtensions.OrderByDescending(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending(Of TItem, TKey)(NMF.Expressions.IEnumerableExpression(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: OrderByDescending(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderByDescending<TItem, TKey>
    nameWithType: ExpressionExtensions.OrderByDescending<TItem, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderByDescending(Of TItem, TKey)
    nameWithType: ExpressionExtensions.OrderByDescending(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: OrderByDescending<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ExpressionExtensions.OrderByDescending<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending<TItem, TKey>(NMF.Expressions.IEnumerableExpression<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.OrderByDescending(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending(Of TItem, TKey)(NMF.Expressions.IEnumerableExpression(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderByDescending(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending<TItem, TKey>
    nameWithType: ExpressionExtensions.OrderByDescending<TItem, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending(Of TItem, TKey)
    nameWithType: ExpressionExtensions.OrderByDescending(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: Select<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>)
  nameWithType: ExpressionExtensions.Select<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Select<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  nameWithType.vb: ExpressionExtensions.Select(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Select(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Select(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Select<TSource, TResult>
    nameWithType: ExpressionExtensions.Select<TSource, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Select<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Select(Of TSource, TResult)
    nameWithType: ExpressionExtensions.Select(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Select(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  isExternal: true
  name: Select<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, Func<TSource, TResult>)
  nameWithType: ExpressionExtensions.Select<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, Func<TSource, TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Select<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Func<TSource, TResult>)
  nameWithType.vb: ExpressionExtensions.Select(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), Func(Of TSource, TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Select(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Func(Of TSource, TResult))
  name.vb: Select(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), Func(Of TSource, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
    name: Select<TSource, TResult>
    nameWithType: ExpressionExtensions.Select<TSource, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Select<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
    name: Select(Of TSource, TResult)
    nameWithType: ExpressionExtensions.Select(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Select(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  isExternal: true
  name: SelectMany<TSource, TIntermediate, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, IEnumerable<TIntermediate>>>, Expression<Func<TSource, TIntermediate, TResult>>)
  nameWithType: ExpressionExtensions.SelectMany<TSource, TIntermediate, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, IEnumerable<TIntermediate>>>, Expression<Func<TSource, TIntermediate, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany<TSource, TIntermediate, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TIntermediate>>>, System.Linq.Expressions.Expression<System.Func<TSource, TIntermediate, TResult>>)
  nameWithType.vb: ExpressionExtensions.SelectMany(Of TSource, TIntermediate, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate))), Expression(Of Func(Of TSource, TIntermediate, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SelectMany(Of TSource, TIntermediate, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TIntermediate))), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TIntermediate, TResult)))
  name.vb: SelectMany(Of TSource, TIntermediate, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate))), Expression(Of Func(Of TSource, TIntermediate, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
    name: SelectMany<TSource, TIntermediate, TResult>
    nameWithType: ExpressionExtensions.SelectMany<TSource, TIntermediate, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany<TSource, TIntermediate, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
    name: SelectMany(Of TSource, TIntermediate, TResult)
    nameWithType: ExpressionExtensions.SelectMany(Of TSource, TIntermediate, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany(Of TSource, TIntermediate, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  isExternal: true
  name: SelectMany<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, IEnumerable<TResult>>>)
  nameWithType: ExpressionExtensions.SelectMany<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, IEnumerable<TResult>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>>)
  nameWithType.vb: ExpressionExtensions.SelectMany(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SelectMany(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult))))
  name.vb: SelectMany(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
    name: SelectMany<TSource, TResult>
    nameWithType: ExpressionExtensions.SelectMany<TSource, TResult>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
    name: SelectMany(Of TSource, TResult)
    nameWithType: ExpressionExtensions.SelectMany(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: SetEquals<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.SetEquals<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ExpressionExtensions.SetEquals(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SetEquals(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: SetEquals(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: SetEquals<T>
    nameWithType: ExpressionExtensions.SetEquals<T>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: SetEquals(Of T)
    nameWithType: ExpressionExtensions.SetEquals(Of T)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: SetEquals<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.SetEquals<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ExpressionExtensions.SetEquals(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SetEquals(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: SetEquals(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: SetEquals<T>
    nameWithType: ExpressionExtensions.SetEquals<T>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: SetEquals(Of T)
    nameWithType: ExpressionExtensions.SetEquals(Of T)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  name: SingleOrDefault<TSource>(IEnumerableExpression<TSource>)
  nameWithType: ExpressionExtensions.SingleOrDefault<TSource>(IEnumerableExpression<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TSource>(NMF.Expressions.IEnumerableExpression<TSource>)
  nameWithType.vb: ExpressionExtensions.SingleOrDefault(Of TSource)(IEnumerableExpression(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource))
  name.vb: SingleOrDefault(Of TSource)(IEnumerableExpression(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
    name: SingleOrDefault<TSource>
    nameWithType: ExpressionExtensions.SingleOrDefault<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
    name: SingleOrDefault(Of TSource)
    nameWithType: ExpressionExtensions.SingleOrDefault(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: SingleOrDefault<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  nameWithType: ExpressionExtensions.SingleOrDefault<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  nameWithType.vb: ExpressionExtensions.SingleOrDefault(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: SingleOrDefault(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: SingleOrDefault<TSource>
    nameWithType: ExpressionExtensions.SingleOrDefault<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: SingleOrDefault(Of TSource)
    nameWithType: ExpressionExtensions.SingleOrDefault(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  isExternal: true
  name: SingleOrDefault<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>, Func<TSource, Boolean>)
  nameWithType: ExpressionExtensions.SingleOrDefault<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Boolean>>, Func<TSource, Boolean>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>, System.Func<TSource, System.Boolean>)
  nameWithType.vb: ExpressionExtensions.SingleOrDefault(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)), Func(Of TSource, Boolean))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)), System.Func(Of TSource, System.Boolean))
  name.vb: SingleOrDefault(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)), Func(Of TSource, Boolean))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
    name: SingleOrDefault<TSource>
    nameWithType: ExpressionExtensions.SingleOrDefault<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
    name: SingleOrDefault(Of TSource)
    nameWithType: ExpressionExtensions.SingleOrDefault(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Int32>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Int32>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Int32)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32)))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Int32)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Sum<TSource>
    nameWithType: ExpressionExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Sum(Of TSource)
    nameWithType: ExpressionExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Int64>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Int64>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Int64)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int64)))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Int64)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Sum<TSource>
    nameWithType: ExpressionExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Sum(Of TSource)
    nameWithType: ExpressionExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Single>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Single>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Single>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Single)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Single)))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Single)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Sum<TSource>
    nameWithType: ExpressionExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Sum(Of TSource)
    nameWithType: ExpressionExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Double>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Double>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Double>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Double)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Double)))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Double)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Sum<TSource>
    nameWithType: ExpressionExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Sum(Of TSource)
    nameWithType: ExpressionExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Decimal>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Decimal>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Decimal)))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Sum<TSource>
    nameWithType: ExpressionExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Sum(Of TSource)
    nameWithType: ExpressionExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Int32>>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Int32>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int32))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32))))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int32))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Sum<TSource>
    nameWithType: ExpressionExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Sum(Of TSource)
    nameWithType: ExpressionExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Int64>>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Int64>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int64))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64))))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int64))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Sum<TSource>
    nameWithType: ExpressionExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Sum(Of TSource)
    nameWithType: ExpressionExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Single>>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Single>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Single))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single))))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Single))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Sum<TSource>
    nameWithType: ExpressionExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Sum(Of TSource)
    nameWithType: ExpressionExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Double>>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Double>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Double))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double))))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Double))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Sum<TSource>
    nameWithType: ExpressionExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Sum(Of TSource)
    nameWithType: ExpressionExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Decimal>>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, Nullable<Decimal>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Decimal))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Decimal))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Sum<TSource>
    nameWithType: ExpressionExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Sum(Of TSource)
    nameWithType: ExpressionExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: TopX<TItem, TKey>(IEnumerableExpression<TItem>, Int32, Expression<Func<TItem, TKey>>)
  nameWithType: ExpressionExtensions.TopX<TItem, TKey>(IEnumerableExpression<TItem>, Int32, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX<TItem, TKey>(NMF.Expressions.IEnumerableExpression<TItem>, System.Int32, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ExpressionExtensions.TopX(Of TItem, TKey)(IEnumerableExpression(Of TItem), Int32, Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.TopX(Of TItem, TKey)(NMF.Expressions.IEnumerableExpression(Of TItem), System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: TopX(Of TItem, TKey)(IEnumerableExpression(Of TItem), Int32, Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: TopX<TItem, TKey>
    nameWithType: ExpressionExtensions.TopX<TItem, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: TopX(Of TItem, TKey)
    nameWithType: ExpressionExtensions.TopX(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: TopX<TItem, TKey>(IEnumerableExpression<TItem>, Int32, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ExpressionExtensions.TopX<TItem, TKey>(IEnumerableExpression<TItem>, Int32, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX<TItem, TKey>(NMF.Expressions.IEnumerableExpression<TItem>, System.Int32, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.TopX(Of TItem, TKey)(IEnumerableExpression(Of TItem), Int32, Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.TopX(Of TItem, TKey)(NMF.Expressions.IEnumerableExpression(Of TItem), System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: TopX(Of TItem, TKey)(IEnumerableExpression(Of TItem), Int32, Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: TopX<TItem, TKey>
    nameWithType: ExpressionExtensions.TopX<TItem, TKey>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: TopX(Of TItem, TKey)
    nameWithType: ExpressionExtensions.TopX(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Union<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  nameWithType: ExpressionExtensions.Union<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Union<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: ExpressionExtensions.Union(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Union(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Union(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: Union<TSource>
    nameWithType: ExpressionExtensions.Union<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Union<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: Union(Of TSource)
    nameWithType: ExpressionExtensions.Union(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Union(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Union<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ExpressionExtensions.Union<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Union<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ExpressionExtensions.Union(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Union(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Union(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Union<TSource>
    nameWithType: ExpressionExtensions.Union<TSource>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Union<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Union(Of TSource)
    nameWithType: ExpressionExtensions.Union(Of TSource)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Union(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: Where<T>(IEnumerableExpression<T>, Expression<Func<T, Boolean>>)
  nameWithType: ExpressionExtensions.Where<T>(IEnumerableExpression<T>, Expression<Func<T, Boolean>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Where<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: ExpressionExtensions.Where(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Where(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Where(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where<T>
    nameWithType: ExpressionExtensions.Where<T>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Where<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where(Of T)
    nameWithType: ExpressionExtensions.Where(Of T)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Where(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  isExternal: true
  name: Where<T>(IEnumerableExpression<T>, Expression<Func<T, Boolean>>, Func<T, Boolean>)
  nameWithType: ExpressionExtensions.Where<T>(IEnumerableExpression<T>, Expression<Func<T, Boolean>>, Func<T, Boolean>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Where<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Func<T, System.Boolean>)
  nameWithType.vb: ExpressionExtensions.Where(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)), Func(Of T, Boolean))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Where(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Func(Of T, System.Boolean))
  name.vb: Where(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)), Func(Of T, Boolean))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
    name: Where<T>
    nameWithType: ExpressionExtensions.Where<T>
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Where<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
    name: Where(Of T)
    nameWithType: ExpressionExtensions.Where(Of T)
    fullName: NMF.Expressions.Linq.ExpressionExtensions.Where(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: All<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Boolean>>)
  nameWithType: ObservableExtensions.All<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Boolean>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.All<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  nameWithType.vb: ObservableExtensions.All(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.All(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: All(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: All<TSource>
    nameWithType: ObservableExtensions.All<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.All<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: All(Of TSource)
    nameWithType: ObservableExtensions.All(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.All(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions
  commentId: T:NMF.Expressions.Linq.ObservableExtensions
  parent: NMF.Expressions.Linq
  name: ObservableExtensions
  nameWithType: ObservableExtensions
  fullName: NMF.Expressions.Linq.ObservableExtensions
- uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0})
  name: Any<TSource>(INotifyEnumerable<TSource>)
  nameWithType: ObservableExtensions.Any<TSource>(INotifyEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Any<TSource>(NMF.Expressions.INotifyEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.Any(Of TSource)(INotifyEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Any(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource))
  name.vb: Any(Of TSource)(INotifyEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0})
    name: Any<TSource>
    nameWithType: ObservableExtensions.Any<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Any<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0})
    name: Any(Of TSource)
    nameWithType: ObservableExtensions.Any(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Any(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: Any<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Boolean>>)
  nameWithType: ObservableExtensions.Any<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Boolean>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Any<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  nameWithType.vb: ObservableExtensions.Any(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Any(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: Any(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Any<TSource>
    nameWithType: ObservableExtensions.Any<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Any<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Any(Of TSource)
    nameWithType: ObservableExtensions.Any(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Any(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Int32>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Int32>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Int32)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Int32)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Average<TSource>
    nameWithType: ObservableExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Average(Of TSource)
    nameWithType: ObservableExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Int64>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Int64>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Int64)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int64)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Int64)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Average<TSource>
    nameWithType: ObservableExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Average(Of TSource)
    nameWithType: ObservableExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Single>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Single>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Single>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Single)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Average<TSource>
    nameWithType: ObservableExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Average(Of TSource)
    nameWithType: ObservableExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Double>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Double>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Double>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Double)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Average<TSource>
    nameWithType: ObservableExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Average(Of TSource)
    nameWithType: ObservableExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Decimal>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Decimal>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Decimal)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Average<TSource>
    nameWithType: ObservableExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Average(Of TSource)
    nameWithType: ObservableExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Int32>>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Int32>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int32))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32))))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int32))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Average<TSource>
    nameWithType: ObservableExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Average(Of TSource)
    nameWithType: ObservableExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Int64>>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Int64>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int64))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64))))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int64))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Average<TSource>
    nameWithType: ObservableExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Average(Of TSource)
    nameWithType: ObservableExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Single>>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Single>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Single))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single))))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Single))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Average<TSource>
    nameWithType: ObservableExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Average(Of TSource)
    nameWithType: ObservableExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Double>>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Double>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Double))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double))))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Double))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Average<TSource>
    nameWithType: ObservableExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Average(Of TSource)
    nameWithType: ObservableExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Decimal))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal))))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Decimal))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Average<TSource>
    nameWithType: ObservableExtensions.Average<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Average(Of TSource)
    nameWithType: ObservableExtensions.Average(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
  name: Cast<TResult>(INotifyEnumerable)
  nameWithType: ObservableExtensions.Cast<TResult>(INotifyEnumerable)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Cast<TResult>(NMF.Expressions.INotifyEnumerable)
  nameWithType.vb: ObservableExtensions.Cast(Of TResult)(INotifyEnumerable)
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Cast(Of TResult)(NMF.Expressions.INotifyEnumerable)
  name.vb: Cast(Of TResult)(INotifyEnumerable)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
    name: Cast<TResult>
    nameWithType: ObservableExtensions.Cast<TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Cast<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
    name: Cast(Of TResult)
    nameWithType: ObservableExtensions.Cast(Of TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Cast(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Concat<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: ObservableExtensions.Concat<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Concat<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.Concat(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Concat(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Concat(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Concat<TSource>
    nameWithType: ObservableExtensions.Concat<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Concat<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Concat(Of TSource)
    nameWithType: ObservableExtensions.Concat(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Concat(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0)
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0)
  name: Contains<TSource>(INotifyEnumerable<TSource>, TSource)
  nameWithType: ObservableExtensions.Contains<TSource>(INotifyEnumerable<TSource>, TSource)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Contains<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, TSource)
  nameWithType.vb: ObservableExtensions.Contains(Of TSource)(INotifyEnumerable(Of TSource), TSource)
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Contains(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), TSource)
  name.vb: Contains(Of TSource)(INotifyEnumerable(Of TSource), TSource)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0)
    name: Contains<TSource>
    nameWithType: ObservableExtensions.Contains<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Contains<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0)
    name: Contains(Of TSource)
    nameWithType: ObservableExtensions.Contains(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Contains(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Contains<TSource>(INotifyEnumerable<TSource>, TSource, IEqualityComparer<TSource>)
  nameWithType: ObservableExtensions.Contains<TSource>(INotifyEnumerable<TSource>, TSource, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Contains<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ObservableExtensions.Contains(Of TSource)(INotifyEnumerable(Of TSource), TSource, IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Contains(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), TSource, System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Contains(Of TSource)(INotifyEnumerable(Of TSource), TSource, IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
    name: Contains<TSource>
    nameWithType: ObservableExtensions.Contains<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Contains<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
    name: Contains(Of TSource)
    nameWithType: ObservableExtensions.Contains(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Contains(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0})
  name: Count<TSource>(INotifyEnumerable<TSource>)
  nameWithType: ObservableExtensions.Count<TSource>(INotifyEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Count<TSource>(NMF.Expressions.INotifyEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.Count(Of TSource)(INotifyEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Count(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource))
  name.vb: Count(Of TSource)(INotifyEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0})
    name: Count<TSource>
    nameWithType: ObservableExtensions.Count<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Count<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0})
    name: Count(Of TSource)
    nameWithType: ObservableExtensions.Count(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Count(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: Count<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Boolean>>)
  nameWithType: ObservableExtensions.Count<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Boolean>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Count<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  nameWithType.vb: ObservableExtensions.Count(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Count(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: Count(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Count<TSource>
    nameWithType: ObservableExtensions.Count<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Count<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Count(Of TSource)
    nameWithType: ObservableExtensions.Count(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Count(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0})
  name: Distinct<TSource>(INotifyEnumerable<TSource>)
  nameWithType: ObservableExtensions.Distinct<TSource>(INotifyEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct<TSource>(NMF.Expressions.INotifyEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.Distinct(Of TSource)(INotifyEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Distinct(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource))
  name.vb: Distinct(Of TSource)(INotifyEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0})
    name: Distinct<TSource>
    nameWithType: ObservableExtensions.Distinct<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0})
    name: Distinct(Of TSource)
    nameWithType: ObservableExtensions.Distinct(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Distinct<TSource>(INotifyEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ObservableExtensions.Distinct<TSource>(INotifyEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ObservableExtensions.Distinct(Of TSource)(INotifyEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Distinct(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Distinct(Of TSource)(INotifyEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Distinct<TSource>
    nameWithType: ObservableExtensions.Distinct<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Distinct(Of TSource)
    nameWithType: ObservableExtensions.Distinct(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Except<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: ObservableExtensions.Except<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Except<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.Except(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Except(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Except(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Except<TSource>
    nameWithType: ObservableExtensions.Except<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Except<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Except(Of TSource)
    nameWithType: ObservableExtensions.Except(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Except(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Except<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ObservableExtensions.Except<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Except<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ObservableExtensions.Except(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Except(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Except(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Except<TSource>
    nameWithType: ObservableExtensions.Except<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Except<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Except(Of TSource)
    nameWithType: ObservableExtensions.Except(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Except(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  name: FirstOrDefault<TSource>(INotifyEnumerable<TSource>)
  nameWithType: ObservableExtensions.FirstOrDefault<TSource>(INotifyEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault<TSource>(NMF.Expressions.INotifyEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.FirstOrDefault(Of TSource)(INotifyEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource))
  name.vb: FirstOrDefault(Of TSource)(INotifyEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
    name: FirstOrDefault<TSource>
    nameWithType: ObservableExtensions.FirstOrDefault<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
    name: FirstOrDefault(Of TSource)
    nameWithType: ObservableExtensions.FirstOrDefault(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: FirstOrDefault<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Boolean>>)
  nameWithType: ObservableExtensions.FirstOrDefault<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Boolean>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  nameWithType.vb: ObservableExtensions.FirstOrDefault(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: FirstOrDefault(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: FirstOrDefault<TSource>
    nameWithType: ObservableExtensions.FirstOrDefault<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: FirstOrDefault(Of TSource)
    nameWithType: ObservableExtensions.FirstOrDefault(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: GroupBy<TSource, TKey>
    nameWithType: ObservableExtensions.GroupBy<TSource, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: GroupBy(Of TSource, TKey)
    nameWithType: ObservableExtensions.GroupBy(Of TSource, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  isExternal: true
  name: GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy<TSource, TKey>
    nameWithType: ObservableExtensions.GroupBy<TSource, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy(Of TSource, TKey)
    nameWithType: ObservableExtensions.GroupBy(Of TSource, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  isExternal: true
  name: GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)))
  name.vb: GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
    name: GroupBy<TSource, TKey, TResult>
    nameWithType: ObservableExtensions.GroupBy<TSource, TKey, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
    name: GroupBy(Of TSource, TKey, TResult)
    nameWithType: ObservableExtensions.GroupBy(Of TSource, TKey, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  isExternal: true
  name: GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy<TSource, TKey, TResult>
    nameWithType: ObservableExtensions.GroupBy<TSource, TKey, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy(Of TSource, TKey, TResult)
    nameWithType: ObservableExtensions.GroupBy(Of TSource, TKey, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  isExternal: true
  name: GroupJoin<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>)
  nameWithType: ObservableExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>)
  nameWithType.vb: ObservableExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
    name: GroupJoin<TOuter, TInner, TKey, TResult>
    nameWithType: ObservableExtensions.GroupJoin<TOuter, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin<TOuter, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
    name: GroupJoin(Of TOuter, TInner, TKey, TResult)
    nameWithType: ObservableExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  isExternal: true
  name: GroupJoin<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin<TOuter, TInner, TKey, TResult>
    nameWithType: ObservableExtensions.GroupJoin<TOuter, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin<TOuter, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin(Of TOuter, TInner, TKey, TResult)
    nameWithType: ObservableExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Intersect<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: ObservableExtensions.Intersect<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.Intersect(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Intersect(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Intersect(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Intersect<TSource>
    nameWithType: ObservableExtensions.Intersect<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Intersect(Of TSource)
    nameWithType: ObservableExtensions.Intersect(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Intersect<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ObservableExtensions.Intersect<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ObservableExtensions.Intersect(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Intersect(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Intersect(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Intersect<TSource>
    nameWithType: ObservableExtensions.Intersect<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Intersect(Of TSource)
    nameWithType: ObservableExtensions.Intersect(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsProperSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  nameWithType: ObservableExtensions.IsProperSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.IsProperSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsProperSubsetOf<T>
    nameWithType: ObservableExtensions.IsProperSubsetOf<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsProperSubsetOf(Of T)
    nameWithType: ObservableExtensions.IsProperSubsetOf(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsProperSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.IsProperSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.IsProperSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsProperSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSubsetOf<T>
    nameWithType: ObservableExtensions.IsProperSubsetOf<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSubsetOf(Of T)
    nameWithType: ObservableExtensions.IsProperSubsetOf(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsProperSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  nameWithType: ObservableExtensions.IsProperSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.IsProperSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsProperSupersetOf<T>
    nameWithType: ObservableExtensions.IsProperSupersetOf<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsProperSupersetOf(Of T)
    nameWithType: ObservableExtensions.IsProperSupersetOf(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsProperSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.IsProperSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.IsProperSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsProperSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSupersetOf<T>
    nameWithType: ObservableExtensions.IsProperSupersetOf<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSupersetOf(Of T)
    nameWithType: ObservableExtensions.IsProperSupersetOf(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  nameWithType: ObservableExtensions.IsSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.IsSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsSubsetOf<T>
    nameWithType: ObservableExtensions.IsSubsetOf<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsSubsetOf(Of T)
    nameWithType: ObservableExtensions.IsSubsetOf(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.IsSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.IsSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSubsetOf<T>
    nameWithType: ObservableExtensions.IsSubsetOf<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSubsetOf(Of T)
    nameWithType: ObservableExtensions.IsSubsetOf(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  nameWithType: ObservableExtensions.IsSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.IsSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsSupersetOf<T>
    nameWithType: ObservableExtensions.IsSupersetOf<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsSupersetOf(Of T)
    nameWithType: ObservableExtensions.IsSupersetOf(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.IsSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.IsSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSupersetOf<T>
    nameWithType: ObservableExtensions.IsSupersetOf<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSupersetOf(Of T)
    nameWithType: ObservableExtensions.IsSupersetOf(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  isExternal: true
  name: Join<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>)
  nameWithType: ObservableExtensions.Join<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Join<TOuter, TInner, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>)
  nameWithType.vb: ObservableExtensions.Join(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Join(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult)))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
    name: Join<TOuter, TInner, TKey, TResult>
    nameWithType: ObservableExtensions.Join<TOuter, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Join<TOuter, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
    name: Join(Of TOuter, TInner, TKey, TResult)
    nameWithType: ObservableExtensions.Join(Of TOuter, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Join(Of TOuter, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  isExternal: true
  name: Join<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.Join<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Join<TOuter, TInner, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.Join(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Join(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: Join<TOuter, TInner, TKey, TResult>
    nameWithType: ObservableExtensions.Join<TOuter, TInner, TKey, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Join<TOuter, TInner, TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: Join(Of TOuter, TInner, TKey, TResult)
    nameWithType: ObservableExtensions.Join(Of TOuter, TInner, TKey, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Join(Of TOuter, TInner, TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  isExternal: true
  name: Max<TSource>(INotifyEnumerable<TSource>, IComparer<TSource>)
  nameWithType: ObservableExtensions.Max<TSource>(INotifyEnumerable<TSource>, IComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IComparer<TSource>)
  nameWithType.vb: ObservableExtensions.Max(Of TSource)(INotifyEnumerable(Of TSource), IComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IComparer(Of TSource))
  name.vb: Max(Of TSource)(INotifyEnumerable(Of TSource), IComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
    name: Max<TSource>
    nameWithType: ObservableExtensions.Max<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
    name: Max(Of TSource)
    nameWithType: ObservableExtensions.Max(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  nameWithType: ObservableExtensions.Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  nameWithType.vb: ObservableExtensions.Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Max<TSource, TResult>
    nameWithType: ObservableExtensions.Max<TSource, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Max(Of TSource, TResult)
    nameWithType: ObservableExtensions.Max(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Max<TSource, TResult>
    nameWithType: ObservableExtensions.Max<TSource, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Max(Of TSource, TResult)
    nameWithType: ObservableExtensions.Max(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  isExternal: true
  name: Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<TResult>>>)
  nameWithType: ObservableExtensions.Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<TResult>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<TResult>>>)
  nameWithType.vb: ObservableExtensions.Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of TResult))))
  name.vb: Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Max<TSource, TResult>
    nameWithType: ObservableExtensions.Max<TSource, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Max(Of TSource, TResult)
    nameWithType: ObservableExtensions.Max(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<TResult>>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<TResult>>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<TResult>>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of TResult))), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Max<TSource, TResult>
    nameWithType: ObservableExtensions.Max<TSource, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Max(Of TSource, TResult)
    nameWithType: ObservableExtensions.Max(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  isExternal: true
  name: Min<TSource>(INotifyEnumerable<TSource>, IComparer<TSource>)
  nameWithType: ObservableExtensions.Min<TSource>(INotifyEnumerable<TSource>, IComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IComparer<TSource>)
  nameWithType.vb: ObservableExtensions.Min(Of TSource)(INotifyEnumerable(Of TSource), IComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IComparer(Of TSource))
  name.vb: Min(Of TSource)(INotifyEnumerable(Of TSource), IComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
    name: Min<TSource>
    nameWithType: ObservableExtensions.Min<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
    name: Min(Of TSource)
    nameWithType: ObservableExtensions.Min(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  nameWithType: ObservableExtensions.Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  nameWithType.vb: ObservableExtensions.Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Min<TSource, TResult>
    nameWithType: ObservableExtensions.Min<TSource, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Min(Of TSource, TResult)
    nameWithType: ObservableExtensions.Min(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Min<TSource, TResult>
    nameWithType: ObservableExtensions.Min<TSource, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Min(Of TSource, TResult)
    nameWithType: ObservableExtensions.Min(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  isExternal: true
  name: Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<TResult>>>)
  nameWithType: ObservableExtensions.Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<TResult>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<TResult>>>)
  nameWithType.vb: ObservableExtensions.Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of TResult))))
  name.vb: Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Min<TSource, TResult>
    nameWithType: ObservableExtensions.Min<TSource, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Min(Of TSource, TResult)
    nameWithType: ObservableExtensions.Min(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<TResult>>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<TResult>>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<TResult>>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of TResult))), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of TResult))), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Min<TSource, TResult>
    nameWithType: ObservableExtensions.Min<TSource, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Min(Of TSource, TResult)
    nameWithType: ObservableExtensions.Min(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
  name: OfType<TResult>(INotifyEnumerable)
  nameWithType: ObservableExtensions.OfType<TResult>(INotifyEnumerable)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OfType<TResult>(NMF.Expressions.INotifyEnumerable)
  nameWithType.vb: ObservableExtensions.OfType(Of TResult)(INotifyEnumerable)
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OfType(Of TResult)(NMF.Expressions.INotifyEnumerable)
  name.vb: OfType(Of TResult)(INotifyEnumerable)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
    name: OfType<TResult>
    nameWithType: ObservableExtensions.OfType<TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.OfType<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
    name: OfType(Of TResult)
    nameWithType: ObservableExtensions.OfType(Of TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.OfType(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: OrderBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  nameWithType: ObservableExtensions.OrderBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ObservableExtensions.OrderBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderBy(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: OrderBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderBy<TItem, TKey>
    nameWithType: ObservableExtensions.OrderBy<TItem, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderBy(Of TItem, TKey)
    nameWithType: ObservableExtensions.OrderBy(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: OrderBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.OrderBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ObservableExtensions.OrderBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderBy(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderBy<TItem, TKey>
    nameWithType: ObservableExtensions.OrderBy<TItem, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderBy(Of TItem, TKey)
    nameWithType: ObservableExtensions.OrderBy(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: OrderByDescending<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  nameWithType: ObservableExtensions.OrderByDescending<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ObservableExtensions.OrderByDescending(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: OrderByDescending(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderByDescending<TItem, TKey>
    nameWithType: ObservableExtensions.OrderByDescending<TItem, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderByDescending(Of TItem, TKey)
    nameWithType: ObservableExtensions.OrderByDescending(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: OrderByDescending<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.OrderByDescending<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ObservableExtensions.OrderByDescending(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderByDescending(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending<TItem, TKey>
    nameWithType: ObservableExtensions.OrderByDescending<TItem, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending(Of TItem, TKey)
    nameWithType: ObservableExtensions.OrderByDescending(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: Select<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  nameWithType: ObservableExtensions.Select<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Select<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  nameWithType.vb: ObservableExtensions.Select(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Select(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Select(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Select<TSource, TResult>
    nameWithType: ObservableExtensions.Select<TSource, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Select<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Select(Of TSource, TResult)
    nameWithType: ObservableExtensions.Select(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Select(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  isExternal: true
  name: SelectMany<TSource, TIntermediate, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TIntermediate>>>, Expression<Func<TSource, TIntermediate, TResult>>)
  nameWithType: ObservableExtensions.SelectMany<TSource, TIntermediate, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TIntermediate>>>, Expression<Func<TSource, TIntermediate, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TSource, TIntermediate, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TIntermediate>>>, System.Linq.Expressions.Expression<System.Func<TSource, TIntermediate, TResult>>)
  nameWithType.vb: ObservableExtensions.SelectMany(Of TSource, TIntermediate, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate))), Expression(Of Func(Of TSource, TIntermediate, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TSource, TIntermediate, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TIntermediate))), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TIntermediate, TResult)))
  name.vb: SelectMany(Of TSource, TIntermediate, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate))), Expression(Of Func(Of TSource, TIntermediate, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
    name: SelectMany<TSource, TIntermediate, TResult>
    nameWithType: ObservableExtensions.SelectMany<TSource, TIntermediate, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TSource, TIntermediate, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
    name: SelectMany(Of TSource, TIntermediate, TResult)
    nameWithType: ObservableExtensions.SelectMany(Of TSource, TIntermediate, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TSource, TIntermediate, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TIntermediate
    nameWithType: TIntermediate
    fullName: TIntermediate
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  isExternal: true
  name: SelectMany<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TResult>>>)
  nameWithType: ObservableExtensions.SelectMany<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TResult>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>>)
  nameWithType.vb: ObservableExtensions.SelectMany(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult))))
  name.vb: SelectMany(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
    name: SelectMany<TSource, TResult>
    nameWithType: ObservableExtensions.SelectMany<TSource, TResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TSource, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
    name: SelectMany(Of TSource, TResult)
    nameWithType: ObservableExtensions.SelectMany(Of TSource, TResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TSource, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: SetEquals<T>(INotifyEnumerable<T>, IEnumerable<T>)
  nameWithType: ObservableExtensions.SetEquals<T>(INotifyEnumerable<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.SetEquals(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SetEquals(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: SetEquals(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: SetEquals<T>
    nameWithType: ObservableExtensions.SetEquals<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: SetEquals(Of T)
    nameWithType: ObservableExtensions.SetEquals(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: SetEquals<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.SetEquals<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.SetEquals(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SetEquals(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: SetEquals(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: SetEquals<T>
    nameWithType: ObservableExtensions.SetEquals<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: SetEquals(Of T)
    nameWithType: ObservableExtensions.SetEquals(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  name: SingleOrDefault<TSource>(INotifyEnumerable<TSource>)
  nameWithType: ObservableExtensions.SingleOrDefault<TSource>(INotifyEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault<TSource>(NMF.Expressions.INotifyEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.SingleOrDefault(Of TSource)(INotifyEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource))
  name.vb: SingleOrDefault(Of TSource)(INotifyEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
    name: SingleOrDefault<TSource>
    nameWithType: ObservableExtensions.SingleOrDefault<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
    name: SingleOrDefault(Of TSource)
    nameWithType: ObservableExtensions.SingleOrDefault(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: SingleOrDefault<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Boolean>>)
  nameWithType: ObservableExtensions.SingleOrDefault<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Boolean>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  nameWithType.vb: ObservableExtensions.SingleOrDefault(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: SingleOrDefault(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: SingleOrDefault<TSource>
    nameWithType: ObservableExtensions.SingleOrDefault<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: SingleOrDefault(Of TSource)
    nameWithType: ObservableExtensions.SingleOrDefault(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Int32>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Int32>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Int32)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Int32)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Sum<TSource>
    nameWithType: ObservableExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Sum(Of TSource)
    nameWithType: ObservableExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Int64>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Int64>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Int64)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int64)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Int64)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Sum<TSource>
    nameWithType: ObservableExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Sum(Of TSource)
    nameWithType: ObservableExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Single>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Single>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Single>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Single)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Sum<TSource>
    nameWithType: ObservableExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Sum(Of TSource)
    nameWithType: ObservableExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Double>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Double>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Double>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Double)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Sum<TSource>
    nameWithType: ObservableExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Sum(Of TSource)
    nameWithType: ObservableExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Decimal>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Decimal>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Decimal)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Sum<TSource>
    nameWithType: ObservableExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Sum(Of TSource)
    nameWithType: ObservableExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Int32>>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Int32>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int32))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32))))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int32))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Sum<TSource>
    nameWithType: ObservableExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Sum(Of TSource)
    nameWithType: ObservableExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Int64>>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Int64>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int64))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64))))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Int64))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Sum<TSource>
    nameWithType: ObservableExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Sum(Of TSource)
    nameWithType: ObservableExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Single>>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Single>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Single))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single))))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Single))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Sum<TSource>
    nameWithType: ObservableExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Sum(Of TSource)
    nameWithType: ObservableExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Double>>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Double>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Double))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double))))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Double))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Sum<TSource>
    nameWithType: ObservableExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Sum(Of TSource)
    nameWithType: ObservableExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, Nullable<Decimal>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Decimal))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Nullable(Of Decimal))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Sum<TSource>
    nameWithType: ObservableExtensions.Sum<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Sum(Of TSource)
    nameWithType: ObservableExtensions.Sum(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: TopX<TItem, TKey>(INotifyEnumerable<TItem>, Int32, Expression<Func<TItem, TKey>>)
  nameWithType: ObservableExtensions.TopX<TItem, TKey>(INotifyEnumerable<TItem>, Int32, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.TopX<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Int32, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ObservableExtensions.TopX(Of TItem, TKey)(INotifyEnumerable(Of TItem), Int32, Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.TopX(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: TopX(Of TItem, TKey)(INotifyEnumerable(Of TItem), Int32, Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: TopX<TItem, TKey>
    nameWithType: ObservableExtensions.TopX<TItem, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.TopX<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: TopX(Of TItem, TKey)
    nameWithType: ObservableExtensions.TopX(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.TopX(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: TopX<TItem, TKey>(INotifyEnumerable<TItem>, Int32, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.TopX<TItem, TKey>(INotifyEnumerable<TItem>, Int32, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.TopX<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Int32, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ObservableExtensions.TopX(Of TItem, TKey)(INotifyEnumerable(Of TItem), Int32, Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.TopX(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: TopX(Of TItem, TKey)(INotifyEnumerable(Of TItem), Int32, Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: TopX<TItem, TKey>
    nameWithType: ObservableExtensions.TopX<TItem, TKey>
    fullName: NMF.Expressions.Linq.ObservableExtensions.TopX<TItem, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: TopX(Of TItem, TKey)
    nameWithType: ObservableExtensions.TopX(Of TItem, TKey)
    fullName: NMF.Expressions.Linq.ObservableExtensions.TopX(Of TItem, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Union<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: ObservableExtensions.Union<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Union<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.Union(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Union(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Union(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Union<TSource>
    nameWithType: ObservableExtensions.Union<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Union<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Union(Of TSource)
    nameWithType: ObservableExtensions.Union(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Union(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Union<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ObservableExtensions.Union<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Union<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ObservableExtensions.Union(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Union(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Union(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Union<TSource>
    nameWithType: ObservableExtensions.Union<TSource>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Union<TSource>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Union(Of TSource)
    nameWithType: ObservableExtensions.Union(Of TSource)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Union(Of TSource)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: Where<T>(INotifyEnumerable<T>, Expression<Func<T, Boolean>>)
  nameWithType: ObservableExtensions.Where<T>(INotifyEnumerable<T>, Expression<Func<T, Boolean>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Where<T>(NMF.Expressions.INotifyEnumerable<T>, System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: ObservableExtensions.Where(Of T)(INotifyEnumerable(Of T), Expression(Of Func(Of T, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Where(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Where(Of T)(INotifyEnumerable(Of T), Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where<T>
    nameWithType: ObservableExtensions.Where<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.Where<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where(Of T)
    nameWithType: ObservableExtensions.Where(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.Where(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: WithUpdates<T>(IEnumerable<T>)
  nameWithType: ObservableExtensions.WithUpdates<T>(IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.WithUpdates(Of T)(IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: WithUpdates(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
    name: WithUpdates<T>
    nameWithType: ObservableExtensions.WithUpdates<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
    name: WithUpdates(Of T)
    nameWithType: ObservableExtensions.WithUpdates(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
  isExternal: true
  name: WithUpdates<T>(ICollection<T>)
  nameWithType: ObservableExtensions.WithUpdates<T>(ICollection<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>(System.Collections.Generic.ICollection<T>)
  nameWithType.vb: ObservableExtensions.WithUpdates(Of T)(ICollection(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)(System.Collections.Generic.ICollection(Of T))
  name.vb: WithUpdates(Of T)(ICollection(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
    name: WithUpdates<T>
    nameWithType: ObservableExtensions.WithUpdates<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
    name: WithUpdates(Of T)
    nameWithType: ObservableExtensions.WithUpdates(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableGroup`2.#ctor*
  commentId: Overload:NMF.Expressions.Linq.ObservableGroup`2.#ctor
  name: ObservableGroup
  nameWithType: ObservableGroup<TKey, TItem>.ObservableGroup
  fullName: NMF.Expressions.Linq.ObservableGroup<TKey, TItem>.ObservableGroup
  nameWithType.vb: ObservableGroup(Of TKey, TItem).ObservableGroup
  fullName.vb: NMF.Expressions.Linq.ObservableGroup(Of TKey, TItem).ObservableGroup
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: NMF.Expressions.Linq.ObservableGroup`2.Key*
  commentId: Overload:NMF.Expressions.Linq.ObservableGroup`2.Key
  name: Key
  nameWithType: ObservableGroup<TKey, TItem>.Key
  fullName: NMF.Expressions.Linq.ObservableGroup<TKey, TItem>.Key
  nameWithType.vb: ObservableGroup(Of TKey, TItem).Key
  fullName.vb: NMF.Expressions.Linq.ObservableGroup(Of TKey, TItem).Key
- uid: System.Linq.IGrouping{{TKey},{TItem}}.Key
  commentId: P:System.Linq.IGrouping{`0,`1}.Key
  parent: System.Linq.IGrouping{{TKey},{TItem}}
  definition: System.Linq.IGrouping`2.Key
  name: Key
  nameWithType: IGrouping<TKey, TItem>.Key
  fullName: System.Linq.IGrouping<TKey, TItem>.Key
  nameWithType.vb: IGrouping(Of TKey, TItem).Key
  fullName.vb: System.Linq.IGrouping(Of TKey, TItem).Key
- uid: System.Linq.IGrouping`2.Key
  commentId: P:System.Linq.IGrouping`2.Key
  isExternal: true
  name: Key
  nameWithType: IGrouping<TKey, TElement>.Key
  fullName: System.Linq.IGrouping<TKey, TElement>.Key
  nameWithType.vb: IGrouping(Of TKey, TElement).Key
  fullName.vb: System.Linq.IGrouping(Of TKey, TElement).Key
- uid: NMF.Expressions.Linq.ObservableGroup`2.Successors*
  commentId: Overload:NMF.Expressions.Linq.ObservableGroup`2.Successors
  name: Successors
  nameWithType: ObservableGroup<TKey, TItem>.Successors
  fullName: NMF.Expressions.Linq.ObservableGroup<TKey, TItem>.Successors
  nameWithType.vb: ObservableGroup(Of TKey, TItem).Successors
  fullName.vb: NMF.Expressions.Linq.ObservableGroup(Of TKey, TItem).Successors
- uid: NMF.Expressions.INotifiable.Successors
  commentId: P:NMF.Expressions.INotifiable.Successors
  parent: NMF.Expressions.INotifiable
  name: Successors
  nameWithType: INotifiable.Successors
  fullName: NMF.Expressions.INotifiable.Successors
- uid: NMF.Expressions.ISuccessorList
  commentId: T:NMF.Expressions.ISuccessorList
  parent: NMF.Expressions
  name: ISuccessorList
  nameWithType: ISuccessorList
  fullName: NMF.Expressions.ISuccessorList
- uid: NMF.Expressions.Linq.ObservableGroup`2.Dependencies*
  commentId: Overload:NMF.Expressions.Linq.ObservableGroup`2.Dependencies
  name: Dependencies
  nameWithType: ObservableGroup<TKey, TItem>.Dependencies
  fullName: NMF.Expressions.Linq.ObservableGroup<TKey, TItem>.Dependencies
  nameWithType.vb: ObservableGroup(Of TKey, TItem).Dependencies
  fullName.vb: NMF.Expressions.Linq.ObservableGroup(Of TKey, TItem).Dependencies
- uid: NMF.Expressions.INotifiable.Dependencies
  commentId: P:NMF.Expressions.INotifiable.Dependencies
  parent: NMF.Expressions.INotifiable
  name: Dependencies
  nameWithType: INotifiable.Dependencies
  fullName: NMF.Expressions.INotifiable.Dependencies
- uid: System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<INotifiable>
  nameWithType: IEnumerable<INotifiable>
  fullName: System.Collections.Generic.IEnumerable<NMF.Expressions.INotifiable>
  nameWithType.vb: IEnumerable(Of INotifiable)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Expressions.INotifiable)
  name.vb: IEnumerable(Of INotifiable)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
    nameWithType: INotifiable
    fullName: NMF.Expressions.INotifiable
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
    nameWithType: INotifiable
    fullName: NMF.Expressions.INotifiable
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableGroup`2.ExecutionMetaData*
  commentId: Overload:NMF.Expressions.Linq.ObservableGroup`2.ExecutionMetaData
  name: ExecutionMetaData
  nameWithType: ObservableGroup<TKey, TItem>.ExecutionMetaData
  fullName: NMF.Expressions.Linq.ObservableGroup<TKey, TItem>.ExecutionMetaData
  nameWithType.vb: ObservableGroup(Of TKey, TItem).ExecutionMetaData
  fullName.vb: NMF.Expressions.Linq.ObservableGroup(Of TKey, TItem).ExecutionMetaData
- uid: NMF.Expressions.INotifiable.ExecutionMetaData
  commentId: P:NMF.Expressions.INotifiable.ExecutionMetaData
  parent: NMF.Expressions.INotifiable
  name: ExecutionMetaData
  nameWithType: INotifiable.ExecutionMetaData
  fullName: NMF.Expressions.INotifiable.ExecutionMetaData
- uid: NMF.Expressions.ExecutionMetaData
  commentId: T:NMF.Expressions.ExecutionMetaData
  parent: NMF.Expressions
  name: ExecutionMetaData
  nameWithType: ExecutionMetaData
  fullName: NMF.Expressions.ExecutionMetaData
- uid: NMF.Expressions.Linq.ObservableGroup`2.AsNotifiable*
  commentId: Overload:NMF.Expressions.Linq.ObservableGroup`2.AsNotifiable
  name: AsNotifiable
  nameWithType: ObservableGroup<TKey, TItem>.AsNotifiable
  fullName: NMF.Expressions.Linq.ObservableGroup<TKey, TItem>.AsNotifiable
  nameWithType.vb: ObservableGroup(Of TKey, TItem).AsNotifiable
  fullName.vb: NMF.Expressions.Linq.ObservableGroup(Of TKey, TItem).AsNotifiable
- uid: NMF.Expressions.IEnumerableExpression{{TItem}}.AsNotifiable
  commentId: M:NMF.Expressions.IEnumerableExpression{`1}.AsNotifiable
  parent: NMF.Expressions.IEnumerableExpression{{TItem}}
  definition: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
  name: AsNotifiable()
  nameWithType: IEnumerableExpression<TItem>.AsNotifiable()
  fullName: NMF.Expressions.IEnumerableExpression<TItem>.AsNotifiable()
  nameWithType.vb: IEnumerableExpression(Of TItem).AsNotifiable()
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of TItem).AsNotifiable()
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression<TItem>.AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression<TItem>.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression(Of TItem).AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression(Of TItem).AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
  commentId: M:NMF.Expressions.IEnumerableExpression`1.AsNotifiable
  name: AsNotifiable()
  nameWithType: IEnumerableExpression<T>.AsNotifiable()
  fullName: NMF.Expressions.IEnumerableExpression<T>.AsNotifiable()
  nameWithType.vb: IEnumerableExpression(Of T).AsNotifiable()
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T).AsNotifiable()
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression<T>.AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression<T>.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression(Of T).AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression(Of T).AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableGroup`2.NMF#Expressions#IEnumerableExpression#AsNotifiable*
  commentId: Overload:NMF.Expressions.Linq.ObservableGroup`2.NMF#Expressions#IEnumerableExpression#AsNotifiable
  name: IEnumerableExpression.AsNotifiable
  nameWithType: ObservableGroup<TKey, TItem>.IEnumerableExpression.AsNotifiable
  fullName: NMF.Expressions.Linq.ObservableGroup<TKey, TItem>.NMF.Expressions.IEnumerableExpression.AsNotifiable
  nameWithType.vb: ObservableGroup(Of TKey, TItem).NMF.Expressions.IEnumerableExpression.AsNotifiable
  fullName.vb: NMF.Expressions.Linq.ObservableGroup(Of TKey, TItem).NMF.Expressions.IEnumerableExpression.AsNotifiable
  name.vb: NMF.Expressions.IEnumerableExpression.AsNotifiable
- uid: NMF.Expressions.IEnumerableExpression.AsNotifiable
  commentId: M:NMF.Expressions.IEnumerableExpression.AsNotifiable
  parent: NMF.Expressions.IEnumerableExpression
  name: AsNotifiable()
  nameWithType: IEnumerableExpression.AsNotifiable()
  fullName: NMF.Expressions.IEnumerableExpression.AsNotifiable()
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression.AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression.AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableGroup`2.Notify*
  commentId: Overload:NMF.Expressions.Linq.ObservableGroup`2.Notify
  name: Notify
  nameWithType: ObservableGroup<TKey, TItem>.Notify
  fullName: NMF.Expressions.Linq.ObservableGroup<TKey, TItem>.Notify
  nameWithType.vb: ObservableGroup(Of TKey, TItem).Notify
  fullName.vb: NMF.Expressions.Linq.ObservableGroup(Of TKey, TItem).Notify
- uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  commentId: M:NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  parent: NMF.Expressions.INotifiable
  isExternal: true
  name: Notify(IList<INotificationResult>)
  nameWithType: INotifiable.Notify(IList<INotificationResult>)
  fullName: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList<NMF.Expressions.INotificationResult>)
  nameWithType.vb: INotifiable.Notify(IList(Of INotificationResult))
  fullName.vb: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
  spec.csharp:
  - uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
    nameWithType: INotifiable.Notify
    fullName: NMF.Expressions.INotifiable.Notify
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
    nameWithType: INotifiable.Notify
    fullName: NMF.Expressions.INotifiable.Notify
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  commentId: T:System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<INotificationResult>
  nameWithType: IList<INotificationResult>
  fullName: System.Collections.Generic.IList<NMF.Expressions.INotificationResult>
  nameWithType.vb: IList(Of INotificationResult)
  fullName.vb: System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult)
  name.vb: IList(Of INotificationResult)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotificationResult
  commentId: T:NMF.Expressions.INotificationResult
  parent: NMF.Expressions
  name: INotificationResult
  nameWithType: INotificationResult
  fullName: NMF.Expressions.INotificationResult
- uid: NMF.Expressions.Linq.ObservableGroup`2.Dispose*
  commentId: Overload:NMF.Expressions.Linq.ObservableGroup`2.Dispose
  name: Dispose
  nameWithType: ObservableGroup<TKey, TItem>.Dispose
  fullName: NMF.Expressions.Linq.ObservableGroup<TKey, TItem>.Dispose
  nameWithType.vb: ObservableGroup(Of TKey, TItem).Dispose
  fullName.vb: NMF.Expressions.Linq.ObservableGroup(Of TKey, TItem).Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
