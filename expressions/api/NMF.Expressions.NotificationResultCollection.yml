### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.NotificationResultCollection
  commentId: T:NMF.Expressions.NotificationResultCollection
  id: NotificationResultCollection
  parent: NMF.Expressions
  children:
  - NMF.Expressions.NotificationResultCollection.#ctor
  - NMF.Expressions.NotificationResultCollection.Add(NMF.Expressions.INotificationResult)
  - NMF.Expressions.NotificationResultCollection.Clear
  - NMF.Expressions.NotificationResultCollection.Contains(NMF.Expressions.INotificationResult)
  - NMF.Expressions.NotificationResultCollection.CopyTo(NMF.Expressions.INotificationResult[],System.Int32)
  - NMF.Expressions.NotificationResultCollection.Count
  - NMF.Expressions.NotificationResultCollection.GetEnumerator
  - NMF.Expressions.NotificationResultCollection.IndexOf(NMF.Expressions.INotificationResult)
  - NMF.Expressions.NotificationResultCollection.Insert(System.Int32,NMF.Expressions.INotificationResult)
  - NMF.Expressions.NotificationResultCollection.IsReadOnly
  - NMF.Expressions.NotificationResultCollection.Item(System.Int32)
  - NMF.Expressions.NotificationResultCollection.Remove(NMF.Expressions.INotificationResult)
  - NMF.Expressions.NotificationResultCollection.RemoveAt(System.Int32)
  - NMF.Expressions.NotificationResultCollection.System#Collections#IEnumerable#GetEnumerator
  - NMF.Expressions.NotificationResultCollection.UnsafeAdd(NMF.Expressions.INotificationResult)
  langs:
  - csharp
  - vb
  name: NotificationResultCollection
  nameWithType: NotificationResultCollection
  fullName: NMF.Expressions.NotificationResultCollection
  type: Class
  source:
    remote:
      path: Expressions/Expressions/Execution/NotificationResultCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NotificationResultCollection
    path: src/Expressions/Expressions/Execution/NotificationResultCollection.cs
    startLine: 9
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: 'public class NotificationResultCollection : IList<INotificationResult>, ICollection<INotificationResult>, IEnumerable<INotificationResult>, IEnumerable'
    content.vb: >-
      Public Class NotificationResultCollection

          Implements IList(Of INotificationResult), ICollection(Of INotificationResult), IEnumerable(Of INotificationResult), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  - System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}
  - System.Collections.Generic.IEnumerable{NMF.Expressions.INotificationResult}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Collections.Generic.IEnumerable{NMF.Expressions.INotificationResult}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  - System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: NMF.Expressions.NotificationResultCollection.Count
  commentId: P:NMF.Expressions.NotificationResultCollection.Count
  id: Count
  parent: NMF.Expressions.NotificationResultCollection
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: NotificationResultCollection.Count
  fullName: NMF.Expressions.NotificationResultCollection.Count
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Execution/NotificationResultCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Count
    path: src/Expressions/Expressions/Execution/NotificationResultCollection.cs
    startLine: 15
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: NMF.Expressions.NotificationResultCollection.Count*
  implements:
  - System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NMF.Expressions.NotificationResultCollection.IsReadOnly
  commentId: P:NMF.Expressions.NotificationResultCollection.IsReadOnly
  id: IsReadOnly
  parent: NMF.Expressions.NotificationResultCollection
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: NotificationResultCollection.IsReadOnly
  fullName: NMF.Expressions.NotificationResultCollection.IsReadOnly
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Execution/NotificationResultCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsReadOnly
    path: src/Expressions/Expressions/Execution/NotificationResultCollection.cs
    startLine: 17
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: NMF.Expressions.NotificationResultCollection.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}.IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NMF.Expressions.NotificationResultCollection.Item(System.Int32)
  commentId: P:NMF.Expressions.NotificationResultCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: NMF.Expressions.NotificationResultCollection
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: NotificationResultCollection.Item[Int32]
  fullName: NMF.Expressions.NotificationResultCollection.Item[System.Int32]
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Execution/NotificationResultCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: this[]
    path: src/Expressions/Expressions/Execution/NotificationResultCollection.cs
    startLine: 19
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public INotificationResult this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: NMF.Expressions.INotificationResult
    content.vb: Public Property Item(index As Integer) As INotificationResult
  overload: NMF.Expressions.NotificationResultCollection.Item*
  implements:
  - System.Collections.Generic.IList{NMF.Expressions.INotificationResult}.Item(System.Int32)
  nameWithType.vb: NotificationResultCollection.Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.NotificationResultCollection.Item(System.Int32)
  name.vb: Item(Int32)
- uid: NMF.Expressions.NotificationResultCollection.#ctor
  commentId: M:NMF.Expressions.NotificationResultCollection.#ctor
  id: '#ctor'
  parent: NMF.Expressions.NotificationResultCollection
  langs:
  - csharp
  - vb
  name: NotificationResultCollection()
  nameWithType: NotificationResultCollection.NotificationResultCollection()
  fullName: NMF.Expressions.NotificationResultCollection.NotificationResultCollection()
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions/Execution/NotificationResultCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions/Execution/NotificationResultCollection.cs
    startLine: 40
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public NotificationResultCollection()
    content.vb: Public Sub New
  overload: NMF.Expressions.NotificationResultCollection.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Expressions.NotificationResultCollection.Add(NMF.Expressions.INotificationResult)
  commentId: M:NMF.Expressions.NotificationResultCollection.Add(NMF.Expressions.INotificationResult)
  id: Add(NMF.Expressions.INotificationResult)
  parent: NMF.Expressions.NotificationResultCollection
  langs:
  - csharp
  - vb
  name: Add(INotificationResult)
  nameWithType: NotificationResultCollection.Add(INotificationResult)
  fullName: NMF.Expressions.NotificationResultCollection.Add(NMF.Expressions.INotificationResult)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Execution/NotificationResultCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Add
    path: src/Expressions/Expressions/Execution/NotificationResultCollection.cs
    startLine: 45
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public void Add(INotificationResult item)
    parameters:
    - id: item
      type: NMF.Expressions.INotificationResult
    content.vb: Public Sub Add(item As INotificationResult)
  overload: NMF.Expressions.NotificationResultCollection.Add*
  implements:
  - System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}.Add(NMF.Expressions.INotificationResult)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Expressions.NotificationResultCollection.UnsafeAdd(NMF.Expressions.INotificationResult)
  commentId: M:NMF.Expressions.NotificationResultCollection.UnsafeAdd(NMF.Expressions.INotificationResult)
  id: UnsafeAdd(NMF.Expressions.INotificationResult)
  parent: NMF.Expressions.NotificationResultCollection
  langs:
  - csharp
  - vb
  name: UnsafeAdd(INotificationResult)
  nameWithType: NotificationResultCollection.UnsafeAdd(INotificationResult)
  fullName: NMF.Expressions.NotificationResultCollection.UnsafeAdd(NMF.Expressions.INotificationResult)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Execution/NotificationResultCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: UnsafeAdd
    path: src/Expressions/Expressions/Execution/NotificationResultCollection.cs
    startLine: 53
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public void UnsafeAdd(INotificationResult item)
    parameters:
    - id: item
      type: NMF.Expressions.INotificationResult
    content.vb: Public Sub UnsafeAdd(item As INotificationResult)
  overload: NMF.Expressions.NotificationResultCollection.UnsafeAdd*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Expressions.NotificationResultCollection.Clear
  commentId: M:NMF.Expressions.NotificationResultCollection.Clear
  id: Clear
  parent: NMF.Expressions.NotificationResultCollection
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: NotificationResultCollection.Clear()
  fullName: NMF.Expressions.NotificationResultCollection.Clear()
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Execution/NotificationResultCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Clear
    path: src/Expressions/Expressions/Execution/NotificationResultCollection.cs
    startLine: 61
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: NMF.Expressions.NotificationResultCollection.Clear*
  implements:
  - System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Expressions.NotificationResultCollection.GetEnumerator
  commentId: M:NMF.Expressions.NotificationResultCollection.GetEnumerator
  id: GetEnumerator
  parent: NMF.Expressions.NotificationResultCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: NotificationResultCollection.GetEnumerator()
  fullName: NMF.Expressions.NotificationResultCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Execution/NotificationResultCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetEnumerator
    path: src/Expressions/Expressions/Execution/NotificationResultCollection.cs
    startLine: 68
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public IEnumerator<INotificationResult> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{NMF.Expressions.INotificationResult}
    content.vb: Public Function GetEnumerator As IEnumerator(Of INotificationResult)
  overload: NMF.Expressions.NotificationResultCollection.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{NMF.Expressions.INotificationResult}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Expressions.NotificationResultCollection.System#Collections#IEnumerable#GetEnumerator
  commentId: M:NMF.Expressions.NotificationResultCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: NMF.Expressions.NotificationResultCollection
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: NotificationResultCollection.IEnumerable.GetEnumerator()
  fullName: NMF.Expressions.NotificationResultCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Execution/NotificationResultCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/Expressions/Expressions/Execution/NotificationResultCollection.cs
    startLine: 78
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: NMF.Expressions.NotificationResultCollection.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: NotificationResultCollection.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: NMF.Expressions.NotificationResultCollection.Contains(NMF.Expressions.INotificationResult)
  commentId: M:NMF.Expressions.NotificationResultCollection.Contains(NMF.Expressions.INotificationResult)
  id: Contains(NMF.Expressions.INotificationResult)
  parent: NMF.Expressions.NotificationResultCollection
  langs:
  - csharp
  - vb
  name: Contains(INotificationResult)
  nameWithType: NotificationResultCollection.Contains(INotificationResult)
  fullName: NMF.Expressions.NotificationResultCollection.Contains(NMF.Expressions.INotificationResult)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Execution/NotificationResultCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Contains
    path: src/Expressions/Expressions/Execution/NotificationResultCollection.cs
    startLine: 83
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public bool Contains(INotificationResult item)
    parameters:
    - id: item
      type: NMF.Expressions.INotificationResult
    return:
      type: System.Boolean
    content.vb: Public Function Contains(item As INotificationResult) As Boolean
  overload: NMF.Expressions.NotificationResultCollection.Contains*
  implements:
  - System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}.Contains(NMF.Expressions.INotificationResult)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Expressions.NotificationResultCollection.CopyTo(NMF.Expressions.INotificationResult[],System.Int32)
  commentId: M:NMF.Expressions.NotificationResultCollection.CopyTo(NMF.Expressions.INotificationResult[],System.Int32)
  id: CopyTo(NMF.Expressions.INotificationResult[],System.Int32)
  parent: NMF.Expressions.NotificationResultCollection
  langs:
  - csharp
  - vb
  name: CopyTo(INotificationResult[], Int32)
  nameWithType: NotificationResultCollection.CopyTo(INotificationResult[], Int32)
  fullName: NMF.Expressions.NotificationResultCollection.CopyTo(NMF.Expressions.INotificationResult[], System.Int32)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Execution/NotificationResultCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CopyTo
    path: src/Expressions/Expressions/Execution/NotificationResultCollection.cs
    startLine: 92
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public void CopyTo(INotificationResult[] array, int arrayIndex)
    parameters:
    - id: array
      type: NMF.Expressions.INotificationResult[]
    - id: arrayIndex
      type: System.Int32
    content.vb: Public Sub CopyTo(array As INotificationResult(), arrayIndex As Integer)
  overload: NMF.Expressions.NotificationResultCollection.CopyTo*
  implements:
  - System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}.CopyTo(NMF.Expressions.INotificationResult[],System.Int32)
  nameWithType.vb: NotificationResultCollection.CopyTo(INotificationResult(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.NotificationResultCollection.CopyTo(NMF.Expressions.INotificationResult(), System.Int32)
  name.vb: CopyTo(INotificationResult(), Int32)
- uid: NMF.Expressions.NotificationResultCollection.Remove(NMF.Expressions.INotificationResult)
  commentId: M:NMF.Expressions.NotificationResultCollection.Remove(NMF.Expressions.INotificationResult)
  id: Remove(NMF.Expressions.INotificationResult)
  parent: NMF.Expressions.NotificationResultCollection
  langs:
  - csharp
  - vb
  name: Remove(INotificationResult)
  nameWithType: NotificationResultCollection.Remove(INotificationResult)
  fullName: NMF.Expressions.NotificationResultCollection.Remove(NMF.Expressions.INotificationResult)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Execution/NotificationResultCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Remove
    path: src/Expressions/Expressions/Execution/NotificationResultCollection.cs
    startLine: 101
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public bool Remove(INotificationResult item)
    parameters:
    - id: item
      type: NMF.Expressions.INotificationResult
    return:
      type: System.Boolean
    content.vb: Public Function Remove(item As INotificationResult) As Boolean
  overload: NMF.Expressions.NotificationResultCollection.Remove*
  implements:
  - System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}.Remove(NMF.Expressions.INotificationResult)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Expressions.NotificationResultCollection.IndexOf(NMF.Expressions.INotificationResult)
  commentId: M:NMF.Expressions.NotificationResultCollection.IndexOf(NMF.Expressions.INotificationResult)
  id: IndexOf(NMF.Expressions.INotificationResult)
  parent: NMF.Expressions.NotificationResultCollection
  langs:
  - csharp
  - vb
  name: IndexOf(INotificationResult)
  nameWithType: NotificationResultCollection.IndexOf(INotificationResult)
  fullName: NMF.Expressions.NotificationResultCollection.IndexOf(NMF.Expressions.INotificationResult)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Execution/NotificationResultCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IndexOf
    path: src/Expressions/Expressions/Execution/NotificationResultCollection.cs
    startLine: 106
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public int IndexOf(INotificationResult item)
    parameters:
    - id: item
      type: NMF.Expressions.INotificationResult
    return:
      type: System.Int32
    content.vb: Public Function IndexOf(item As INotificationResult) As Integer
  overload: NMF.Expressions.NotificationResultCollection.IndexOf*
  implements:
  - System.Collections.Generic.IList{NMF.Expressions.INotificationResult}.IndexOf(NMF.Expressions.INotificationResult)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Expressions.NotificationResultCollection.Insert(System.Int32,NMF.Expressions.INotificationResult)
  commentId: M:NMF.Expressions.NotificationResultCollection.Insert(System.Int32,NMF.Expressions.INotificationResult)
  id: Insert(System.Int32,NMF.Expressions.INotificationResult)
  parent: NMF.Expressions.NotificationResultCollection
  langs:
  - csharp
  - vb
  name: Insert(Int32, INotificationResult)
  nameWithType: NotificationResultCollection.Insert(Int32, INotificationResult)
  fullName: NMF.Expressions.NotificationResultCollection.Insert(System.Int32, NMF.Expressions.INotificationResult)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Execution/NotificationResultCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Insert
    path: src/Expressions/Expressions/Execution/NotificationResultCollection.cs
    startLine: 111
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public void Insert(int index, INotificationResult item)
    parameters:
    - id: index
      type: System.Int32
    - id: item
      type: NMF.Expressions.INotificationResult
    content.vb: Public Sub Insert(index As Integer, item As INotificationResult)
  overload: NMF.Expressions.NotificationResultCollection.Insert*
  implements:
  - System.Collections.Generic.IList{NMF.Expressions.INotificationResult}.Insert(System.Int32,NMF.Expressions.INotificationResult)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NMF.Expressions.NotificationResultCollection.RemoveAt(System.Int32)
  commentId: M:NMF.Expressions.NotificationResultCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: NMF.Expressions.NotificationResultCollection
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: NotificationResultCollection.RemoveAt(Int32)
  fullName: NMF.Expressions.NotificationResultCollection.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Execution/NotificationResultCollection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RemoveAt
    path: src/Expressions/Expressions/Execution/NotificationResultCollection.cs
    startLine: 116
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public void RemoveAt(int index)
    parameters:
    - id: index
      type: System.Int32
    content.vb: Public Sub RemoveAt(index As Integer)
  overload: NMF.Expressions.NotificationResultCollection.RemoveAt*
  implements:
  - System.Collections.Generic.IList{NMF.Expressions.INotificationResult}.RemoveAt(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  commentId: T:System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<INotificationResult>
  nameWithType: IList<INotificationResult>
  fullName: System.Collections.Generic.IList<NMF.Expressions.INotificationResult>
  nameWithType.vb: IList(Of INotificationResult)
  fullName.vb: System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult)
  name.vb: IList(Of INotificationResult)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}
  commentId: T:System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<INotificationResult>
  nameWithType: ICollection<INotificationResult>
  fullName: System.Collections.Generic.ICollection<NMF.Expressions.INotificationResult>
  nameWithType.vb: ICollection(Of INotificationResult)
  fullName.vb: System.Collections.Generic.ICollection(Of NMF.Expressions.INotificationResult)
  name.vb: ICollection(Of INotificationResult)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{NMF.Expressions.INotificationResult}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Expressions.INotificationResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<INotificationResult>
  nameWithType: IEnumerable<INotificationResult>
  fullName: System.Collections.Generic.IEnumerable<NMF.Expressions.INotificationResult>
  nameWithType.vb: IEnumerable(Of INotificationResult)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Expressions.INotificationResult)
  name.vb: IEnumerable(Of INotificationResult)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{NMF.Expressions.INotificationResult}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  name: WithUpdates<INotificationResult>()
  nameWithType: ObservableExtensions.WithUpdates<INotificationResult>()
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<NMF.Expressions.INotificationResult>()
  nameWithType.vb: ObservableExtensions.WithUpdates(Of INotificationResult)()
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of NMF.Expressions.INotificationResult)()
  name.vb: WithUpdates(Of INotificationResult)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
    name: WithUpdates<INotificationResult>
    nameWithType: ObservableExtensions.WithUpdates<INotificationResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<NMF.Expressions.INotificationResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
    name: WithUpdates(Of INotificationResult)
    nameWithType: ObservableExtensions.WithUpdates(Of INotificationResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of NMF.Expressions.INotificationResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
  name: WithUpdates<INotificationResult>()
  nameWithType: ObservableExtensions.WithUpdates<INotificationResult>()
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<NMF.Expressions.INotificationResult>()
  nameWithType.vb: ObservableExtensions.WithUpdates(Of INotificationResult)()
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of NMF.Expressions.INotificationResult)()
  name.vb: WithUpdates(Of INotificationResult)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
    name: WithUpdates<INotificationResult>
    nameWithType: ObservableExtensions.WithUpdates<INotificationResult>
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<NMF.Expressions.INotificationResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
    name: WithUpdates(Of INotificationResult)
    nameWithType: ObservableExtensions.WithUpdates(Of INotificationResult)
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of NMF.Expressions.INotificationResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: WithUpdates<T>(IEnumerable<T>)
  nameWithType: ObservableExtensions.WithUpdates<T>(IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.WithUpdates(Of T)(IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: WithUpdates(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
    name: WithUpdates<T>
    nameWithType: ObservableExtensions.WithUpdates<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
    name: WithUpdates(Of T)
    nameWithType: ObservableExtensions.WithUpdates(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions
  commentId: T:NMF.Expressions.Linq.ObservableExtensions
  parent: NMF.Expressions.Linq
  name: ObservableExtensions
  nameWithType: ObservableExtensions
  fullName: NMF.Expressions.Linq.ObservableExtensions
- uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
  isExternal: true
  name: WithUpdates<T>(ICollection<T>)
  nameWithType: ObservableExtensions.WithUpdates<T>(ICollection<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>(System.Collections.Generic.ICollection<T>)
  nameWithType.vb: ObservableExtensions.WithUpdates(Of T)(ICollection(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)(System.Collections.Generic.ICollection(Of T))
  name.vb: WithUpdates(Of T)(ICollection(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
    name: WithUpdates<T>
    nameWithType: ObservableExtensions.WithUpdates<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
    name: WithUpdates(Of T)
    nameWithType: ObservableExtensions.WithUpdates(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
- uid: NMF.Expressions.NotificationResultCollection.Count*
  commentId: Overload:NMF.Expressions.NotificationResultCollection.Count
  name: Count
  nameWithType: NotificationResultCollection.Count
  fullName: NMF.Expressions.NotificationResultCollection.Count
- uid: System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}.Count
  commentId: P:System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}.Count
  parent: System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<INotificationResult>.Count
  fullName: System.Collections.Generic.ICollection<NMF.Expressions.INotificationResult>.Count
  nameWithType.vb: ICollection(Of INotificationResult).Count
  fullName.vb: System.Collections.Generic.ICollection(Of NMF.Expressions.INotificationResult).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: NMF.Expressions.NotificationResultCollection.IsReadOnly*
  commentId: Overload:NMF.Expressions.NotificationResultCollection.IsReadOnly
  name: IsReadOnly
  nameWithType: NotificationResultCollection.IsReadOnly
  fullName: NMF.Expressions.NotificationResultCollection.IsReadOnly
- uid: System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}.IsReadOnly
  parent: System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<INotificationResult>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<NMF.Expressions.INotificationResult>.IsReadOnly
  nameWithType.vb: ICollection(Of INotificationResult).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of NMF.Expressions.INotificationResult).IsReadOnly
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: NMF.Expressions.NotificationResultCollection.Item*
  commentId: Overload:NMF.Expressions.NotificationResultCollection.Item
  name: Item
  nameWithType: NotificationResultCollection.Item
  fullName: NMF.Expressions.NotificationResultCollection.Item
- uid: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList{NMF.Expressions.INotificationResult}.Item(System.Int32)
  parent: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  definition: System.Collections.Generic.IList`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: IList<INotificationResult>.Item[Int32]
  fullName: System.Collections.Generic.IList<NMF.Expressions.INotificationResult>.Item[System.Int32]
  nameWithType.vb: IList(Of INotificationResult).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<INotificationResult>.Item
    fullName: System.Collections.Generic.IList<NMF.Expressions.INotificationResult>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of INotificationResult).Item
    fullName: System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotificationResult
  commentId: T:NMF.Expressions.INotificationResult
  parent: NMF.Expressions
  name: INotificationResult
  nameWithType: INotificationResult
  fullName: NMF.Expressions.INotificationResult
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.NotificationResultCollection.#ctor*
  commentId: Overload:NMF.Expressions.NotificationResultCollection.#ctor
  name: NotificationResultCollection
  nameWithType: NotificationResultCollection.NotificationResultCollection
  fullName: NMF.Expressions.NotificationResultCollection.NotificationResultCollection
- uid: NMF.Expressions.NotificationResultCollection.Add*
  commentId: Overload:NMF.Expressions.NotificationResultCollection.Add
  name: Add
  nameWithType: NotificationResultCollection.Add
  fullName: NMF.Expressions.NotificationResultCollection.Add
- uid: System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}.Add(NMF.Expressions.INotificationResult)
  commentId: M:System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}.Add(NMF.Expressions.INotificationResult)
  parent: System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(INotificationResult)
  nameWithType: ICollection<INotificationResult>.Add(INotificationResult)
  fullName: System.Collections.Generic.ICollection<NMF.Expressions.INotificationResult>.Add(NMF.Expressions.INotificationResult)
  nameWithType.vb: ICollection(Of INotificationResult).Add(INotificationResult)
  fullName.vb: System.Collections.Generic.ICollection(Of NMF.Expressions.INotificationResult).Add(NMF.Expressions.INotificationResult)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<INotificationResult>.Add
    fullName: System.Collections.Generic.ICollection<NMF.Expressions.INotificationResult>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of INotificationResult).Add
    fullName: System.Collections.Generic.ICollection(Of NMF.Expressions.INotificationResult).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.NotificationResultCollection.UnsafeAdd*
  commentId: Overload:NMF.Expressions.NotificationResultCollection.UnsafeAdd
  name: UnsafeAdd
  nameWithType: NotificationResultCollection.UnsafeAdd
  fullName: NMF.Expressions.NotificationResultCollection.UnsafeAdd
- uid: NMF.Expressions.NotificationResultCollection.Clear*
  commentId: Overload:NMF.Expressions.NotificationResultCollection.Clear
  name: Clear
  nameWithType: NotificationResultCollection.Clear
  fullName: NMF.Expressions.NotificationResultCollection.Clear
- uid: System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}.Clear
  commentId: M:System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}.Clear
  parent: System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<INotificationResult>.Clear()
  fullName: System.Collections.Generic.ICollection<NMF.Expressions.INotificationResult>.Clear()
  nameWithType.vb: ICollection(Of INotificationResult).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of NMF.Expressions.INotificationResult).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<INotificationResult>.Clear
    fullName: System.Collections.Generic.ICollection<NMF.Expressions.INotificationResult>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of INotificationResult).Clear
    fullName: System.Collections.Generic.ICollection(Of NMF.Expressions.INotificationResult).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.NotificationResultCollection.GetEnumerator*
  commentId: Overload:NMF.Expressions.NotificationResultCollection.GetEnumerator
  name: GetEnumerator
  nameWithType: NotificationResultCollection.GetEnumerator
  fullName: NMF.Expressions.NotificationResultCollection.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{NMF.Expressions.INotificationResult}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{NMF.Expressions.INotificationResult}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{NMF.Expressions.INotificationResult}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<INotificationResult>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<NMF.Expressions.INotificationResult>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of INotificationResult).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Expressions.INotificationResult).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<INotificationResult>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<NMF.Expressions.INotificationResult>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of INotificationResult).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of NMF.Expressions.INotificationResult).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{NMF.Expressions.INotificationResult}
  commentId: T:System.Collections.Generic.IEnumerator{NMF.Expressions.INotificationResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<INotificationResult>
  nameWithType: IEnumerator<INotificationResult>
  fullName: System.Collections.Generic.IEnumerator<NMF.Expressions.INotificationResult>
  nameWithType.vb: IEnumerator(Of INotificationResult)
  fullName.vb: System.Collections.Generic.IEnumerator(Of NMF.Expressions.INotificationResult)
  name.vb: IEnumerator(Of INotificationResult)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.NotificationResultCollection.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:NMF.Expressions.NotificationResultCollection.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: NotificationResultCollection.IEnumerable.GetEnumerator
  fullName: NMF.Expressions.NotificationResultCollection.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: NotificationResultCollection.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: NMF.Expressions.NotificationResultCollection.Contains*
  commentId: Overload:NMF.Expressions.NotificationResultCollection.Contains
  name: Contains
  nameWithType: NotificationResultCollection.Contains
  fullName: NMF.Expressions.NotificationResultCollection.Contains
- uid: System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}.Contains(NMF.Expressions.INotificationResult)
  commentId: M:System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}.Contains(NMF.Expressions.INotificationResult)
  parent: System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(INotificationResult)
  nameWithType: ICollection<INotificationResult>.Contains(INotificationResult)
  fullName: System.Collections.Generic.ICollection<NMF.Expressions.INotificationResult>.Contains(NMF.Expressions.INotificationResult)
  nameWithType.vb: ICollection(Of INotificationResult).Contains(INotificationResult)
  fullName.vb: System.Collections.Generic.ICollection(Of NMF.Expressions.INotificationResult).Contains(NMF.Expressions.INotificationResult)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<INotificationResult>.Contains
    fullName: System.Collections.Generic.ICollection<NMF.Expressions.INotificationResult>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of INotificationResult).Contains
    fullName: System.Collections.Generic.ICollection(Of NMF.Expressions.INotificationResult).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.NotificationResultCollection.CopyTo*
  commentId: Overload:NMF.Expressions.NotificationResultCollection.CopyTo
  name: CopyTo
  nameWithType: NotificationResultCollection.CopyTo
  fullName: NMF.Expressions.NotificationResultCollection.CopyTo
- uid: System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}.CopyTo(NMF.Expressions.INotificationResult[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}.CopyTo(NMF.Expressions.INotificationResult[],System.Int32)
  parent: System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(INotificationResult[], Int32)
  nameWithType: ICollection<INotificationResult>.CopyTo(INotificationResult[], Int32)
  fullName: System.Collections.Generic.ICollection<NMF.Expressions.INotificationResult>.CopyTo(NMF.Expressions.INotificationResult[], System.Int32)
  nameWithType.vb: ICollection(Of INotificationResult).CopyTo(INotificationResult(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of NMF.Expressions.INotificationResult).CopyTo(NMF.Expressions.INotificationResult(), System.Int32)
  name.vb: CopyTo(INotificationResult(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<INotificationResult>.CopyTo
    fullName: System.Collections.Generic.ICollection<NMF.Expressions.INotificationResult>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of INotificationResult).CopyTo
    fullName: System.Collections.Generic.ICollection(Of NMF.Expressions.INotificationResult).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotificationResult[]
  isExternal: true
  name: INotificationResult[]
  nameWithType: INotificationResult[]
  fullName: NMF.Expressions.INotificationResult[]
  nameWithType.vb: INotificationResult()
  fullName.vb: NMF.Expressions.INotificationResult()
  name.vb: INotificationResult()
  spec.csharp:
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.NotificationResultCollection.Remove*
  commentId: Overload:NMF.Expressions.NotificationResultCollection.Remove
  name: Remove
  nameWithType: NotificationResultCollection.Remove
  fullName: NMF.Expressions.NotificationResultCollection.Remove
- uid: System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}.Remove(NMF.Expressions.INotificationResult)
  commentId: M:System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}.Remove(NMF.Expressions.INotificationResult)
  parent: System.Collections.Generic.ICollection{NMF.Expressions.INotificationResult}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(INotificationResult)
  nameWithType: ICollection<INotificationResult>.Remove(INotificationResult)
  fullName: System.Collections.Generic.ICollection<NMF.Expressions.INotificationResult>.Remove(NMF.Expressions.INotificationResult)
  nameWithType.vb: ICollection(Of INotificationResult).Remove(INotificationResult)
  fullName.vb: System.Collections.Generic.ICollection(Of NMF.Expressions.INotificationResult).Remove(NMF.Expressions.INotificationResult)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<INotificationResult>.Remove
    fullName: System.Collections.Generic.ICollection<NMF.Expressions.INotificationResult>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of INotificationResult).Remove
    fullName: System.Collections.Generic.ICollection(Of NMF.Expressions.INotificationResult).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.NotificationResultCollection.IndexOf*
  commentId: Overload:NMF.Expressions.NotificationResultCollection.IndexOf
  name: IndexOf
  nameWithType: NotificationResultCollection.IndexOf
  fullName: NMF.Expressions.NotificationResultCollection.IndexOf
- uid: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}.IndexOf(NMF.Expressions.INotificationResult)
  commentId: M:System.Collections.Generic.IList{NMF.Expressions.INotificationResult}.IndexOf(NMF.Expressions.INotificationResult)
  parent: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  definition: System.Collections.Generic.IList`1.IndexOf(`0)
  name: IndexOf(INotificationResult)
  nameWithType: IList<INotificationResult>.IndexOf(INotificationResult)
  fullName: System.Collections.Generic.IList<NMF.Expressions.INotificationResult>.IndexOf(NMF.Expressions.INotificationResult)
  nameWithType.vb: IList(Of INotificationResult).IndexOf(INotificationResult)
  fullName.vb: System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult).IndexOf(NMF.Expressions.INotificationResult)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<INotificationResult>.IndexOf
    fullName: System.Collections.Generic.IList<NMF.Expressions.INotificationResult>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of INotificationResult).IndexOf
    fullName: System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.IList`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.NotificationResultCollection.Insert*
  commentId: Overload:NMF.Expressions.NotificationResultCollection.Insert
  name: Insert
  nameWithType: NotificationResultCollection.Insert
  fullName: NMF.Expressions.NotificationResultCollection.Insert
- uid: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}.Insert(System.Int32,NMF.Expressions.INotificationResult)
  commentId: M:System.Collections.Generic.IList{NMF.Expressions.INotificationResult}.Insert(System.Int32,NMF.Expressions.INotificationResult)
  parent: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  definition: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  name: Insert(Int32, INotificationResult)
  nameWithType: IList<INotificationResult>.Insert(Int32, INotificationResult)
  fullName: System.Collections.Generic.IList<NMF.Expressions.INotificationResult>.Insert(System.Int32, NMF.Expressions.INotificationResult)
  nameWithType.vb: IList(Of INotificationResult).Insert(Int32, INotificationResult)
  fullName.vb: System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult).Insert(System.Int32, NMF.Expressions.INotificationResult)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<INotificationResult>.Insert
    fullName: System.Collections.Generic.IList<NMF.Expressions.INotificationResult>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of INotificationResult).Insert
    fullName: System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.NotificationResultCollection.RemoveAt*
  commentId: Overload:NMF.Expressions.NotificationResultCollection.RemoveAt
  name: RemoveAt
  nameWithType: NotificationResultCollection.RemoveAt
  fullName: NMF.Expressions.NotificationResultCollection.RemoveAt
- uid: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList{NMF.Expressions.INotificationResult}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  definition: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: IList<INotificationResult>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<NMF.Expressions.INotificationResult>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of INotificationResult).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<INotificationResult>.RemoveAt
    fullName: System.Collections.Generic.IList<NMF.Expressions.INotificationResult>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of INotificationResult).RemoveAt
    fullName: System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
