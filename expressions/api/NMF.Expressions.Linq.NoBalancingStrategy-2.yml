### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.Linq.NoBalancingStrategy`2
  commentId: T:NMF.Expressions.Linq.NoBalancingStrategy`2
  id: NoBalancingStrategy`2
  parent: NMF.Expressions.Linq
  children:
  - NMF.Expressions.Linq.NoBalancingStrategy`2.Balance(System.Collections.Generic.List{`1}@,System.Collections.Generic.List{`1}@)
  - NMF.Expressions.Linq.NoBalancingStrategy`2.CreateStrategy(NMF.Expressions.Linq.IObservableChunk{`0,`1})
  - NMF.Expressions.Linq.NoBalancingStrategy`2.Instance
  - NMF.Expressions.Linq.NoBalancingStrategy`2.TryAddToExistingChunk(`0,System.Int32)
  langs:
  - csharp
  - vb
  name: NoBalancingStrategy<T, TChunk>
  nameWithType: NoBalancingStrategy<T, TChunk>
  fullName: NMF.Expressions.Linq.NoBalancingStrategy<T, TChunk>
  type: Class
  source:
    remote:
      path: Expressions/Expressions.Chunk/NoBalancingStrategy.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NoBalancingStrategy
    path: src/Expressions/Expressions.Chunk/NoBalancingStrategy.cs
    startLine: 23
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nDenotes a class representing no balancing strategy at all\n"
  example: []
  syntax:
    content: 'public sealed class NoBalancingStrategy<T, TChunk> : IChunkBalancingStrategyProvider<T, TChunk>, IChunkBalancingStrategy<T, TChunk>'
    typeParameters:
    - id: T
    - id: TChunk
    content.vb: >-
      Public NotInheritable Class NoBalancingStrategy(Of T, TChunk)
          Implements IChunkBalancingStrategyProvider(Of T, TChunk), IChunkBalancingStrategy(Of T, TChunk)
  inheritance:
  - System.Object
  implements:
  - NMF.Expressions.Linq.IChunkBalancingStrategyProvider{{T},{TChunk}}
  - NMF.Expressions.Linq.IChunkBalancingStrategy{{T},{TChunk}}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: NoBalancingStrategy(Of T, TChunk)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: NMF.Expressions.Linq.NoBalancingStrategy(Of T, TChunk)
  name.vb: NoBalancingStrategy(Of T, TChunk)
- uid: NMF.Expressions.Linq.NoBalancingStrategy`2.Instance
  commentId: F:NMF.Expressions.Linq.NoBalancingStrategy`2.Instance
  id: Instance
  parent: NMF.Expressions.Linq.NoBalancingStrategy`2
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: NoBalancingStrategy<T, TChunk>.Instance
  fullName: NMF.Expressions.Linq.NoBalancingStrategy<T, TChunk>.Instance
  type: Field
  source:
    remote:
      path: Expressions/Expressions.Chunk/NoBalancingStrategy.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Instance
    path: src/Expressions/Expressions.Chunk/NoBalancingStrategy.cs
    startLine: 28
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nGets the default instance\n"
  example: []
  syntax:
    content: public static readonly NoBalancingStrategy<T, TChunk> Instance
    return:
      type: NMF.Expressions.Linq.NoBalancingStrategy`2
    content.vb: Public Shared ReadOnly Instance As NoBalancingStrategy(Of T, TChunk)
  nameWithType.vb: NoBalancingStrategy(Of T, TChunk).Instance
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.NoBalancingStrategy(Of T, TChunk).Instance
- uid: NMF.Expressions.Linq.NoBalancingStrategy`2.Balance(System.Collections.Generic.List{`1}@,System.Collections.Generic.List{`1}@)
  commentId: M:NMF.Expressions.Linq.NoBalancingStrategy`2.Balance(System.Collections.Generic.List{`1}@,System.Collections.Generic.List{`1}@)
  id: Balance(System.Collections.Generic.List{`1}@,System.Collections.Generic.List{`1}@)
  parent: NMF.Expressions.Linq.NoBalancingStrategy`2
  langs:
  - csharp
  - vb
  name: Balance(ref List<TChunk>, ref List<TChunk>)
  nameWithType: NoBalancingStrategy<T, TChunk>.Balance(ref List<TChunk>, ref List<TChunk>)
  fullName: NMF.Expressions.Linq.NoBalancingStrategy<T, TChunk>.Balance(ref System.Collections.Generic.List<TChunk>, ref System.Collections.Generic.List<TChunk>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Chunk/NoBalancingStrategy.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Balance
    path: src/Expressions/Expressions.Chunk/NoBalancingStrategy.cs
    startLine: 31
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  example: []
  syntax:
    content: public void Balance(ref List<TChunk> addedChunks, ref List<TChunk> removedChunks)
    parameters:
    - id: addedChunks
      type: System.Collections.Generic.List{{TChunk}}
    - id: removedChunks
      type: System.Collections.Generic.List{{TChunk}}
    content.vb: Public Sub Balance(ByRef addedChunks As List(Of TChunk), ByRef removedChunks As List(Of TChunk))
  overload: NMF.Expressions.Linq.NoBalancingStrategy`2.Balance*
  implements:
  - NMF.Expressions.Linq.IChunkBalancingStrategy{{T},{TChunk}}.Balance(System.Collections.Generic.List{{TChunk}}@,System.Collections.Generic.List{{TChunk}}@)
  nameWithType.vb: NoBalancingStrategy(Of T, TChunk).Balance(ByRef List(Of TChunk), ByRef List(Of TChunk))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.Linq.NoBalancingStrategy(Of T, TChunk).Balance(ByRef System.Collections.Generic.List(Of TChunk), ByRef System.Collections.Generic.List(Of TChunk))
  name.vb: Balance(ByRef List(Of TChunk), ByRef List(Of TChunk))
- uid: NMF.Expressions.Linq.NoBalancingStrategy`2.CreateStrategy(NMF.Expressions.Linq.IObservableChunk{`0,`1})
  commentId: M:NMF.Expressions.Linq.NoBalancingStrategy`2.CreateStrategy(NMF.Expressions.Linq.IObservableChunk{`0,`1})
  id: CreateStrategy(NMF.Expressions.Linq.IObservableChunk{`0,`1})
  parent: NMF.Expressions.Linq.NoBalancingStrategy`2
  langs:
  - csharp
  - vb
  name: CreateStrategy(IObservableChunk<T, TChunk>)
  nameWithType: NoBalancingStrategy<T, TChunk>.CreateStrategy(IObservableChunk<T, TChunk>)
  fullName: NMF.Expressions.Linq.NoBalancingStrategy<T, TChunk>.CreateStrategy(NMF.Expressions.Linq.IObservableChunk<T, TChunk>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Chunk/NoBalancingStrategy.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateStrategy
    path: src/Expressions/Expressions.Chunk/NoBalancingStrategy.cs
    startLine: 36
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  example: []
  syntax:
    content: public IChunkBalancingStrategy<T, TChunk> CreateStrategy(IObservableChunk<T, TChunk> observableChunk)
    parameters:
    - id: observableChunk
      type: NMF.Expressions.Linq.IObservableChunk{{T},{TChunk}}
    return:
      type: NMF.Expressions.Linq.IChunkBalancingStrategy{{T},{TChunk}}
    content.vb: Public Function CreateStrategy(observableChunk As IObservableChunk(Of T, TChunk)) As IChunkBalancingStrategy(Of T, TChunk)
  overload: NMF.Expressions.Linq.NoBalancingStrategy`2.CreateStrategy*
  implements:
  - NMF.Expressions.Linq.IChunkBalancingStrategyProvider{{T},{TChunk}}.CreateStrategy(NMF.Expressions.Linq.IObservableChunk{{T},{TChunk}})
  nameWithType.vb: NoBalancingStrategy(Of T, TChunk).CreateStrategy(IObservableChunk(Of T, TChunk))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.Linq.NoBalancingStrategy(Of T, TChunk).CreateStrategy(NMF.Expressions.Linq.IObservableChunk(Of T, TChunk))
  name.vb: CreateStrategy(IObservableChunk(Of T, TChunk))
- uid: NMF.Expressions.Linq.NoBalancingStrategy`2.TryAddToExistingChunk(`0,System.Int32)
  commentId: M:NMF.Expressions.Linq.NoBalancingStrategy`2.TryAddToExistingChunk(`0,System.Int32)
  id: TryAddToExistingChunk(`0,System.Int32)
  parent: NMF.Expressions.Linq.NoBalancingStrategy`2
  langs:
  - csharp
  - vb
  name: TryAddToExistingChunk(T, Int32)
  nameWithType: NoBalancingStrategy<T, TChunk>.TryAddToExistingChunk(T, Int32)
  fullName: NMF.Expressions.Linq.NoBalancingStrategy<T, TChunk>.TryAddToExistingChunk(T, System.Int32)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Chunk/NoBalancingStrategy.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TryAddToExistingChunk
    path: src/Expressions/Expressions.Chunk/NoBalancingStrategy.cs
    startLine: 42
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  example: []
  syntax:
    content: public bool TryAddToExistingChunk(T item, int startingIndex)
    parameters:
    - id: item
      type: '{T}'
    - id: startingIndex
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Function TryAddToExistingChunk(item As T, startingIndex As Integer) As Boolean
  overload: NMF.Expressions.Linq.NoBalancingStrategy`2.TryAddToExistingChunk*
  implements:
  - NMF.Expressions.Linq.IChunkBalancingStrategy{{T},{TChunk}}.TryAddToExistingChunk({T},System.Int32)
  nameWithType.vb: NoBalancingStrategy(Of T, TChunk).TryAddToExistingChunk(T, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.Linq.NoBalancingStrategy(Of T, TChunk).TryAddToExistingChunk(T, System.Int32)
references:
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider{{T},{TChunk}}
  commentId: T:NMF.Expressions.Linq.IChunkBalancingStrategyProvider{`0,`1}
  parent: NMF.Expressions.Linq
  definition: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
  name: IChunkBalancingStrategyProvider<T, TChunk>
  nameWithType: IChunkBalancingStrategyProvider<T, TChunk>
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider<T, TChunk>
  nameWithType.vb: IChunkBalancingStrategyProvider(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of T, TChunk)
  name.vb: IChunkBalancingStrategyProvider(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IChunkBalancingStrategy{{T},{TChunk}}
  commentId: T:NMF.Expressions.Linq.IChunkBalancingStrategy{``0,``1}
  parent: NMF.Expressions.Linq
  definition: NMF.Expressions.Linq.IChunkBalancingStrategy`2
  name: IChunkBalancingStrategy<T, TChunk>
  nameWithType: IChunkBalancingStrategy<T, TChunk>
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategy<T, TChunk>
  nameWithType.vb: IChunkBalancingStrategy(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategy(Of T, TChunk)
  name.vb: IChunkBalancingStrategy(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2
    name: IChunkBalancingStrategy
    nameWithType: IChunkBalancingStrategy
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategy
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2
    name: IChunkBalancingStrategy
    nameWithType: IChunkBalancingStrategy
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategy
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
  commentId: T:NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
  name: IChunkBalancingStrategyProvider<T, TChunk>
  nameWithType: IChunkBalancingStrategyProvider<T, TChunk>
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider<T, TChunk>
  nameWithType.vb: IChunkBalancingStrategyProvider(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of T, TChunk)
  name.vb: IChunkBalancingStrategyProvider(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2
  commentId: T:NMF.Expressions.Linq.IChunkBalancingStrategy`2
  name: IChunkBalancingStrategy<T, TChunk>
  nameWithType: IChunkBalancingStrategy<T, TChunk>
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategy<T, TChunk>
  nameWithType.vb: IChunkBalancingStrategy(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategy(Of T, TChunk)
  name.vb: IChunkBalancingStrategy(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2
    name: IChunkBalancingStrategy
    nameWithType: IChunkBalancingStrategy
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategy
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2
    name: IChunkBalancingStrategy
    nameWithType: IChunkBalancingStrategy
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategy
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.NoBalancingStrategy`2
  commentId: T:NMF.Expressions.Linq.NoBalancingStrategy`2
  parent: NMF.Expressions.Linq
  name: NoBalancingStrategy<T, TChunk>
  nameWithType: NoBalancingStrategy<T, TChunk>
  fullName: NMF.Expressions.Linq.NoBalancingStrategy<T, TChunk>
  nameWithType.vb: NoBalancingStrategy(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.NoBalancingStrategy(Of T, TChunk)
  name.vb: NoBalancingStrategy(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.NoBalancingStrategy`2
    name: NoBalancingStrategy
    nameWithType: NoBalancingStrategy
    fullName: NMF.Expressions.Linq.NoBalancingStrategy
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.NoBalancingStrategy`2
    name: NoBalancingStrategy
    nameWithType: NoBalancingStrategy
    fullName: NMF.Expressions.Linq.NoBalancingStrategy
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.NoBalancingStrategy`2.Balance*
  commentId: Overload:NMF.Expressions.Linq.NoBalancingStrategy`2.Balance
  name: Balance
  nameWithType: NoBalancingStrategy<T, TChunk>.Balance
  fullName: NMF.Expressions.Linq.NoBalancingStrategy<T, TChunk>.Balance
  nameWithType.vb: NoBalancingStrategy(Of T, TChunk).Balance
  fullName.vb: NMF.Expressions.Linq.NoBalancingStrategy(Of T, TChunk).Balance
- uid: NMF.Expressions.Linq.IChunkBalancingStrategy{{T},{TChunk}}.Balance(System.Collections.Generic.List{{TChunk}}@,System.Collections.Generic.List{{TChunk}}@)
  commentId: M:NMF.Expressions.Linq.IChunkBalancingStrategy{`0,`1}.Balance(System.Collections.Generic.List{`1}@,System.Collections.Generic.List{`1}@)
  parent: NMF.Expressions.Linq.IChunkBalancingStrategy{{T},{TChunk}}
  definition: NMF.Expressions.Linq.IChunkBalancingStrategy`2.Balance(System.Collections.Generic.List{`1}@,System.Collections.Generic.List{`1}@)
  name: Balance(List<TChunk>, List<TChunk>)
  nameWithType: IChunkBalancingStrategy<T, TChunk>.Balance(List<TChunk>, List<TChunk>)
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategy<T, TChunk>.Balance(System.Collections.Generic.List<TChunk>, System.Collections.Generic.List<TChunk>)
  nameWithType.vb: IChunkBalancingStrategy(Of T, TChunk).Balance(List(Of TChunk), List(Of TChunk))
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategy(Of T, TChunk).Balance(System.Collections.Generic.List(Of TChunk), System.Collections.Generic.List(Of TChunk))
  name.vb: Balance(List(Of TChunk), List(Of TChunk))
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2.Balance(System.Collections.Generic.List{`1}@,System.Collections.Generic.List{`1}@)
    name: Balance
    nameWithType: IChunkBalancingStrategy<T, TChunk>.Balance
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategy<T, TChunk>.Balance
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2.Balance(System.Collections.Generic.List{`1}@,System.Collections.Generic.List{`1}@)
    name: Balance
    nameWithType: IChunkBalancingStrategy(Of T, TChunk).Balance
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategy(Of T, TChunk).Balance
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{{TChunk}}
  commentId: T:System.Collections.Generic.List{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TChunk>
  nameWithType: List<TChunk>
  fullName: System.Collections.Generic.List<TChunk>
  nameWithType.vb: List(Of TChunk)
  fullName.vb: System.Collections.Generic.List(Of TChunk)
  name.vb: List(Of TChunk)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2.Balance(System.Collections.Generic.List{`1}@,System.Collections.Generic.List{`1}@)
  commentId: M:NMF.Expressions.Linq.IChunkBalancingStrategy`2.Balance(System.Collections.Generic.List{`1}@,System.Collections.Generic.List{`1}@)
  isExternal: true
  name: Balance(List<TChunk>, List<TChunk>)
  nameWithType: IChunkBalancingStrategy<T, TChunk>.Balance(List<TChunk>, List<TChunk>)
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategy<T, TChunk>.Balance(System.Collections.Generic.List<TChunk>, System.Collections.Generic.List<TChunk>)
  nameWithType.vb: IChunkBalancingStrategy(Of T, TChunk).Balance(List(Of TChunk), List(Of TChunk))
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategy(Of T, TChunk).Balance(System.Collections.Generic.List(Of TChunk), System.Collections.Generic.List(Of TChunk))
  name.vb: Balance(List(Of TChunk), List(Of TChunk))
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2.Balance(System.Collections.Generic.List{`1}@,System.Collections.Generic.List{`1}@)
    name: Balance
    nameWithType: IChunkBalancingStrategy<T, TChunk>.Balance
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategy<T, TChunk>.Balance
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2.Balance(System.Collections.Generic.List{`1}@,System.Collections.Generic.List{`1}@)
    name: Balance
    nameWithType: IChunkBalancingStrategy(Of T, TChunk).Balance
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategy(Of T, TChunk).Balance
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.Expressions.Linq.NoBalancingStrategy`2.CreateStrategy*
  commentId: Overload:NMF.Expressions.Linq.NoBalancingStrategy`2.CreateStrategy
  name: CreateStrategy
  nameWithType: NoBalancingStrategy<T, TChunk>.CreateStrategy
  fullName: NMF.Expressions.Linq.NoBalancingStrategy<T, TChunk>.CreateStrategy
  nameWithType.vb: NoBalancingStrategy(Of T, TChunk).CreateStrategy
  fullName.vb: NMF.Expressions.Linq.NoBalancingStrategy(Of T, TChunk).CreateStrategy
- uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider{{T},{TChunk}}.CreateStrategy(NMF.Expressions.Linq.IObservableChunk{{T},{TChunk}})
  commentId: M:NMF.Expressions.Linq.IChunkBalancingStrategyProvider{`0,`1}.CreateStrategy(NMF.Expressions.Linq.IObservableChunk{`0,`1})
  parent: NMF.Expressions.Linq.IChunkBalancingStrategyProvider{{T},{TChunk}}
  definition: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2.CreateStrategy(NMF.Expressions.Linq.IObservableChunk{`0,`1})
  name: CreateStrategy(IObservableChunk<T, TChunk>)
  nameWithType: IChunkBalancingStrategyProvider<T, TChunk>.CreateStrategy(IObservableChunk<T, TChunk>)
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider<T, TChunk>.CreateStrategy(NMF.Expressions.Linq.IObservableChunk<T, TChunk>)
  nameWithType.vb: IChunkBalancingStrategyProvider(Of T, TChunk).CreateStrategy(IObservableChunk(Of T, TChunk))
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of T, TChunk).CreateStrategy(NMF.Expressions.Linq.IObservableChunk(Of T, TChunk))
  name.vb: CreateStrategy(IObservableChunk(Of T, TChunk))
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2.CreateStrategy(NMF.Expressions.Linq.IObservableChunk{`0,`1})
    name: CreateStrategy
    nameWithType: IChunkBalancingStrategyProvider<T, TChunk>.CreateStrategy
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider<T, TChunk>.CreateStrategy
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    nameWithType: IObservableChunk
    fullName: NMF.Expressions.Linq.IObservableChunk
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2.CreateStrategy(NMF.Expressions.Linq.IObservableChunk{`0,`1})
    name: CreateStrategy
    nameWithType: IChunkBalancingStrategyProvider(Of T, TChunk).CreateStrategy
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of T, TChunk).CreateStrategy
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    nameWithType: IObservableChunk
    fullName: NMF.Expressions.Linq.IObservableChunk
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IObservableChunk{{T},{TChunk}}
  commentId: T:NMF.Expressions.Linq.IObservableChunk{``0,``1}
  parent: NMF.Expressions.Linq
  definition: NMF.Expressions.Linq.IObservableChunk`2
  name: IObservableChunk<T, TChunk>
  nameWithType: IObservableChunk<T, TChunk>
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>
  nameWithType.vb: IObservableChunk(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk)
  name.vb: IObservableChunk(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    nameWithType: IObservableChunk
    fullName: NMF.Expressions.Linq.IObservableChunk
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    nameWithType: IObservableChunk
    fullName: NMF.Expressions.Linq.IObservableChunk
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2.CreateStrategy(NMF.Expressions.Linq.IObservableChunk{`0,`1})
  commentId: M:NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2.CreateStrategy(NMF.Expressions.Linq.IObservableChunk{`0,`1})
  name: CreateStrategy(IObservableChunk<T, TChunk>)
  nameWithType: IChunkBalancingStrategyProvider<T, TChunk>.CreateStrategy(IObservableChunk<T, TChunk>)
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider<T, TChunk>.CreateStrategy(NMF.Expressions.Linq.IObservableChunk<T, TChunk>)
  nameWithType.vb: IChunkBalancingStrategyProvider(Of T, TChunk).CreateStrategy(IObservableChunk(Of T, TChunk))
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of T, TChunk).CreateStrategy(NMF.Expressions.Linq.IObservableChunk(Of T, TChunk))
  name.vb: CreateStrategy(IObservableChunk(Of T, TChunk))
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2.CreateStrategy(NMF.Expressions.Linq.IObservableChunk{`0,`1})
    name: CreateStrategy
    nameWithType: IChunkBalancingStrategyProvider<T, TChunk>.CreateStrategy
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider<T, TChunk>.CreateStrategy
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    nameWithType: IObservableChunk
    fullName: NMF.Expressions.Linq.IObservableChunk
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2.CreateStrategy(NMF.Expressions.Linq.IObservableChunk{`0,`1})
    name: CreateStrategy
    nameWithType: IChunkBalancingStrategyProvider(Of T, TChunk).CreateStrategy
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of T, TChunk).CreateStrategy
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    nameWithType: IObservableChunk
    fullName: NMF.Expressions.Linq.IObservableChunk
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IObservableChunk`2
  commentId: T:NMF.Expressions.Linq.IObservableChunk`2
  name: IObservableChunk<T, TChunk>
  nameWithType: IObservableChunk<T, TChunk>
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>
  nameWithType.vb: IObservableChunk(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk)
  name.vb: IObservableChunk(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    nameWithType: IObservableChunk
    fullName: NMF.Expressions.Linq.IObservableChunk
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    nameWithType: IObservableChunk
    fullName: NMF.Expressions.Linq.IObservableChunk
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.NoBalancingStrategy`2.TryAddToExistingChunk*
  commentId: Overload:NMF.Expressions.Linq.NoBalancingStrategy`2.TryAddToExistingChunk
  name: TryAddToExistingChunk
  nameWithType: NoBalancingStrategy<T, TChunk>.TryAddToExistingChunk
  fullName: NMF.Expressions.Linq.NoBalancingStrategy<T, TChunk>.TryAddToExistingChunk
  nameWithType.vb: NoBalancingStrategy(Of T, TChunk).TryAddToExistingChunk
  fullName.vb: NMF.Expressions.Linq.NoBalancingStrategy(Of T, TChunk).TryAddToExistingChunk
- uid: NMF.Expressions.Linq.IChunkBalancingStrategy{{T},{TChunk}}.TryAddToExistingChunk({T},System.Int32)
  commentId: M:NMF.Expressions.Linq.IChunkBalancingStrategy{`0,`1}.TryAddToExistingChunk(`0,System.Int32)
  parent: NMF.Expressions.Linq.IChunkBalancingStrategy{{T},{TChunk}}
  definition: NMF.Expressions.Linq.IChunkBalancingStrategy`2.TryAddToExistingChunk(`0,System.Int32)
  name: TryAddToExistingChunk(T, Int32)
  nameWithType: IChunkBalancingStrategy<T, TChunk>.TryAddToExistingChunk(T, Int32)
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategy<T, TChunk>.TryAddToExistingChunk(T, System.Int32)
  nameWithType.vb: IChunkBalancingStrategy(Of T, TChunk).TryAddToExistingChunk(T, Int32)
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategy(Of T, TChunk).TryAddToExistingChunk(T, System.Int32)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2.TryAddToExistingChunk(`0,System.Int32)
    name: TryAddToExistingChunk
    nameWithType: IChunkBalancingStrategy<T, TChunk>.TryAddToExistingChunk
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategy<T, TChunk>.TryAddToExistingChunk
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2.TryAddToExistingChunk(`0,System.Int32)
    name: TryAddToExistingChunk
    nameWithType: IChunkBalancingStrategy(Of T, TChunk).TryAddToExistingChunk
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategy(Of T, TChunk).TryAddToExistingChunk
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2.TryAddToExistingChunk(`0,System.Int32)
  commentId: M:NMF.Expressions.Linq.IChunkBalancingStrategy`2.TryAddToExistingChunk(`0,System.Int32)
  isExternal: true
  name: TryAddToExistingChunk(T, Int32)
  nameWithType: IChunkBalancingStrategy<T, TChunk>.TryAddToExistingChunk(T, Int32)
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategy<T, TChunk>.TryAddToExistingChunk(T, System.Int32)
  nameWithType.vb: IChunkBalancingStrategy(Of T, TChunk).TryAddToExistingChunk(T, Int32)
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategy(Of T, TChunk).TryAddToExistingChunk(T, System.Int32)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2.TryAddToExistingChunk(`0,System.Int32)
    name: TryAddToExistingChunk
    nameWithType: IChunkBalancingStrategy<T, TChunk>.TryAddToExistingChunk
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategy<T, TChunk>.TryAddToExistingChunk
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2.TryAddToExistingChunk(`0,System.Int32)
    name: TryAddToExistingChunk
    nameWithType: IChunkBalancingStrategy(Of T, TChunk).TryAddToExistingChunk
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategy(Of T, TChunk).TryAddToExistingChunk
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
