### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.CollectionChangedNotificationResult`1
  commentId: T:NMF.Expressions.CollectionChangedNotificationResult`1
  id: CollectionChangedNotificationResult`1
  parent: NMF.Expressions
  children:
  - NMF.Expressions.CollectionChangedNotificationResult`1.AddedItems
  - NMF.Expressions.CollectionChangedNotificationResult`1.Changed
  - NMF.Expressions.CollectionChangedNotificationResult`1.Create(NMF.Expressions.INotifiable,System.Boolean)
  - NMF.Expressions.CollectionChangedNotificationResult`1.FreeReference
  - NMF.Expressions.CollectionChangedNotificationResult`1.IncreaseReferences(System.Int32)
  - NMF.Expressions.CollectionChangedNotificationResult`1.IsReset
  - NMF.Expressions.CollectionChangedNotificationResult`1.MovedItems
  - NMF.Expressions.CollectionChangedNotificationResult`1.NewItemsStartIndex
  - NMF.Expressions.CollectionChangedNotificationResult`1.OldItemsStartIndex
  - NMF.Expressions.CollectionChangedNotificationResult`1.RemovedItems
  - NMF.Expressions.CollectionChangedNotificationResult`1.Source
  - NMF.Expressions.CollectionChangedNotificationResult`1.Transfer(NMF.Expressions.ICollectionChangedNotificationResult,NMF.Expressions.INotifiable)
  - NMF.Expressions.CollectionChangedNotificationResult`1.TurnIntoReset
  - NMF.Expressions.CollectionChangedNotificationResult`1.UpdateNewStartIndex(System.Int32)
  - NMF.Expressions.CollectionChangedNotificationResult`1.UpdateOldStartIndex(System.Int32)
  langs:
  - csharp
  - vb
  name: CollectionChangedNotificationResult<T>
  nameWithType: CollectionChangedNotificationResult<T>
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>
  type: Class
  source:
    remote:
      path: Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CollectionChangedNotificationResult
    path: src/Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
    startLine: 72
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nDenotes the standard implementation of a collection result\n"
  example: []
  syntax:
    content: 'public class CollectionChangedNotificationResult<T> : ICollectionChangedNotificationResult<T>, ICollectionChangedNotificationResult, INotificationResult'
    typeParameters:
    - id: T
      description: the type of elements
    content.vb: Public Class CollectionChangedNotificationResult(Of T) Implements ICollectionChangedNotificationResult(Of T), ICollectionChangedNotificationResult, INotificationResult
  inheritance:
  - System.Object
  implements:
  - NMF.Expressions.ICollectionChangedNotificationResult{{T}}
  - NMF.Expressions.ICollectionChangedNotificationResult
  - NMF.Expressions.INotificationResult
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - NMF.Expressions.CollectionChangedNotificationResult`1.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  nameWithType.vb: CollectionChangedNotificationResult(Of T)
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T)
  name.vb: CollectionChangedNotificationResult(Of T)
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.Changed
  commentId: P:NMF.Expressions.CollectionChangedNotificationResult`1.Changed
  id: Changed
  parent: NMF.Expressions.CollectionChangedNotificationResult`1
  langs:
  - csharp
  - vb
  name: Changed
  nameWithType: CollectionChangedNotificationResult<T>.Changed
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.Changed
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Changed
    path: src/Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
    startLine: 84
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: public bool Changed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Changed As Boolean
  overload: NMF.Expressions.CollectionChangedNotificationResult`1.Changed*
  implements:
  - NMF.Expressions.INotificationResult.Changed
  nameWithType.vb: CollectionChangedNotificationResult(Of T).Changed
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).Changed
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.Source
  commentId: P:NMF.Expressions.CollectionChangedNotificationResult`1.Source
  id: Source
  parent: NMF.Expressions.CollectionChangedNotificationResult`1
  langs:
  - csharp
  - vb
  name: Source
  nameWithType: CollectionChangedNotificationResult<T>.Source
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.Source
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Source
    path: src/Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
    startLine: 87
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: public INotifiable Source { get; }
    parameters: []
    return:
      type: NMF.Expressions.INotifiable
    content.vb: Public ReadOnly Property Source As INotifiable
  overload: NMF.Expressions.CollectionChangedNotificationResult`1.Source*
  implements:
  - NMF.Expressions.INotificationResult.Source
  nameWithType.vb: CollectionChangedNotificationResult(Of T).Source
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).Source
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.IsReset
  commentId: P:NMF.Expressions.CollectionChangedNotificationResult`1.IsReset
  id: IsReset
  parent: NMF.Expressions.CollectionChangedNotificationResult`1
  langs:
  - csharp
  - vb
  name: IsReset
  nameWithType: CollectionChangedNotificationResult<T>.IsReset
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.IsReset
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsReset
    path: src/Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
    startLine: 90
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nTrue, if the collection was reset, otherwise False\n"
  example: []
  syntax:
    content: public bool IsReset { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReset As Boolean
  overload: NMF.Expressions.CollectionChangedNotificationResult`1.IsReset*
  implements:
  - NMF.Expressions.ICollectionChangedNotificationResult.IsReset
  nameWithType.vb: CollectionChangedNotificationResult(Of T).IsReset
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).IsReset
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.AddedItems
  commentId: P:NMF.Expressions.CollectionChangedNotificationResult`1.AddedItems
  id: AddedItems
  parent: NMF.Expressions.CollectionChangedNotificationResult`1
  langs:
  - csharp
  - vb
  name: AddedItems
  nameWithType: CollectionChangedNotificationResult<T>.AddedItems
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.AddedItems
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AddedItems
    path: src/Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
    startLine: 93
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nGets a list of added items\n"
  example: []
  syntax:
    content: public List<T> AddedItems { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{{T}}
    content.vb: Public ReadOnly Property AddedItems As List(Of T)
  overload: NMF.Expressions.CollectionChangedNotificationResult`1.AddedItems*
  implements:
  - NMF.Expressions.ICollectionChangedNotificationResult{{T}}.AddedItems
  nameWithType.vb: CollectionChangedNotificationResult(Of T).AddedItems
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).AddedItems
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.MovedItems
  commentId: P:NMF.Expressions.CollectionChangedNotificationResult`1.MovedItems
  id: MovedItems
  parent: NMF.Expressions.CollectionChangedNotificationResult`1
  langs:
  - csharp
  - vb
  name: MovedItems
  nameWithType: CollectionChangedNotificationResult<T>.MovedItems
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.MovedItems
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: MovedItems
    path: src/Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
    startLine: 96
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nGets a list of moved items\n"
  example: []
  syntax:
    content: public List<T> MovedItems { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{{T}}
    content.vb: Public ReadOnly Property MovedItems As List(Of T)
  overload: NMF.Expressions.CollectionChangedNotificationResult`1.MovedItems*
  implements:
  - NMF.Expressions.ICollectionChangedNotificationResult{{T}}.MovedItems
  nameWithType.vb: CollectionChangedNotificationResult(Of T).MovedItems
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).MovedItems
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.RemovedItems
  commentId: P:NMF.Expressions.CollectionChangedNotificationResult`1.RemovedItems
  id: RemovedItems
  parent: NMF.Expressions.CollectionChangedNotificationResult`1
  langs:
  - csharp
  - vb
  name: RemovedItems
  nameWithType: CollectionChangedNotificationResult<T>.RemovedItems
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.RemovedItems
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RemovedItems
    path: src/Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
    startLine: 99
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nGets a list of removed items\n"
  example: []
  syntax:
    content: public List<T> RemovedItems { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{{T}}
    content.vb: Public ReadOnly Property RemovedItems As List(Of T)
  overload: NMF.Expressions.CollectionChangedNotificationResult`1.RemovedItems*
  implements:
  - NMF.Expressions.ICollectionChangedNotificationResult{{T}}.RemovedItems
  nameWithType.vb: CollectionChangedNotificationResult(Of T).RemovedItems
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).RemovedItems
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.OldItemsStartIndex
  commentId: P:NMF.Expressions.CollectionChangedNotificationResult`1.OldItemsStartIndex
  id: OldItemsStartIndex
  parent: NMF.Expressions.CollectionChangedNotificationResult`1
  langs:
  - csharp
  - vb
  name: OldItemsStartIndex
  nameWithType: CollectionChangedNotificationResult<T>.OldItemsStartIndex
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.OldItemsStartIndex
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OldItemsStartIndex
    path: src/Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
    startLine: 108
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nGets the first index of old items or -1\n"
  example: []
  syntax:
    content: public int OldItemsStartIndex { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property OldItemsStartIndex As Integer
  overload: NMF.Expressions.CollectionChangedNotificationResult`1.OldItemsStartIndex*
  implements:
  - NMF.Expressions.ICollectionChangedNotificationResult.OldItemsStartIndex
  nameWithType.vb: CollectionChangedNotificationResult(Of T).OldItemsStartIndex
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).OldItemsStartIndex
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.NewItemsStartIndex
  commentId: P:NMF.Expressions.CollectionChangedNotificationResult`1.NewItemsStartIndex
  id: NewItemsStartIndex
  parent: NMF.Expressions.CollectionChangedNotificationResult`1
  langs:
  - csharp
  - vb
  name: NewItemsStartIndex
  nameWithType: CollectionChangedNotificationResult<T>.NewItemsStartIndex
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.NewItemsStartIndex
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NewItemsStartIndex
    path: src/Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
    startLine: 111
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nGets the first index of new items or -1\n"
  example: []
  syntax:
    content: public int NewItemsStartIndex { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property NewItemsStartIndex As Integer
  overload: NMF.Expressions.CollectionChangedNotificationResult`1.NewItemsStartIndex*
  implements:
  - NMF.Expressions.ICollectionChangedNotificationResult.NewItemsStartIndex
  nameWithType.vb: CollectionChangedNotificationResult(Of T).NewItemsStartIndex
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).NewItemsStartIndex
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.Create(NMF.Expressions.INotifiable,System.Boolean)
  commentId: M:NMF.Expressions.CollectionChangedNotificationResult`1.Create(NMF.Expressions.INotifiable,System.Boolean)
  id: Create(NMF.Expressions.INotifiable,System.Boolean)
  parent: NMF.Expressions.CollectionChangedNotificationResult`1
  langs:
  - csharp
  - vb
  name: Create(INotifiable, bool)
  nameWithType: CollectionChangedNotificationResult<T>.Create(INotifiable, bool)
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.Create(NMF.Expressions.INotifiable, bool)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Create
    path: src/Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
    startLine: 125
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nCreates a new instance of a collection notification\n"
  example: []
  syntax:
    content: public static CollectionChangedNotificationResult<T> Create(INotifiable source, bool isReset = false)
    parameters:
    - id: source
      type: NMF.Expressions.INotifiable
      description: the source DDG node
    - id: isReset
      type: System.Boolean
      description: True, if this is a reset, otherwise False
    return:
      type: NMF.Expressions.CollectionChangedNotificationResult`1
      description: A collection notification instance
    content.vb: Public Shared Function Create(source As INotifiable, isReset As Boolean = False) As CollectionChangedNotificationResult(Of T)
  overload: NMF.Expressions.CollectionChangedNotificationResult`1.Create*
  nameWithType.vb: CollectionChangedNotificationResult(Of T).Create(INotifiable, Boolean)
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).Create(NMF.Expressions.INotifiable, Boolean)
  name.vb: Create(INotifiable, Boolean)
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.TurnIntoReset
  commentId: M:NMF.Expressions.CollectionChangedNotificationResult`1.TurnIntoReset
  id: TurnIntoReset
  parent: NMF.Expressions.CollectionChangedNotificationResult`1
  langs:
  - csharp
  - vb
  name: TurnIntoReset()
  nameWithType: CollectionChangedNotificationResult<T>.TurnIntoReset()
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.TurnIntoReset()
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TurnIntoReset
    path: src/Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
    startLine: 148
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nTurns this notification into a reset\n"
  example: []
  syntax:
    content: public void TurnIntoReset()
    content.vb: Public Sub TurnIntoReset()
  overload: NMF.Expressions.CollectionChangedNotificationResult`1.TurnIntoReset*
  nameWithType.vb: CollectionChangedNotificationResult(Of T).TurnIntoReset()
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).TurnIntoReset()
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.Transfer(NMF.Expressions.ICollectionChangedNotificationResult,NMF.Expressions.INotifiable)
  commentId: M:NMF.Expressions.CollectionChangedNotificationResult`1.Transfer(NMF.Expressions.ICollectionChangedNotificationResult,NMF.Expressions.INotifiable)
  id: Transfer(NMF.Expressions.ICollectionChangedNotificationResult,NMF.Expressions.INotifiable)
  parent: NMF.Expressions.CollectionChangedNotificationResult`1
  langs:
  - csharp
  - vb
  name: Transfer(ICollectionChangedNotificationResult, INotifiable)
  nameWithType: CollectionChangedNotificationResult<T>.Transfer(ICollectionChangedNotificationResult, INotifiable)
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.Transfer(NMF.Expressions.ICollectionChangedNotificationResult, NMF.Expressions.INotifiable)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Transfer
    path: src/Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
    startLine: 159
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nTransfers the provided notification to a new change source\n"
  example: []
  syntax:
    content: public static CollectionChangedNotificationResult<T> Transfer(ICollectionChangedNotificationResult oldResult, INotifiable newSource)
    parameters:
    - id: oldResult
      type: NMF.Expressions.ICollectionChangedNotificationResult
      description: The old notification
    - id: newSource
      type: NMF.Expressions.INotifiable
      description: The new change source
    return:
      type: NMF.Expressions.CollectionChangedNotificationResult`1
      description: An updated notification
    content.vb: Public Shared Function Transfer(oldResult As ICollectionChangedNotificationResult, newSource As INotifiable) As CollectionChangedNotificationResult(Of T)
  overload: NMF.Expressions.CollectionChangedNotificationResult`1.Transfer*
  nameWithType.vb: CollectionChangedNotificationResult(Of T).Transfer(ICollectionChangedNotificationResult, INotifiable)
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).Transfer(NMF.Expressions.ICollectionChangedNotificationResult, NMF.Expressions.INotifiable)
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.UpdateOldStartIndex(System.Int32)
  commentId: M:NMF.Expressions.CollectionChangedNotificationResult`1.UpdateOldStartIndex(System.Int32)
  id: UpdateOldStartIndex(System.Int32)
  parent: NMF.Expressions.CollectionChangedNotificationResult`1
  langs:
  - csharp
  - vb
  name: UpdateOldStartIndex(int)
  nameWithType: CollectionChangedNotificationResult<T>.UpdateOldStartIndex(int)
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.UpdateOldStartIndex(int)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: UpdateOldStartIndex
    path: src/Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
    startLine: 175
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nUpdates the old start index\n"
  example: []
  syntax:
    content: public void UpdateOldStartIndex(int startIndex)
    parameters:
    - id: startIndex
      type: System.Int32
      description: the new start index of old items
    content.vb: Public Sub UpdateOldStartIndex(startIndex As Integer)
  overload: NMF.Expressions.CollectionChangedNotificationResult`1.UpdateOldStartIndex*
  nameWithType.vb: CollectionChangedNotificationResult(Of T).UpdateOldStartIndex(Integer)
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).UpdateOldStartIndex(Integer)
  name.vb: UpdateOldStartIndex(Integer)
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.UpdateNewStartIndex(System.Int32)
  commentId: M:NMF.Expressions.CollectionChangedNotificationResult`1.UpdateNewStartIndex(System.Int32)
  id: UpdateNewStartIndex(System.Int32)
  parent: NMF.Expressions.CollectionChangedNotificationResult`1
  langs:
  - csharp
  - vb
  name: UpdateNewStartIndex(int)
  nameWithType: CollectionChangedNotificationResult<T>.UpdateNewStartIndex(int)
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.UpdateNewStartIndex(int)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: UpdateNewStartIndex
    path: src/Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
    startLine: 191
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nUpdates the new start index\n"
  example: []
  syntax:
    content: public void UpdateNewStartIndex(int startIndex)
    parameters:
    - id: startIndex
      type: System.Int32
      description: the new start index of new items
    content.vb: Public Sub UpdateNewStartIndex(startIndex As Integer)
  overload: NMF.Expressions.CollectionChangedNotificationResult`1.UpdateNewStartIndex*
  nameWithType.vb: CollectionChangedNotificationResult(Of T).UpdateNewStartIndex(Integer)
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).UpdateNewStartIndex(Integer)
  name.vb: UpdateNewStartIndex(Integer)
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.IncreaseReferences(System.Int32)
  commentId: M:NMF.Expressions.CollectionChangedNotificationResult`1.IncreaseReferences(System.Int32)
  id: IncreaseReferences(System.Int32)
  parent: NMF.Expressions.CollectionChangedNotificationResult`1
  langs:
  - csharp
  - vb
  name: IncreaseReferences(int)
  nameWithType: CollectionChangedNotificationResult<T>.IncreaseReferences(int)
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.IncreaseReferences(int)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IncreaseReferences
    path: src/Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
    startLine: 209
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: public void IncreaseReferences(int references)
    parameters:
    - id: references
      type: System.Int32
    content.vb: Public Sub IncreaseReferences(references As Integer)
  overload: NMF.Expressions.CollectionChangedNotificationResult`1.IncreaseReferences*
  implements:
  - NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
  nameWithType.vb: CollectionChangedNotificationResult(Of T).IncreaseReferences(Integer)
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).IncreaseReferences(Integer)
  name.vb: IncreaseReferences(Integer)
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.FreeReference
  commentId: M:NMF.Expressions.CollectionChangedNotificationResult`1.FreeReference
  id: FreeReference
  parent: NMF.Expressions.CollectionChangedNotificationResult`1
  langs:
  - csharp
  - vb
  name: FreeReference()
  nameWithType: CollectionChangedNotificationResult<T>.FreeReference()
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.FreeReference()
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: FreeReference
    path: src/Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
    startLine: 215
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: public void FreeReference()
    content.vb: Public Sub FreeReference()
  overload: NMF.Expressions.CollectionChangedNotificationResult`1.FreeReference*
  implements:
  - NMF.Expressions.INotificationResult.FreeReference
  nameWithType.vb: CollectionChangedNotificationResult(Of T).FreeReference()
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).FreeReference()
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NMF.Expressions.ICollectionChangedNotificationResult{{T}}
  commentId: T:NMF.Expressions.ICollectionChangedNotificationResult{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.ICollectionChangedNotificationResult`1
  name: ICollectionChangedNotificationResult<T>
  nameWithType: ICollectionChangedNotificationResult<T>
  fullName: NMF.Expressions.ICollectionChangedNotificationResult<T>
  nameWithType.vb: ICollectionChangedNotificationResult(Of T)
  fullName.vb: NMF.Expressions.ICollectionChangedNotificationResult(Of T)
  name.vb: ICollectionChangedNotificationResult(Of T)
  spec.csharp:
  - uid: NMF.Expressions.ICollectionChangedNotificationResult`1
    name: ICollectionChangedNotificationResult
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ICollectionChangedNotificationResult`1
    name: ICollectionChangedNotificationResult
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.ICollectionChangedNotificationResult
  commentId: T:NMF.Expressions.ICollectionChangedNotificationResult
  parent: NMF.Expressions
  name: ICollectionChangedNotificationResult
  nameWithType: ICollectionChangedNotificationResult
  fullName: NMF.Expressions.ICollectionChangedNotificationResult
- uid: NMF.Expressions.INotificationResult
  commentId: T:NMF.Expressions.INotificationResult
  parent: NMF.Expressions
  name: INotificationResult
  nameWithType: INotificationResult
  fullName: NMF.Expressions.INotificationResult
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<CollectionChangedNotificationResult<T>>(CollectionChangedNotificationResult<T>)
  nameWithType: ExpressionExtensions.AsOne<CollectionChangedNotificationResult<T>>(CollectionChangedNotificationResult<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<NMF.Expressions.CollectionChangedNotificationResult<T>>(NMF.Expressions.CollectionChangedNotificationResult<T>)
  nameWithType.vb: ExpressionExtensions.AsOne(Of CollectionChangedNotificationResult(Of T))(CollectionChangedNotificationResult(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of NMF.Expressions.CollectionChangedNotificationResult(Of T))(NMF.Expressions.CollectionChangedNotificationResult(Of T))
  name.vb: AsOne(Of CollectionChangedNotificationResult(Of T))(CollectionChangedNotificationResult(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.CollectionChangedNotificationResult{`0})
    name: AsOne
  - name: <
  - uid: NMF.Expressions.CollectionChangedNotificationResult`1
    name: CollectionChangedNotificationResult
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  - name: (
  - uid: NMF.Expressions.CollectionChangedNotificationResult`1
    name: CollectionChangedNotificationResult
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.CollectionChangedNotificationResult{`0})
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.CollectionChangedNotificationResult`1
    name: CollectionChangedNotificationResult
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
  - name: (
  - uid: NMF.Expressions.CollectionChangedNotificationResult`1
    name: CollectionChangedNotificationResult
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.ICollectionChangedNotificationResult`1
  commentId: T:NMF.Expressions.ICollectionChangedNotificationResult`1
  name: ICollectionChangedNotificationResult<T>
  nameWithType: ICollectionChangedNotificationResult<T>
  fullName: NMF.Expressions.ICollectionChangedNotificationResult<T>
  nameWithType.vb: ICollectionChangedNotificationResult(Of T)
  fullName.vb: NMF.Expressions.ICollectionChangedNotificationResult(Of T)
  name.vb: ICollectionChangedNotificationResult(Of T)
  spec.csharp:
  - uid: NMF.Expressions.ICollectionChangedNotificationResult`1
    name: ICollectionChangedNotificationResult
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ICollectionChangedNotificationResult`1
    name: ICollectionChangedNotificationResult
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<T>(T)
  nameWithType: ExpressionExtensions.AsOne<T>(T)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<T>(T)
  nameWithType.vb: ExpressionExtensions.AsOne(Of T)(T)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of T)(T)
  name.vb: AsOne(Of T)(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  parent: NMF.Expressions.Linq
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.Changed*
  commentId: Overload:NMF.Expressions.CollectionChangedNotificationResult`1.Changed
  name: Changed
  nameWithType: CollectionChangedNotificationResult<T>.Changed
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.Changed
  nameWithType.vb: CollectionChangedNotificationResult(Of T).Changed
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).Changed
- uid: NMF.Expressions.INotificationResult.Changed
  commentId: P:NMF.Expressions.INotificationResult.Changed
  parent: NMF.Expressions.INotificationResult
  name: Changed
  nameWithType: INotificationResult.Changed
  fullName: NMF.Expressions.INotificationResult.Changed
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.Source*
  commentId: Overload:NMF.Expressions.CollectionChangedNotificationResult`1.Source
  name: Source
  nameWithType: CollectionChangedNotificationResult<T>.Source
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.Source
  nameWithType.vb: CollectionChangedNotificationResult(Of T).Source
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).Source
- uid: NMF.Expressions.INotificationResult.Source
  commentId: P:NMF.Expressions.INotificationResult.Source
  parent: NMF.Expressions.INotificationResult
  name: Source
  nameWithType: INotificationResult.Source
  fullName: NMF.Expressions.INotificationResult.Source
- uid: NMF.Expressions.INotifiable
  commentId: T:NMF.Expressions.INotifiable
  parent: NMF.Expressions
  name: INotifiable
  nameWithType: INotifiable
  fullName: NMF.Expressions.INotifiable
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.IsReset*
  commentId: Overload:NMF.Expressions.CollectionChangedNotificationResult`1.IsReset
  name: IsReset
  nameWithType: CollectionChangedNotificationResult<T>.IsReset
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.IsReset
  nameWithType.vb: CollectionChangedNotificationResult(Of T).IsReset
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).IsReset
- uid: NMF.Expressions.ICollectionChangedNotificationResult.IsReset
  commentId: P:NMF.Expressions.ICollectionChangedNotificationResult.IsReset
  parent: NMF.Expressions.ICollectionChangedNotificationResult
  name: IsReset
  nameWithType: ICollectionChangedNotificationResult.IsReset
  fullName: NMF.Expressions.ICollectionChangedNotificationResult.IsReset
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.AddedItems*
  commentId: Overload:NMF.Expressions.CollectionChangedNotificationResult`1.AddedItems
  name: AddedItems
  nameWithType: CollectionChangedNotificationResult<T>.AddedItems
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.AddedItems
  nameWithType.vb: CollectionChangedNotificationResult(Of T).AddedItems
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).AddedItems
- uid: NMF.Expressions.ICollectionChangedNotificationResult{{T}}.AddedItems
  commentId: P:NMF.Expressions.ICollectionChangedNotificationResult{`0}.AddedItems
  parent: NMF.Expressions.ICollectionChangedNotificationResult{{T}}
  definition: NMF.Expressions.ICollectionChangedNotificationResult`1.AddedItems
  name: AddedItems
  nameWithType: ICollectionChangedNotificationResult<T>.AddedItems
  fullName: NMF.Expressions.ICollectionChangedNotificationResult<T>.AddedItems
  nameWithType.vb: ICollectionChangedNotificationResult(Of T).AddedItems
  fullName.vb: NMF.Expressions.ICollectionChangedNotificationResult(Of T).AddedItems
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.ICollectionChangedNotificationResult`1.AddedItems
  commentId: P:NMF.Expressions.ICollectionChangedNotificationResult`1.AddedItems
  name: AddedItems
  nameWithType: ICollectionChangedNotificationResult<T>.AddedItems
  fullName: NMF.Expressions.ICollectionChangedNotificationResult<T>.AddedItems
  nameWithType.vb: ICollectionChangedNotificationResult(Of T).AddedItems
  fullName.vb: NMF.Expressions.ICollectionChangedNotificationResult(Of T).AddedItems
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.MovedItems*
  commentId: Overload:NMF.Expressions.CollectionChangedNotificationResult`1.MovedItems
  name: MovedItems
  nameWithType: CollectionChangedNotificationResult<T>.MovedItems
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.MovedItems
  nameWithType.vb: CollectionChangedNotificationResult(Of T).MovedItems
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).MovedItems
- uid: NMF.Expressions.ICollectionChangedNotificationResult{{T}}.MovedItems
  commentId: P:NMF.Expressions.ICollectionChangedNotificationResult{`0}.MovedItems
  parent: NMF.Expressions.ICollectionChangedNotificationResult{{T}}
  definition: NMF.Expressions.ICollectionChangedNotificationResult`1.MovedItems
  name: MovedItems
  nameWithType: ICollectionChangedNotificationResult<T>.MovedItems
  fullName: NMF.Expressions.ICollectionChangedNotificationResult<T>.MovedItems
  nameWithType.vb: ICollectionChangedNotificationResult(Of T).MovedItems
  fullName.vb: NMF.Expressions.ICollectionChangedNotificationResult(Of T).MovedItems
- uid: NMF.Expressions.ICollectionChangedNotificationResult`1.MovedItems
  commentId: P:NMF.Expressions.ICollectionChangedNotificationResult`1.MovedItems
  name: MovedItems
  nameWithType: ICollectionChangedNotificationResult<T>.MovedItems
  fullName: NMF.Expressions.ICollectionChangedNotificationResult<T>.MovedItems
  nameWithType.vb: ICollectionChangedNotificationResult(Of T).MovedItems
  fullName.vb: NMF.Expressions.ICollectionChangedNotificationResult(Of T).MovedItems
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.RemovedItems*
  commentId: Overload:NMF.Expressions.CollectionChangedNotificationResult`1.RemovedItems
  name: RemovedItems
  nameWithType: CollectionChangedNotificationResult<T>.RemovedItems
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.RemovedItems
  nameWithType.vb: CollectionChangedNotificationResult(Of T).RemovedItems
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).RemovedItems
- uid: NMF.Expressions.ICollectionChangedNotificationResult{{T}}.RemovedItems
  commentId: P:NMF.Expressions.ICollectionChangedNotificationResult{`0}.RemovedItems
  parent: NMF.Expressions.ICollectionChangedNotificationResult{{T}}
  definition: NMF.Expressions.ICollectionChangedNotificationResult`1.RemovedItems
  name: RemovedItems
  nameWithType: ICollectionChangedNotificationResult<T>.RemovedItems
  fullName: NMF.Expressions.ICollectionChangedNotificationResult<T>.RemovedItems
  nameWithType.vb: ICollectionChangedNotificationResult(Of T).RemovedItems
  fullName.vb: NMF.Expressions.ICollectionChangedNotificationResult(Of T).RemovedItems
- uid: NMF.Expressions.ICollectionChangedNotificationResult`1.RemovedItems
  commentId: P:NMF.Expressions.ICollectionChangedNotificationResult`1.RemovedItems
  name: RemovedItems
  nameWithType: ICollectionChangedNotificationResult<T>.RemovedItems
  fullName: NMF.Expressions.ICollectionChangedNotificationResult<T>.RemovedItems
  nameWithType.vb: ICollectionChangedNotificationResult(Of T).RemovedItems
  fullName.vb: NMF.Expressions.ICollectionChangedNotificationResult(Of T).RemovedItems
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.OldItemsStartIndex*
  commentId: Overload:NMF.Expressions.CollectionChangedNotificationResult`1.OldItemsStartIndex
  name: OldItemsStartIndex
  nameWithType: CollectionChangedNotificationResult<T>.OldItemsStartIndex
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.OldItemsStartIndex
  nameWithType.vb: CollectionChangedNotificationResult(Of T).OldItemsStartIndex
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).OldItemsStartIndex
- uid: NMF.Expressions.ICollectionChangedNotificationResult.OldItemsStartIndex
  commentId: P:NMF.Expressions.ICollectionChangedNotificationResult.OldItemsStartIndex
  parent: NMF.Expressions.ICollectionChangedNotificationResult
  name: OldItemsStartIndex
  nameWithType: ICollectionChangedNotificationResult.OldItemsStartIndex
  fullName: NMF.Expressions.ICollectionChangedNotificationResult.OldItemsStartIndex
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.NewItemsStartIndex*
  commentId: Overload:NMF.Expressions.CollectionChangedNotificationResult`1.NewItemsStartIndex
  name: NewItemsStartIndex
  nameWithType: CollectionChangedNotificationResult<T>.NewItemsStartIndex
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.NewItemsStartIndex
  nameWithType.vb: CollectionChangedNotificationResult(Of T).NewItemsStartIndex
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).NewItemsStartIndex
- uid: NMF.Expressions.ICollectionChangedNotificationResult.NewItemsStartIndex
  commentId: P:NMF.Expressions.ICollectionChangedNotificationResult.NewItemsStartIndex
  parent: NMF.Expressions.ICollectionChangedNotificationResult
  name: NewItemsStartIndex
  nameWithType: ICollectionChangedNotificationResult.NewItemsStartIndex
  fullName: NMF.Expressions.ICollectionChangedNotificationResult.NewItemsStartIndex
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.Create*
  commentId: Overload:NMF.Expressions.CollectionChangedNotificationResult`1.Create
  name: Create
  nameWithType: CollectionChangedNotificationResult<T>.Create
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.Create
  nameWithType.vb: CollectionChangedNotificationResult(Of T).Create
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).Create
- uid: NMF.Expressions.CollectionChangedNotificationResult`1
  commentId: T:NMF.Expressions.CollectionChangedNotificationResult`1
  parent: NMF.Expressions
  name: CollectionChangedNotificationResult<T>
  nameWithType: CollectionChangedNotificationResult<T>
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>
  nameWithType.vb: CollectionChangedNotificationResult(Of T)
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T)
  name.vb: CollectionChangedNotificationResult(Of T)
  spec.csharp:
  - uid: NMF.Expressions.CollectionChangedNotificationResult`1
    name: CollectionChangedNotificationResult
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.CollectionChangedNotificationResult`1
    name: CollectionChangedNotificationResult
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.TurnIntoReset*
  commentId: Overload:NMF.Expressions.CollectionChangedNotificationResult`1.TurnIntoReset
  name: TurnIntoReset
  nameWithType: CollectionChangedNotificationResult<T>.TurnIntoReset
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.TurnIntoReset
  nameWithType.vb: CollectionChangedNotificationResult(Of T).TurnIntoReset
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).TurnIntoReset
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.Transfer*
  commentId: Overload:NMF.Expressions.CollectionChangedNotificationResult`1.Transfer
  name: Transfer
  nameWithType: CollectionChangedNotificationResult<T>.Transfer
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.Transfer
  nameWithType.vb: CollectionChangedNotificationResult(Of T).Transfer
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).Transfer
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.UpdateOldStartIndex*
  commentId: Overload:NMF.Expressions.CollectionChangedNotificationResult`1.UpdateOldStartIndex
  name: UpdateOldStartIndex
  nameWithType: CollectionChangedNotificationResult<T>.UpdateOldStartIndex
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.UpdateOldStartIndex
  nameWithType.vb: CollectionChangedNotificationResult(Of T).UpdateOldStartIndex
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).UpdateOldStartIndex
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.UpdateNewStartIndex*
  commentId: Overload:NMF.Expressions.CollectionChangedNotificationResult`1.UpdateNewStartIndex
  name: UpdateNewStartIndex
  nameWithType: CollectionChangedNotificationResult<T>.UpdateNewStartIndex
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.UpdateNewStartIndex
  nameWithType.vb: CollectionChangedNotificationResult(Of T).UpdateNewStartIndex
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).UpdateNewStartIndex
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.IncreaseReferences*
  commentId: Overload:NMF.Expressions.CollectionChangedNotificationResult`1.IncreaseReferences
  name: IncreaseReferences
  nameWithType: CollectionChangedNotificationResult<T>.IncreaseReferences
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.IncreaseReferences
  nameWithType.vb: CollectionChangedNotificationResult(Of T).IncreaseReferences
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).IncreaseReferences
- uid: NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
  commentId: M:NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
  parent: NMF.Expressions.INotificationResult
  isExternal: true
  name: IncreaseReferences(int)
  nameWithType: INotificationResult.IncreaseReferences(int)
  fullName: NMF.Expressions.INotificationResult.IncreaseReferences(int)
  nameWithType.vb: INotificationResult.IncreaseReferences(Integer)
  fullName.vb: NMF.Expressions.INotificationResult.IncreaseReferences(Integer)
  name.vb: IncreaseReferences(Integer)
  spec.csharp:
  - uid: NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
    name: IncreaseReferences
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
    name: IncreaseReferences
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Expressions.CollectionChangedNotificationResult`1.FreeReference*
  commentId: Overload:NMF.Expressions.CollectionChangedNotificationResult`1.FreeReference
  name: FreeReference
  nameWithType: CollectionChangedNotificationResult<T>.FreeReference
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>.FreeReference
  nameWithType.vb: CollectionChangedNotificationResult(Of T).FreeReference
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T).FreeReference
- uid: NMF.Expressions.INotificationResult.FreeReference
  commentId: M:NMF.Expressions.INotificationResult.FreeReference
  parent: NMF.Expressions.INotificationResult
  name: FreeReference()
  nameWithType: INotificationResult.FreeReference()
  fullName: NMF.Expressions.INotificationResult.FreeReference()
  spec.csharp:
  - uid: NMF.Expressions.INotificationResult.FreeReference
    name: FreeReference
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Expressions.INotificationResult.FreeReference
    name: FreeReference
  - name: (
  - name: )
