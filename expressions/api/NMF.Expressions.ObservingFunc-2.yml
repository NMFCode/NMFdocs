### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.ObservingFunc`2
  commentId: T:NMF.Expressions.ObservingFunc`2
  id: ObservingFunc`2
  parent: NMF.Expressions
  children:
  - NMF.Expressions.ObservingFunc`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}})
  - NMF.Expressions.ObservingFunc`2.Evaluate(`0)
  - NMF.Expressions.ObservingFunc`2.Expression
  - NMF.Expressions.ObservingFunc`2.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1}})
  - NMF.Expressions.ObservingFunc`2.InvokeReversable(`0)
  - NMF.Expressions.ObservingFunc`2.InvokeReversable(NMF.Expressions.INotifyValue{`0})
  - NMF.Expressions.ObservingFunc`2.IsReversable
  - NMF.Expressions.ObservingFunc`2.Observe(`0)
  - NMF.Expressions.ObservingFunc`2.Observe(NMF.Expressions.INotifyValue{`0})
  - NMF.Expressions.ObservingFunc`2.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1}})~NMF.Expressions.ObservingFunc{`0,`1}
  - NMF.Expressions.ObservingFunc`2.ToString
  langs:
  - csharp
  - vb
  name: ObservingFunc<T1, TResult>
  nameWithType: ObservingFunc<T1, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>
  type: Class
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ObservingFunc
    path: src/Expressions/Expressions/Public/FunctionTypes.Manual.cs
    startLine: 6
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nRepresents an observable expression with 1 input parameters\n"
  example: []
  syntax:
    content: public class ObservingFunc<T1, TResult>
    typeParameters:
    - id: T1
      description: The type of the input parameter 1
    - id: TResult
      description: The result type of the observing func
    content.vb: Public Class ObservingFunc(Of T1, TResult)
  inheritance:
  - System.Object
  derivedClasses:
  - NMF.Expressions.ReversableObservingFunc`2
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType.vb: ObservingFunc(Of T1, TResult)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult)
  name.vb: ObservingFunc(Of T1, TResult)
- uid: NMF.Expressions.ObservingFunc`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}})
  commentId: M:NMF.Expressions.ObservingFunc`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}})
  id: '#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}})'
  parent: NMF.Expressions.ObservingFunc`2
  langs:
  - csharp
  - vb
  name: ObservingFunc(Expression<Func<T1, TResult>>)
  nameWithType: ObservingFunc<T1, TResult>.ObservingFunc(Expression<Func<T1, TResult>>)
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.ObservingFunc(System.Linq.Expressions.Expression<System.Func<T1, TResult>>)
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 22
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nCreates a new observable expression for the given expression\n"
  example: []
  syntax:
    content: public ObservingFunc(Expression<Func<T1, TResult>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{TResult}}}
      description: The expression that is to be observed
    content.vb: Public Sub New(expression As Expression(Of Func(Of T1, TResult)))
  overload: NMF.Expressions.ObservingFunc`2.#ctor*
  nameWithType.vb: ObservingFunc(Of T1, TResult).ObservingFunc(Expression(Of Func(Of T1, TResult)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).ObservingFunc(System.Linq.Expressions.Expression(Of System.Func(Of T1, TResult)))
  name.vb: ObservingFunc(Expression(Of Func(Of T1, TResult)))
- uid: NMF.Expressions.ObservingFunc`2.Evaluate(`0)
  commentId: M:NMF.Expressions.ObservingFunc`2.Evaluate(`0)
  id: Evaluate(`0)
  parent: NMF.Expressions.ObservingFunc`2
  langs:
  - csharp
  - vb
  name: Evaluate(T1)
  nameWithType: ObservingFunc<T1, TResult>.Evaluate(T1)
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.Evaluate(T1)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Evaluate
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 56
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<, >), "Observe", false)]

      public TResult Evaluate(T1 in1)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    return:
      type: '{TResult}'
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of , )), "Observe", False)>

      Public Function Evaluate(in1 As T1) As TResult
  overload: NMF.Expressions.ObservingFunc`2.Evaluate*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,TResult}
    - type: System.String
      value: Observe
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, TResult).Evaluate(T1)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).Evaluate(T1)
- uid: NMF.Expressions.ObservingFunc`2.Observe(`0)
  commentId: M:NMF.Expressions.ObservingFunc`2.Observe(`0)
  id: Observe(`0)
  parent: NMF.Expressions.ObservingFunc`2
  langs:
  - csharp
  - vb
  name: Observe(T1)
  nameWithType: ObservingFunc<T1, TResult>.Observe(T1)
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.Observe(T1)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Observe
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 67
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression\n"
  example: []
  syntax:
    content: public INotifyValue<TResult> Observe(T1 in1)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    return:
      type: NMF.Expressions.INotifyValue{{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function Observe(in1 As T1) As INotifyValue(Of TResult)
  overload: NMF.Expressions.ObservingFunc`2.Observe*
  nameWithType.vb: ObservingFunc(Of T1, TResult).Observe(T1)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).Observe(T1)
- uid: NMF.Expressions.ObservingFunc`2.Observe(NMF.Expressions.INotifyValue{`0})
  commentId: M:NMF.Expressions.ObservingFunc`2.Observe(NMF.Expressions.INotifyValue{`0})
  id: Observe(NMF.Expressions.INotifyValue{`0})
  parent: NMF.Expressions.ObservingFunc`2
  langs:
  - csharp
  - vb
  name: Observe(INotifyValue<T1>)
  nameWithType: ObservingFunc<T1, TResult>.Observe(INotifyValue<T1>)
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.Observe(NMF.Expressions.INotifyValue<T1>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Observe
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 82
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression\n"
  example: []
  syntax:
    content: public INotifyValue<TResult> Observe(INotifyValue<T1> in1)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    return:
      type: NMF.Expressions.INotifyValue{{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function Observe(in1 As INotifyValue(Of T1)) As INotifyValue(Of TResult)
  overload: NMF.Expressions.ObservingFunc`2.Observe*
  nameWithType.vb: ObservingFunc(Of T1, TResult).Observe(INotifyValue(Of T1))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).Observe(NMF.Expressions.INotifyValue(Of T1))
  name.vb: Observe(INotifyValue(Of T1))
- uid: NMF.Expressions.ObservingFunc`2.InvokeReversable(`0)
  commentId: M:NMF.Expressions.ObservingFunc`2.InvokeReversable(`0)
  id: InvokeReversable(`0)
  parent: NMF.Expressions.ObservingFunc`2
  langs:
  - csharp
  - vb
  name: InvokeReversable(T1)
  nameWithType: ObservingFunc<T1, TResult>.InvokeReversable(T1)
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.InvokeReversable(T1)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: InvokeReversable
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 98
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression\n"
  example: []
  syntax:
    content: public virtual INotifyReversableValue<TResult> InvokeReversable(T1 in1)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    return:
      type: NMF.Expressions.INotifyReversableValue{{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Overridable Function InvokeReversable(in1 As T1) As INotifyReversableValue(Of TResult)
  overload: NMF.Expressions.ObservingFunc`2.InvokeReversable*
  nameWithType.vb: ObservingFunc(Of T1, TResult).InvokeReversable(T1)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).InvokeReversable(T1)
- uid: NMF.Expressions.ObservingFunc`2.InvokeReversable(NMF.Expressions.INotifyValue{`0})
  commentId: M:NMF.Expressions.ObservingFunc`2.InvokeReversable(NMF.Expressions.INotifyValue{`0})
  id: InvokeReversable(NMF.Expressions.INotifyValue{`0})
  parent: NMF.Expressions.ObservingFunc`2
  langs:
  - csharp
  - vb
  name: InvokeReversable(INotifyValue<T1>)
  nameWithType: ObservingFunc<T1, TResult>.InvokeReversable(INotifyValue<T1>)
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.InvokeReversable(NMF.Expressions.INotifyValue<T1>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: InvokeReversable
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 114
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression\n"
  example: []
  syntax:
    content: public virtual INotifyReversableValue<TResult> InvokeReversable(INotifyValue<T1> in1)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    return:
      type: NMF.Expressions.INotifyReversableValue{{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Overridable Function InvokeReversable(in1 As INotifyValue(Of T1)) As INotifyReversableValue(Of TResult)
  overload: NMF.Expressions.ObservingFunc`2.InvokeReversable*
  nameWithType.vb: ObservingFunc(Of T1, TResult).InvokeReversable(INotifyValue(Of T1))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).InvokeReversable(NMF.Expressions.INotifyValue(Of T1))
  name.vb: InvokeReversable(INotifyValue(Of T1))
- uid: NMF.Expressions.ObservingFunc`2.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1}})~NMF.Expressions.ObservingFunc{`0,`1}
  commentId: M:NMF.Expressions.ObservingFunc`2.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1}})~NMF.Expressions.ObservingFunc{`0,`1}
  id: op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1}})~NMF.Expressions.ObservingFunc{`0,`1}
  parent: NMF.Expressions.ObservingFunc`2
  langs:
  - csharp
  - vb
  name: Implicit(Expression<Func<T1, TResult>> to ObservingFunc<T1, TResult>)
  nameWithType: ObservingFunc<T1, TResult>.Implicit(Expression<Func<T1, TResult>> to ObservingFunc<T1, TResult>)
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.Implicit(System.Linq.Expressions.Expression<System.Func<T1, TResult>> to NMF.Expressions.ObservingFunc<T1, TResult>)
  type: Operator
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: op_Implicit
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 131
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nCreates a new observable expression\n"
  example: []
  syntax:
    content: public static implicit operator ObservingFunc<T1, TResult>(Expression<Func<T1, TResult>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{TResult}}}
      description: The expression that is to be observed
    return:
      type: NMF.Expressions.ObservingFunc`2
      description: An observable function
    content.vb: Public Shared Widening Operator CType(expression As Expression(Of Func(Of T1, TResult))) As ObservingFunc(Of T1, TResult)
  overload: NMF.Expressions.ObservingFunc`2.op_Implicit*
  nameWithType.vb: ObservingFunc(Of T1, TResult).Widening(Expression(Of Func(Of T1, TResult)) to ObservingFunc(Of T1, TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).Widening(System.Linq.Expressions.Expression(Of System.Func(Of T1, TResult)) to NMF.Expressions.ObservingFunc(Of T1, TResult))
  name.vb: Widening(Expression(Of Func(Of T1, TResult)) to ObservingFunc(Of T1, TResult))
- uid: NMF.Expressions.ObservingFunc`2.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1}})
  commentId: M:NMF.Expressions.ObservingFunc`2.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1}})
  id: FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1}})
  parent: NMF.Expressions.ObservingFunc`2
  langs:
  - csharp
  - vb
  name: FromExpression(Expression<Func<T1, TResult>>)
  nameWithType: ObservingFunc<T1, TResult>.FromExpression(Expression<Func<T1, TResult>>)
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.FromExpression(System.Linq.Expressions.Expression<System.Func<T1, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: FromExpression
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 142
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nCreates a new observable expression from the given expression\n"
  example: []
  syntax:
    content: public static ObservingFunc<T1, TResult> FromExpression(Expression<Func<T1, TResult>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{TResult}}}
      description: The expression that is to be observed
    return:
      type: NMF.Expressions.ObservingFunc`2
      description: An observable function
    content.vb: Public Shared Function FromExpression(expression As Expression(Of Func(Of T1, TResult))) As ObservingFunc(Of T1, TResult)
  overload: NMF.Expressions.ObservingFunc`2.FromExpression*
  nameWithType.vb: ObservingFunc(Of T1, TResult).FromExpression(Expression(Of Func(Of T1, TResult)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).FromExpression(System.Linq.Expressions.Expression(Of System.Func(Of T1, TResult)))
  name.vb: FromExpression(Expression(Of Func(Of T1, TResult)))
- uid: NMF.Expressions.ObservingFunc`2.IsReversable
  commentId: P:NMF.Expressions.ObservingFunc`2.IsReversable
  id: IsReversable
  parent: NMF.Expressions.ObservingFunc`2
  langs:
  - csharp
  - vb
  name: IsReversable
  nameWithType: ObservingFunc<T1, TResult>.IsReversable
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.IsReversable
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsReversable
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 151
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nGets a value indicating whether this function can be reversed\n"
  example: []
  syntax:
    content: public virtual bool IsReversable { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property IsReversable As Boolean
  overload: NMF.Expressions.ObservingFunc`2.IsReversable*
  nameWithType.vb: ObservingFunc(Of T1, TResult).IsReversable
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).IsReversable
- uid: NMF.Expressions.ObservingFunc`2.ToString
  commentId: M:NMF.Expressions.ObservingFunc`2.ToString
  id: ToString
  parent: NMF.Expressions.ObservingFunc`2
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: ObservingFunc<T1, TResult>.ToString()
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.ToString()
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ToString
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 160
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: NMF.Expressions.ObservingFunc`2.ToString*
  nameWithType.vb: ObservingFunc(Of T1, TResult).ToString()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).ToString()
- uid: NMF.Expressions.ObservingFunc`2.Expression
  commentId: P:NMF.Expressions.ObservingFunc`2.Expression
  id: Expression
  parent: NMF.Expressions.ObservingFunc`2
  langs:
  - csharp
  - vb
  name: Expression
  nameWithType: ObservingFunc<T1, TResult>.Expression
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.Expression
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Expression
    path: src/Expressions/Expressions/Public/FunctionTypes.Manual.cs
    startLine: 27
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nRepresents the DDG template of this function\n"
  example: []
  syntax:
    content: public INotifiable Expression { get; }
    parameters: []
    return:
      type: NMF.Expressions.INotifiable
    content.vb: Public ReadOnly Property Expression As INotifiable
  overload: NMF.Expressions.ObservingFunc`2.Expression*
  nameWithType.vb: ObservingFunc(Of T1, TResult).Expression
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).Expression
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.ObservingFunc`2.#ctor*
  commentId: Overload:NMF.Expressions.ObservingFunc`2.#ctor
  name: ObservingFunc
  nameWithType: ObservingFunc<T1, TResult>.ObservingFunc
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.ObservingFunc
  nameWithType.vb: ObservingFunc(Of T1, TResult).ObservingFunc
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).ObservingFunc
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T1, TResult>>
  nameWithType: Expression<Func<T1, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, TResult>>
  nameWithType.vb: Expression(Of Func(Of T1, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, TResult))
  name.vb: Expression(Of Func(Of T1, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: NMF.Expressions.ObservingFunc`2.Evaluate*
  commentId: Overload:NMF.Expressions.ObservingFunc`2.Evaluate
  name: Evaluate
  nameWithType: ObservingFunc<T1, TResult>.Evaluate
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.Evaluate
  nameWithType.vb: ObservingFunc(Of T1, TResult).Evaluate
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).Evaluate
- uid: '{T1}'
  commentId: '!:T1'
  definition: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: NMF.Expressions.ObservingFunc`2.Observe*
  commentId: Overload:NMF.Expressions.ObservingFunc`2.Observe
  name: Observe
  nameWithType: ObservingFunc<T1, TResult>.Observe
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.Observe
  nameWithType.vb: ObservingFunc(Of T1, TResult).Observe
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).Observe
- uid: NMF.Expressions.INotifyValue{{TResult}}
  commentId: T:NMF.Expressions.INotifyValue{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<TResult>
  nameWithType: INotifyValue<TResult>
  fullName: NMF.Expressions.INotifyValue<TResult>
  nameWithType.vb: INotifyValue(Of TResult)
  fullName.vb: NMF.Expressions.INotifyValue(Of TResult)
  name.vb: INotifyValue(Of TResult)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue`1
  commentId: T:NMF.Expressions.INotifyValue`1
  name: INotifyValue<T>
  nameWithType: INotifyValue<T>
  fullName: NMF.Expressions.INotifyValue<T>
  nameWithType.vb: INotifyValue(Of T)
  fullName.vb: NMF.Expressions.INotifyValue(Of T)
  name.vb: INotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue{{T1}}
  commentId: T:NMF.Expressions.INotifyValue{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<T1>
  nameWithType: INotifyValue<T1>
  fullName: NMF.Expressions.INotifyValue<T1>
  nameWithType.vb: INotifyValue(Of T1)
  fullName.vb: NMF.Expressions.INotifyValue(Of T1)
  name.vb: INotifyValue(Of T1)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`2.InvokeReversable*
  commentId: Overload:NMF.Expressions.ObservingFunc`2.InvokeReversable
  name: InvokeReversable
  nameWithType: ObservingFunc<T1, TResult>.InvokeReversable
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.InvokeReversable
  nameWithType.vb: ObservingFunc(Of T1, TResult).InvokeReversable
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).InvokeReversable
- uid: NMF.Expressions.INotifyReversableValue{{TResult}}
  commentId: T:NMF.Expressions.INotifyReversableValue{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyReversableValue`1
  name: INotifyReversableValue<TResult>
  nameWithType: INotifyReversableValue<TResult>
  fullName: NMF.Expressions.INotifyReversableValue<TResult>
  nameWithType.vb: INotifyReversableValue(Of TResult)
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of TResult)
  name.vb: INotifyReversableValue(Of TResult)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    nameWithType: INotifyReversableValue
    fullName: NMF.Expressions.INotifyReversableValue
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    nameWithType: INotifyReversableValue
    fullName: NMF.Expressions.INotifyReversableValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyReversableValue`1
  commentId: T:NMF.Expressions.INotifyReversableValue`1
  name: INotifyReversableValue<T>
  nameWithType: INotifyReversableValue<T>
  fullName: NMF.Expressions.INotifyReversableValue<T>
  nameWithType.vb: INotifyReversableValue(Of T)
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of T)
  name.vb: INotifyReversableValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    nameWithType: INotifyReversableValue
    fullName: NMF.Expressions.INotifyReversableValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    nameWithType: INotifyReversableValue
    fullName: NMF.Expressions.INotifyReversableValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`2.op_Implicit*
  commentId: Overload:NMF.Expressions.ObservingFunc`2.op_Implicit
  name: Implicit
  nameWithType: ObservingFunc<T1, TResult>.Implicit
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.Implicit
  nameWithType.vb: ObservingFunc(Of T1, TResult).Widening
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).Widening
  name.vb: Widening
- uid: NMF.Expressions.ObservingFunc`2
  commentId: T:NMF.Expressions.ObservingFunc`2
  parent: NMF.Expressions
  name: ObservingFunc<T1, TResult>
  nameWithType: ObservingFunc<T1, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>
  nameWithType.vb: ObservingFunc(Of T1, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult)
  name.vb: ObservingFunc(Of T1, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`2.FromExpression*
  commentId: Overload:NMF.Expressions.ObservingFunc`2.FromExpression
  name: FromExpression
  nameWithType: ObservingFunc<T1, TResult>.FromExpression
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.FromExpression
  nameWithType.vb: ObservingFunc(Of T1, TResult).FromExpression
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).FromExpression
- uid: NMF.Expressions.ObservingFunc`2.IsReversable*
  commentId: Overload:NMF.Expressions.ObservingFunc`2.IsReversable
  name: IsReversable
  nameWithType: ObservingFunc<T1, TResult>.IsReversable
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.IsReversable
  nameWithType.vb: ObservingFunc(Of T1, TResult).IsReversable
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).IsReversable
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`2.ToString*
  commentId: Overload:NMF.Expressions.ObservingFunc`2.ToString
  name: ToString
  nameWithType: ObservingFunc<T1, TResult>.ToString
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.ToString
  nameWithType.vb: ObservingFunc(Of T1, TResult).ToString
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NMF.Expressions.ObservingFunc`2.Expression*
  commentId: Overload:NMF.Expressions.ObservingFunc`2.Expression
  name: Expression
  nameWithType: ObservingFunc<T1, TResult>.Expression
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.Expression
  nameWithType.vb: ObservingFunc(Of T1, TResult).Expression
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).Expression
- uid: NMF.Expressions.INotifiable
  commentId: T:NMF.Expressions.INotifiable
  parent: NMF.Expressions
  name: INotifiable
  nameWithType: INotifiable
  fullName: NMF.Expressions.INotifiable
