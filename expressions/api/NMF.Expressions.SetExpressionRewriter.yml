### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.SetExpressionRewriter
  commentId: T:NMF.Expressions.SetExpressionRewriter
  id: SetExpressionRewriter
  parent: NMF.Expressions
  children:
  - NMF.Expressions.SetExpressionRewriter.#ctor(System.Linq.Expressions.Expression)
  - NMF.Expressions.SetExpressionRewriter.CreateSetter(System.Linq.Expressions.LambdaExpression)
  - NMF.Expressions.SetExpressionRewriter.CreateSetter``1(System.Linq.Expressions.Expression{System.Func{``0}})
  - NMF.Expressions.SetExpressionRewriter.CreateSetter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - NMF.Expressions.SetExpressionRewriter.CreateSetter``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  - NMF.Expressions.SetExpressionRewriter.Value
  - NMF.Expressions.SetExpressionRewriter.Visit(System.Linq.Expressions.Expression)
  - NMF.Expressions.SetExpressionRewriter.VisitBinary(System.Linq.Expressions.BinaryExpression)
  - NMF.Expressions.SetExpressionRewriter.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  - NMF.Expressions.SetExpressionRewriter.VisitDefault(System.Linq.Expressions.DefaultExpression)
  - NMF.Expressions.SetExpressionRewriter.VisitElementInit(System.Linq.Expressions.ElementInit)
  - NMF.Expressions.SetExpressionRewriter.VisitIndex(System.Linq.Expressions.IndexExpression)
  - NMF.Expressions.SetExpressionRewriter.VisitListInit(System.Linq.Expressions.ListInitExpression)
  - NMF.Expressions.SetExpressionRewriter.VisitMember(System.Linq.Expressions.MemberExpression)
  - NMF.Expressions.SetExpressionRewriter.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  - NMF.Expressions.SetExpressionRewriter.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  - NMF.Expressions.SetExpressionRewriter.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  - NMF.Expressions.SetExpressionRewriter.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  - NMF.Expressions.SetExpressionRewriter.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  - NMF.Expressions.SetExpressionRewriter.VisitNew(System.Linq.Expressions.NewExpression)
  - NMF.Expressions.SetExpressionRewriter.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
  - NMF.Expressions.SetExpressionRewriter.VisitParameter(System.Linq.Expressions.ParameterExpression)
  - NMF.Expressions.SetExpressionRewriter.VisitUnary(System.Linq.Expressions.UnaryExpression)
  langs:
  - csharp
  - vb
  name: SetExpressionRewriter
  nameWithType: SetExpressionRewriter
  fullName: NMF.Expressions.SetExpressionRewriter
  type: Class
  source:
    remote:
      path: Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SetExpressionRewriter
    path: src/Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
    startLine: 12
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nAn expression visitor that turns getter functions into setters\n"
  example: []
  syntax:
    content: 'public class SetExpressionRewriter : ExpressionVisitor'
    content.vb: Public Class SetExpressionRewriter Inherits ExpressionVisitor
  inheritance:
  - System.Object
  - System.Linq.Expressions.ExpressionVisitor
  inheritedMembers:
  - System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{{T}},System.Func{{T},{T}})
  - System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1({T},System.String)
  - System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{{T}},System.String)
  - System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)
  - System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)
  - System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
  - System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  - System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)
  - System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)
  - System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)
  - System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)
  - System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{{T}})
  - System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)
  - System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)
  - System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  - System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)
  - System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)
  - System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)
  - System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - NMF.Expressions.SetExpressionRewriter.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
- uid: NMF.Expressions.SetExpressionRewriter.CreateSetter``1(System.Linq.Expressions.Expression{System.Func{``0}})
  commentId: M:NMF.Expressions.SetExpressionRewriter.CreateSetter``1(System.Linq.Expressions.Expression{System.Func{``0}})
  id: CreateSetter``1(System.Linq.Expressions.Expression{System.Func{``0}})
  parent: NMF.Expressions.SetExpressionRewriter
  langs:
  - csharp
  - vb
  name: CreateSetter<TValue>(Expression<Func<TValue>>)
  nameWithType: SetExpressionRewriter.CreateSetter<TValue>(Expression<Func<TValue>>)
  fullName: NMF.Expressions.SetExpressionRewriter.CreateSetter<TValue>(System.Linq.Expressions.Expression<System.Func<TValue>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateSetter
    path: src/Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
    startLine: 30
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nCreate a setter for the given getter expression\n"
  example: []
  syntax:
    content: public static Expression<Action<TValue>> CreateSetter<TValue>(Expression<Func<TValue>> getter)
    parameters:
    - id: getter
      type: System.Linq.Expressions.Expression{System.Func{{TValue}}}
      description: The getter expression
    typeParameters:
    - id: TValue
      description: The return type of the getter expression
    return:
      type: System.Linq.Expressions.Expression{System.Action{{TValue}}}
      description: An expression that corresponds to the setter of the given getter
    content.vb: Public Shared Function CreateSetter(Of TValue)(getter As Expression(Of Func(Of TValue))) As Expression(Of Action(Of TValue))
  overload: NMF.Expressions.SetExpressionRewriter.CreateSetter*
  nameWithType.vb: SetExpressionRewriter.CreateSetter(Of TValue)(Expression(Of Func(Of TValue)))
  fullName.vb: NMF.Expressions.SetExpressionRewriter.CreateSetter(Of TValue)(System.Linq.Expressions.Expression(Of System.Func(Of TValue)))
  name.vb: CreateSetter(Of TValue)(Expression(Of Func(Of TValue)))
- uid: NMF.Expressions.SetExpressionRewriter.CreateSetter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.SetExpressionRewriter.CreateSetter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: CreateSetter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.SetExpressionRewriter
  langs:
  - csharp
  - vb
  name: CreateSetter<T, TValue>(Expression<Func<T, TValue>>)
  nameWithType: SetExpressionRewriter.CreateSetter<T, TValue>(Expression<Func<T, TValue>>)
  fullName: NMF.Expressions.SetExpressionRewriter.CreateSetter<T, TValue>(System.Linq.Expressions.Expression<System.Func<T, TValue>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateSetter
    path: src/Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
    startLine: 47
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nCreate a setter for the given getter expression\n"
  example: []
  syntax:
    content: public static Expression<Action<T, TValue>> CreateSetter<T, TValue>(Expression<Func<T, TValue>> getter)
    parameters:
    - id: getter
      type: System.Linq.Expressions.Expression{System.Func{{T},{TValue}}}
      description: The getter expression
    typeParameters:
    - id: T
      description: The type of the first parameter
    - id: TValue
      description: The return type of the getter expression
    return:
      type: System.Linq.Expressions.Expression{System.Action{{T},{TValue}}}
      description: An expression that corresponds to the setter of the given getter
    content.vb: Public Shared Function CreateSetter(Of T, TValue)(getter As Expression(Of Func(Of T, TValue))) As Expression(Of Action(Of T, TValue))
  overload: NMF.Expressions.SetExpressionRewriter.CreateSetter*
  nameWithType.vb: SetExpressionRewriter.CreateSetter(Of T, TValue)(Expression(Of Func(Of T, TValue)))
  fullName.vb: NMF.Expressions.SetExpressionRewriter.CreateSetter(Of T, TValue)(System.Linq.Expressions.Expression(Of System.Func(Of T, TValue)))
  name.vb: CreateSetter(Of T, TValue)(Expression(Of Func(Of T, TValue)))
- uid: NMF.Expressions.SetExpressionRewriter.CreateSetter``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  commentId: M:NMF.Expressions.SetExpressionRewriter.CreateSetter``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  id: CreateSetter``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  parent: NMF.Expressions.SetExpressionRewriter
  langs:
  - csharp
  - vb
  name: CreateSetter<T1, T2, TValue>(Expression<Func<T1, T2, TValue>>)
  nameWithType: SetExpressionRewriter.CreateSetter<T1, T2, TValue>(Expression<Func<T1, T2, TValue>>)
  fullName: NMF.Expressions.SetExpressionRewriter.CreateSetter<T1, T2, TValue>(System.Linq.Expressions.Expression<System.Func<T1, T2, TValue>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateSetter
    path: src/Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
    startLine: 65
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nCreate a setter for the given getter expression\n"
  example: []
  syntax:
    content: public static Expression<Action<T1, T2, TValue>> CreateSetter<T1, T2, TValue>(Expression<Func<T1, T2, TValue>> getter)
    parameters:
    - id: getter
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{TValue}}}
      description: The getter expression
    typeParameters:
    - id: T1
      description: The type of the first parameter
    - id: T2
      description: The type of the second parameter
    - id: TValue
      description: The return type of the getter expression
    return:
      type: System.Linq.Expressions.Expression{System.Action{{T1},{T2},{TValue}}}
      description: An expression that corresponds to the setter of the given getter
    content.vb: Public Shared Function CreateSetter(Of T1, T2, TValue)(getter As Expression(Of Func(Of T1, T2, TValue))) As Expression(Of Action(Of T1, T2, TValue))
  overload: NMF.Expressions.SetExpressionRewriter.CreateSetter*
  nameWithType.vb: SetExpressionRewriter.CreateSetter(Of T1, T2, TValue)(Expression(Of Func(Of T1, T2, TValue)))
  fullName.vb: NMF.Expressions.SetExpressionRewriter.CreateSetter(Of T1, T2, TValue)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, TValue)))
  name.vb: CreateSetter(Of T1, T2, TValue)(Expression(Of Func(Of T1, T2, TValue)))
- uid: NMF.Expressions.SetExpressionRewriter.CreateSetter(System.Linq.Expressions.LambdaExpression)
  commentId: M:NMF.Expressions.SetExpressionRewriter.CreateSetter(System.Linq.Expressions.LambdaExpression)
  id: CreateSetter(System.Linq.Expressions.LambdaExpression)
  parent: NMF.Expressions.SetExpressionRewriter
  langs:
  - csharp
  - vb
  name: CreateSetter(LambdaExpression)
  nameWithType: SetExpressionRewriter.CreateSetter(LambdaExpression)
  fullName: NMF.Expressions.SetExpressionRewriter.CreateSetter(System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateSetter
    path: src/Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
    startLine: 80
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nCreate a setter for the given getter expression\n"
  example: []
  syntax:
    content: public static LambdaExpression CreateSetter(LambdaExpression getter)
    parameters:
    - id: getter
      type: System.Linq.Expressions.LambdaExpression
      description: The getter expression
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: An expression that corresponds to the setter of the given getter
    content.vb: Public Shared Function CreateSetter(getter As LambdaExpression) As LambdaExpression
  overload: NMF.Expressions.SetExpressionRewriter.CreateSetter*
- uid: NMF.Expressions.SetExpressionRewriter.Value
  commentId: P:NMF.Expressions.SetExpressionRewriter.Value
  id: Value
  parent: NMF.Expressions.SetExpressionRewriter
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: SetExpressionRewriter.Value
  fullName: NMF.Expressions.SetExpressionRewriter.Value
  type: Property
  source:
    remote:
      path: Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Value
    path: src/Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
    startLine: 103
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nGets the value of the rewrite\n"
  example: []
  syntax:
    content: public Expression Value { get; set; }
    parameters: []
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Public Property Value As Expression
  overload: NMF.Expressions.SetExpressionRewriter.Value*
- uid: NMF.Expressions.SetExpressionRewriter.#ctor(System.Linq.Expressions.Expression)
  commentId: M:NMF.Expressions.SetExpressionRewriter.#ctor(System.Linq.Expressions.Expression)
  id: '#ctor(System.Linq.Expressions.Expression)'
  parent: NMF.Expressions.SetExpressionRewriter
  langs:
  - csharp
  - vb
  name: SetExpressionRewriter(Expression)
  nameWithType: SetExpressionRewriter.SetExpressionRewriter(Expression)
  fullName: NMF.Expressions.SetExpressionRewriter.SetExpressionRewriter(System.Linq.Expressions.Expression)
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
    startLine: 109
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nCreate a new instance\n"
  example: []
  syntax:
    content: public SetExpressionRewriter(Expression value)
    parameters:
    - id: value
      type: System.Linq.Expressions.Expression
      description: The expression that is going to be inverted
    content.vb: Public Sub New(value As Expression)
  overload: NMF.Expressions.SetExpressionRewriter.#ctor*
  nameWithType.vb: SetExpressionRewriter.New(Expression)
  fullName.vb: NMF.Expressions.SetExpressionRewriter.New(System.Linq.Expressions.Expression)
  name.vb: New(Expression)
- uid: NMF.Expressions.SetExpressionRewriter.Visit(System.Linq.Expressions.Expression)
  commentId: M:NMF.Expressions.SetExpressionRewriter.Visit(System.Linq.Expressions.Expression)
  id: Visit(System.Linq.Expressions.Expression)
  parent: NMF.Expressions.SetExpressionRewriter
  langs:
  - csharp
  - vb
  name: Visit(Expression)
  nameWithType: SetExpressionRewriter.Visit(Expression)
  fullName: NMF.Expressions.SetExpressionRewriter.Visit(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Visit
    path: src/Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
    startLine: 117
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: public override Expression Visit(Expression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Public Overrides Function Visit(node As Expression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)
  overload: NMF.Expressions.SetExpressionRewriter.Visit*
- uid: NMF.Expressions.SetExpressionRewriter.VisitBinary(System.Linq.Expressions.BinaryExpression)
  commentId: M:NMF.Expressions.SetExpressionRewriter.VisitBinary(System.Linq.Expressions.BinaryExpression)
  id: VisitBinary(System.Linq.Expressions.BinaryExpression)
  parent: NMF.Expressions.SetExpressionRewriter
  langs:
  - csharp
  - vb
  name: VisitBinary(BinaryExpression)
  nameWithType: SetExpressionRewriter.VisitBinary(BinaryExpression)
  fullName: NMF.Expressions.SetExpressionRewriter.VisitBinary(System.Linq.Expressions.BinaryExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitBinary
    path: src/Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
    startLine: 124
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: protected override Expression VisitBinary(BinaryExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.BinaryExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitBinary(node As BinaryExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
  overload: NMF.Expressions.SetExpressionRewriter.VisitBinary*
- uid: NMF.Expressions.SetExpressionRewriter.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  commentId: M:NMF.Expressions.SetExpressionRewriter.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  id: VisitConditional(System.Linq.Expressions.ConditionalExpression)
  parent: NMF.Expressions.SetExpressionRewriter
  langs:
  - csharp
  - vb
  name: VisitConditional(ConditionalExpression)
  nameWithType: SetExpressionRewriter.VisitConditional(ConditionalExpression)
  fullName: NMF.Expressions.SetExpressionRewriter.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitConditional
    path: src/Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
    startLine: 283
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: protected override Expression VisitConditional(ConditionalExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.ConditionalExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitConditional(node As ConditionalExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  overload: NMF.Expressions.SetExpressionRewriter.VisitConditional*
- uid: NMF.Expressions.SetExpressionRewriter.VisitDefault(System.Linq.Expressions.DefaultExpression)
  commentId: M:NMF.Expressions.SetExpressionRewriter.VisitDefault(System.Linq.Expressions.DefaultExpression)
  id: VisitDefault(System.Linq.Expressions.DefaultExpression)
  parent: NMF.Expressions.SetExpressionRewriter
  langs:
  - csharp
  - vb
  name: VisitDefault(DefaultExpression)
  nameWithType: SetExpressionRewriter.VisitDefault(DefaultExpression)
  fullName: NMF.Expressions.SetExpressionRewriter.VisitDefault(System.Linq.Expressions.DefaultExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitDefault
    path: src/Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
    startLine: 314
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: protected override Expression VisitDefault(DefaultExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.DefaultExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitDefault(node As DefaultExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)
  overload: NMF.Expressions.SetExpressionRewriter.VisitDefault*
- uid: NMF.Expressions.SetExpressionRewriter.VisitElementInit(System.Linq.Expressions.ElementInit)
  commentId: M:NMF.Expressions.SetExpressionRewriter.VisitElementInit(System.Linq.Expressions.ElementInit)
  id: VisitElementInit(System.Linq.Expressions.ElementInit)
  parent: NMF.Expressions.SetExpressionRewriter
  langs:
  - csharp
  - vb
  name: VisitElementInit(ElementInit)
  nameWithType: SetExpressionRewriter.VisitElementInit(ElementInit)
  fullName: NMF.Expressions.SetExpressionRewriter.VisitElementInit(System.Linq.Expressions.ElementInit)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitElementInit
    path: src/Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
    startLine: 320
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: protected override ElementInit VisitElementInit(ElementInit node)
    parameters:
    - id: node
      type: System.Linq.Expressions.ElementInit
    return:
      type: System.Linq.Expressions.ElementInit
    content.vb: Protected Overrides Function VisitElementInit(node As ElementInit) As ElementInit
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)
  overload: NMF.Expressions.SetExpressionRewriter.VisitElementInit*
- uid: NMF.Expressions.SetExpressionRewriter.VisitIndex(System.Linq.Expressions.IndexExpression)
  commentId: M:NMF.Expressions.SetExpressionRewriter.VisitIndex(System.Linq.Expressions.IndexExpression)
  id: VisitIndex(System.Linq.Expressions.IndexExpression)
  parent: NMF.Expressions.SetExpressionRewriter
  langs:
  - csharp
  - vb
  name: VisitIndex(IndexExpression)
  nameWithType: SetExpressionRewriter.VisitIndex(IndexExpression)
  fullName: NMF.Expressions.SetExpressionRewriter.VisitIndex(System.Linq.Expressions.IndexExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitIndex
    path: src/Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
    startLine: 326
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: protected override Expression VisitIndex(IndexExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.IndexExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitIndex(node As IndexExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)
  overload: NMF.Expressions.SetExpressionRewriter.VisitIndex*
- uid: NMF.Expressions.SetExpressionRewriter.VisitListInit(System.Linq.Expressions.ListInitExpression)
  commentId: M:NMF.Expressions.SetExpressionRewriter.VisitListInit(System.Linq.Expressions.ListInitExpression)
  id: VisitListInit(System.Linq.Expressions.ListInitExpression)
  parent: NMF.Expressions.SetExpressionRewriter
  langs:
  - csharp
  - vb
  name: VisitListInit(ListInitExpression)
  nameWithType: SetExpressionRewriter.VisitListInit(ListInitExpression)
  fullName: NMF.Expressions.SetExpressionRewriter.VisitListInit(System.Linq.Expressions.ListInitExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitListInit
    path: src/Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
    startLine: 332
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: protected override Expression VisitListInit(ListInitExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.ListInitExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitListInit(node As ListInitExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)
  overload: NMF.Expressions.SetExpressionRewriter.VisitListInit*
- uid: NMF.Expressions.SetExpressionRewriter.VisitMember(System.Linq.Expressions.MemberExpression)
  commentId: M:NMF.Expressions.SetExpressionRewriter.VisitMember(System.Linq.Expressions.MemberExpression)
  id: VisitMember(System.Linq.Expressions.MemberExpression)
  parent: NMF.Expressions.SetExpressionRewriter
  langs:
  - csharp
  - vb
  name: VisitMember(MemberExpression)
  nameWithType: SetExpressionRewriter.VisitMember(MemberExpression)
  fullName: NMF.Expressions.SetExpressionRewriter.VisitMember(System.Linq.Expressions.MemberExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitMember
    path: src/Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
    startLine: 338
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: protected override Expression VisitMember(MemberExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.MemberExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitMember(node As MemberExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
  overload: NMF.Expressions.SetExpressionRewriter.VisitMember*
- uid: NMF.Expressions.SetExpressionRewriter.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  commentId: M:NMF.Expressions.SetExpressionRewriter.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  id: VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  parent: NMF.Expressions.SetExpressionRewriter
  langs:
  - csharp
  - vb
  name: VisitMemberAssignment(MemberAssignment)
  nameWithType: SetExpressionRewriter.VisitMemberAssignment(MemberAssignment)
  fullName: NMF.Expressions.SetExpressionRewriter.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitMemberAssignment
    path: src/Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
    startLine: 358
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: protected override MemberAssignment VisitMemberAssignment(MemberAssignment node)
    parameters:
    - id: node
      type: System.Linq.Expressions.MemberAssignment
    return:
      type: System.Linq.Expressions.MemberAssignment
    content.vb: Protected Overrides Function VisitMemberAssignment(node As MemberAssignment) As MemberAssignment
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  overload: NMF.Expressions.SetExpressionRewriter.VisitMemberAssignment*
- uid: NMF.Expressions.SetExpressionRewriter.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  commentId: M:NMF.Expressions.SetExpressionRewriter.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  id: VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  parent: NMF.Expressions.SetExpressionRewriter
  langs:
  - csharp
  - vb
  name: VisitMemberInit(MemberInitExpression)
  nameWithType: SetExpressionRewriter.VisitMemberInit(MemberInitExpression)
  fullName: NMF.Expressions.SetExpressionRewriter.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitMemberInit
    path: src/Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
    startLine: 364
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: protected override Expression VisitMemberInit(MemberInitExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.MemberInitExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitMemberInit(node As MemberInitExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  overload: NMF.Expressions.SetExpressionRewriter.VisitMemberInit*
- uid: NMF.Expressions.SetExpressionRewriter.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  commentId: M:NMF.Expressions.SetExpressionRewriter.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  id: VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  parent: NMF.Expressions.SetExpressionRewriter
  langs:
  - csharp
  - vb
  name: VisitMemberListBinding(MemberListBinding)
  nameWithType: SetExpressionRewriter.VisitMemberListBinding(MemberListBinding)
  fullName: NMF.Expressions.SetExpressionRewriter.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitMemberListBinding
    path: src/Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
    startLine: 370
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: protected override MemberListBinding VisitMemberListBinding(MemberListBinding node)
    parameters:
    - id: node
      type: System.Linq.Expressions.MemberListBinding
    return:
      type: System.Linq.Expressions.MemberListBinding
    content.vb: Protected Overrides Function VisitMemberListBinding(node As MemberListBinding) As MemberListBinding
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  overload: NMF.Expressions.SetExpressionRewriter.VisitMemberListBinding*
- uid: NMF.Expressions.SetExpressionRewriter.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  commentId: M:NMF.Expressions.SetExpressionRewriter.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  id: VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  parent: NMF.Expressions.SetExpressionRewriter
  langs:
  - csharp
  - vb
  name: VisitMemberMemberBinding(MemberMemberBinding)
  nameWithType: SetExpressionRewriter.VisitMemberMemberBinding(MemberMemberBinding)
  fullName: NMF.Expressions.SetExpressionRewriter.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitMemberMemberBinding
    path: src/Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
    startLine: 376
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: protected override MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding node)
    parameters:
    - id: node
      type: System.Linq.Expressions.MemberMemberBinding
    return:
      type: System.Linq.Expressions.MemberMemberBinding
    content.vb: Protected Overrides Function VisitMemberMemberBinding(node As MemberMemberBinding) As MemberMemberBinding
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  overload: NMF.Expressions.SetExpressionRewriter.VisitMemberMemberBinding*
- uid: NMF.Expressions.SetExpressionRewriter.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  commentId: M:NMF.Expressions.SetExpressionRewriter.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  id: VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  parent: NMF.Expressions.SetExpressionRewriter
  langs:
  - csharp
  - vb
  name: VisitMethodCall(MethodCallExpression)
  nameWithType: SetExpressionRewriter.VisitMethodCall(MethodCallExpression)
  fullName: NMF.Expressions.SetExpressionRewriter.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitMethodCall
    path: src/Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
    startLine: 382
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: protected override Expression VisitMethodCall(MethodCallExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.MethodCallExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitMethodCall(node As MethodCallExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  overload: NMF.Expressions.SetExpressionRewriter.VisitMethodCall*
- uid: NMF.Expressions.SetExpressionRewriter.VisitNew(System.Linq.Expressions.NewExpression)
  commentId: M:NMF.Expressions.SetExpressionRewriter.VisitNew(System.Linq.Expressions.NewExpression)
  id: VisitNew(System.Linq.Expressions.NewExpression)
  parent: NMF.Expressions.SetExpressionRewriter
  langs:
  - csharp
  - vb
  name: VisitNew(NewExpression)
  nameWithType: SetExpressionRewriter.VisitNew(NewExpression)
  fullName: NMF.Expressions.SetExpressionRewriter.VisitNew(System.Linq.Expressions.NewExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitNew
    path: src/Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
    startLine: 468
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: protected override Expression VisitNew(NewExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.NewExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitNew(node As NewExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)
  overload: NMF.Expressions.SetExpressionRewriter.VisitNew*
- uid: NMF.Expressions.SetExpressionRewriter.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
  commentId: M:NMF.Expressions.SetExpressionRewriter.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
  id: VisitNewArray(System.Linq.Expressions.NewArrayExpression)
  parent: NMF.Expressions.SetExpressionRewriter
  langs:
  - csharp
  - vb
  name: VisitNewArray(NewArrayExpression)
  nameWithType: SetExpressionRewriter.VisitNewArray(NewArrayExpression)
  fullName: NMF.Expressions.SetExpressionRewriter.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitNewArray
    path: src/Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
    startLine: 474
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: protected override Expression VisitNewArray(NewArrayExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.NewArrayExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitNewArray(node As NewArrayExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
  overload: NMF.Expressions.SetExpressionRewriter.VisitNewArray*
- uid: NMF.Expressions.SetExpressionRewriter.VisitParameter(System.Linq.Expressions.ParameterExpression)
  commentId: M:NMF.Expressions.SetExpressionRewriter.VisitParameter(System.Linq.Expressions.ParameterExpression)
  id: VisitParameter(System.Linq.Expressions.ParameterExpression)
  parent: NMF.Expressions.SetExpressionRewriter
  langs:
  - csharp
  - vb
  name: VisitParameter(ParameterExpression)
  nameWithType: SetExpressionRewriter.VisitParameter(ParameterExpression)
  fullName: NMF.Expressions.SetExpressionRewriter.VisitParameter(System.Linq.Expressions.ParameterExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitParameter
    path: src/Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
    startLine: 480
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: protected override Expression VisitParameter(ParameterExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.ParameterExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitParameter(node As ParameterExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)
  overload: NMF.Expressions.SetExpressionRewriter.VisitParameter*
- uid: NMF.Expressions.SetExpressionRewriter.VisitUnary(System.Linq.Expressions.UnaryExpression)
  commentId: M:NMF.Expressions.SetExpressionRewriter.VisitUnary(System.Linq.Expressions.UnaryExpression)
  id: VisitUnary(System.Linq.Expressions.UnaryExpression)
  parent: NMF.Expressions.SetExpressionRewriter
  langs:
  - csharp
  - vb
  name: VisitUnary(UnaryExpression)
  nameWithType: SetExpressionRewriter.VisitUnary(UnaryExpression)
  fullName: NMF.Expressions.SetExpressionRewriter.VisitUnary(System.Linq.Expressions.UnaryExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitUnary
    path: src/Expressions/Expressions/ExpressionRewriter/SetExpressionRewriter.cs
    startLine: 486
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: protected override Expression VisitUnary(UnaryExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.UnaryExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitUnary(node As UnaryExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)
  overload: NMF.Expressions.SetExpressionRewriter.VisitUnary*
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Linq.Expressions.ExpressionVisitor
  commentId: T:System.Linq.Expressions.ExpressionVisitor
  parent: System.Linq.Expressions
  isExternal: true
  name: ExpressionVisitor
  nameWithType: ExpressionVisitor
  fullName: System.Linq.Expressions.ExpressionVisitor
- uid: System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: Visit(ReadOnlyCollection<Expression>)
  nameWithType: ExpressionVisitor.Visit(ReadOnlyCollection<Expression>)
  fullName: System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>)
  nameWithType.vb: ExpressionVisitor.Visit(ReadOnlyCollection(Of Expression))
  fullName.vb: System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection(Of System.Linq.Expressions.Expression))
  name.vb: Visit(ReadOnlyCollection(Of Expression))
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})
    name: Visit
    isExternal: true
  - name: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
  - name: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})
    name: Visit
    isExternal: true
  - name: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Linq.Expressions.Expression
    name: Expression
    isExternal: true
  - name: )
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{{T}},System.Func{{T},{T}})
  commentId: M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
  parent: System.Linq.Expressions.ExpressionVisitor
  definition: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
  name: Visit<T>(ReadOnlyCollection<T>, Func<T, T>)
  nameWithType: ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>)
  fullName: System.Linq.Expressions.ExpressionVisitor.Visit<T>(System.Collections.ObjectModel.ReadOnlyCollection<T>, System.Func<T, T>)
  nameWithType.vb: ExpressionVisitor.Visit(Of T)(ReadOnlyCollection(Of T), Func(Of T, T))
  fullName.vb: System.Linq.Expressions.ExpressionVisitor.Visit(Of T)(System.Collections.ObjectModel.ReadOnlyCollection(Of T), System.Func(Of T, T))
  name.vb: Visit(Of T)(ReadOnlyCollection(Of T), Func(Of T, T))
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
    name: Visit
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
    name: Visit
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1({T},System.String)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
  parent: System.Linq.Expressions.ExpressionVisitor
  definition: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
  name: VisitAndConvert<T>(T, string)
  nameWithType: ExpressionVisitor.VisitAndConvert<T>(T, string)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>(T, string)
  nameWithType.vb: ExpressionVisitor.VisitAndConvert(Of T)(T, String)
  fullName.vb: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert(Of T)(T, String)
  name.vb: VisitAndConvert(Of T)(T, String)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
    name: VisitAndConvert
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
    name: VisitAndConvert
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{{T}},System.String)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
  parent: System.Linq.Expressions.ExpressionVisitor
  definition: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
  name: VisitAndConvert<T>(ReadOnlyCollection<T>, string)
  nameWithType: ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, string)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>(System.Collections.ObjectModel.ReadOnlyCollection<T>, string)
  nameWithType.vb: ExpressionVisitor.VisitAndConvert(Of T)(ReadOnlyCollection(Of T), String)
  fullName.vb: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert(Of T)(System.Collections.ObjectModel.ReadOnlyCollection(Of T), String)
  name.vb: VisitAndConvert(Of T)(ReadOnlyCollection(Of T), String)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
    name: VisitAndConvert
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
    name: VisitAndConvert
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitBlock(BlockExpression)
  nameWithType: ExpressionVisitor.VisitBlock(BlockExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)
    name: VisitBlock
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.BlockExpression
    name: BlockExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)
    name: VisitBlock
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.BlockExpression
    name: BlockExpression
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitCatchBlock(CatchBlock)
  nameWithType: ExpressionVisitor.VisitCatchBlock(CatchBlock)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)
    name: VisitCatchBlock
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)
    name: VisitCatchBlock
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitConstant(ConstantExpression)
  nameWithType: ExpressionVisitor.VisitConstant(ConstantExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
    name: VisitConstant
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.ConstantExpression
    name: ConstantExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
    name: VisitConstant
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.ConstantExpression
    name: ConstantExpression
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitDebugInfo(DebugInfoExpression)
  nameWithType: ExpressionVisitor.VisitDebugInfo(DebugInfoExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
    name: VisitDebugInfo
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.DebugInfoExpression
    name: DebugInfoExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
    name: VisitDebugInfo
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.DebugInfoExpression
    name: DebugInfoExpression
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitDynamic(DynamicExpression)
  nameWithType: ExpressionVisitor.VisitDynamic(DynamicExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)
    name: VisitDynamic
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.DynamicExpression
    name: DynamicExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)
    name: VisitDynamic
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.DynamicExpression
    name: DynamicExpression
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitExtension(Expression)
  nameWithType: ExpressionVisitor.VisitExtension(Expression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)
    name: VisitExtension
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)
    name: VisitExtension
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitGoto(GotoExpression)
  nameWithType: ExpressionVisitor.VisitGoto(GotoExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)
    name: VisitGoto
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.GotoExpression
    name: GotoExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)
    name: VisitGoto
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.GotoExpression
    name: GotoExpression
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitInvocation(InvocationExpression)
  nameWithType: ExpressionVisitor.VisitInvocation(InvocationExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)
    name: VisitInvocation
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.InvocationExpression
    name: InvocationExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)
    name: VisitInvocation
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.InvocationExpression
    name: InvocationExpression
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitLabel(LabelExpression)
  nameWithType: ExpressionVisitor.VisitLabel(LabelExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)
    name: VisitLabel
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.LabelExpression
    name: LabelExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)
    name: VisitLabel
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.LabelExpression
    name: LabelExpression
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitLabelTarget(LabelTarget)
  nameWithType: ExpressionVisitor.VisitLabelTarget(LabelTarget)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)
    name: VisitLabelTarget
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.LabelTarget
    name: LabelTarget
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)
    name: VisitLabelTarget
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.LabelTarget
    name: LabelTarget
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{{T}})
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
  parent: System.Linq.Expressions.ExpressionVisitor
  definition: System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
  name: VisitLambda<T>(Expression<T>)
  nameWithType: ExpressionVisitor.VisitLambda<T>(Expression<T>)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitLambda<T>(System.Linq.Expressions.Expression<T>)
  nameWithType.vb: ExpressionVisitor.VisitLambda(Of T)(Expression(Of T))
  fullName.vb: System.Linq.Expressions.ExpressionVisitor.VisitLambda(Of T)(System.Linq.Expressions.Expression(Of T))
  name.vb: VisitLambda(Of T)(Expression(Of T))
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
    name: VisitLambda
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
    name: VisitLambda
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitLoop(LoopExpression)
  nameWithType: ExpressionVisitor.VisitLoop(LoopExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)
    name: VisitLoop
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.LoopExpression
    name: LoopExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)
    name: VisitLoop
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.LoopExpression
    name: LoopExpression
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitMemberBinding(MemberBinding)
  nameWithType: ExpressionVisitor.VisitMemberBinding(MemberBinding)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)
    name: VisitMemberBinding
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)
    name: VisitMemberBinding
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitRuntimeVariables(RuntimeVariablesExpression)
  nameWithType: ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
    name: VisitRuntimeVariables
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.RuntimeVariablesExpression
    name: RuntimeVariablesExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
    name: VisitRuntimeVariables
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.RuntimeVariablesExpression
    name: RuntimeVariablesExpression
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitSwitch(SwitchExpression)
  nameWithType: ExpressionVisitor.VisitSwitch(SwitchExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)
    name: VisitSwitch
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.SwitchExpression
    name: SwitchExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)
    name: VisitSwitch
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.SwitchExpression
    name: SwitchExpression
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitSwitchCase(SwitchCase)
  nameWithType: ExpressionVisitor.VisitSwitchCase(SwitchCase)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)
    name: VisitSwitchCase
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)
    name: VisitSwitchCase
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitTry(TryExpression)
  nameWithType: ExpressionVisitor.VisitTry(TryExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)
    name: VisitTry
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.TryExpression
    name: TryExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)
    name: VisitTry
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.TryExpression
    name: TryExpression
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitTypeBinary(TypeBinaryExpression)
  nameWithType: ExpressionVisitor.VisitTypeBinary(TypeBinaryExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
    name: VisitTypeBinary
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.TypeBinaryExpression
    name: TypeBinaryExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
    name: VisitTypeBinary
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.TypeBinaryExpression
    name: TypeBinaryExpression
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: NMF.Expressions.SetExpressionRewriter.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<SetExpressionRewriter>(SetExpressionRewriter)
  nameWithType: ExpressionExtensions.AsOne<SetExpressionRewriter>(SetExpressionRewriter)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<NMF.Expressions.SetExpressionRewriter>(NMF.Expressions.SetExpressionRewriter)
  nameWithType.vb: ExpressionExtensions.AsOne(Of SetExpressionRewriter)(SetExpressionRewriter)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of NMF.Expressions.SetExpressionRewriter)(NMF.Expressions.SetExpressionRewriter)
  name.vb: AsOne(Of SetExpressionRewriter)(SetExpressionRewriter)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.SetExpressionRewriter)
    name: AsOne
  - name: <
  - uid: NMF.Expressions.SetExpressionRewriter
    name: SetExpressionRewriter
  - name: '>'
  - name: (
  - uid: NMF.Expressions.SetExpressionRewriter
    name: SetExpressionRewriter
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.SetExpressionRewriter)
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.SetExpressionRewriter
    name: SetExpressionRewriter
  - name: )
  - name: (
  - uid: NMF.Expressions.SetExpressionRewriter
    name: SetExpressionRewriter
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
- uid: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
  commentId: M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
  isExternal: true
  name: Visit<T>(ReadOnlyCollection<T>, Func<T, T>)
  nameWithType: ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>)
  fullName: System.Linq.Expressions.ExpressionVisitor.Visit<T>(System.Collections.ObjectModel.ReadOnlyCollection<T>, System.Func<T, T>)
  nameWithType.vb: ExpressionVisitor.Visit(Of T)(ReadOnlyCollection(Of T), Func(Of T, T))
  fullName.vb: System.Linq.Expressions.ExpressionVisitor.Visit(Of T)(System.Collections.ObjectModel.ReadOnlyCollection(Of T), System.Func(Of T, T))
  name.vb: Visit(Of T)(ReadOnlyCollection(Of T), Func(Of T, T))
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
    name: Visit
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
    name: Visit
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
  isExternal: true
  name: VisitAndConvert<T>(T, string)
  nameWithType: ExpressionVisitor.VisitAndConvert<T>(T, string)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>(T, string)
  nameWithType.vb: ExpressionVisitor.VisitAndConvert(Of T)(T, String)
  fullName.vb: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert(Of T)(T, String)
  name.vb: VisitAndConvert(Of T)(T, String)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
    name: VisitAndConvert
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
    name: VisitAndConvert
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
  isExternal: true
  name: VisitAndConvert<T>(ReadOnlyCollection<T>, string)
  nameWithType: ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, string)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>(System.Collections.ObjectModel.ReadOnlyCollection<T>, string)
  nameWithType.vb: ExpressionVisitor.VisitAndConvert(Of T)(ReadOnlyCollection(Of T), String)
  fullName.vb: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert(Of T)(System.Collections.ObjectModel.ReadOnlyCollection(Of T), String)
  name.vb: VisitAndConvert(Of T)(ReadOnlyCollection(Of T), String)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
    name: VisitAndConvert
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
    name: VisitAndConvert
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
  isExternal: true
  name: VisitLambda<T>(Expression<T>)
  nameWithType: ExpressionVisitor.VisitLambda<T>(Expression<T>)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitLambda<T>(System.Linq.Expressions.Expression<T>)
  nameWithType.vb: ExpressionVisitor.VisitLambda(Of T)(Expression(Of T))
  fullName.vb: System.Linq.Expressions.ExpressionVisitor.VisitLambda(Of T)(System.Linq.Expressions.Expression(Of T))
  name.vb: VisitLambda(Of T)(Expression(Of T))
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
    name: VisitLambda
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
    name: VisitLambda
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<T>(T)
  nameWithType: ExpressionExtensions.AsOne<T>(T)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<T>(T)
  nameWithType.vb: ExpressionExtensions.AsOne(Of T)(T)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of T)(T)
  name.vb: AsOne(Of T)(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  parent: NMF.Expressions.Linq
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
- uid: NMF.Expressions.SetExpressionRewriter.CreateSetter*
  commentId: Overload:NMF.Expressions.SetExpressionRewriter.CreateSetter
  name: CreateSetter
  nameWithType: SetExpressionRewriter.CreateSetter
  fullName: NMF.Expressions.SetExpressionRewriter.CreateSetter
- uid: System.Linq.Expressions.Expression{System.Func{{TValue}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TValue>>
  nameWithType: Expression<Func<TValue>>
  fullName: System.Linq.Expressions.Expression<System.Func<TValue>>
  nameWithType.vb: Expression(Of Func(Of TValue))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TValue))
  name.vb: Expression(Of Func(Of TValue))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Action{{TValue}}}
  commentId: T:System.Linq.Expressions.Expression{System.Action{``0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Action<TValue>>
  nameWithType: Expression<Action<TValue>>
  fullName: System.Linq.Expressions.Expression<System.Action<TValue>>
  nameWithType.vb: Expression(Of Action(Of TValue))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Action(Of TValue))
  name.vb: Expression(Of Action(Of TValue))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - name: TDelegate
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},{TValue}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, TValue>>
  nameWithType: Expression<Func<T, TValue>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, TValue>>
  nameWithType.vb: Expression(Of Func(Of T, TValue))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, TValue))
  name.vb: Expression(Of Func(Of T, TValue))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Action{{T},{TValue}}}
  commentId: T:System.Linq.Expressions.Expression{System.Action{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Action<T, TValue>>
  nameWithType: Expression<Action<T, TValue>>
  fullName: System.Linq.Expressions.Expression<System.Action<T, TValue>>
  nameWithType.vb: Expression(Of Action(Of T, TValue))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Action(Of T, TValue))
  name.vb: Expression(Of Action(Of T, TValue))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{TValue}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1,``2}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T1, T2, TValue>>
  nameWithType: Expression<Func<T1, T2, TValue>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, T2, TValue>>
  nameWithType.vb: Expression(Of Func(Of T1, T2, TValue))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, TValue))
  name.vb: Expression(Of Func(Of T1, T2, TValue))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Action{{T1},{T2},{TValue}}}
  commentId: T:System.Linq.Expressions.Expression{System.Action{``0,``1,``2}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Action<T1, T2, TValue>>
  nameWithType: Expression<Action<T1, T2, TValue>>
  fullName: System.Linq.Expressions.Expression<System.Action<T1, T2, TValue>>
  nameWithType.vb: Expression(Of Action(Of T1, T2, TValue))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Action(Of T1, T2, TValue))
  name.vb: Expression(Of Action(Of T1, T2, TValue))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Action`3
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Linq.Expressions.LambdaExpression
  commentId: T:System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: NMF.Expressions.SetExpressionRewriter.Value*
  commentId: Overload:NMF.Expressions.SetExpressionRewriter.Value
  name: Value
  nameWithType: SetExpressionRewriter.Value
  fullName: NMF.Expressions.SetExpressionRewriter.Value
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: NMF.Expressions.SetExpressionRewriter.#ctor*
  commentId: Overload:NMF.Expressions.SetExpressionRewriter.#ctor
  name: SetExpressionRewriter
  nameWithType: SetExpressionRewriter.SetExpressionRewriter
  fullName: NMF.Expressions.SetExpressionRewriter.SetExpressionRewriter
  nameWithType.vb: SetExpressionRewriter.New
  fullName.vb: NMF.Expressions.SetExpressionRewriter.New
  name.vb: New
- uid: System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: Visit(Expression)
  nameWithType: ExpressionVisitor.Visit(Expression)
  fullName: System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)
    name: Visit
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)
    name: Visit
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    isExternal: true
  - name: )
- uid: NMF.Expressions.SetExpressionRewriter.Visit*
  commentId: Overload:NMF.Expressions.SetExpressionRewriter.Visit
  name: Visit
  nameWithType: SetExpressionRewriter.Visit
  fullName: NMF.Expressions.SetExpressionRewriter.Visit
- uid: System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitBinary(BinaryExpression)
  nameWithType: ExpressionVisitor.VisitBinary(BinaryExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
    name: VisitBinary
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.BinaryExpression
    name: BinaryExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
    name: VisitBinary
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.BinaryExpression
    name: BinaryExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.SetExpressionRewriter.VisitBinary*
  commentId: Overload:NMF.Expressions.SetExpressionRewriter.VisitBinary
  name: VisitBinary
  nameWithType: SetExpressionRewriter.VisitBinary
  fullName: NMF.Expressions.SetExpressionRewriter.VisitBinary
- uid: System.Linq.Expressions.BinaryExpression
  commentId: T:System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitConditional(ConditionalExpression)
  nameWithType: ExpressionVisitor.VisitConditional(ConditionalExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)
    name: VisitConditional
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.ConditionalExpression
    name: ConditionalExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)
    name: VisitConditional
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.ConditionalExpression
    name: ConditionalExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.SetExpressionRewriter.VisitConditional*
  commentId: Overload:NMF.Expressions.SetExpressionRewriter.VisitConditional
  name: VisitConditional
  nameWithType: SetExpressionRewriter.VisitConditional
  fullName: NMF.Expressions.SetExpressionRewriter.VisitConditional
- uid: System.Linq.Expressions.ConditionalExpression
  commentId: T:System.Linq.Expressions.ConditionalExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: ConditionalExpression
  nameWithType: ConditionalExpression
  fullName: System.Linq.Expressions.ConditionalExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitDefault(DefaultExpression)
  nameWithType: ExpressionVisitor.VisitDefault(DefaultExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)
    name: VisitDefault
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.DefaultExpression
    name: DefaultExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)
    name: VisitDefault
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.DefaultExpression
    name: DefaultExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.SetExpressionRewriter.VisitDefault*
  commentId: Overload:NMF.Expressions.SetExpressionRewriter.VisitDefault
  name: VisitDefault
  nameWithType: SetExpressionRewriter.VisitDefault
  fullName: NMF.Expressions.SetExpressionRewriter.VisitDefault
- uid: System.Linq.Expressions.DefaultExpression
  commentId: T:System.Linq.Expressions.DefaultExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: DefaultExpression
  nameWithType: DefaultExpression
  fullName: System.Linq.Expressions.DefaultExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitElementInit(ElementInit)
  nameWithType: ExpressionVisitor.VisitElementInit(ElementInit)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)
    name: VisitElementInit
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)
    name: VisitElementInit
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    isExternal: true
  - name: )
- uid: NMF.Expressions.SetExpressionRewriter.VisitElementInit*
  commentId: Overload:NMF.Expressions.SetExpressionRewriter.VisitElementInit
  name: VisitElementInit
  nameWithType: SetExpressionRewriter.VisitElementInit
  fullName: NMF.Expressions.SetExpressionRewriter.VisitElementInit
- uid: System.Linq.Expressions.ElementInit
  commentId: T:System.Linq.Expressions.ElementInit
  parent: System.Linq.Expressions
  isExternal: true
  name: ElementInit
  nameWithType: ElementInit
  fullName: System.Linq.Expressions.ElementInit
- uid: System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitIndex(IndexExpression)
  nameWithType: ExpressionVisitor.VisitIndex(IndexExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)
    name: VisitIndex
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.IndexExpression
    name: IndexExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)
    name: VisitIndex
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.IndexExpression
    name: IndexExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.SetExpressionRewriter.VisitIndex*
  commentId: Overload:NMF.Expressions.SetExpressionRewriter.VisitIndex
  name: VisitIndex
  nameWithType: SetExpressionRewriter.VisitIndex
  fullName: NMF.Expressions.SetExpressionRewriter.VisitIndex
- uid: System.Linq.Expressions.IndexExpression
  commentId: T:System.Linq.Expressions.IndexExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: IndexExpression
  nameWithType: IndexExpression
  fullName: System.Linq.Expressions.IndexExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitListInit(ListInitExpression)
  nameWithType: ExpressionVisitor.VisitListInit(ListInitExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)
    name: VisitListInit
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.ListInitExpression
    name: ListInitExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)
    name: VisitListInit
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.ListInitExpression
    name: ListInitExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.SetExpressionRewriter.VisitListInit*
  commentId: Overload:NMF.Expressions.SetExpressionRewriter.VisitListInit
  name: VisitListInit
  nameWithType: SetExpressionRewriter.VisitListInit
  fullName: NMF.Expressions.SetExpressionRewriter.VisitListInit
- uid: System.Linq.Expressions.ListInitExpression
  commentId: T:System.Linq.Expressions.ListInitExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: ListInitExpression
  nameWithType: ListInitExpression
  fullName: System.Linq.Expressions.ListInitExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitMember(MemberExpression)
  nameWithType: ExpressionVisitor.VisitMember(MemberExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
    name: VisitMember
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.MemberExpression
    name: MemberExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
    name: VisitMember
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.MemberExpression
    name: MemberExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.SetExpressionRewriter.VisitMember*
  commentId: Overload:NMF.Expressions.SetExpressionRewriter.VisitMember
  name: VisitMember
  nameWithType: SetExpressionRewriter.VisitMember
  fullName: NMF.Expressions.SetExpressionRewriter.VisitMember
- uid: System.Linq.Expressions.MemberExpression
  commentId: T:System.Linq.Expressions.MemberExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: MemberExpression
  nameWithType: MemberExpression
  fullName: System.Linq.Expressions.MemberExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitMemberAssignment(MemberAssignment)
  nameWithType: ExpressionVisitor.VisitMemberAssignment(MemberAssignment)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
    name: VisitMemberAssignment
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.MemberAssignment
    name: MemberAssignment
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
    name: VisitMemberAssignment
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.MemberAssignment
    name: MemberAssignment
    isExternal: true
  - name: )
- uid: NMF.Expressions.SetExpressionRewriter.VisitMemberAssignment*
  commentId: Overload:NMF.Expressions.SetExpressionRewriter.VisitMemberAssignment
  name: VisitMemberAssignment
  nameWithType: SetExpressionRewriter.VisitMemberAssignment
  fullName: NMF.Expressions.SetExpressionRewriter.VisitMemberAssignment
- uid: System.Linq.Expressions.MemberAssignment
  commentId: T:System.Linq.Expressions.MemberAssignment
  parent: System.Linq.Expressions
  isExternal: true
  name: MemberAssignment
  nameWithType: MemberAssignment
  fullName: System.Linq.Expressions.MemberAssignment
- uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitMemberInit(MemberInitExpression)
  nameWithType: ExpressionVisitor.VisitMemberInit(MemberInitExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
    name: VisitMemberInit
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.MemberInitExpression
    name: MemberInitExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
    name: VisitMemberInit
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.MemberInitExpression
    name: MemberInitExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.SetExpressionRewriter.VisitMemberInit*
  commentId: Overload:NMF.Expressions.SetExpressionRewriter.VisitMemberInit
  name: VisitMemberInit
  nameWithType: SetExpressionRewriter.VisitMemberInit
  fullName: NMF.Expressions.SetExpressionRewriter.VisitMemberInit
- uid: System.Linq.Expressions.MemberInitExpression
  commentId: T:System.Linq.Expressions.MemberInitExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: MemberInitExpression
  nameWithType: MemberInitExpression
  fullName: System.Linq.Expressions.MemberInitExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitMemberListBinding(MemberListBinding)
  nameWithType: ExpressionVisitor.VisitMemberListBinding(MemberListBinding)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
    name: VisitMemberListBinding
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.MemberListBinding
    name: MemberListBinding
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
    name: VisitMemberListBinding
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.MemberListBinding
    name: MemberListBinding
    isExternal: true
  - name: )
- uid: NMF.Expressions.SetExpressionRewriter.VisitMemberListBinding*
  commentId: Overload:NMF.Expressions.SetExpressionRewriter.VisitMemberListBinding
  name: VisitMemberListBinding
  nameWithType: SetExpressionRewriter.VisitMemberListBinding
  fullName: NMF.Expressions.SetExpressionRewriter.VisitMemberListBinding
- uid: System.Linq.Expressions.MemberListBinding
  commentId: T:System.Linq.Expressions.MemberListBinding
  parent: System.Linq.Expressions
  isExternal: true
  name: MemberListBinding
  nameWithType: MemberListBinding
  fullName: System.Linq.Expressions.MemberListBinding
- uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitMemberMemberBinding(MemberMemberBinding)
  nameWithType: ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
    name: VisitMemberMemberBinding
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.MemberMemberBinding
    name: MemberMemberBinding
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
    name: VisitMemberMemberBinding
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.MemberMemberBinding
    name: MemberMemberBinding
    isExternal: true
  - name: )
- uid: NMF.Expressions.SetExpressionRewriter.VisitMemberMemberBinding*
  commentId: Overload:NMF.Expressions.SetExpressionRewriter.VisitMemberMemberBinding
  name: VisitMemberMemberBinding
  nameWithType: SetExpressionRewriter.VisitMemberMemberBinding
  fullName: NMF.Expressions.SetExpressionRewriter.VisitMemberMemberBinding
- uid: System.Linq.Expressions.MemberMemberBinding
  commentId: T:System.Linq.Expressions.MemberMemberBinding
  parent: System.Linq.Expressions
  isExternal: true
  name: MemberMemberBinding
  nameWithType: MemberMemberBinding
  fullName: System.Linq.Expressions.MemberMemberBinding
- uid: System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitMethodCall(MethodCallExpression)
  nameWithType: ExpressionVisitor.VisitMethodCall(MethodCallExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
    name: VisitMethodCall
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.MethodCallExpression
    name: MethodCallExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
    name: VisitMethodCall
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.MethodCallExpression
    name: MethodCallExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.SetExpressionRewriter.VisitMethodCall*
  commentId: Overload:NMF.Expressions.SetExpressionRewriter.VisitMethodCall
  name: VisitMethodCall
  nameWithType: SetExpressionRewriter.VisitMethodCall
  fullName: NMF.Expressions.SetExpressionRewriter.VisitMethodCall
- uid: System.Linq.Expressions.MethodCallExpression
  commentId: T:System.Linq.Expressions.MethodCallExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: MethodCallExpression
  nameWithType: MethodCallExpression
  fullName: System.Linq.Expressions.MethodCallExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitNew(NewExpression)
  nameWithType: ExpressionVisitor.VisitNew(NewExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)
    name: VisitNew
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.NewExpression
    name: NewExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)
    name: VisitNew
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.NewExpression
    name: NewExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.SetExpressionRewriter.VisitNew*
  commentId: Overload:NMF.Expressions.SetExpressionRewriter.VisitNew
  name: VisitNew
  nameWithType: SetExpressionRewriter.VisitNew
  fullName: NMF.Expressions.SetExpressionRewriter.VisitNew
- uid: System.Linq.Expressions.NewExpression
  commentId: T:System.Linq.Expressions.NewExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: NewExpression
  nameWithType: NewExpression
  fullName: System.Linq.Expressions.NewExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitNewArray(NewArrayExpression)
  nameWithType: ExpressionVisitor.VisitNewArray(NewArrayExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
    name: VisitNewArray
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.NewArrayExpression
    name: NewArrayExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
    name: VisitNewArray
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.NewArrayExpression
    name: NewArrayExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.SetExpressionRewriter.VisitNewArray*
  commentId: Overload:NMF.Expressions.SetExpressionRewriter.VisitNewArray
  name: VisitNewArray
  nameWithType: SetExpressionRewriter.VisitNewArray
  fullName: NMF.Expressions.SetExpressionRewriter.VisitNewArray
- uid: System.Linq.Expressions.NewArrayExpression
  commentId: T:System.Linq.Expressions.NewArrayExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: NewArrayExpression
  nameWithType: NewArrayExpression
  fullName: System.Linq.Expressions.NewArrayExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitParameter(ParameterExpression)
  nameWithType: ExpressionVisitor.VisitParameter(ParameterExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)
    name: VisitParameter
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)
    name: VisitParameter
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.SetExpressionRewriter.VisitParameter*
  commentId: Overload:NMF.Expressions.SetExpressionRewriter.VisitParameter
  name: VisitParameter
  nameWithType: SetExpressionRewriter.VisitParameter
  fullName: NMF.Expressions.SetExpressionRewriter.VisitParameter
- uid: System.Linq.Expressions.ParameterExpression
  commentId: T:System.Linq.Expressions.ParameterExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: ParameterExpression
  nameWithType: ParameterExpression
  fullName: System.Linq.Expressions.ParameterExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitUnary(UnaryExpression)
  nameWithType: ExpressionVisitor.VisitUnary(UnaryExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)
    name: VisitUnary
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.UnaryExpression
    name: UnaryExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)
    name: VisitUnary
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.UnaryExpression
    name: UnaryExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.SetExpressionRewriter.VisitUnary*
  commentId: Overload:NMF.Expressions.SetExpressionRewriter.VisitUnary
  name: VisitUnary
  nameWithType: SetExpressionRewriter.VisitUnary
  fullName: NMF.Expressions.SetExpressionRewriter.VisitUnary
- uid: System.Linq.Expressions.UnaryExpression
  commentId: T:System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
