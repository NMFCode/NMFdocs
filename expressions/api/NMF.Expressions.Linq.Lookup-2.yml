### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.Linq.Lookup`2
  commentId: T:NMF.Expressions.Linq.Lookup`2
  id: Lookup`2
  parent: NMF.Expressions.Linq
  children:
  - NMF.Expressions.Linq.Lookup`2.#ctor(NMF.Expressions.IEnumerableExpression{`0},NMF.Expressions.ObservingFunc{`0,`1})
  - NMF.Expressions.Linq.Lookup`2.AsNotifiable
  - NMF.Expressions.Linq.Lookup`2.GetEnumerator
  - NMF.Expressions.Linq.Lookup`2.Item(`1)
  - NMF.Expressions.Linq.Lookup`2.Keys
  - NMF.Expressions.Linq.Lookup`2.NMF#Expressions#IEnumerableExpression#AsNotifiable
  - NMF.Expressions.Linq.Lookup`2.NMF#Expressions#Linq#ILookupExpression{TSource,TKey}#AsNotifiable
  - NMF.Expressions.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: Lookup<TSource, TKey>
  nameWithType: Lookup<TSource, TKey>
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>
  type: Class
  source:
    remote:
      path: Expressions/Expressions.Utilities/Lookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Lookup
    path: src/Expressions/Expressions.Utilities/Lookup.cs
    startLine: 14
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  summary: "\nDenotes an incremental lookup implementation\n"
  example: []
  syntax:
    content: 'public class Lookup<TSource, TKey> : ILookupExpression<TSource, TKey>, IEnumerableExpression<TKey>, IEnumerable<TKey>, IEnumerableExpression, IEnumerable'
    typeParameters:
    - id: TSource
      description: The source type of elements
    - id: TKey
      description: The key type
    content.vb: >-
      Public Class Lookup(Of TSource, TKey)
          Implements ILookupExpression(Of TSource, TKey), IEnumerableExpression(Of TKey), IEnumerable(Of TKey), IEnumerableExpression, IEnumerable
  inheritance:
  - System.Object
  implements:
  - NMF.Expressions.Linq.ILookupExpression{{TSource},{TKey}}
  - NMF.Expressions.IEnumerableExpression{{TKey}}
  - System.Collections.Generic.IEnumerable{{TKey}}
  - NMF.Expressions.IEnumerableExpression
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}})
  - System.Collections.Generic.IEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TKey},System.Int32}},System.Int32,{TResult}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TKey},System.Int32}},System.Int32,{TResult}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TKey},System.Int32}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{{TKey},System.Int32},{TResult}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TKey},System.Int32}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  - System.Collections.Generic.IEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TKey}},System.Int32,{TResult}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TKey}},System.Int32,{TResult}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TKey}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{{TKey},{TResult}})
  - NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TKey}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  - System.Collections.Generic.IEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  nameWithType.vb: Lookup(Of TSource, TKey)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey)
  name.vb: Lookup(Of TSource, TKey)
- uid: NMF.Expressions.Linq.Lookup`2.Keys
  commentId: P:NMF.Expressions.Linq.Lookup`2.Keys
  id: Keys
  parent: NMF.Expressions.Linq.Lookup`2
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: Lookup<TSource, TKey>.Keys
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.Keys
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/Lookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Keys
    path: src/Expressions/Expressions.Utilities/Lookup.cs
    startLine: 22
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  example: []
  syntax:
    content: public IEnumerableExpression<TKey> Keys { get; }
    parameters: []
    return:
      type: NMF.Expressions.IEnumerableExpression{{TKey}}
    content.vb: Public ReadOnly Property Keys As IEnumerableExpression(Of TKey)
  overload: NMF.Expressions.Linq.Lookup`2.Keys*
  implements:
  - NMF.Expressions.Linq.ILookupExpression{{TSource},{TKey}}.Keys
  nameWithType.vb: Lookup(Of TSource, TKey).Keys
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).Keys
- uid: NMF.Expressions.Linq.Lookup`2.#ctor(NMF.Expressions.IEnumerableExpression{`0},NMF.Expressions.ObservingFunc{`0,`1})
  commentId: M:NMF.Expressions.Linq.Lookup`2.#ctor(NMF.Expressions.IEnumerableExpression{`0},NMF.Expressions.ObservingFunc{`0,`1})
  id: '#ctor(NMF.Expressions.IEnumerableExpression{`0},NMF.Expressions.ObservingFunc{`0,`1})'
  parent: NMF.Expressions.Linq.Lookup`2
  langs:
  - csharp
  - vb
  name: Lookup(IEnumerableExpression<TSource>, ObservingFunc<TSource, TKey>)
  nameWithType: Lookup<TSource, TKey>.Lookup(IEnumerableExpression<TSource>, ObservingFunc<TSource, TKey>)
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.Lookup(NMF.Expressions.IEnumerableExpression<TSource>, NMF.Expressions.ObservingFunc<TSource, TKey>)
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions.Utilities/Lookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions.Utilities/Lookup.cs
    startLine: 35
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  summary: "\nCreates a new lookup for the given source and key selector\n"
  example: []
  syntax:
    content: public Lookup(IEnumerableExpression<TSource> source, ObservingFunc<TSource, TKey> keySelector)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
      description: The source collection
    - id: keySelector
      type: NMF.Expressions.ObservingFunc{{TSource},{TKey}}
      description: A function that selects the keys of a given element
    content.vb: Public Sub New(source As IEnumerableExpression(Of TSource), keySelector As ObservingFunc(Of TSource, TKey))
  overload: NMF.Expressions.Linq.Lookup`2.#ctor*
  nameWithType.vb: Lookup(Of TSource, TKey).Lookup(IEnumerableExpression(Of TSource), ObservingFunc(Of TSource, TKey))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).Lookup(NMF.Expressions.IEnumerableExpression(Of TSource), NMF.Expressions.ObservingFunc(Of TSource, TKey))
  name.vb: Lookup(IEnumerableExpression(Of TSource), ObservingFunc(Of TSource, TKey))
- uid: NMF.Expressions.Linq.Lookup`2.Item(`1)
  commentId: P:NMF.Expressions.Linq.Lookup`2.Item(`1)
  id: Item(`1)
  parent: NMF.Expressions.Linq.Lookup`2
  langs:
  - csharp
  - vb
  name: Item[TKey]
  nameWithType: Lookup<TSource, TKey>.Item[TKey]
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.Item[TKey]
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/Lookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: this[]
    path: src/Expressions/Expressions.Utilities/Lookup.cs
    startLine: 42
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  example: []
  syntax:
    content: public IEnumerableExpression<TSource> this[TKey key] { get; }
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: NMF.Expressions.IEnumerableExpression{{TSource}}
    content.vb: Public ReadOnly Property Item(key As TKey) As IEnumerableExpression(Of TSource)
  overload: NMF.Expressions.Linq.Lookup`2.Item*
  implements:
  - NMF.Expressions.Linq.ILookupExpression{{TSource},{TKey}}.Item({TKey})
  nameWithType.vb: Lookup(Of TSource, TKey).Item(TKey)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).Item(TKey)
  name.vb: Item(TKey)
- uid: NMF.Expressions.Linq.Lookup`2.AsNotifiable
  commentId: M:NMF.Expressions.Linq.Lookup`2.AsNotifiable
  id: AsNotifiable
  parent: NMF.Expressions.Linq.Lookup`2
  langs:
  - csharp
  - vb
  name: AsNotifiable()
  nameWithType: Lookup<TSource, TKey>.AsNotifiable()
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.AsNotifiable()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/Lookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AsNotifiable
    path: src/Expressions/Expressions.Utilities/Lookup.cs
    startLine: 134
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  example: []
  syntax:
    content: public INotifyEnumerable<TKey> AsNotifiable()
    return:
      type: NMF.Expressions.INotifyEnumerable{{TKey}}
    content.vb: Public Function AsNotifiable As INotifyEnumerable(Of TKey)
  overload: NMF.Expressions.Linq.Lookup`2.AsNotifiable*
  implements:
  - NMF.Expressions.IEnumerableExpression{{TKey}}.AsNotifiable
  nameWithType.vb: Lookup(Of TSource, TKey).AsNotifiable()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).AsNotifiable()
- uid: NMF.Expressions.Linq.Lookup`2.GetEnumerator
  commentId: M:NMF.Expressions.Linq.Lookup`2.GetEnumerator
  id: GetEnumerator
  parent: NMF.Expressions.Linq.Lookup`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: Lookup<TSource, TKey>.GetEnumerator()
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/Lookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetEnumerator
    path: src/Expressions/Expressions.Utilities/Lookup.cs
    startLine: 141
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  example: []
  syntax:
    content: public IEnumerator<TKey> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{TKey}}
    content.vb: Public Function GetEnumerator As IEnumerator(Of TKey)
  overload: NMF.Expressions.Linq.Lookup`2.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{TKey}}.GetEnumerator
  nameWithType.vb: Lookup(Of TSource, TKey).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).GetEnumerator()
- uid: NMF.Expressions.Linq.Lookup`2.NMF#Expressions#IEnumerableExpression#AsNotifiable
  commentId: M:NMF.Expressions.Linq.Lookup`2.NMF#Expressions#IEnumerableExpression#AsNotifiable
  id: NMF#Expressions#IEnumerableExpression#AsNotifiable
  isEii: true
  parent: NMF.Expressions.Linq.Lookup`2
  langs:
  - csharp
  - vb
  name: IEnumerableExpression.AsNotifiable()
  nameWithType: Lookup<TSource, TKey>.IEnumerableExpression.AsNotifiable()
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.NMF.Expressions.IEnumerableExpression.AsNotifiable()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/Lookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Expressions.IEnumerableExpression.AsNotifiable
    path: src/Expressions/Expressions.Utilities/Lookup.cs
    startLine: 146
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: INotifyEnumerable IEnumerableExpression.AsNotifiable()
    return:
      type: NMF.Expressions.INotifyEnumerable
    content.vb: Function NMF.Expressions.IEnumerableExpression.AsNotifiable As INotifyEnumerable Implements IEnumerableExpression.AsNotifiable
  overload: NMF.Expressions.Linq.Lookup`2.NMF#Expressions#IEnumerableExpression#AsNotifiable*
  implements:
  - NMF.Expressions.IEnumerableExpression.AsNotifiable
  nameWithType.vb: Lookup(Of TSource, TKey).NMF.Expressions.IEnumerableExpression.AsNotifiable()
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).NMF.Expressions.IEnumerableExpression.AsNotifiable()
  name.vb: NMF.Expressions.IEnumerableExpression.AsNotifiable()
- uid: NMF.Expressions.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator
  commentId: M:NMF.Expressions.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: NMF.Expressions.Linq.Lookup`2
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: Lookup<TSource, TKey>.IEnumerable.GetEnumerator()
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/Lookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/Expressions/Expressions.Utilities/Lookup.cs
    startLine: 151
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: NMF.Expressions.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: Lookup(Of TSource, TKey).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: NMF.Expressions.Linq.Lookup`2.NMF#Expressions#Linq#ILookupExpression{TSource,TKey}#AsNotifiable
  commentId: M:NMF.Expressions.Linq.Lookup`2.NMF#Expressions#Linq#ILookupExpression{TSource,TKey}#AsNotifiable
  id: NMF#Expressions#Linq#ILookupExpression{TSource,TKey}#AsNotifiable
  isEii: true
  parent: NMF.Expressions.Linq.Lookup`2
  langs:
  - csharp
  - vb
  name: ILookupExpression<TSource, TKey>.AsNotifiable()
  nameWithType: Lookup<TSource, TKey>.ILookupExpression<TSource, TKey>.AsNotifiable()
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.NMF.Expressions.Linq.ILookupExpression<TSource, TKey>.AsNotifiable()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/Lookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Expressions.Linq.ILookupExpression<TSource,TKey>.AsNotifiable
    path: src/Expressions/Expressions.Utilities/Lookup.cs
    startLine: 156
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: INotifyLookup<TSource, TKey> ILookupExpression<TSource, TKey>.AsNotifiable()
    return:
      type: NMF.Expressions.Linq.INotifyLookup{{TSource},{TKey}}
    content.vb: Function NMF.Expressions.Linq.ILookupExpression<TSource,TKey>.AsNotifiable As INotifyLookup(Of TSource, TKey) Implements ILookupExpression(Of TSource, TKey).AsNotifiable
  overload: NMF.Expressions.Linq.Lookup`2.NMF#Expressions#Linq#ILookupExpression{TSource,TKey}#AsNotifiable*
  implements:
  - NMF.Expressions.Linq.ILookupExpression{{TSource},{TKey}}.AsNotifiable
  nameWithType.vb: Lookup(Of TSource, TKey).NMF.Expressions.Linq.ILookupExpression<TSource,TKey>.AsNotifiable()
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).NMF.Expressions.Linq.ILookupExpression<TSource,TKey>.AsNotifiable()
  name.vb: NMF.Expressions.Linq.ILookupExpression<TSource,TKey>.AsNotifiable()
references:
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Expressions.Linq.ILookupExpression{{TSource},{TKey}}
  commentId: T:NMF.Expressions.Linq.ILookupExpression{`0,`1}
  parent: NMF.Expressions.Linq
  definition: NMF.Expressions.Linq.ILookupExpression`2
  name: ILookupExpression<TSource, TKey>
  nameWithType: ILookupExpression<TSource, TKey>
  fullName: NMF.Expressions.Linq.ILookupExpression<TSource, TKey>
  nameWithType.vb: ILookupExpression(Of TSource, TKey)
  fullName.vb: NMF.Expressions.Linq.ILookupExpression(Of TSource, TKey)
  name.vb: ILookupExpression(Of TSource, TKey)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ILookupExpression`2
    name: ILookupExpression
    nameWithType: ILookupExpression
    fullName: NMF.Expressions.Linq.ILookupExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.ILookupExpression`2
    name: ILookupExpression
    nameWithType: ILookupExpression
    fullName: NMF.Expressions.Linq.ILookupExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{{TKey}}
  commentId: T:NMF.Expressions.IEnumerableExpression{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<TKey>
  nameWithType: IEnumerableExpression<TKey>
  fullName: NMF.Expressions.IEnumerableExpression<TKey>
  nameWithType.vb: IEnumerableExpression(Of TKey)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of TKey)
  name.vb: IEnumerableExpression(Of TKey)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TKey}}
  commentId: T:System.Collections.Generic.IEnumerable{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TKey>
  nameWithType: IEnumerable<TKey>
  fullName: System.Collections.Generic.IEnumerable<TKey>
  nameWithType.vb: IEnumerable(Of TKey)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TKey)
  name.vb: IEnumerable(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression
  commentId: T:NMF.Expressions.IEnumerableExpression
  parent: NMF.Expressions
  name: IEnumerableExpression
  nameWithType: IEnumerableExpression
  fullName: NMF.Expressions.IEnumerableExpression
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}})
  commentId: M:NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.LookupExtensions
  definition: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: ToLookup<TKey, TKey>(Expression<Func<TKey, TKey>>)
  nameWithType: LookupExtensions.ToLookup<TKey, TKey>(Expression<Func<TKey, TKey>>)
  fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TKey, TKey>(System.Linq.Expressions.Expression<System.Func<TKey, TKey>>)
  nameWithType.vb: LookupExtensions.ToLookup(Of TKey, TKey)(Expression(Of Func(Of TKey, TKey)))
  fullName.vb: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TKey, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of TKey, TKey)))
  name.vb: ToLookup(Of TKey, TKey)(Expression(Of Func(Of TKey, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup<TKey, TKey>
    nameWithType: LookupExtensions.ToLookup<TKey, TKey>
    fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TKey, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup(Of TKey, TKey)
    nameWithType: LookupExtensions.ToLookup(Of TKey, TKey)
    fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TKey, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TKey},System.Int32}},System.Int32,{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  name: ChunkIndexed<TKey, TResult>(Int32, Func<IEnumerableExpression<ValueTuple<TKey, Int32>>, Int32, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<TKey, TResult>(Int32, Func<IEnumerableExpression<ValueTuple<TKey, Int32>>, Int32, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<TKey, TResult>(System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<System.ValueTuple<TKey, System.Int32>>, System.Int32, TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of TKey, TResult)(Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of TKey, Int32)), Int32, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of TKey, TResult)(System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of System.ValueTuple(Of TKey, System.Int32)), System.Int32, TResult))
  name.vb: ChunkIndexed(Of TKey, TResult)(Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of TKey, Int32)), Int32, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed<TKey, TResult>
    nameWithType: ChunkExtensions.ChunkIndexed<TKey, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed(Of TKey, TResult)
    nameWithType: ChunkExtensions.ChunkIndexed(Of TKey, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TKey},System.Int32}},System.Int32,{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  name: ChunkIndexed<TKey, TResult>(Int32, Func<IEnumerableExpression<ValueTuple<TKey, Int32>>, Int32, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<TKey, TResult>(Int32, Func<IEnumerableExpression<ValueTuple<TKey, Int32>>, Int32, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<TKey, TResult>(System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<System.ValueTuple<TKey, System.Int32>>, System.Int32, TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of TKey, TResult)(Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of TKey, Int32)), Int32, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of TKey, TResult)(System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of System.ValueTuple(Of TKey, System.Int32)), System.Int32, TResult))
  name.vb: ChunkIndexed(Of TKey, TResult)(Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of TKey, Int32)), Int32, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed<TKey, TResult>
    nameWithType: ChunkExtensions.ChunkIndexed<TKey, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed(Of TKey, TResult)
    nameWithType: ChunkExtensions.ChunkIndexed(Of TKey, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TKey},System.Int32}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{{TKey},System.Int32},{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  name: ChunkIndexed<TKey, TResult>(Int32, Func<IEnumerableExpression<ValueTuple<TKey, Int32>>, Int32, TResult>, IChunkBalancingStrategyProvider<ValueTuple<TKey, Int32>, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<TKey, TResult>(Int32, Func<IEnumerableExpression<ValueTuple<TKey, Int32>>, Int32, TResult>, IChunkBalancingStrategyProvider<ValueTuple<TKey, Int32>, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<TKey, TResult>(System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<System.ValueTuple<TKey, System.Int32>>, System.Int32, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider<System.ValueTuple<TKey, System.Int32>, TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of TKey, TResult)(Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of TKey, Int32)), Int32, TResult), IChunkBalancingStrategyProvider(Of ValueTuple(Of TKey, Int32), TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of TKey, TResult)(System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of System.ValueTuple(Of TKey, System.Int32)), System.Int32, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of System.ValueTuple(Of TKey, System.Int32), TResult))
  name.vb: ChunkIndexed(Of TKey, TResult)(Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of TKey, Int32)), Int32, TResult), IChunkBalancingStrategyProvider(Of ValueTuple(Of TKey, Int32), TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
    name: ChunkIndexed<TKey, TResult>
    nameWithType: ChunkExtensions.ChunkIndexed<TKey, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
    name: ChunkIndexed(Of TKey, TResult)
    nameWithType: ChunkExtensions.ChunkIndexed(Of TKey, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TKey},System.Int32}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name: ChunkIndexed<TKey, TResult>(Int32, Func<IEnumerableExpression<ValueTuple<TKey, Int32>>, Int32, TResult>, IChunkBalancingStrategyProvider)
  nameWithType: ChunkExtensions.ChunkIndexed<TKey, TResult>(Int32, Func<IEnumerableExpression<ValueTuple<TKey, Int32>>, Int32, TResult>, IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<TKey, TResult>(System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<System.ValueTuple<TKey, System.Int32>>, System.Int32, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of TKey, TResult)(Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of TKey, Int32)), Int32, TResult), IChunkBalancingStrategyProvider)
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of TKey, TResult)(System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of System.ValueTuple(Of TKey, System.Int32)), System.Int32, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: ChunkIndexed(Of TKey, TResult)(Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of TKey, Int32)), Int32, TResult), IChunkBalancingStrategyProvider)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: ChunkIndexed<TKey, TResult>
    nameWithType: ChunkExtensions.ChunkIndexed<TKey, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: ChunkIndexed(Of TKey, TResult)
    nameWithType: ChunkExtensions.ChunkIndexed(Of TKey, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TKey}},System.Int32,{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  name: Chunk<TKey, TResult>(Int32, Func<IEnumerableExpression<TKey>, Int32, TResult>)
  nameWithType: ChunkExtensions.Chunk<TKey, TResult>(Int32, Func<IEnumerableExpression<TKey>, Int32, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<TKey, TResult>(System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<TKey>, System.Int32, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of TKey, TResult)(Int32, Func(Of IEnumerableExpression(Of TKey), Int32, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of TKey, TResult)(System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of TKey), System.Int32, TResult))
  name.vb: Chunk(Of TKey, TResult)(Int32, Func(Of IEnumerableExpression(Of TKey), Int32, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
    name: Chunk<TKey, TResult>
    nameWithType: ChunkExtensions.Chunk<TKey, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
    name: Chunk(Of TKey, TResult)
    nameWithType: ChunkExtensions.Chunk(Of TKey, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TKey}},System.Int32,{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  name: Chunk<TKey, TResult>(Int32, Func<IEnumerableExpression<TKey>, Int32, TResult>)
  nameWithType: ChunkExtensions.Chunk<TKey, TResult>(Int32, Func<IEnumerableExpression<TKey>, Int32, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<TKey, TResult>(System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<TKey>, System.Int32, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of TKey, TResult)(Int32, Func(Of IEnumerableExpression(Of TKey), Int32, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of TKey, TResult)(System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of TKey), System.Int32, TResult))
  name.vb: Chunk(Of TKey, TResult)(Int32, Func(Of IEnumerableExpression(Of TKey), Int32, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
    name: Chunk<TKey, TResult>
    nameWithType: ChunkExtensions.Chunk<TKey, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
    name: Chunk(Of TKey, TResult)
    nameWithType: ChunkExtensions.Chunk(Of TKey, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TKey}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{{TKey},{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  name: Chunk<TKey, TResult>(Int32, Func<IEnumerableExpression<TKey>, Int32, TResult>, IChunkBalancingStrategyProvider<TKey, TResult>)
  nameWithType: ChunkExtensions.Chunk<TKey, TResult>(Int32, Func<IEnumerableExpression<TKey>, Int32, TResult>, IChunkBalancingStrategyProvider<TKey, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<TKey, TResult>(System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<TKey>, System.Int32, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider<TKey, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of TKey, TResult)(Int32, Func(Of IEnumerableExpression(Of TKey), Int32, TResult), IChunkBalancingStrategyProvider(Of TKey, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of TKey, TResult)(System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of TKey), System.Int32, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of TKey, TResult))
  name.vb: Chunk(Of TKey, TResult)(Int32, Func(Of IEnumerableExpression(Of TKey), Int32, TResult), IChunkBalancingStrategyProvider(Of TKey, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
    name: Chunk<TKey, TResult>
    nameWithType: ChunkExtensions.Chunk<TKey, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
    name: Chunk(Of TKey, TResult)
    nameWithType: ChunkExtensions.Chunk(Of TKey, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TKey}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name: Chunk<TKey, TResult>(Int32, Func<IEnumerableExpression<TKey>, Int32, TResult>, IChunkBalancingStrategyProvider)
  nameWithType: ChunkExtensions.Chunk<TKey, TResult>(Int32, Func<IEnumerableExpression<TKey>, Int32, TResult>, IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<TKey, TResult>(System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<TKey>, System.Int32, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  nameWithType.vb: ChunkExtensions.Chunk(Of TKey, TResult)(Int32, Func(Of IEnumerableExpression(Of TKey), Int32, TResult), IChunkBalancingStrategyProvider)
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of TKey, TResult)(System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of TKey), System.Int32, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: Chunk(Of TKey, TResult)(Int32, Func(Of IEnumerableExpression(Of TKey), Int32, TResult), IChunkBalancingStrategyProvider)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: Chunk<TKey, TResult>
    nameWithType: ChunkExtensions.Chunk<TKey, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<TKey, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: Chunk(Of TKey, TResult)
    nameWithType: ChunkExtensions.Chunk(Of TKey, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of TKey, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  name: WithUpdates<TElement>()
  nameWithType: ObservableExtensions.WithUpdates<TElement>()
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<TElement>()
  nameWithType.vb: ObservableExtensions.WithUpdates(Of TElement)()
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of TElement)()
  name.vb: WithUpdates(Of TElement)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
    name: WithUpdates<TElement>
    nameWithType: ObservableExtensions.WithUpdates<TElement>
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<TElement>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
    name: WithUpdates(Of TElement)
    nameWithType: ObservableExtensions.WithUpdates(Of TElement)
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of TElement)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.Linq.ILookupExpression`2
  commentId: T:NMF.Expressions.Linq.ILookupExpression`2
  name: ILookupExpression<TSource, TKey>
  nameWithType: ILookupExpression<TSource, TKey>
  fullName: NMF.Expressions.Linq.ILookupExpression<TSource, TKey>
  nameWithType.vb: ILookupExpression(Of TSource, TKey)
  fullName.vb: NMF.Expressions.Linq.ILookupExpression(Of TSource, TKey)
  name.vb: ILookupExpression(Of TSource, TKey)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ILookupExpression`2
    name: ILookupExpression
    nameWithType: ILookupExpression
    fullName: NMF.Expressions.Linq.ILookupExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.ILookupExpression`2
    name: ILookupExpression
    nameWithType: ILookupExpression
    fullName: NMF.Expressions.Linq.ILookupExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression`1
  commentId: T:NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<T>
  nameWithType: IEnumerableExpression<T>
  fullName: NMF.Expressions.IEnumerableExpression<T>
  nameWithType.vb: IEnumerableExpression(Of T)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T)
  name.vb: IEnumerableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: ToLookup<TSource, TKey>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>)
  nameWithType: LookupExtensions.ToLookup<TSource, TKey>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>)
  fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TSource, TKey>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  nameWithType.vb: LookupExtensions.ToLookup(Of TSource, TKey)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)))
  fullName.vb: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TSource, TKey)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: ToLookup(Of TSource, TKey)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup<TSource, TKey>
    nameWithType: LookupExtensions.ToLookup<TSource, TKey>
    fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TSource, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup(Of TSource, TKey)
    nameWithType: LookupExtensions.ToLookup(Of TSource, TKey)
    fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TSource, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.LookupExtensions
  commentId: T:NMF.Expressions.Linq.LookupExtensions
  parent: NMF.Expressions.Linq
  name: LookupExtensions
  nameWithType: LookupExtensions
  fullName: NMF.Expressions.Linq.LookupExtensions
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  isExternal: true
  name: ChunkIndexed<T, TResult>(IEnumerable<T>, Int32, Func<IEnumerableExpression<ValueTuple<T, Int32>>, Int32, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(IEnumerable<T>, Int32, Func<IEnumerableExpression<ValueTuple<T, Int32>>, Int32, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<System.ValueTuple<T, System.Int32>>, System.Int32, TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(IEnumerable(Of T), Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of T, Int32)), Int32, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(System.Collections.Generic.IEnumerable(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of System.ValueTuple(Of T, System.Int32)), System.Int32, TResult))
  name.vb: ChunkIndexed(Of T, TResult)(IEnumerable(Of T), Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of T, Int32)), Int32, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed<T, TResult>
    nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed(Of T, TResult)
    nameWithType: ChunkExtensions.ChunkIndexed(Of T, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ChunkExtensions
  commentId: T:NMF.Expressions.Linq.ChunkExtensions
  parent: NMF.Expressions.Linq
  name: ChunkExtensions
  nameWithType: ChunkExtensions
  fullName: NMF.Expressions.Linq.ChunkExtensions
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  isExternal: true
  name: ChunkIndexed<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<ValueTuple<T, Int32>>, Int32, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<ValueTuple<T, Int32>>, Int32, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<System.ValueTuple<T, System.Int32>>, System.Int32, TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of T, Int32)), Int32, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of System.ValueTuple(Of T, System.Int32)), System.Int32, TResult))
  name.vb: ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of T, Int32)), Int32, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed<T, TResult>
    nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed(Of T, TResult)
    nameWithType: ChunkExtensions.ChunkIndexed(Of T, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  isExternal: true
  name: ChunkIndexed<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<ValueTuple<T, Int32>>, Int32, TResult>, IChunkBalancingStrategyProvider<ValueTuple<T, Int32>, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<ValueTuple<T, Int32>>, Int32, TResult>, IChunkBalancingStrategyProvider<ValueTuple<T, Int32>, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<System.ValueTuple<T, System.Int32>>, System.Int32, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider<System.ValueTuple<T, System.Int32>, TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of T, Int32)), Int32, TResult), IChunkBalancingStrategyProvider(Of ValueTuple(Of T, Int32), TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of System.ValueTuple(Of T, System.Int32)), System.Int32, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of System.ValueTuple(Of T, System.Int32), TResult))
  name.vb: ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of T, Int32)), Int32, TResult), IChunkBalancingStrategyProvider(Of ValueTuple(Of T, Int32), TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
    name: ChunkIndexed<T, TResult>
    nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
    name: ChunkIndexed(Of T, TResult)
    nameWithType: ChunkExtensions.ChunkIndexed(Of T, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  isExternal: true
  name: ChunkIndexed<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<ValueTuple<T, Int32>>, Int32, TResult>, IChunkBalancingStrategyProvider)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<ValueTuple<T, Int32>>, Int32, TResult>, IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<System.ValueTuple<T, System.Int32>>, System.Int32, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of T, Int32)), Int32, TResult), IChunkBalancingStrategyProvider)
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of System.ValueTuple(Of T, System.Int32)), System.Int32, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of ValueTuple(Of T, Int32)), Int32, TResult), IChunkBalancingStrategyProvider)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: ChunkIndexed<T, TResult>
    nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: ChunkIndexed(Of T, TResult)
    nameWithType: ChunkExtensions.ChunkIndexed(Of T, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  isExternal: true
  name: Chunk<T, TResult>(IEnumerable<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(IEnumerable<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<T>, System.Int32, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(IEnumerable(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(System.Collections.Generic.IEnumerable(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), System.Int32, TResult))
  name.vb: Chunk(Of T, TResult)(IEnumerable(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
    name: Chunk<T, TResult>
    nameWithType: ChunkExtensions.Chunk<T, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
    name: Chunk(Of T, TResult)
    nameWithType: ChunkExtensions.Chunk(Of T, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  isExternal: true
  name: Chunk<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<T>, System.Int32, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), System.Int32, TResult))
  name.vb: Chunk(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
    name: Chunk<T, TResult>
    nameWithType: ChunkExtensions.Chunk<T, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
    name: Chunk(Of T, TResult)
    nameWithType: ChunkExtensions.Chunk(Of T, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  isExternal: true
  name: Chunk<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>, IChunkBalancingStrategyProvider<T, TResult>)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>, IChunkBalancingStrategyProvider<T, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<T>, System.Int32, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider<T, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult), IChunkBalancingStrategyProvider(Of T, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), System.Int32, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of T, TResult))
  name.vb: Chunk(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult), IChunkBalancingStrategyProvider(Of T, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
    name: Chunk<T, TResult>
    nameWithType: ChunkExtensions.Chunk<T, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
    name: Chunk(Of T, TResult)
    nameWithType: ChunkExtensions.Chunk(Of T, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  isExternal: true
  name: Chunk<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>, IChunkBalancingStrategyProvider)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>, IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<T>, System.Int32, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult), IChunkBalancingStrategyProvider)
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), System.Int32, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: Chunk(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult), IChunkBalancingStrategyProvider)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: Chunk<T, TResult>
    nameWithType: ChunkExtensions.Chunk<T, TResult>
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: Chunk(Of T, TResult)
    nameWithType: ChunkExtensions.Chunk(Of T, TResult)
    fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: WithUpdates<T>(IEnumerable<T>)
  nameWithType: ObservableExtensions.WithUpdates<T>(IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.WithUpdates(Of T)(IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: WithUpdates(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
    name: WithUpdates<T>
    nameWithType: ObservableExtensions.WithUpdates<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
    name: WithUpdates(Of T)
    nameWithType: ObservableExtensions.WithUpdates(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions
  commentId: T:NMF.Expressions.Linq.ObservableExtensions
  parent: NMF.Expressions.Linq
  name: ObservableExtensions
  nameWithType: ObservableExtensions
  fullName: NMF.Expressions.Linq.ObservableExtensions
- uid: NMF.Expressions.Linq.Lookup`2.Keys*
  commentId: Overload:NMF.Expressions.Linq.Lookup`2.Keys
  name: Keys
  nameWithType: Lookup<TSource, TKey>.Keys
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.Keys
  nameWithType.vb: Lookup(Of TSource, TKey).Keys
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).Keys
- uid: NMF.Expressions.Linq.ILookupExpression{{TSource},{TKey}}.Keys
  commentId: P:NMF.Expressions.Linq.ILookupExpression{`0,`1}.Keys
  parent: NMF.Expressions.Linq.ILookupExpression{{TSource},{TKey}}
  definition: NMF.Expressions.Linq.ILookupExpression`2.Keys
  name: Keys
  nameWithType: ILookupExpression<TSource, TKey>.Keys
  fullName: NMF.Expressions.Linq.ILookupExpression<TSource, TKey>.Keys
  nameWithType.vb: ILookupExpression(Of TSource, TKey).Keys
  fullName.vb: NMF.Expressions.Linq.ILookupExpression(Of TSource, TKey).Keys
- uid: NMF.Expressions.Linq.ILookupExpression`2.Keys
  commentId: P:NMF.Expressions.Linq.ILookupExpression`2.Keys
  name: Keys
  nameWithType: ILookupExpression<TSource, TKey>.Keys
  fullName: NMF.Expressions.Linq.ILookupExpression<TSource, TKey>.Keys
  nameWithType.vb: ILookupExpression(Of TSource, TKey).Keys
  fullName.vb: NMF.Expressions.Linq.ILookupExpression(Of TSource, TKey).Keys
- uid: NMF.Expressions.Linq.Lookup`2.#ctor*
  commentId: Overload:NMF.Expressions.Linq.Lookup`2.#ctor
  name: Lookup
  nameWithType: Lookup<TSource, TKey>.Lookup
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.Lookup
  nameWithType.vb: Lookup(Of TSource, TKey).Lookup
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).Lookup
- uid: NMF.Expressions.IEnumerableExpression{{TSource}}
  commentId: T:NMF.Expressions.IEnumerableExpression{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<TSource>
  nameWithType: IEnumerableExpression<TSource>
  fullName: NMF.Expressions.IEnumerableExpression<TSource>
  nameWithType.vb: IEnumerableExpression(Of TSource)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of TSource)
  name.vb: IEnumerableExpression(Of TSource)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc{{TSource},{TKey}}
  commentId: T:NMF.Expressions.ObservingFunc{`0,`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`2
  name: ObservingFunc<TSource, TKey>
  nameWithType: ObservingFunc<TSource, TKey>
  fullName: NMF.Expressions.ObservingFunc<TSource, TKey>
  nameWithType.vb: ObservingFunc(Of TSource, TKey)
  fullName.vb: NMF.Expressions.ObservingFunc(Of TSource, TKey)
  name.vb: ObservingFunc(Of TSource, TKey)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`2
  commentId: T:NMF.Expressions.ObservingFunc`2
  parent: NMF.Expressions
  name: ObservingFunc<T1, TResult>
  nameWithType: ObservingFunc<T1, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>
  nameWithType.vb: ObservingFunc(Of T1, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult)
  name.vb: ObservingFunc(Of T1, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.Lookup`2.Item*
  commentId: Overload:NMF.Expressions.Linq.Lookup`2.Item
  name: Item
  nameWithType: Lookup<TSource, TKey>.Item
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.Item
  nameWithType.vb: Lookup(Of TSource, TKey).Item
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).Item
- uid: NMF.Expressions.Linq.ILookupExpression{{TSource},{TKey}}.Item({TKey})
  commentId: P:NMF.Expressions.Linq.ILookupExpression{`0,`1}.Item(`1)
  parent: NMF.Expressions.Linq.ILookupExpression{{TSource},{TKey}}
  definition: NMF.Expressions.Linq.ILookupExpression`2.Item(`1)
  name: Item[TKey]
  nameWithType: ILookupExpression<TSource, TKey>.Item[TKey]
  fullName: NMF.Expressions.Linq.ILookupExpression<TSource, TKey>.Item[TKey]
  nameWithType.vb: ILookupExpression(Of TSource, TKey).Item(TKey)
  fullName.vb: NMF.Expressions.Linq.ILookupExpression(Of TSource, TKey).Item(TKey)
  name.vb: Item(TKey)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ILookupExpression`2.Item(`1)
    name: Item
    nameWithType: ILookupExpression<TSource, TKey>.Item
    fullName: NMF.Expressions.Linq.ILookupExpression<TSource, TKey>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: NMF.Expressions.Linq.ILookupExpression`2.Item(`1)
    name: Item
    nameWithType: ILookupExpression(Of TSource, TKey).Item
    fullName: NMF.Expressions.Linq.ILookupExpression(Of TSource, TKey).Item
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: NMF.Expressions.Linq.ILookupExpression`2.Item(`1)
  commentId: P:NMF.Expressions.Linq.ILookupExpression`2.Item(`1)
  name: Item[TKey]
  nameWithType: ILookupExpression<TSource, TKey>.Item[TKey]
  fullName: NMF.Expressions.Linq.ILookupExpression<TSource, TKey>.Item[TKey]
  nameWithType.vb: ILookupExpression(Of TSource, TKey).Item(TKey)
  fullName.vb: NMF.Expressions.Linq.ILookupExpression(Of TSource, TKey).Item(TKey)
  name.vb: Item(TKey)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ILookupExpression`2.Item(`1)
    name: Item
    nameWithType: ILookupExpression<TSource, TKey>.Item
    fullName: NMF.Expressions.Linq.ILookupExpression<TSource, TKey>.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: NMF.Expressions.Linq.ILookupExpression`2.Item(`1)
    name: Item
    nameWithType: ILookupExpression(Of TSource, TKey).Item
    fullName: NMF.Expressions.Linq.ILookupExpression(Of TSource, TKey).Item
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: NMF.Expressions.Linq.Lookup`2.AsNotifiable*
  commentId: Overload:NMF.Expressions.Linq.Lookup`2.AsNotifiable
  name: AsNotifiable
  nameWithType: Lookup<TSource, TKey>.AsNotifiable
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.AsNotifiable
  nameWithType.vb: Lookup(Of TSource, TKey).AsNotifiable
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).AsNotifiable
- uid: NMF.Expressions.IEnumerableExpression{{TKey}}.AsNotifiable
  commentId: M:NMF.Expressions.IEnumerableExpression{`1}.AsNotifiable
  parent: NMF.Expressions.IEnumerableExpression{{TKey}}
  definition: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
  name: AsNotifiable()
  nameWithType: IEnumerableExpression<TKey>.AsNotifiable()
  fullName: NMF.Expressions.IEnumerableExpression<TKey>.AsNotifiable()
  nameWithType.vb: IEnumerableExpression(Of TKey).AsNotifiable()
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of TKey).AsNotifiable()
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression<TKey>.AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression<TKey>.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression(Of TKey).AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression(Of TKey).AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{{TKey}}
  commentId: T:NMF.Expressions.INotifyEnumerable{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<TKey>
  nameWithType: INotifyEnumerable<TKey>
  fullName: NMF.Expressions.INotifyEnumerable<TKey>
  nameWithType.vb: INotifyEnumerable(Of TKey)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of TKey)
  name.vb: INotifyEnumerable(Of TKey)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
  commentId: M:NMF.Expressions.IEnumerableExpression`1.AsNotifiable
  name: AsNotifiable()
  nameWithType: IEnumerableExpression<T>.AsNotifiable()
  fullName: NMF.Expressions.IEnumerableExpression<T>.AsNotifiable()
  nameWithType.vb: IEnumerableExpression(Of T).AsNotifiable()
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T).AsNotifiable()
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression<T>.AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression<T>.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression(Of T).AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression(Of T).AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable`1
  commentId: T:NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<T>
  nameWithType: INotifyEnumerable<T>
  fullName: NMF.Expressions.INotifyEnumerable<T>
  nameWithType.vb: INotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of T)
  name.vb: INotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.Lookup`2.GetEnumerator*
  commentId: Overload:NMF.Expressions.Linq.Lookup`2.GetEnumerator
  name: GetEnumerator
  nameWithType: Lookup<TSource, TKey>.GetEnumerator
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.GetEnumerator
  nameWithType.vb: Lookup(Of TSource, TKey).GetEnumerator
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{TKey}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`1}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{TKey}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<TKey>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<TKey>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of TKey).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of TKey).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<TKey>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<TKey>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of TKey).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of TKey).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{TKey}}
  commentId: T:System.Collections.Generic.IEnumerator{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<TKey>
  nameWithType: IEnumerator<TKey>
  fullName: System.Collections.Generic.IEnumerator<TKey>
  nameWithType.vb: IEnumerator(Of TKey)
  fullName.vb: System.Collections.Generic.IEnumerator(Of TKey)
  name.vb: IEnumerator(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.Lookup`2.NMF#Expressions#IEnumerableExpression#AsNotifiable*
  commentId: Overload:NMF.Expressions.Linq.Lookup`2.NMF#Expressions#IEnumerableExpression#AsNotifiable
  name: IEnumerableExpression.AsNotifiable
  nameWithType: Lookup<TSource, TKey>.IEnumerableExpression.AsNotifiable
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.NMF.Expressions.IEnumerableExpression.AsNotifiable
  nameWithType.vb: Lookup(Of TSource, TKey).NMF.Expressions.IEnumerableExpression.AsNotifiable
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).NMF.Expressions.IEnumerableExpression.AsNotifiable
  name.vb: NMF.Expressions.IEnumerableExpression.AsNotifiable
- uid: NMF.Expressions.IEnumerableExpression.AsNotifiable
  commentId: M:NMF.Expressions.IEnumerableExpression.AsNotifiable
  parent: NMF.Expressions.IEnumerableExpression
  name: AsNotifiable()
  nameWithType: IEnumerableExpression.AsNotifiable()
  fullName: NMF.Expressions.IEnumerableExpression.AsNotifiable()
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression.AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression.AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable
  commentId: T:NMF.Expressions.INotifyEnumerable
  parent: NMF.Expressions
  name: INotifyEnumerable
  nameWithType: INotifyEnumerable
  fullName: NMF.Expressions.INotifyEnumerable
- uid: NMF.Expressions.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:NMF.Expressions.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: Lookup<TSource, TKey>.IEnumerable.GetEnumerator
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: Lookup(Of TSource, TKey).System.Collections.IEnumerable.GetEnumerator
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: NMF.Expressions.Linq.Lookup`2.NMF#Expressions#Linq#ILookupExpression{TSource,TKey}#AsNotifiable*
  commentId: Overload:NMF.Expressions.Linq.Lookup`2.NMF#Expressions#Linq#ILookupExpression{TSource,TKey}#AsNotifiable
  name: ILookupExpression<TSource, TKey>.AsNotifiable
  nameWithType: Lookup<TSource, TKey>.ILookupExpression<TSource, TKey>.AsNotifiable
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.NMF.Expressions.Linq.ILookupExpression<TSource, TKey>.AsNotifiable
  nameWithType.vb: Lookup(Of TSource, TKey).NMF.Expressions.Linq.ILookupExpression<TSource,TKey>.AsNotifiable
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).NMF.Expressions.Linq.ILookupExpression<TSource,TKey>.AsNotifiable
  name.vb: NMF.Expressions.Linq.ILookupExpression<TSource,TKey>.AsNotifiable
- uid: NMF.Expressions.Linq.ILookupExpression{{TSource},{TKey}}.AsNotifiable
  commentId: M:NMF.Expressions.Linq.ILookupExpression{`0,`1}.AsNotifiable
  parent: NMF.Expressions.Linq.ILookupExpression{{TSource},{TKey}}
  definition: NMF.Expressions.Linq.ILookupExpression`2.AsNotifiable
  name: AsNotifiable()
  nameWithType: ILookupExpression<TSource, TKey>.AsNotifiable()
  fullName: NMF.Expressions.Linq.ILookupExpression<TSource, TKey>.AsNotifiable()
  nameWithType.vb: ILookupExpression(Of TSource, TKey).AsNotifiable()
  fullName.vb: NMF.Expressions.Linq.ILookupExpression(Of TSource, TKey).AsNotifiable()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ILookupExpression`2.AsNotifiable
    name: AsNotifiable
    nameWithType: ILookupExpression<TSource, TKey>.AsNotifiable
    fullName: NMF.Expressions.Linq.ILookupExpression<TSource, TKey>.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ILookupExpression`2.AsNotifiable
    name: AsNotifiable
    nameWithType: ILookupExpression(Of TSource, TKey).AsNotifiable
    fullName: NMF.Expressions.Linq.ILookupExpression(Of TSource, TKey).AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.INotifyLookup{{TSource},{TKey}}
  commentId: T:NMF.Expressions.Linq.INotifyLookup{`0,`1}
  parent: NMF.Expressions.Linq
  definition: NMF.Expressions.Linq.INotifyLookup`2
  name: INotifyLookup<TSource, TKey>
  nameWithType: INotifyLookup<TSource, TKey>
  fullName: NMF.Expressions.Linq.INotifyLookup<TSource, TKey>
  nameWithType.vb: INotifyLookup(Of TSource, TKey)
  fullName.vb: NMF.Expressions.Linq.INotifyLookup(Of TSource, TKey)
  name.vb: INotifyLookup(Of TSource, TKey)
  spec.csharp:
  - uid: NMF.Expressions.Linq.INotifyLookup`2
    name: INotifyLookup
    nameWithType: INotifyLookup
    fullName: NMF.Expressions.Linq.INotifyLookup
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.INotifyLookup`2
    name: INotifyLookup
    nameWithType: INotifyLookup
    fullName: NMF.Expressions.Linq.INotifyLookup
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ILookupExpression`2.AsNotifiable
  commentId: M:NMF.Expressions.Linq.ILookupExpression`2.AsNotifiable
  name: AsNotifiable()
  nameWithType: ILookupExpression<TSource, TKey>.AsNotifiable()
  fullName: NMF.Expressions.Linq.ILookupExpression<TSource, TKey>.AsNotifiable()
  nameWithType.vb: ILookupExpression(Of TSource, TKey).AsNotifiable()
  fullName.vb: NMF.Expressions.Linq.ILookupExpression(Of TSource, TKey).AsNotifiable()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ILookupExpression`2.AsNotifiable
    name: AsNotifiable
    nameWithType: ILookupExpression<TSource, TKey>.AsNotifiable
    fullName: NMF.Expressions.Linq.ILookupExpression<TSource, TKey>.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ILookupExpression`2.AsNotifiable
    name: AsNotifiable
    nameWithType: ILookupExpression(Of TSource, TKey).AsNotifiable
    fullName: NMF.Expressions.Linq.ILookupExpression(Of TSource, TKey).AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.INotifyLookup`2
  commentId: T:NMF.Expressions.Linq.INotifyLookup`2
  name: INotifyLookup<TSource, TKey>
  nameWithType: INotifyLookup<TSource, TKey>
  fullName: NMF.Expressions.Linq.INotifyLookup<TSource, TKey>
  nameWithType.vb: INotifyLookup(Of TSource, TKey)
  fullName.vb: NMF.Expressions.Linq.INotifyLookup(Of TSource, TKey)
  name.vb: INotifyLookup(Of TSource, TKey)
  spec.csharp:
  - uid: NMF.Expressions.Linq.INotifyLookup`2
    name: INotifyLookup
    nameWithType: INotifyLookup
    fullName: NMF.Expressions.Linq.INotifyLookup
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.INotifyLookup`2
    name: INotifyLookup
    nameWithType: INotifyLookup
    fullName: NMF.Expressions.Linq.INotifyLookup
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
