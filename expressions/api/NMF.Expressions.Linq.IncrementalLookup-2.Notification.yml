### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification
  commentId: T:NMF.Expressions.Linq.IncrementalLookup`2.Notification
  id: IncrementalLookup`2.Notification
  parent: NMF.Expressions.Linq
  children:
  - NMF.Expressions.Linq.IncrementalLookup`2.Notification.#ctor(NMF.Expressions.Linq.IncrementalLookup{`0,`1})
  - NMF.Expressions.Linq.IncrementalLookup`2.Notification.AddedItems
  - NMF.Expressions.Linq.IncrementalLookup`2.Notification.Changed
  - NMF.Expressions.Linq.IncrementalLookup`2.Notification.FreeReference
  - NMF.Expressions.Linq.IncrementalLookup`2.Notification.IncreaseReferences(System.Int32)
  - NMF.Expressions.Linq.IncrementalLookup`2.Notification.IsReset
  - NMF.Expressions.Linq.IncrementalLookup`2.Notification.Item(`1)
  - NMF.Expressions.Linq.IncrementalLookup`2.Notification.MovedItems
  - NMF.Expressions.Linq.IncrementalLookup`2.Notification.NewItemsStartIndex
  - NMF.Expressions.Linq.IncrementalLookup`2.Notification.NMF#Expressions#ICollectionChangedNotificationResult#AddedItems
  - NMF.Expressions.Linq.IncrementalLookup`2.Notification.NMF#Expressions#ICollectionChangedNotificationResult#MovedItems
  - NMF.Expressions.Linq.IncrementalLookup`2.Notification.NMF#Expressions#ICollectionChangedNotificationResult#RemovedItems
  - NMF.Expressions.Linq.IncrementalLookup`2.Notification.OldItemsStartIndex
  - NMF.Expressions.Linq.IncrementalLookup`2.Notification.RemovedItems
  - NMF.Expressions.Linq.IncrementalLookup`2.Notification.Reset
  - NMF.Expressions.Linq.IncrementalLookup`2.Notification.Source
  langs:
  - csharp
  - vb
  name: IncrementalLookup<TSource, TKey>.Notification
  nameWithType: IncrementalLookup<TSource, TKey>.Notification
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification
  type: Class
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Notification
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 230
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: 'protected class Notification : ICollectionChangedNotificationResult<TKey>, ICollectionChangedNotificationResult, INotificationResult'
    content.vb: >-
      Protected Class Notification

          Implements ICollectionChangedNotificationResult(Of TKey), ICollectionChangedNotificationResult, INotificationResult
  inheritance:
  - System.Object
  implements:
  - NMF.Expressions.ICollectionChangedNotificationResult{{TKey}}
  - NMF.Expressions.ICollectionChangedNotificationResult
  - NMF.Expressions.INotificationResult
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification
  modifiers.csharp:
  - protected
  - class
  modifiers.vb:
  - Protected
  - Class
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification
  name.vb: IncrementalLookup(Of TSource, TKey).Notification
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.#ctor(NMF.Expressions.Linq.IncrementalLookup{`0,`1})
  commentId: M:NMF.Expressions.Linq.IncrementalLookup`2.Notification.#ctor(NMF.Expressions.Linq.IncrementalLookup{`0,`1})
  id: '#ctor(NMF.Expressions.Linq.IncrementalLookup{`0,`1})'
  parent: NMF.Expressions.Linq.IncrementalLookup`2.Notification
  langs:
  - csharp
  - vb
  name: Notification(IncrementalLookup<TSource, TKey>)
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.Notification(IncrementalLookup<TSource, TKey>)
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.Notification(NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>)
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 238
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: public Notification(IncrementalLookup<TSource, TKey> parent)
    parameters:
    - id: parent
      type: NMF.Expressions.Linq.IncrementalLookup`2
    content.vb: Public Sub New(parent As IncrementalLookup(Of TSource, TKey))
  overload: NMF.Expressions.Linq.IncrementalLookup`2.Notification.#ctor*
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.Notification(IncrementalLookup(Of TSource, TKey))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.Notification(NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey))
  name.vb: Notification(IncrementalLookup(Of TSource, TKey))
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.Item(`1)
  commentId: P:NMF.Expressions.Linq.IncrementalLookup`2.Notification.Item(`1)
  id: Item(`1)
  parent: NMF.Expressions.Linq.IncrementalLookup`2.Notification
  langs:
  - csharp
  - vb
  name: Item[TKey]
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.Item[TKey]
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.Item[TKey]
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: this[]
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 243
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: public CollectionChangedNotificationResult<TSource> this[TKey key] { get; set; }
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: NMF.Expressions.CollectionChangedNotificationResult{{TSource}}
    content.vb: Public Property Item(key As TKey) As CollectionChangedNotificationResult(Of TSource)
  overload: NMF.Expressions.Linq.IncrementalLookup`2.Notification.Item*
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.Item(TKey)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.Item(TKey)
  name.vb: Item(TKey)
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.Reset
  commentId: M:NMF.Expressions.Linq.IncrementalLookup`2.Notification.Reset
  id: Reset
  parent: NMF.Expressions.Linq.IncrementalLookup`2.Notification
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.Reset()
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.Reset()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Reset
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 262
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
  overload: NMF.Expressions.Linq.IncrementalLookup`2.Notification.Reset*
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.Reset()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.Reset()
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.Source
  commentId: P:NMF.Expressions.Linq.IncrementalLookup`2.Notification.Source
  id: Source
  parent: NMF.Expressions.Linq.IncrementalLookup`2.Notification
  langs:
  - csharp
  - vb
  name: Source
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.Source
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.Source
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Source
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 270
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: public INotifiable Source { get; }
    parameters: []
    return:
      type: NMF.Expressions.INotifiable
    content.vb: Public ReadOnly Property Source As INotifiable
  overload: NMF.Expressions.Linq.IncrementalLookup`2.Notification.Source*
  implements:
  - NMF.Expressions.INotificationResult.Source
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.Source
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.Source
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.Changed
  commentId: P:NMF.Expressions.Linq.IncrementalLookup`2.Notification.Changed
  id: Changed
  parent: NMF.Expressions.Linq.IncrementalLookup`2.Notification
  langs:
  - csharp
  - vb
  name: Changed
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.Changed
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.Changed
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Changed
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 272
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: public bool Changed { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Changed As Boolean
  overload: NMF.Expressions.Linq.IncrementalLookup`2.Notification.Changed*
  implements:
  - NMF.Expressions.INotificationResult.Changed
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.Changed
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.Changed
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.AddedItems
  commentId: P:NMF.Expressions.Linq.IncrementalLookup`2.Notification.AddedItems
  id: AddedItems
  parent: NMF.Expressions.Linq.IncrementalLookup`2.Notification
  langs:
  - csharp
  - vb
  name: AddedItems
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.AddedItems
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.AddedItems
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AddedItems
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 274
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: public List<TKey> AddedItems { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{{TKey}}
    content.vb: Public ReadOnly Property AddedItems As List(Of TKey)
  overload: NMF.Expressions.Linq.IncrementalLookup`2.Notification.AddedItems*
  implements:
  - NMF.Expressions.ICollectionChangedNotificationResult{{TKey}}.AddedItems
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.AddedItems
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.AddedItems
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.RemovedItems
  commentId: P:NMF.Expressions.Linq.IncrementalLookup`2.Notification.RemovedItems
  id: RemovedItems
  parent: NMF.Expressions.Linq.IncrementalLookup`2.Notification
  langs:
  - csharp
  - vb
  name: RemovedItems
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.RemovedItems
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.RemovedItems
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RemovedItems
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 279
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: public List<TKey> RemovedItems { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{{TKey}}
    content.vb: Public ReadOnly Property RemovedItems As List(Of TKey)
  overload: NMF.Expressions.Linq.IncrementalLookup`2.Notification.RemovedItems*
  implements:
  - NMF.Expressions.ICollectionChangedNotificationResult{{TKey}}.RemovedItems
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.RemovedItems
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.RemovedItems
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.MovedItems
  commentId: P:NMF.Expressions.Linq.IncrementalLookup`2.Notification.MovedItems
  id: MovedItems
  parent: NMF.Expressions.Linq.IncrementalLookup`2.Notification
  langs:
  - csharp
  - vb
  name: MovedItems
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.MovedItems
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.MovedItems
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: MovedItems
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 284
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: public List<TKey> MovedItems { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{{TKey}}
    content.vb: Public ReadOnly Property MovedItems As List(Of TKey)
  overload: NMF.Expressions.Linq.IncrementalLookup`2.Notification.MovedItems*
  implements:
  - NMF.Expressions.ICollectionChangedNotificationResult{{TKey}}.MovedItems
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.MovedItems
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.MovedItems
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.IsReset
  commentId: P:NMF.Expressions.Linq.IncrementalLookup`2.Notification.IsReset
  id: IsReset
  parent: NMF.Expressions.Linq.IncrementalLookup`2.Notification
  langs:
  - csharp
  - vb
  name: IsReset
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.IsReset
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.IsReset
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsReset
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 289
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: public bool IsReset { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReset As Boolean
  overload: NMF.Expressions.Linq.IncrementalLookup`2.Notification.IsReset*
  implements:
  - NMF.Expressions.ICollectionChangedNotificationResult.IsReset
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.IsReset
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.IsReset
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.NMF#Expressions#ICollectionChangedNotificationResult#AddedItems
  commentId: P:NMF.Expressions.Linq.IncrementalLookup`2.Notification.NMF#Expressions#ICollectionChangedNotificationResult#AddedItems
  id: NMF#Expressions#ICollectionChangedNotificationResult#AddedItems
  isEii: true
  parent: NMF.Expressions.Linq.IncrementalLookup`2.Notification
  langs:
  - csharp
  - vb
  name: ICollectionChangedNotificationResult.AddedItems
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.ICollectionChangedNotificationResult.AddedItems
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.NMF.Expressions.ICollectionChangedNotificationResult.AddedItems
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Expressions.ICollectionChangedNotificationResult.AddedItems
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 294
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: IList ICollectionChangedNotificationResult.AddedItems { get; }
    parameters: []
    return:
      type: System.Collections.IList
    content.vb: ReadOnly WriteOnly Property NMF.Expressions.ICollectionChangedNotificationResult.AddedItems As IList Implements ICollectionChangedNotificationResult.AddedItems
  overload: NMF.Expressions.Linq.IncrementalLookup`2.Notification.NMF#Expressions#ICollectionChangedNotificationResult#AddedItems*
  implements:
  - NMF.Expressions.ICollectionChangedNotificationResult.AddedItems
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.NMF.Expressions.ICollectionChangedNotificationResult.AddedItems
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.NMF.Expressions.ICollectionChangedNotificationResult.AddedItems
  name.vb: NMF.Expressions.ICollectionChangedNotificationResult.AddedItems
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.NMF#Expressions#ICollectionChangedNotificationResult#RemovedItems
  commentId: P:NMF.Expressions.Linq.IncrementalLookup`2.Notification.NMF#Expressions#ICollectionChangedNotificationResult#RemovedItems
  id: NMF#Expressions#ICollectionChangedNotificationResult#RemovedItems
  isEii: true
  parent: NMF.Expressions.Linq.IncrementalLookup`2.Notification
  langs:
  - csharp
  - vb
  name: ICollectionChangedNotificationResult.RemovedItems
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.ICollectionChangedNotificationResult.RemovedItems
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.NMF.Expressions.ICollectionChangedNotificationResult.RemovedItems
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Expressions.ICollectionChangedNotificationResult.RemovedItems
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 299
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: IList ICollectionChangedNotificationResult.RemovedItems { get; }
    parameters: []
    return:
      type: System.Collections.IList
    content.vb: ReadOnly WriteOnly Property NMF.Expressions.ICollectionChangedNotificationResult.RemovedItems As IList Implements ICollectionChangedNotificationResult.RemovedItems
  overload: NMF.Expressions.Linq.IncrementalLookup`2.Notification.NMF#Expressions#ICollectionChangedNotificationResult#RemovedItems*
  implements:
  - NMF.Expressions.ICollectionChangedNotificationResult.RemovedItems
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.NMF.Expressions.ICollectionChangedNotificationResult.RemovedItems
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.NMF.Expressions.ICollectionChangedNotificationResult.RemovedItems
  name.vb: NMF.Expressions.ICollectionChangedNotificationResult.RemovedItems
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.NMF#Expressions#ICollectionChangedNotificationResult#MovedItems
  commentId: P:NMF.Expressions.Linq.IncrementalLookup`2.Notification.NMF#Expressions#ICollectionChangedNotificationResult#MovedItems
  id: NMF#Expressions#ICollectionChangedNotificationResult#MovedItems
  isEii: true
  parent: NMF.Expressions.Linq.IncrementalLookup`2.Notification
  langs:
  - csharp
  - vb
  name: ICollectionChangedNotificationResult.MovedItems
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.ICollectionChangedNotificationResult.MovedItems
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.NMF.Expressions.ICollectionChangedNotificationResult.MovedItems
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Expressions.ICollectionChangedNotificationResult.MovedItems
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 304
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: IList ICollectionChangedNotificationResult.MovedItems { get; }
    parameters: []
    return:
      type: System.Collections.IList
    content.vb: ReadOnly WriteOnly Property NMF.Expressions.ICollectionChangedNotificationResult.MovedItems As IList Implements ICollectionChangedNotificationResult.MovedItems
  overload: NMF.Expressions.Linq.IncrementalLookup`2.Notification.NMF#Expressions#ICollectionChangedNotificationResult#MovedItems*
  implements:
  - NMF.Expressions.ICollectionChangedNotificationResult.MovedItems
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.NMF.Expressions.ICollectionChangedNotificationResult.MovedItems
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.NMF.Expressions.ICollectionChangedNotificationResult.MovedItems
  name.vb: NMF.Expressions.ICollectionChangedNotificationResult.MovedItems
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.OldItemsStartIndex
  commentId: P:NMF.Expressions.Linq.IncrementalLookup`2.Notification.OldItemsStartIndex
  id: OldItemsStartIndex
  parent: NMF.Expressions.Linq.IncrementalLookup`2.Notification
  langs:
  - csharp
  - vb
  name: OldItemsStartIndex
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.OldItemsStartIndex
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.OldItemsStartIndex
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OldItemsStartIndex
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 309
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: public int OldItemsStartIndex { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property OldItemsStartIndex As Integer
  overload: NMF.Expressions.Linq.IncrementalLookup`2.Notification.OldItemsStartIndex*
  implements:
  - NMF.Expressions.ICollectionChangedNotificationResult.OldItemsStartIndex
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.OldItemsStartIndex
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.OldItemsStartIndex
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.NewItemsStartIndex
  commentId: P:NMF.Expressions.Linq.IncrementalLookup`2.Notification.NewItemsStartIndex
  id: NewItemsStartIndex
  parent: NMF.Expressions.Linq.IncrementalLookup`2.Notification
  langs:
  - csharp
  - vb
  name: NewItemsStartIndex
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.NewItemsStartIndex
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.NewItemsStartIndex
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NewItemsStartIndex
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 311
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: public int NewItemsStartIndex { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property NewItemsStartIndex As Integer
  overload: NMF.Expressions.Linq.IncrementalLookup`2.Notification.NewItemsStartIndex*
  implements:
  - NMF.Expressions.ICollectionChangedNotificationResult.NewItemsStartIndex
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.NewItemsStartIndex
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.NewItemsStartIndex
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.FreeReference
  commentId: M:NMF.Expressions.Linq.IncrementalLookup`2.Notification.FreeReference
  id: FreeReference
  parent: NMF.Expressions.Linq.IncrementalLookup`2.Notification
  langs:
  - csharp
  - vb
  name: FreeReference()
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.FreeReference()
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.FreeReference()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: FreeReference
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 313
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: public void FreeReference()
    content.vb: Public Sub FreeReference
  overload: NMF.Expressions.Linq.IncrementalLookup`2.Notification.FreeReference*
  implements:
  - NMF.Expressions.INotificationResult.FreeReference
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.FreeReference()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.FreeReference()
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.IncreaseReferences(System.Int32)
  commentId: M:NMF.Expressions.Linq.IncrementalLookup`2.Notification.IncreaseReferences(System.Int32)
  id: IncreaseReferences(System.Int32)
  parent: NMF.Expressions.Linq.IncrementalLookup`2.Notification
  langs:
  - csharp
  - vb
  name: IncreaseReferences(Int32)
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.IncreaseReferences(Int32)
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.IncreaseReferences(System.Int32)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IncreaseReferences
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 317
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: public void IncreaseReferences(int references)
    parameters:
    - id: references
      type: System.Int32
    content.vb: Public Sub IncreaseReferences(references As Integer)
  overload: NMF.Expressions.Linq.IncrementalLookup`2.Notification.IncreaseReferences*
  implements:
  - NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.IncreaseReferences(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.IncreaseReferences(System.Int32)
references:
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Expressions.ICollectionChangedNotificationResult{{TKey}}
  commentId: T:NMF.Expressions.ICollectionChangedNotificationResult{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.ICollectionChangedNotificationResult`1
  name: ICollectionChangedNotificationResult<TKey>
  nameWithType: ICollectionChangedNotificationResult<TKey>
  fullName: NMF.Expressions.ICollectionChangedNotificationResult<TKey>
  nameWithType.vb: ICollectionChangedNotificationResult(Of TKey)
  fullName.vb: NMF.Expressions.ICollectionChangedNotificationResult(Of TKey)
  name.vb: ICollectionChangedNotificationResult(Of TKey)
  spec.csharp:
  - uid: NMF.Expressions.ICollectionChangedNotificationResult`1
    name: ICollectionChangedNotificationResult
    nameWithType: ICollectionChangedNotificationResult
    fullName: NMF.Expressions.ICollectionChangedNotificationResult
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ICollectionChangedNotificationResult`1
    name: ICollectionChangedNotificationResult
    nameWithType: ICollectionChangedNotificationResult
    fullName: NMF.Expressions.ICollectionChangedNotificationResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ICollectionChangedNotificationResult
  commentId: T:NMF.Expressions.ICollectionChangedNotificationResult
  parent: NMF.Expressions
  name: ICollectionChangedNotificationResult
  nameWithType: ICollectionChangedNotificationResult
  fullName: NMF.Expressions.ICollectionChangedNotificationResult
- uid: NMF.Expressions.INotificationResult
  commentId: T:NMF.Expressions.INotificationResult
  parent: NMF.Expressions
  name: INotificationResult
  nameWithType: INotificationResult
  fullName: NMF.Expressions.INotificationResult
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.ICollectionChangedNotificationResult`1
  commentId: T:NMF.Expressions.ICollectionChangedNotificationResult`1
  name: ICollectionChangedNotificationResult<T>
  nameWithType: ICollectionChangedNotificationResult<T>
  fullName: NMF.Expressions.ICollectionChangedNotificationResult<T>
  nameWithType.vb: ICollectionChangedNotificationResult(Of T)
  fullName.vb: NMF.Expressions.ICollectionChangedNotificationResult(Of T)
  name.vb: ICollectionChangedNotificationResult(Of T)
  spec.csharp:
  - uid: NMF.Expressions.ICollectionChangedNotificationResult`1
    name: ICollectionChangedNotificationResult
    nameWithType: ICollectionChangedNotificationResult
    fullName: NMF.Expressions.ICollectionChangedNotificationResult
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ICollectionChangedNotificationResult`1
    name: ICollectionChangedNotificationResult
    nameWithType: ICollectionChangedNotificationResult
    fullName: NMF.Expressions.ICollectionChangedNotificationResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.#ctor*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.Notification.#ctor
  name: Notification
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.Notification
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.Notification
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.Notification
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.Notification
- uid: NMF.Expressions.Linq.IncrementalLookup`2
  commentId: T:NMF.Expressions.Linq.IncrementalLookup`2
  parent: NMF.Expressions.Linq
  name: IncrementalLookup<TSource, TKey>
  nameWithType: IncrementalLookup<TSource, TKey>
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>
  nameWithType.vb: IncrementalLookup(Of TSource, TKey)
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey)
  name.vb: IncrementalLookup(Of TSource, TKey)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IncrementalLookup`2
    name: IncrementalLookup
    nameWithType: IncrementalLookup
    fullName: NMF.Expressions.Linq.IncrementalLookup
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IncrementalLookup`2
    name: IncrementalLookup
    nameWithType: IncrementalLookup
    fullName: NMF.Expressions.Linq.IncrementalLookup
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.Item*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.Notification.Item
  name: Item
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.Item
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.Item
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.Item
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.Item
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: NMF.Expressions.CollectionChangedNotificationResult{{TSource}}
  commentId: T:NMF.Expressions.CollectionChangedNotificationResult{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.CollectionChangedNotificationResult`1
  name: CollectionChangedNotificationResult<TSource>
  nameWithType: CollectionChangedNotificationResult<TSource>
  fullName: NMF.Expressions.CollectionChangedNotificationResult<TSource>
  nameWithType.vb: CollectionChangedNotificationResult(Of TSource)
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of TSource)
  name.vb: CollectionChangedNotificationResult(Of TSource)
  spec.csharp:
  - uid: NMF.Expressions.CollectionChangedNotificationResult`1
    name: CollectionChangedNotificationResult
    nameWithType: CollectionChangedNotificationResult
    fullName: NMF.Expressions.CollectionChangedNotificationResult
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.CollectionChangedNotificationResult`1
    name: CollectionChangedNotificationResult
    nameWithType: CollectionChangedNotificationResult
    fullName: NMF.Expressions.CollectionChangedNotificationResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: NMF.Expressions.CollectionChangedNotificationResult`1
  commentId: T:NMF.Expressions.CollectionChangedNotificationResult`1
  parent: NMF.Expressions
  name: CollectionChangedNotificationResult<T>
  nameWithType: CollectionChangedNotificationResult<T>
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>
  nameWithType.vb: CollectionChangedNotificationResult(Of T)
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T)
  name.vb: CollectionChangedNotificationResult(Of T)
  spec.csharp:
  - uid: NMF.Expressions.CollectionChangedNotificationResult`1
    name: CollectionChangedNotificationResult
    nameWithType: CollectionChangedNotificationResult
    fullName: NMF.Expressions.CollectionChangedNotificationResult
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.CollectionChangedNotificationResult`1
    name: CollectionChangedNotificationResult
    nameWithType: CollectionChangedNotificationResult
    fullName: NMF.Expressions.CollectionChangedNotificationResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.Reset*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.Notification.Reset
  name: Reset
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.Reset
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.Reset
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.Reset
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.Reset
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.Source*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.Notification.Source
  name: Source
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.Source
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.Source
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.Source
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.Source
- uid: NMF.Expressions.INotificationResult.Source
  commentId: P:NMF.Expressions.INotificationResult.Source
  parent: NMF.Expressions.INotificationResult
  name: Source
  nameWithType: INotificationResult.Source
  fullName: NMF.Expressions.INotificationResult.Source
- uid: NMF.Expressions.INotifiable
  commentId: T:NMF.Expressions.INotifiable
  parent: NMF.Expressions
  name: INotifiable
  nameWithType: INotifiable
  fullName: NMF.Expressions.INotifiable
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.Changed*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.Notification.Changed
  name: Changed
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.Changed
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.Changed
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.Changed
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.Changed
- uid: NMF.Expressions.INotificationResult.Changed
  commentId: P:NMF.Expressions.INotificationResult.Changed
  parent: NMF.Expressions.INotificationResult
  name: Changed
  nameWithType: INotificationResult.Changed
  fullName: NMF.Expressions.INotificationResult.Changed
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.AddedItems*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.Notification.AddedItems
  name: AddedItems
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.AddedItems
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.AddedItems
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.AddedItems
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.AddedItems
- uid: NMF.Expressions.ICollectionChangedNotificationResult{{TKey}}.AddedItems
  commentId: P:NMF.Expressions.ICollectionChangedNotificationResult{`1}.AddedItems
  parent: NMF.Expressions.ICollectionChangedNotificationResult{{TKey}}
  definition: NMF.Expressions.ICollectionChangedNotificationResult`1.AddedItems
  name: AddedItems
  nameWithType: ICollectionChangedNotificationResult<TKey>.AddedItems
  fullName: NMF.Expressions.ICollectionChangedNotificationResult<TKey>.AddedItems
  nameWithType.vb: ICollectionChangedNotificationResult(Of TKey).AddedItems
  fullName.vb: NMF.Expressions.ICollectionChangedNotificationResult(Of TKey).AddedItems
- uid: System.Collections.Generic.List{{TKey}}
  commentId: T:System.Collections.Generic.List{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TKey>
  nameWithType: List<TKey>
  fullName: System.Collections.Generic.List<TKey>
  nameWithType.vb: List(Of TKey)
  fullName.vb: System.Collections.Generic.List(Of TKey)
  name.vb: List(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ICollectionChangedNotificationResult`1.AddedItems
  commentId: P:NMF.Expressions.ICollectionChangedNotificationResult`1.AddedItems
  name: AddedItems
  nameWithType: ICollectionChangedNotificationResult<T>.AddedItems
  fullName: NMF.Expressions.ICollectionChangedNotificationResult<T>.AddedItems
  nameWithType.vb: ICollectionChangedNotificationResult(Of T).AddedItems
  fullName.vb: NMF.Expressions.ICollectionChangedNotificationResult(Of T).AddedItems
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.RemovedItems*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.Notification.RemovedItems
  name: RemovedItems
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.RemovedItems
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.RemovedItems
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.RemovedItems
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.RemovedItems
- uid: NMF.Expressions.ICollectionChangedNotificationResult{{TKey}}.RemovedItems
  commentId: P:NMF.Expressions.ICollectionChangedNotificationResult{`1}.RemovedItems
  parent: NMF.Expressions.ICollectionChangedNotificationResult{{TKey}}
  definition: NMF.Expressions.ICollectionChangedNotificationResult`1.RemovedItems
  name: RemovedItems
  nameWithType: ICollectionChangedNotificationResult<TKey>.RemovedItems
  fullName: NMF.Expressions.ICollectionChangedNotificationResult<TKey>.RemovedItems
  nameWithType.vb: ICollectionChangedNotificationResult(Of TKey).RemovedItems
  fullName.vb: NMF.Expressions.ICollectionChangedNotificationResult(Of TKey).RemovedItems
- uid: NMF.Expressions.ICollectionChangedNotificationResult`1.RemovedItems
  commentId: P:NMF.Expressions.ICollectionChangedNotificationResult`1.RemovedItems
  name: RemovedItems
  nameWithType: ICollectionChangedNotificationResult<T>.RemovedItems
  fullName: NMF.Expressions.ICollectionChangedNotificationResult<T>.RemovedItems
  nameWithType.vb: ICollectionChangedNotificationResult(Of T).RemovedItems
  fullName.vb: NMF.Expressions.ICollectionChangedNotificationResult(Of T).RemovedItems
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.MovedItems*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.Notification.MovedItems
  name: MovedItems
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.MovedItems
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.MovedItems
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.MovedItems
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.MovedItems
- uid: NMF.Expressions.ICollectionChangedNotificationResult{{TKey}}.MovedItems
  commentId: P:NMF.Expressions.ICollectionChangedNotificationResult{`1}.MovedItems
  parent: NMF.Expressions.ICollectionChangedNotificationResult{{TKey}}
  definition: NMF.Expressions.ICollectionChangedNotificationResult`1.MovedItems
  name: MovedItems
  nameWithType: ICollectionChangedNotificationResult<TKey>.MovedItems
  fullName: NMF.Expressions.ICollectionChangedNotificationResult<TKey>.MovedItems
  nameWithType.vb: ICollectionChangedNotificationResult(Of TKey).MovedItems
  fullName.vb: NMF.Expressions.ICollectionChangedNotificationResult(Of TKey).MovedItems
- uid: NMF.Expressions.ICollectionChangedNotificationResult`1.MovedItems
  commentId: P:NMF.Expressions.ICollectionChangedNotificationResult`1.MovedItems
  name: MovedItems
  nameWithType: ICollectionChangedNotificationResult<T>.MovedItems
  fullName: NMF.Expressions.ICollectionChangedNotificationResult<T>.MovedItems
  nameWithType.vb: ICollectionChangedNotificationResult(Of T).MovedItems
  fullName.vb: NMF.Expressions.ICollectionChangedNotificationResult(Of T).MovedItems
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.IsReset*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.Notification.IsReset
  name: IsReset
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.IsReset
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.IsReset
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.IsReset
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.IsReset
- uid: NMF.Expressions.ICollectionChangedNotificationResult.IsReset
  commentId: P:NMF.Expressions.ICollectionChangedNotificationResult.IsReset
  parent: NMF.Expressions.ICollectionChangedNotificationResult
  name: IsReset
  nameWithType: ICollectionChangedNotificationResult.IsReset
  fullName: NMF.Expressions.ICollectionChangedNotificationResult.IsReset
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.NMF#Expressions#ICollectionChangedNotificationResult#AddedItems*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.Notification.NMF#Expressions#ICollectionChangedNotificationResult#AddedItems
  name: ICollectionChangedNotificationResult.AddedItems
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.ICollectionChangedNotificationResult.AddedItems
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.NMF.Expressions.ICollectionChangedNotificationResult.AddedItems
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.NMF.Expressions.ICollectionChangedNotificationResult.AddedItems
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.NMF.Expressions.ICollectionChangedNotificationResult.AddedItems
  name.vb: NMF.Expressions.ICollectionChangedNotificationResult.AddedItems
- uid: NMF.Expressions.ICollectionChangedNotificationResult.AddedItems
  commentId: P:NMF.Expressions.ICollectionChangedNotificationResult.AddedItems
  parent: NMF.Expressions.ICollectionChangedNotificationResult
  name: AddedItems
  nameWithType: ICollectionChangedNotificationResult.AddedItems
  fullName: NMF.Expressions.ICollectionChangedNotificationResult.AddedItems
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.NMF#Expressions#ICollectionChangedNotificationResult#RemovedItems*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.Notification.NMF#Expressions#ICollectionChangedNotificationResult#RemovedItems
  name: ICollectionChangedNotificationResult.RemovedItems
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.ICollectionChangedNotificationResult.RemovedItems
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.NMF.Expressions.ICollectionChangedNotificationResult.RemovedItems
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.NMF.Expressions.ICollectionChangedNotificationResult.RemovedItems
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.NMF.Expressions.ICollectionChangedNotificationResult.RemovedItems
  name.vb: NMF.Expressions.ICollectionChangedNotificationResult.RemovedItems
- uid: NMF.Expressions.ICollectionChangedNotificationResult.RemovedItems
  commentId: P:NMF.Expressions.ICollectionChangedNotificationResult.RemovedItems
  parent: NMF.Expressions.ICollectionChangedNotificationResult
  name: RemovedItems
  nameWithType: ICollectionChangedNotificationResult.RemovedItems
  fullName: NMF.Expressions.ICollectionChangedNotificationResult.RemovedItems
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.NMF#Expressions#ICollectionChangedNotificationResult#MovedItems*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.Notification.NMF#Expressions#ICollectionChangedNotificationResult#MovedItems
  name: ICollectionChangedNotificationResult.MovedItems
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.ICollectionChangedNotificationResult.MovedItems
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.NMF.Expressions.ICollectionChangedNotificationResult.MovedItems
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.NMF.Expressions.ICollectionChangedNotificationResult.MovedItems
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.NMF.Expressions.ICollectionChangedNotificationResult.MovedItems
  name.vb: NMF.Expressions.ICollectionChangedNotificationResult.MovedItems
- uid: NMF.Expressions.ICollectionChangedNotificationResult.MovedItems
  commentId: P:NMF.Expressions.ICollectionChangedNotificationResult.MovedItems
  parent: NMF.Expressions.ICollectionChangedNotificationResult
  name: MovedItems
  nameWithType: ICollectionChangedNotificationResult.MovedItems
  fullName: NMF.Expressions.ICollectionChangedNotificationResult.MovedItems
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.OldItemsStartIndex*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.Notification.OldItemsStartIndex
  name: OldItemsStartIndex
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.OldItemsStartIndex
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.OldItemsStartIndex
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.OldItemsStartIndex
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.OldItemsStartIndex
- uid: NMF.Expressions.ICollectionChangedNotificationResult.OldItemsStartIndex
  commentId: P:NMF.Expressions.ICollectionChangedNotificationResult.OldItemsStartIndex
  parent: NMF.Expressions.ICollectionChangedNotificationResult
  name: OldItemsStartIndex
  nameWithType: ICollectionChangedNotificationResult.OldItemsStartIndex
  fullName: NMF.Expressions.ICollectionChangedNotificationResult.OldItemsStartIndex
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.NewItemsStartIndex*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.Notification.NewItemsStartIndex
  name: NewItemsStartIndex
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.NewItemsStartIndex
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.NewItemsStartIndex
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.NewItemsStartIndex
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.NewItemsStartIndex
- uid: NMF.Expressions.ICollectionChangedNotificationResult.NewItemsStartIndex
  commentId: P:NMF.Expressions.ICollectionChangedNotificationResult.NewItemsStartIndex
  parent: NMF.Expressions.ICollectionChangedNotificationResult
  name: NewItemsStartIndex
  nameWithType: ICollectionChangedNotificationResult.NewItemsStartIndex
  fullName: NMF.Expressions.ICollectionChangedNotificationResult.NewItemsStartIndex
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.FreeReference*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.Notification.FreeReference
  name: FreeReference
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.FreeReference
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.FreeReference
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.FreeReference
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.FreeReference
- uid: NMF.Expressions.INotificationResult.FreeReference
  commentId: M:NMF.Expressions.INotificationResult.FreeReference
  parent: NMF.Expressions.INotificationResult
  name: FreeReference()
  nameWithType: INotificationResult.FreeReference()
  fullName: NMF.Expressions.INotificationResult.FreeReference()
  spec.csharp:
  - uid: NMF.Expressions.INotificationResult.FreeReference
    name: FreeReference
    nameWithType: INotificationResult.FreeReference
    fullName: NMF.Expressions.INotificationResult.FreeReference
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.INotificationResult.FreeReference
    name: FreeReference
    nameWithType: INotificationResult.FreeReference
    fullName: NMF.Expressions.INotificationResult.FreeReference
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notification.IncreaseReferences*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.Notification.IncreaseReferences
  name: IncreaseReferences
  nameWithType: IncrementalLookup<TSource, TKey>.Notification.IncreaseReferences
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notification.IncreaseReferences
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notification.IncreaseReferences
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notification.IncreaseReferences
- uid: NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
  commentId: M:NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
  parent: NMF.Expressions.INotificationResult
  isExternal: true
  name: IncreaseReferences(Int32)
  nameWithType: INotificationResult.IncreaseReferences(Int32)
  fullName: NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
  spec.csharp:
  - uid: NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
    name: IncreaseReferences
    nameWithType: INotificationResult.IncreaseReferences
    fullName: NMF.Expressions.INotificationResult.IncreaseReferences
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
    name: IncreaseReferences
    nameWithType: INotificationResult.IncreaseReferences
    fullName: NMF.Expressions.INotificationResult.IncreaseReferences
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
