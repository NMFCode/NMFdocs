### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.Observable
  commentId: T:NMF.Expressions.Observable
  id: Observable
  parent: NMF.Expressions
  children:
  - NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression{System.Double},NMF.Expressions.INotifyExpression{System.Double})
  - NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  - NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  - NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression{System.Single},NMF.Expressions.INotifyExpression{System.Single})
  - NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression{System.String},NMF.Expressions.INotifyExpression{System.String})
  - NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  - NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  - NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{System.Boolean})
  - NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  - NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  - NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  - NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  - NMF.Expressions.Observable.AndAlso(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{System.Boolean})
  - NMF.Expressions.Observable.ArrayIndex``1(NMF.Expressions.INotifyExpression{``0[]},NMF.Expressions.INotifyExpression{System.Int32})
  - NMF.Expressions.Observable.ArrayIndex``1(NMF.Expressions.INotifyExpression{``0[]},NMF.Expressions.INotifyExpression{System.Int64})
  - NMF.Expressions.Observable.ArrayInitialization``1(System.Collections.Generic.IEnumerable{NMF.Expressions.INotifyExpression{``0}})
  - NMF.Expressions.Observable.As``2(NMF.Expressions.INotifyExpression{``0})
  - NMF.Expressions.Observable.Box``1(NMF.Expressions.INotifyExpression{``0})
  - NMF.Expressions.Observable.Box``1(NMF.Expressions.INotifyReversableExpression{``0})
  - NMF.Expressions.Observable.Coalesce``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  - NMF.Expressions.Observable.Coalesce``1(NMF.Expressions.INotifyReversableExpression{``0},NMF.Expressions.INotifyReversableExpression{``0})
  - NMF.Expressions.Observable.Conditional``1(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  - NMF.Expressions.Observable.Constant``1(``0)
  - NMF.Expressions.Observable.Convert``2(NMF.Expressions.INotifyExpression{``0})
  - NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression{System.Double},NMF.Expressions.INotifyExpression{System.Double})
  - NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  - NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  - NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression{System.Single},NMF.Expressions.INotifyExpression{System.Single})
  - NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  - NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  - NMF.Expressions.Observable.Equals``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  - NMF.Expressions.Observable.Expression``1(System.Linq.Expressions.Expression{System.Func{``0}})
  - NMF.Expressions.Observable.Func``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})
  - NMF.Expressions.Observable.Func``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})
  - NMF.Expressions.Observable.Func``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})
  - NMF.Expressions.Observable.Func``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})
  - NMF.Expressions.Observable.Func``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})
  - NMF.Expressions.Observable.Func``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})
  - NMF.Expressions.Observable.Func``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})
  - NMF.Expressions.Observable.Func``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})
  - NMF.Expressions.Observable.Func``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})
  - NMF.Expressions.Observable.Func``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})
  - NMF.Expressions.Observable.Func``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})
  - NMF.Expressions.Observable.Func``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})
  - NMF.Expressions.Observable.Func``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})
  - NMF.Expressions.Observable.Func``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})
  - NMF.Expressions.Observable.Func``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - NMF.Expressions.Observable.Func``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action{``0,``1})
  - NMF.Expressions.Observable.Func``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  - NMF.Expressions.Observable.Func``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Action{``0,``1,``2})
  - NMF.Expressions.Observable.Func``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})
  - NMF.Expressions.Observable.Func``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}},System.Action{``0,``1,``2,``3})
  - NMF.Expressions.Observable.Func``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})
  - NMF.Expressions.Observable.Func``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}},System.Action{``0,``1,``2,``3,``4})
  - NMF.Expressions.Observable.Func``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})
  - NMF.Expressions.Observable.Func``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}},System.Action{``0,``1,``2,``3,``4,``5})
  - NMF.Expressions.Observable.Func``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})
  - NMF.Expressions.Observable.Func``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}},System.Action{``0,``1,``2,``3,``4,``5,``6})
  - NMF.Expressions.Observable.Func``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})
  - NMF.Expressions.Observable.Func``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7})
  - NMF.Expressions.Observable.Func``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})
  - NMF.Expressions.Observable.Func``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})
  - NMF.Expressions.Observable.GreatherThanOrEquals``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  - NMF.Expressions.Observable.GreatherThan``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  - NMF.Expressions.Observable.InstanceOf(NMF.Expressions.INotifyExpression{System.Object},System.Type)
  - NMF.Expressions.Observable.LeftShift(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  - NMF.Expressions.Observable.LeftShift(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int32})
  - NMF.Expressions.Observable.LeftShift(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.Int32})
  - NMF.Expressions.Observable.LeftShift(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.Int32})
  - NMF.Expressions.Observable.LessThanOrEquals``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  - NMF.Expressions.Observable.LessThan``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  - NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression{System.Double},NMF.Expressions.INotifyExpression{System.Double})
  - NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  - NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  - NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression{System.Single},NMF.Expressions.INotifyExpression{System.Single})
  - NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  - NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  - NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression{System.Double},NMF.Expressions.INotifyExpression{System.Double})
  - NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  - NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  - NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression{System.Single},NMF.Expressions.INotifyExpression{System.Single})
  - NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  - NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  - NMF.Expressions.Observable.Negate(NMF.Expressions.INotifyExpression{System.Double})
  - NMF.Expressions.Observable.Negate(NMF.Expressions.INotifyExpression{System.Int32})
  - NMF.Expressions.Observable.Negate(NMF.Expressions.INotifyExpression{System.Int64})
  - NMF.Expressions.Observable.Negate(NMF.Expressions.INotifyExpression{System.Single})
  - NMF.Expressions.Observable.NewArray``1(NMF.Expressions.INotifyExpression{System.Int32})
  - NMF.Expressions.Observable.NewArray``1(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  - NMF.Expressions.Observable.NewArray``1(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  - NMF.Expressions.Observable.Not(NMF.Expressions.INotifyExpression{System.Boolean})
  - NMF.Expressions.Observable.NotEquals``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  - NMF.Expressions.Observable.OnesComplement(NMF.Expressions.INotifyExpression{System.Int32})
  - NMF.Expressions.Observable.OnesComplement(NMF.Expressions.INotifyExpression{System.Int64})
  - NMF.Expressions.Observable.OnesComplement(NMF.Expressions.INotifyExpression{System.UInt32})
  - NMF.Expressions.Observable.OnesComplement(NMF.Expressions.INotifyExpression{System.UInt64})
  - NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{System.Boolean})
  - NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  - NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  - NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  - NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  - NMF.Expressions.Observable.OrElse(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{System.Boolean})
  - NMF.Expressions.Observable.Recurse``10(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})
  - NMF.Expressions.Observable.Recurse``2(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1},``0,``1}})
  - NMF.Expressions.Observable.Recurse``3(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2},``0,``1,``2}})
  - NMF.Expressions.Observable.Recurse``4(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3},``0,``1,``2,``3}})
  - NMF.Expressions.Observable.Recurse``5(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4}})
  - NMF.Expressions.Observable.Recurse``6(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5}})
  - NMF.Expressions.Observable.Recurse``7(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6}})
  - NMF.Expressions.Observable.Recurse``8(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7}})
  - NMF.Expressions.Observable.Recurse``9(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8}})
  - NMF.Expressions.Observable.Reversable``1(System.Linq.Expressions.Expression{System.Func{``0}})
  - NMF.Expressions.Observable.RightShift(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  - NMF.Expressions.Observable.RightShift(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int32})
  - NMF.Expressions.Observable.RightShift(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.Int32})
  - NMF.Expressions.Observable.RightShift(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.Int32})
  - NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression{System.Double},NMF.Expressions.INotifyExpression{System.Double})
  - NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  - NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  - NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression{System.Single},NMF.Expressions.INotifyExpression{System.Single})
  - NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  - NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  - NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{System.Boolean})
  - NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  - NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  - NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  - NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  langs:
  - csharp
  - vb
  name: Observable
  nameWithType: Observable
  fullName: NMF.Expressions.Observable
  type: Class
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Observable
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 10
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: This is a facade class that exposes the functionality of NMF Expressions compactly
  example: []
  syntax:
    content: public static class Observable
    content.vb: Public Module Observable
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: NMF.Expressions.Observable.Func``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Observable.Func``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: Func``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, TResult>(Expression<Func<T1, TResult>>)
  nameWithType: Observable.Func<T1, TResult>(Expression<Func<T1, TResult>>)
  fullName: NMF.Expressions.Observable.Func<T1, TResult>(System.Linq.Expressions.Expression<System.Func<T1, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 17
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression
  example: []
  syntax:
    content: public static ObservingFunc<T1, TResult> Func<T1, TResult>(Expression<Func<T1, TResult>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{TResult}}}
      description: The LINQ Expression tree
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, TResult)(expression As Expression(Of Func(Of T1, TResult))) As ObservingFunc(Of T1, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, TResult)(Expression(Of Func(Of T1, TResult)))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, TResult)))
  name.vb: Func(Of T1, TResult)(Expression(Of Func(Of T1, TResult)))
- uid: NMF.Expressions.Observable.Func``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  commentId: M:NMF.Expressions.Observable.Func``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  id: Func``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, T2, TResult>(Expression<Func<T1, T2, TResult>>)
  nameWithType: Observable.Func<T1, T2, TResult>(Expression<Func<T1, T2, TResult>>)
  fullName: NMF.Expressions.Observable.Func<T1, T2, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 29
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, TResult> Func<T1, T2, TResult>(Expression<Func<T1, T2, TResult>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{TResult}}}
      description: The LINQ Expression tree
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: T2
      description: The type of the argument 2
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, T2, TResult)(expression As Expression(Of Func(Of T1, T2, TResult))) As ObservingFunc(Of T1, T2, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, T2, TResult)(Expression(Of Func(Of T1, T2, TResult)))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, T2, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, TResult)))
  name.vb: Func(Of T1, T2, TResult)(Expression(Of Func(Of T1, T2, TResult)))
- uid: NMF.Expressions.Observable.Func``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})
  commentId: M:NMF.Expressions.Observable.Func``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})
  id: Func``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, TResult>(Expression<Func<T1, T2, T3, TResult>>)
  nameWithType: Observable.Func<T1, T2, T3, TResult>(Expression<Func<T1, T2, T3, TResult>>)
  fullName: NMF.Expressions.Observable.Func<T1, T2, T3, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 42
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, TResult> Func<T1, T2, T3, TResult>(Expression<Func<T1, T2, T3, TResult>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{TResult}}}
      description: The LINQ Expression tree
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: T2
      description: The type of the argument 2
    - id: T3
      description: The type of the argument 3
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, T2, T3, TResult)(expression As Expression(Of Func(Of T1, T2, T3, TResult))) As ObservingFunc(Of T1, T2, T3, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, T2, T3, TResult)(Expression(Of Func(Of T1, T2, T3, TResult)))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, T2, T3, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, TResult)))
  name.vb: Func(Of T1, T2, T3, TResult)(Expression(Of Func(Of T1, T2, T3, TResult)))
- uid: NMF.Expressions.Observable.Func``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})
  commentId: M:NMF.Expressions.Observable.Func``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})
  id: Func``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, T4, TResult>(Expression<Func<T1, T2, T3, T4, TResult>>)
  nameWithType: Observable.Func<T1, T2, T3, T4, TResult>(Expression<Func<T1, T2, T3, T4, TResult>>)
  fullName: NMF.Expressions.Observable.Func<T1, T2, T3, T4, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 56
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, TResult> Func<T1, T2, T3, T4, TResult>(Expression<Func<T1, T2, T3, T4, TResult>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{TResult}}}
      description: The LINQ Expression tree
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: T2
      description: The type of the argument 2
    - id: T3
      description: The type of the argument 3
    - id: T4
      description: The type of the argument 4
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, T2, T3, T4, TResult)(expression As Expression(Of Func(Of T1, T2, T3, T4, TResult))) As ObservingFunc(Of T1, T2, T3, T4, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, T2, T3, T4, TResult)(Expression(Of Func(Of T1, T2, T3, T4, TResult)))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, T2, T3, T4, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, TResult)))
  name.vb: Func(Of T1, T2, T3, T4, TResult)(Expression(Of Func(Of T1, T2, T3, T4, TResult)))
- uid: NMF.Expressions.Observable.Func``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})
  commentId: M:NMF.Expressions.Observable.Func``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})
  id: Func``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, T4, T5, TResult>(Expression<Func<T1, T2, T3, T4, T5, TResult>>)
  nameWithType: Observable.Func<T1, T2, T3, T4, T5, TResult>(Expression<Func<T1, T2, T3, T4, T5, TResult>>)
  fullName: NMF.Expressions.Observable.Func<T1, T2, T3, T4, T5, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 71
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, TResult> Func<T1, T2, T3, T4, T5, TResult>(Expression<Func<T1, T2, T3, T4, T5, TResult>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{TResult}}}
      description: The LINQ Expression tree
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: T2
      description: The type of the argument 2
    - id: T3
      description: The type of the argument 3
    - id: T4
      description: The type of the argument 4
    - id: T5
      description: The type of the argument 5
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, T2, T3, T4, T5, TResult)(expression As Expression(Of Func(Of T1, T2, T3, T4, T5, TResult))) As ObservingFunc(Of T1, T2, T3, T4, T5, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, T2, T3, T4, T5, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, TResult)))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, T2, T3, T4, T5, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, TResult)))
  name.vb: Func(Of T1, T2, T3, T4, T5, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, TResult)))
- uid: NMF.Expressions.Observable.Func``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})
  commentId: M:NMF.Expressions.Observable.Func``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})
  id: Func``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, T4, T5, T6, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, TResult>>)
  nameWithType: Observable.Func<T1, T2, T3, T4, T5, T6, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, TResult>>)
  fullName: NMF.Expressions.Observable.Func<T1, T2, T3, T4, T5, T6, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 87
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, T6, TResult> Func<T1, T2, T3, T4, T5, T6, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, TResult>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{TResult}}}
      description: The LINQ Expression tree
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: T2
      description: The type of the argument 2
    - id: T3
      description: The type of the argument 3
    - id: T4
      description: The type of the argument 4
    - id: T5
      description: The type of the argument 5
    - id: T6
      description: The type of the argument 6
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, T2, T3, T4, T5, T6, TResult)(expression As Expression(Of Func(Of T1, T2, T3, T4, T5, T6, TResult))) As ObservingFunc(Of T1, T2, T3, T4, T5, T6, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, T2, T3, T4, T5, T6, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, TResult)))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, T2, T3, T4, T5, T6, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, TResult)))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, TResult)))
- uid: NMF.Expressions.Observable.Func``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})
  commentId: M:NMF.Expressions.Observable.Func``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})
  id: Func``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, T4, T5, T6, T7, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>>)
  nameWithType: Observable.Func<T1, T2, T3, T4, T5, T6, T7, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>>)
  fullName: NMF.Expressions.Observable.Func<T1, T2, T3, T4, T5, T6, T7, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 104
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult> Func<T1, T2, T3, T4, T5, T6, T7, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{TResult}}}
      description: The LINQ Expression tree
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: T2
      description: The type of the argument 2
    - id: T3
      description: The type of the argument 3
    - id: T4
      description: The type of the argument 4
    - id: T5
      description: The type of the argument 5
    - id: T6
      description: The type of the argument 6
    - id: T7
      description: The type of the argument 7
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)(expression As Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, TResult))) As ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)))
- uid: NMF.Expressions.Observable.Func``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})
  commentId: M:NMF.Expressions.Observable.Func``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})
  id: Func``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>>)
  nameWithType: Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>>)
  fullName: NMF.Expressions.Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 122
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult> Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{TResult}}}
      description: The LINQ Expression tree
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: T2
      description: The type of the argument 2
    - id: T3
      description: The type of the argument 3
    - id: T4
      description: The type of the argument 4
    - id: T5
      description: The type of the argument 5
    - id: T6
      description: The type of the argument 6
    - id: T7
      description: The type of the argument 7
    - id: T8
      description: The type of the argument 8
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)(expression As Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult))) As ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)))
- uid: NMF.Expressions.Observable.Func``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})
  commentId: M:NMF.Expressions.Observable.Func``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})
  id: Func``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>>)
  nameWithType: Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>>)
  fullName: NMF.Expressions.Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 141
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{TResult}}}
      description: The LINQ Expression tree
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: T2
      description: The type of the argument 2
    - id: T3
      description: The type of the argument 3
    - id: T4
      description: The type of the argument 4
    - id: T5
      description: The type of the argument 5
    - id: T6
      description: The type of the argument 6
    - id: T7
      description: The type of the argument 7
    - id: T8
      description: The type of the argument 8
    - id: T9
      description: The type of the argument 9
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)(expression As Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult))) As ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)))
- uid: NMF.Expressions.Observable.Func``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})
  commentId: M:NMF.Expressions.Observable.Func``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})
  id: Func``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>>)
  nameWithType: Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>>)
  fullName: NMF.Expressions.Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 161
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{TResult}}}
      description: The LINQ Expression tree
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: T2
      description: The type of the argument 2
    - id: T3
      description: The type of the argument 3
    - id: T4
      description: The type of the argument 4
    - id: T5
      description: The type of the argument 5
    - id: T6
      description: The type of the argument 6
    - id: T7
      description: The type of the argument 7
    - id: T8
      description: The type of the argument 8
    - id: T9
      description: The type of the argument 9
    - id: T10
      description: The type of the argument 10
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)(expression As Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult))) As ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)))
- uid: NMF.Expressions.Observable.Func``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})
  commentId: M:NMF.Expressions.Observable.Func``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})
  id: Func``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>>)
  nameWithType: Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>>)
  fullName: NMF.Expressions.Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 182
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{TResult}}}
      description: The LINQ Expression tree
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: T2
      description: The type of the argument 2
    - id: T3
      description: The type of the argument 3
    - id: T4
      description: The type of the argument 4
    - id: T5
      description: The type of the argument 5
    - id: T6
      description: The type of the argument 6
    - id: T7
      description: The type of the argument 7
    - id: T8
      description: The type of the argument 8
    - id: T9
      description: The type of the argument 9
    - id: T10
      description: The type of the argument 10
    - id: T11
      description: The type of the argument 11
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)(expression As Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult))) As ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)))
- uid: NMF.Expressions.Observable.Func``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})
  commentId: M:NMF.Expressions.Observable.Func``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})
  id: Func``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>>)
  nameWithType: Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>>)
  fullName: NMF.Expressions.Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 204
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{TResult}}}
      description: The LINQ Expression tree
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: T2
      description: The type of the argument 2
    - id: T3
      description: The type of the argument 3
    - id: T4
      description: The type of the argument 4
    - id: T5
      description: The type of the argument 5
    - id: T6
      description: The type of the argument 6
    - id: T7
      description: The type of the argument 7
    - id: T8
      description: The type of the argument 8
    - id: T9
      description: The type of the argument 9
    - id: T10
      description: The type of the argument 10
    - id: T11
      description: The type of the argument 11
    - id: T12
      description: The type of the argument 12
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)(expression As Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult))) As ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)))
- uid: NMF.Expressions.Observable.Func``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})
  commentId: M:NMF.Expressions.Observable.Func``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})
  id: Func``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>>)
  nameWithType: Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>>)
  fullName: NMF.Expressions.Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 227
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}}
      description: The LINQ Expression tree
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: T2
      description: The type of the argument 2
    - id: T3
      description: The type of the argument 3
    - id: T4
      description: The type of the argument 4
    - id: T5
      description: The type of the argument 5
    - id: T6
      description: The type of the argument 6
    - id: T7
      description: The type of the argument 7
    - id: T8
      description: The type of the argument 8
    - id: T9
      description: The type of the argument 9
    - id: T10
      description: The type of the argument 10
    - id: T11
      description: The type of the argument 11
    - id: T12
      description: The type of the argument 12
    - id: T13
      description: The type of the argument 13
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)(expression As Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult))) As ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)))
- uid: NMF.Expressions.Observable.Func``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})
  commentId: M:NMF.Expressions.Observable.Func``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})
  id: Func``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>)
  nameWithType: Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>)
  fullName: NMF.Expressions.Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 251
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}}
      description: The LINQ Expression tree
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: T2
      description: The type of the argument 2
    - id: T3
      description: The type of the argument 3
    - id: T4
      description: The type of the argument 4
    - id: T5
      description: The type of the argument 5
    - id: T6
      description: The type of the argument 6
    - id: T7
      description: The type of the argument 7
    - id: T8
      description: The type of the argument 8
    - id: T9
      description: The type of the argument 9
    - id: T10
      description: The type of the argument 10
    - id: T11
      description: The type of the argument 11
    - id: T12
      description: The type of the argument 12
    - id: T13
      description: The type of the argument 13
    - id: T14
      description: The type of the argument 14
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)(expression As Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult))) As ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)))
- uid: NMF.Expressions.Observable.Func``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})
  commentId: M:NMF.Expressions.Observable.Func``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})
  id: Func``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>>)
  nameWithType: Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>>)
  fullName: NMF.Expressions.Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 276
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{T15},{TResult}}}
      description: The LINQ Expression tree
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: T2
      description: The type of the argument 2
    - id: T3
      description: The type of the argument 3
    - id: T4
      description: The type of the argument 4
    - id: T5
      description: The type of the argument 5
    - id: T6
      description: The type of the argument 6
    - id: T7
      description: The type of the argument 7
    - id: T8
      description: The type of the argument 8
    - id: T9
      description: The type of the argument 9
    - id: T10
      description: The type of the argument 10
    - id: T11
      description: The type of the argument 11
    - id: T12
      description: The type of the argument 12
    - id: T13
      description: The type of the argument 13
    - id: T14
      description: The type of the argument 14
    - id: T15
      description: The type of the argument 15
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{T15},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)(expression As Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult))) As ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)))
- uid: NMF.Expressions.Observable.Func``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action{``0,``1})
  commentId: M:NMF.Expressions.Observable.Func``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action{``0,``1})
  id: Func``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action{``0,``1})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, TResult>(Expression<Func<T1, TResult>>, Action<T1, TResult>)
  nameWithType: Observable.Func<T1, TResult>(Expression<Func<T1, TResult>>, Action<T1, TResult>)
  fullName: NMF.Expressions.Observable.Func<T1, TResult>(System.Linq.Expressions.Expression<System.Func<T1, TResult>>, System.Action<T1, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 289
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
  example: []
  syntax:
    content: public static ObservingFunc<T1, TResult> Func<T1, TResult>(Expression<Func<T1, TResult>> expression, Action<T1, TResult> updateHandler)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{TResult}}}
      description: The LINQ Expression tree
    - id: updateHandler
      type: System.Action{{T1},{TResult}}
      description: The update handler
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, TResult)(expression As Expression(Of Func(Of T1, TResult)), updateHandler As Action(Of T1, TResult)) As ObservingFunc(Of T1, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, TResult)(Expression(Of Func(Of T1, TResult)), Action(Of T1, TResult))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, TResult)), System.Action(Of T1, TResult))
  name.vb: Func(Of T1, TResult)(Expression(Of Func(Of T1, TResult)), Action(Of T1, TResult))
- uid: NMF.Expressions.Observable.Func``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Action{``0,``1,``2})
  commentId: M:NMF.Expressions.Observable.Func``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Action{``0,``1,``2})
  id: Func``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Action{``0,``1,``2})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, T2, TResult>(Expression<Func<T1, T2, TResult>>, Action<T1, T2, TResult>)
  nameWithType: Observable.Func<T1, T2, TResult>(Expression<Func<T1, T2, TResult>>, Action<T1, T2, TResult>)
  fullName: NMF.Expressions.Observable.Func<T1, T2, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, TResult>>, System.Action<T1, T2, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 302
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, TResult> Func<T1, T2, TResult>(Expression<Func<T1, T2, TResult>> expression, Action<T1, T2, TResult> updateHandler)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{TResult}}}
      description: The LINQ Expression tree
    - id: updateHandler
      type: System.Action{{T1},{T2},{TResult}}
      description: The update handler
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: T2
      description: The type of the argument 2
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, T2, TResult)(expression As Expression(Of Func(Of T1, T2, TResult)), updateHandler As Action(Of T1, T2, TResult)) As ObservingFunc(Of T1, T2, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, T2, TResult)(Expression(Of Func(Of T1, T2, TResult)), Action(Of T1, T2, TResult))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, T2, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, TResult)), System.Action(Of T1, T2, TResult))
  name.vb: Func(Of T1, T2, TResult)(Expression(Of Func(Of T1, T2, TResult)), Action(Of T1, T2, TResult))
- uid: NMF.Expressions.Observable.Func``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}},System.Action{``0,``1,``2,``3})
  commentId: M:NMF.Expressions.Observable.Func``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}},System.Action{``0,``1,``2,``3})
  id: Func``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}},System.Action{``0,``1,``2,``3})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, TResult>(Expression<Func<T1, T2, T3, TResult>>, Action<T1, T2, T3, TResult>)
  nameWithType: Observable.Func<T1, T2, T3, TResult>(Expression<Func<T1, T2, T3, TResult>>, Action<T1, T2, T3, TResult>)
  fullName: NMF.Expressions.Observable.Func<T1, T2, T3, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TResult>>, System.Action<T1, T2, T3, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 316
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, TResult> Func<T1, T2, T3, TResult>(Expression<Func<T1, T2, T3, TResult>> expression, Action<T1, T2, T3, TResult> updateHandler)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{TResult}}}
      description: The LINQ Expression tree
    - id: updateHandler
      type: System.Action{{T1},{T2},{T3},{TResult}}
      description: The update handler
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: T2
      description: The type of the argument 2
    - id: T3
      description: The type of the argument 3
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, T2, T3, TResult)(expression As Expression(Of Func(Of T1, T2, T3, TResult)), updateHandler As Action(Of T1, T2, T3, TResult)) As ObservingFunc(Of T1, T2, T3, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, T2, T3, TResult)(Expression(Of Func(Of T1, T2, T3, TResult)), Action(Of T1, T2, T3, TResult))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, T2, T3, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, TResult)), System.Action(Of T1, T2, T3, TResult))
  name.vb: Func(Of T1, T2, T3, TResult)(Expression(Of Func(Of T1, T2, T3, TResult)), Action(Of T1, T2, T3, TResult))
- uid: NMF.Expressions.Observable.Func``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}},System.Action{``0,``1,``2,``3,``4})
  commentId: M:NMF.Expressions.Observable.Func``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}},System.Action{``0,``1,``2,``3,``4})
  id: Func``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}},System.Action{``0,``1,``2,``3,``4})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, T4, TResult>(Expression<Func<T1, T2, T3, T4, TResult>>, Action<T1, T2, T3, T4, TResult>)
  nameWithType: Observable.Func<T1, T2, T3, T4, TResult>(Expression<Func<T1, T2, T3, T4, TResult>>, Action<T1, T2, T3, T4, TResult>)
  fullName: NMF.Expressions.Observable.Func<T1, T2, T3, T4, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TResult>>, System.Action<T1, T2, T3, T4, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 331
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, TResult> Func<T1, T2, T3, T4, TResult>(Expression<Func<T1, T2, T3, T4, TResult>> expression, Action<T1, T2, T3, T4, TResult> updateHandler)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{TResult}}}
      description: The LINQ Expression tree
    - id: updateHandler
      type: System.Action{{T1},{T2},{T3},{T4},{TResult}}
      description: The update handler
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: T2
      description: The type of the argument 2
    - id: T3
      description: The type of the argument 3
    - id: T4
      description: The type of the argument 4
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, T2, T3, T4, TResult)(expression As Expression(Of Func(Of T1, T2, T3, T4, TResult)), updateHandler As Action(Of T1, T2, T3, T4, TResult)) As ObservingFunc(Of T1, T2, T3, T4, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, T2, T3, T4, TResult)(Expression(Of Func(Of T1, T2, T3, T4, TResult)), Action(Of T1, T2, T3, T4, TResult))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, T2, T3, T4, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, TResult)), System.Action(Of T1, T2, T3, T4, TResult))
  name.vb: Func(Of T1, T2, T3, T4, TResult)(Expression(Of Func(Of T1, T2, T3, T4, TResult)), Action(Of T1, T2, T3, T4, TResult))
- uid: NMF.Expressions.Observable.Func``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}},System.Action{``0,``1,``2,``3,``4,``5})
  commentId: M:NMF.Expressions.Observable.Func``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}},System.Action{``0,``1,``2,``3,``4,``5})
  id: Func``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}},System.Action{``0,``1,``2,``3,``4,``5})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, T4, T5, TResult>(Expression<Func<T1, T2, T3, T4, T5, TResult>>, Action<T1, T2, T3, T4, T5, TResult>)
  nameWithType: Observable.Func<T1, T2, T3, T4, T5, TResult>(Expression<Func<T1, T2, T3, T4, T5, TResult>>, Action<T1, T2, T3, T4, T5, TResult>)
  fullName: NMF.Expressions.Observable.Func<T1, T2, T3, T4, T5, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TResult>>, System.Action<T1, T2, T3, T4, T5, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 347
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, TResult> Func<T1, T2, T3, T4, T5, TResult>(Expression<Func<T1, T2, T3, T4, T5, TResult>> expression, Action<T1, T2, T3, T4, T5, TResult> updateHandler)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{TResult}}}
      description: The LINQ Expression tree
    - id: updateHandler
      type: System.Action{{T1},{T2},{T3},{T4},{T5},{TResult}}
      description: The update handler
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: T2
      description: The type of the argument 2
    - id: T3
      description: The type of the argument 3
    - id: T4
      description: The type of the argument 4
    - id: T5
      description: The type of the argument 5
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, T2, T3, T4, T5, TResult)(expression As Expression(Of Func(Of T1, T2, T3, T4, T5, TResult)), updateHandler As Action(Of T1, T2, T3, T4, T5, TResult)) As ObservingFunc(Of T1, T2, T3, T4, T5, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, T2, T3, T4, T5, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, TResult)), Action(Of T1, T2, T3, T4, T5, TResult))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, T2, T3, T4, T5, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, TResult)), System.Action(Of T1, T2, T3, T4, T5, TResult))
  name.vb: Func(Of T1, T2, T3, T4, T5, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, TResult)), Action(Of T1, T2, T3, T4, T5, TResult))
- uid: NMF.Expressions.Observable.Func``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}},System.Action{``0,``1,``2,``3,``4,``5,``6})
  commentId: M:NMF.Expressions.Observable.Func``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}},System.Action{``0,``1,``2,``3,``4,``5,``6})
  id: Func``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}},System.Action{``0,``1,``2,``3,``4,``5,``6})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, T4, T5, T6, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, TResult>>, Action<T1, T2, T3, T4, T5, T6, TResult>)
  nameWithType: Observable.Func<T1, T2, T3, T4, T5, T6, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, TResult>>, Action<T1, T2, T3, T4, T5, T6, TResult>)
  fullName: NMF.Expressions.Observable.Func<T1, T2, T3, T4, T5, T6, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, TResult>>, System.Action<T1, T2, T3, T4, T5, T6, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 364
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, T6, TResult> Func<T1, T2, T3, T4, T5, T6, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, TResult>> expression, Action<T1, T2, T3, T4, T5, T6, TResult> updateHandler)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{TResult}}}
      description: The LINQ Expression tree
    - id: updateHandler
      type: System.Action{{T1},{T2},{T3},{T4},{T5},{T6},{TResult}}
      description: The update handler
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: T2
      description: The type of the argument 2
    - id: T3
      description: The type of the argument 3
    - id: T4
      description: The type of the argument 4
    - id: T5
      description: The type of the argument 5
    - id: T6
      description: The type of the argument 6
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, T2, T3, T4, T5, T6, TResult)(expression As Expression(Of Func(Of T1, T2, T3, T4, T5, T6, TResult)), updateHandler As Action(Of T1, T2, T3, T4, T5, T6, TResult)) As ObservingFunc(Of T1, T2, T3, T4, T5, T6, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, T2, T3, T4, T5, T6, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, TResult)), Action(Of T1, T2, T3, T4, T5, T6, TResult))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, T2, T3, T4, T5, T6, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, TResult)), System.Action(Of T1, T2, T3, T4, T5, T6, TResult))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, TResult)), Action(Of T1, T2, T3, T4, T5, T6, TResult))
- uid: NMF.Expressions.Observable.Func``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7})
  commentId: M:NMF.Expressions.Observable.Func``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7})
  id: Func``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, T4, T5, T6, T7, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>>, Action<T1, T2, T3, T4, T5, T6, T7, TResult>)
  nameWithType: Observable.Func<T1, T2, T3, T4, T5, T6, T7, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>>, Action<T1, T2, T3, T4, T5, T6, T7, TResult>)
  fullName: NMF.Expressions.Observable.Func<T1, T2, T3, T4, T5, T6, T7, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, TResult>>, System.Action<T1, T2, T3, T4, T5, T6, T7, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 382
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult> Func<T1, T2, T3, T4, T5, T6, T7, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>> expression, Action<T1, T2, T3, T4, T5, T6, T7, TResult> updateHandler)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{TResult}}}
      description: The LINQ Expression tree
    - id: updateHandler
      type: System.Action{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{TResult}}
      description: The update handler
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: T2
      description: The type of the argument 2
    - id: T3
      description: The type of the argument 3
    - id: T4
      description: The type of the argument 4
    - id: T5
      description: The type of the argument 5
    - id: T6
      description: The type of the argument 6
    - id: T7
      description: The type of the argument 7
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)(expression As Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)), updateHandler As Action(Of T1, T2, T3, T4, T5, T6, T7, TResult)) As ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)), Action(Of T1, T2, T3, T4, T5, T6, T7, TResult))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)), System.Action(Of T1, T2, T3, T4, T5, T6, T7, TResult))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)), Action(Of T1, T2, T3, T4, T5, T6, T7, TResult))
- uid: NMF.Expressions.Observable.Func``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})
  commentId: M:NMF.Expressions.Observable.Func``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})
  id: Func``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>>, Action<T1, T2, T3, T4, T5, T6, T7, T8, TResult>)
  nameWithType: Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>>, Action<T1, T2, T3, T4, T5, T6, T7, T8, TResult>)
  fullName: NMF.Expressions.Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>>, System.Action<T1, T2, T3, T4, T5, T6, T7, T8, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 401
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult> Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>> expression, Action<T1, T2, T3, T4, T5, T6, T7, T8, TResult> updateHandler)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{TResult}}}
      description: The LINQ Expression tree
    - id: updateHandler
      type: System.Action{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{TResult}}
      description: The update handler
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: T2
      description: The type of the argument 2
    - id: T3
      description: The type of the argument 3
    - id: T4
      description: The type of the argument 4
    - id: T5
      description: The type of the argument 5
    - id: T6
      description: The type of the argument 6
    - id: T7
      description: The type of the argument 7
    - id: T8
      description: The type of the argument 8
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)(expression As Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)), updateHandler As Action(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)) As ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)), Action(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)), System.Action(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)), Action(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult))
- uid: NMF.Expressions.Observable.Func``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})
  commentId: M:NMF.Expressions.Observable.Func``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})
  id: Func``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>>, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>)
  nameWithType: Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>>, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>)
  fullName: NMF.Expressions.Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>>, System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 421
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> expression, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> updateHandler)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{TResult}}}
      description: The LINQ Expression tree
    - id: updateHandler
      type: System.Action{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{TResult}}
      description: The update handler
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: T2
      description: The type of the argument 2
    - id: T3
      description: The type of the argument 3
    - id: T4
      description: The type of the argument 4
    - id: T5
      description: The type of the argument 5
    - id: T6
      description: The type of the argument 6
    - id: T7
      description: The type of the argument 7
    - id: T8
      description: The type of the argument 8
    - id: T9
      description: The type of the argument 9
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)(expression As Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)), updateHandler As Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)) As ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)), Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)), System.Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)), Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult))
- uid: NMF.Expressions.Observable.Func``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})
  commentId: M:NMF.Expressions.Observable.Func``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})
  id: Func``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>>, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>)
  nameWithType: Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>>, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>)
  fullName: NMF.Expressions.Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>>, System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 442
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>> expression, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> updateHandler)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{TResult}}}
      description: The LINQ Expression tree
    - id: updateHandler
      type: System.Action{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{TResult}}
      description: The update handler
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: T2
      description: The type of the argument 2
    - id: T3
      description: The type of the argument 3
    - id: T4
      description: The type of the argument 4
    - id: T5
      description: The type of the argument 5
    - id: T6
      description: The type of the argument 6
    - id: T7
      description: The type of the argument 7
    - id: T8
      description: The type of the argument 8
    - id: T9
      description: The type of the argument 9
    - id: T10
      description: The type of the argument 10
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)(expression As Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)), updateHandler As Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)) As ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)), Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)), System.Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)), Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult))
- uid: NMF.Expressions.Observable.Func``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})
  commentId: M:NMF.Expressions.Observable.Func``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})
  id: Func``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>>, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>)
  nameWithType: Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>>, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>)
  fullName: NMF.Expressions.Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>>, System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 464
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>> expression, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> updateHandler)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{TResult}}}
      description: The LINQ Expression tree
    - id: updateHandler
      type: System.Action{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{TResult}}
      description: The update handler
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: T2
      description: The type of the argument 2
    - id: T3
      description: The type of the argument 3
    - id: T4
      description: The type of the argument 4
    - id: T5
      description: The type of the argument 5
    - id: T6
      description: The type of the argument 6
    - id: T7
      description: The type of the argument 7
    - id: T8
      description: The type of the argument 8
    - id: T9
      description: The type of the argument 9
    - id: T10
      description: The type of the argument 10
    - id: T11
      description: The type of the argument 11
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)(expression As Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)), updateHandler As Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)) As ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)), Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)), System.Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)), Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult))
- uid: NMF.Expressions.Observable.Func``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})
  commentId: M:NMF.Expressions.Observable.Func``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})
  id: Func``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>>, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>)
  nameWithType: Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>>, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>)
  fullName: NMF.Expressions.Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>>, System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 487
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>> expression, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> updateHandler)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{TResult}}}
      description: The LINQ Expression tree
    - id: updateHandler
      type: System.Action{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{TResult}}
      description: The update handler
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: T2
      description: The type of the argument 2
    - id: T3
      description: The type of the argument 3
    - id: T4
      description: The type of the argument 4
    - id: T5
      description: The type of the argument 5
    - id: T6
      description: The type of the argument 6
    - id: T7
      description: The type of the argument 7
    - id: T8
      description: The type of the argument 8
    - id: T9
      description: The type of the argument 9
    - id: T10
      description: The type of the argument 10
    - id: T11
      description: The type of the argument 11
    - id: T12
      description: The type of the argument 12
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)(expression As Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)), updateHandler As Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)) As ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)), Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)), System.Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)), Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult))
- uid: NMF.Expressions.Observable.Func``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})
  commentId: M:NMF.Expressions.Observable.Func``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})
  id: Func``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>>, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>)
  nameWithType: Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>>, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>)
  fullName: NMF.Expressions.Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>>, System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 511
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>> expression, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> updateHandler)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}}
      description: The LINQ Expression tree
    - id: updateHandler
      type: System.Action{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
      description: The update handler
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: T2
      description: The type of the argument 2
    - id: T3
      description: The type of the argument 3
    - id: T4
      description: The type of the argument 4
    - id: T5
      description: The type of the argument 5
    - id: T6
      description: The type of the argument 6
    - id: T7
      description: The type of the argument 7
    - id: T8
      description: The type of the argument 8
    - id: T9
      description: The type of the argument 9
    - id: T10
      description: The type of the argument 10
    - id: T11
      description: The type of the argument 11
    - id: T12
      description: The type of the argument 12
    - id: T13
      description: The type of the argument 13
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)(expression As Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)), updateHandler As Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)) As ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)), Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)), System.Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)), Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult))
- uid: NMF.Expressions.Observable.Func``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})
  commentId: M:NMF.Expressions.Observable.Func``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})
  id: Func``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>)
  nameWithType: Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>)
  fullName: NMF.Expressions.Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>, System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 536
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>> expression, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> updateHandler)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}}
      description: The LINQ Expression tree
    - id: updateHandler
      type: System.Action{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: The update handler
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: T2
      description: The type of the argument 2
    - id: T3
      description: The type of the argument 3
    - id: T4
      description: The type of the argument 4
    - id: T5
      description: The type of the argument 5
    - id: T6
      description: The type of the argument 6
    - id: T7
      description: The type of the argument 7
    - id: T8
      description: The type of the argument 8
    - id: T9
      description: The type of the argument 9
    - id: T10
      description: The type of the argument 10
    - id: T11
      description: The type of the argument 11
    - id: T12
      description: The type of the argument 12
    - id: T13
      description: The type of the argument 13
    - id: T14
      description: The type of the argument 14
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)(expression As Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)), updateHandler As Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)) As ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)), Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)), System.Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)), Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult))
- uid: NMF.Expressions.Observable.Func``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})
  commentId: M:NMF.Expressions.Observable.Func``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})
  id: Func``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}},System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>>, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>)
  nameWithType: Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>>, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>)
  fullName: NMF.Expressions.Observable.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>>, System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Func
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 562
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an observable function from the given LINQ Expression of a lambda expression with the given update handler
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>> expression, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> updateHandler)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{T15},{TResult}}}
      description: The LINQ Expression tree
    - id: updateHandler
      type: System.Action{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{T15},{TResult}}
      description: The update handler
    typeParameters:
    - id: T1
      description: The type of the argument 1
    - id: T2
      description: The type of the argument 2
    - id: T3
      description: The type of the argument 3
    - id: T4
      description: The type of the argument 4
    - id: T5
      description: The type of the argument 5
    - id: T6
      description: The type of the argument 6
    - id: T7
      description: The type of the argument 7
    - id: T8
      description: The type of the argument 8
    - id: T9
      description: The type of the argument 9
    - id: T10
      description: The type of the argument 10
    - id: T11
      description: The type of the argument 11
    - id: T12
      description: The type of the argument 12
    - id: T13
      description: The type of the argument 13
    - id: T14
      description: The type of the argument 14
    - id: T15
      description: The type of the argument 15
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{T15},{TResult}}
      description: An observable function. If this function is invoked with a set of arguments, the resulting notify value will update on underlying model updates
    content.vb: Public Shared Function Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)(expression As Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)), updateHandler As Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)) As ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)
  overload: NMF.Expressions.Observable.Func*
  nameWithType.vb: Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)), Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult))
  fullName.vb: NMF.Expressions.Observable.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)), System.Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult))
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)), Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult))
- uid: NMF.Expressions.Observable.Recurse``2(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1},``0,``1}})
  commentId: M:NMF.Expressions.Observable.Recurse``2(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1},``0,``1}})
  id: Recurse``2(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1},``0,``1}})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Recurse<T1, TResult>(Expression<Func<Func<T1, TResult>, T1, TResult>>)
  nameWithType: Observable.Recurse<T1, TResult>(Expression<Func<Func<T1, TResult>, T1, TResult>>)
  fullName: NMF.Expressions.Observable.Recurse<T1, TResult>(System.Linq.Expressions.Expression<System.Func<System.Func<T1, TResult>, T1, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Recurse
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 574
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Recurses the given function
  example: []
  syntax:
    content: public static ObservingFunc<T1, TResult> Recurse<T1, TResult>(Expression<Func<Func<T1, TResult>, T1, TResult>> innerFunc)
    parameters:
    - id: innerFunc
      type: System.Linq.Expressions.Expression{System.Func{System.Func{{T1},{TResult}},{T1},{TResult}}}
      description: The inner function
    typeParameters:
    - id: T1
      description: The type of function argument 1
    - id: TResult
      description: The result type
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{TResult}}
      description: An observing function that runs the given function recursively
    content.vb: Public Shared Function Recurse(Of T1, TResult)(innerFunc As Expression(Of Func(Of Func(Of T1, TResult), T1, TResult))) As ObservingFunc(Of T1, TResult)
  overload: NMF.Expressions.Observable.Recurse*
  nameWithType.vb: Observable.Recurse(Of T1, TResult)(Expression(Of Func(Of Func(Of T1, TResult), T1, TResult)))
  fullName.vb: NMF.Expressions.Observable.Recurse(Of T1, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of System.Func(Of T1, TResult), T1, TResult)))
  name.vb: Recurse(Of T1, TResult)(Expression(Of Func(Of Func(Of T1, TResult), T1, TResult)))
- uid: NMF.Expressions.Observable.Recurse``3(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2},``0,``1,``2}})
  commentId: M:NMF.Expressions.Observable.Recurse``3(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2},``0,``1,``2}})
  id: Recurse``3(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2},``0,``1,``2}})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Recurse<T1, T2, TResult>(Expression<Func<Func<T1, T2, TResult>, T1, T2, TResult>>)
  nameWithType: Observable.Recurse<T1, T2, TResult>(Expression<Func<Func<T1, T2, TResult>, T1, T2, TResult>>)
  fullName: NMF.Expressions.Observable.Recurse<T1, T2, TResult>(System.Linq.Expressions.Expression<System.Func<System.Func<T1, T2, TResult>, T1, T2, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Recurse
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 588
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Recurses the given function
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, TResult> Recurse<T1, T2, TResult>(Expression<Func<Func<T1, T2, TResult>, T1, T2, TResult>> innerFunc)
    parameters:
    - id: innerFunc
      type: System.Linq.Expressions.Expression{System.Func{System.Func{{T1},{T2},{TResult}},{T1},{T2},{TResult}}}
      description: The inner function
    typeParameters:
    - id: T1
      description: The type of function argument 1
    - id: T2
      description: The type of function argument 2
    - id: TResult
      description: The result type
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{TResult}}
      description: An observing function that runs the given function recursively
    content.vb: Public Shared Function Recurse(Of T1, T2, TResult)(innerFunc As Expression(Of Func(Of Func(Of T1, T2, TResult), T1, T2, TResult))) As ObservingFunc(Of T1, T2, TResult)
  overload: NMF.Expressions.Observable.Recurse*
  nameWithType.vb: Observable.Recurse(Of T1, T2, TResult)(Expression(Of Func(Of Func(Of T1, T2, TResult), T1, T2, TResult)))
  fullName.vb: NMF.Expressions.Observable.Recurse(Of T1, T2, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of System.Func(Of T1, T2, TResult), T1, T2, TResult)))
  name.vb: Recurse(Of T1, T2, TResult)(Expression(Of Func(Of Func(Of T1, T2, TResult), T1, T2, TResult)))
- uid: NMF.Expressions.Observable.Recurse``4(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3},``0,``1,``2,``3}})
  commentId: M:NMF.Expressions.Observable.Recurse``4(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3},``0,``1,``2,``3}})
  id: Recurse``4(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3},``0,``1,``2,``3}})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Recurse<T1, T2, T3, TResult>(Expression<Func<Func<T1, T2, T3, TResult>, T1, T2, T3, TResult>>)
  nameWithType: Observable.Recurse<T1, T2, T3, TResult>(Expression<Func<Func<T1, T2, T3, TResult>, T1, T2, T3, TResult>>)
  fullName: NMF.Expressions.Observable.Recurse<T1, T2, T3, TResult>(System.Linq.Expressions.Expression<System.Func<System.Func<T1, T2, T3, TResult>, T1, T2, T3, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Recurse
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 603
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Recurses the given function
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, TResult> Recurse<T1, T2, T3, TResult>(Expression<Func<Func<T1, T2, T3, TResult>, T1, T2, T3, TResult>> innerFunc)
    parameters:
    - id: innerFunc
      type: System.Linq.Expressions.Expression{System.Func{System.Func{{T1},{T2},{T3},{TResult}},{T1},{T2},{T3},{TResult}}}
      description: The inner function
    typeParameters:
    - id: T1
      description: The type of function argument 1
    - id: T2
      description: The type of function argument 2
    - id: T3
      description: The type of function argument 3
    - id: TResult
      description: The result type
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}
      description: An observing function that runs the given function recursively
    content.vb: Public Shared Function Recurse(Of T1, T2, T3, TResult)(innerFunc As Expression(Of Func(Of Func(Of T1, T2, T3, TResult), T1, T2, T3, TResult))) As ObservingFunc(Of T1, T2, T3, TResult)
  overload: NMF.Expressions.Observable.Recurse*
  nameWithType.vb: Observable.Recurse(Of T1, T2, T3, TResult)(Expression(Of Func(Of Func(Of T1, T2, T3, TResult), T1, T2, T3, TResult)))
  fullName.vb: NMF.Expressions.Observable.Recurse(Of T1, T2, T3, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of System.Func(Of T1, T2, T3, TResult), T1, T2, T3, TResult)))
  name.vb: Recurse(Of T1, T2, T3, TResult)(Expression(Of Func(Of Func(Of T1, T2, T3, TResult), T1, T2, T3, TResult)))
- uid: NMF.Expressions.Observable.Recurse``5(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4}})
  commentId: M:NMF.Expressions.Observable.Recurse``5(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4}})
  id: Recurse``5(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4}})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Recurse<T1, T2, T3, T4, TResult>(Expression<Func<Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4, TResult>>)
  nameWithType: Observable.Recurse<T1, T2, T3, T4, TResult>(Expression<Func<Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4, TResult>>)
  fullName: NMF.Expressions.Observable.Recurse<T1, T2, T3, T4, TResult>(System.Linq.Expressions.Expression<System.Func<System.Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Recurse
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 619
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Recurses the given function
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, TResult> Recurse<T1, T2, T3, T4, TResult>(Expression<Func<Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4, TResult>> innerFunc)
    parameters:
    - id: innerFunc
      type: System.Linq.Expressions.Expression{System.Func{System.Func{{T1},{T2},{T3},{T4},{TResult}},{T1},{T2},{T3},{T4},{TResult}}}
      description: The inner function
    typeParameters:
    - id: T1
      description: The type of function argument 1
    - id: T2
      description: The type of function argument 2
    - id: T3
      description: The type of function argument 3
    - id: T4
      description: The type of function argument 4
    - id: TResult
      description: The result type
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{TResult}}
      description: An observing function that runs the given function recursively
    content.vb: Public Shared Function Recurse(Of T1, T2, T3, T4, TResult)(innerFunc As Expression(Of Func(Of Func(Of T1, T2, T3, T4, TResult), T1, T2, T3, T4, TResult))) As ObservingFunc(Of T1, T2, T3, T4, TResult)
  overload: NMF.Expressions.Observable.Recurse*
  nameWithType.vb: Observable.Recurse(Of T1, T2, T3, T4, TResult)(Expression(Of Func(Of Func(Of T1, T2, T3, T4, TResult), T1, T2, T3, T4, TResult)))
  fullName.vb: NMF.Expressions.Observable.Recurse(Of T1, T2, T3, T4, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of System.Func(Of T1, T2, T3, T4, TResult), T1, T2, T3, T4, TResult)))
  name.vb: Recurse(Of T1, T2, T3, T4, TResult)(Expression(Of Func(Of Func(Of T1, T2, T3, T4, TResult), T1, T2, T3, T4, TResult)))
- uid: NMF.Expressions.Observable.Recurse``6(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5}})
  commentId: M:NMF.Expressions.Observable.Recurse``6(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5}})
  id: Recurse``6(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5}})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Recurse<T1, T2, T3, T4, T5, TResult>(Expression<Func<Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5, TResult>>)
  nameWithType: Observable.Recurse<T1, T2, T3, T4, T5, TResult>(Expression<Func<Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5, TResult>>)
  fullName: NMF.Expressions.Observable.Recurse<T1, T2, T3, T4, T5, TResult>(System.Linq.Expressions.Expression<System.Func<System.Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Recurse
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 636
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Recurses the given function
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, TResult> Recurse<T1, T2, T3, T4, T5, TResult>(Expression<Func<Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5, TResult>> innerFunc)
    parameters:
    - id: innerFunc
      type: System.Linq.Expressions.Expression{System.Func{System.Func{{T1},{T2},{T3},{T4},{T5},{TResult}},{T1},{T2},{T3},{T4},{T5},{TResult}}}
      description: The inner function
    typeParameters:
    - id: T1
      description: The type of function argument 1
    - id: T2
      description: The type of function argument 2
    - id: T3
      description: The type of function argument 3
    - id: T4
      description: The type of function argument 4
    - id: T5
      description: The type of function argument 5
    - id: TResult
      description: The result type
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{TResult}}
      description: An observing function that runs the given function recursively
    content.vb: Public Shared Function Recurse(Of T1, T2, T3, T4, T5, TResult)(innerFunc As Expression(Of Func(Of Func(Of T1, T2, T3, T4, T5, TResult), T1, T2, T3, T4, T5, TResult))) As ObservingFunc(Of T1, T2, T3, T4, T5, TResult)
  overload: NMF.Expressions.Observable.Recurse*
  nameWithType.vb: Observable.Recurse(Of T1, T2, T3, T4, T5, TResult)(Expression(Of Func(Of Func(Of T1, T2, T3, T4, T5, TResult), T1, T2, T3, T4, T5, TResult)))
  fullName.vb: NMF.Expressions.Observable.Recurse(Of T1, T2, T3, T4, T5, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of System.Func(Of T1, T2, T3, T4, T5, TResult), T1, T2, T3, T4, T5, TResult)))
  name.vb: Recurse(Of T1, T2, T3, T4, T5, TResult)(Expression(Of Func(Of Func(Of T1, T2, T3, T4, T5, TResult), T1, T2, T3, T4, T5, TResult)))
- uid: NMF.Expressions.Observable.Recurse``7(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6}})
  commentId: M:NMF.Expressions.Observable.Recurse``7(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6}})
  id: Recurse``7(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6}})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Recurse<T1, T2, T3, T4, T5, T6, TResult>(Expression<Func<Func<T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6, TResult>>)
  nameWithType: Observable.Recurse<T1, T2, T3, T4, T5, T6, TResult>(Expression<Func<Func<T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6, TResult>>)
  fullName: NMF.Expressions.Observable.Recurse<T1, T2, T3, T4, T5, T6, TResult>(System.Linq.Expressions.Expression<System.Func<System.Func<T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Recurse
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 654
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Recurses the given function
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, T6, TResult> Recurse<T1, T2, T3, T4, T5, T6, TResult>(Expression<Func<Func<T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6, TResult>> innerFunc)
    parameters:
    - id: innerFunc
      type: System.Linq.Expressions.Expression{System.Func{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{TResult}},{T1},{T2},{T3},{T4},{T5},{T6},{TResult}}}
      description: The inner function
    typeParameters:
    - id: T1
      description: The type of function argument 1
    - id: T2
      description: The type of function argument 2
    - id: T3
      description: The type of function argument 3
    - id: T4
      description: The type of function argument 4
    - id: T5
      description: The type of function argument 5
    - id: T6
      description: The type of function argument 6
    - id: TResult
      description: The result type
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{TResult}}
      description: An observing function that runs the given function recursively
    content.vb: Public Shared Function Recurse(Of T1, T2, T3, T4, T5, T6, TResult)(innerFunc As Expression(Of Func(Of Func(Of T1, T2, T3, T4, T5, T6, TResult), T1, T2, T3, T4, T5, T6, TResult))) As ObservingFunc(Of T1, T2, T3, T4, T5, T6, TResult)
  overload: NMF.Expressions.Observable.Recurse*
  nameWithType.vb: Observable.Recurse(Of T1, T2, T3, T4, T5, T6, TResult)(Expression(Of Func(Of Func(Of T1, T2, T3, T4, T5, T6, TResult), T1, T2, T3, T4, T5, T6, TResult)))
  fullName.vb: NMF.Expressions.Observable.Recurse(Of T1, T2, T3, T4, T5, T6, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of System.Func(Of T1, T2, T3, T4, T5, T6, TResult), T1, T2, T3, T4, T5, T6, TResult)))
  name.vb: Recurse(Of T1, T2, T3, T4, T5, T6, TResult)(Expression(Of Func(Of Func(Of T1, T2, T3, T4, T5, T6, TResult), T1, T2, T3, T4, T5, T6, TResult)))
- uid: NMF.Expressions.Observable.Recurse``8(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7}})
  commentId: M:NMF.Expressions.Observable.Recurse``8(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7}})
  id: Recurse``8(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7}})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Recurse<T1, T2, T3, T4, T5, T6, T7, TResult>(Expression<Func<Func<T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7, TResult>>)
  nameWithType: Observable.Recurse<T1, T2, T3, T4, T5, T6, T7, TResult>(Expression<Func<Func<T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7, TResult>>)
  fullName: NMF.Expressions.Observable.Recurse<T1, T2, T3, T4, T5, T6, T7, TResult>(System.Linq.Expressions.Expression<System.Func<System.Func<T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Recurse
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 673
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Recurses the given function
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult> Recurse<T1, T2, T3, T4, T5, T6, T7, TResult>(Expression<Func<Func<T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7, TResult>> innerFunc)
    parameters:
    - id: innerFunc
      type: System.Linq.Expressions.Expression{System.Func{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{TResult}},{T1},{T2},{T3},{T4},{T5},{T6},{T7},{TResult}}}
      description: The inner function
    typeParameters:
    - id: T1
      description: The type of function argument 1
    - id: T2
      description: The type of function argument 2
    - id: T3
      description: The type of function argument 3
    - id: T4
      description: The type of function argument 4
    - id: T5
      description: The type of function argument 5
    - id: T6
      description: The type of function argument 6
    - id: T7
      description: The type of function argument 7
    - id: TResult
      description: The result type
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{TResult}}
      description: An observing function that runs the given function recursively
    content.vb: Public Shared Function Recurse(Of T1, T2, T3, T4, T5, T6, T7, TResult)(innerFunc As Expression(Of Func(Of Func(Of T1, T2, T3, T4, T5, T6, T7, TResult), T1, T2, T3, T4, T5, T6, T7, TResult))) As ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  overload: NMF.Expressions.Observable.Recurse*
  nameWithType.vb: Observable.Recurse(Of T1, T2, T3, T4, T5, T6, T7, TResult)(Expression(Of Func(Of Func(Of T1, T2, T3, T4, T5, T6, T7, TResult), T1, T2, T3, T4, T5, T6, T7, TResult)))
  fullName.vb: NMF.Expressions.Observable.Recurse(Of T1, T2, T3, T4, T5, T6, T7, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, TResult), T1, T2, T3, T4, T5, T6, T7, TResult)))
  name.vb: Recurse(Of T1, T2, T3, T4, T5, T6, T7, TResult)(Expression(Of Func(Of Func(Of T1, T2, T3, T4, T5, T6, T7, TResult), T1, T2, T3, T4, T5, T6, T7, TResult)))
- uid: NMF.Expressions.Observable.Recurse``9(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8}})
  commentId: M:NMF.Expressions.Observable.Recurse``9(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8}})
  id: Recurse``9(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8}})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Recurse<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Expression<Func<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, TResult>>)
  nameWithType: Observable.Recurse<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Expression<Func<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, TResult>>)
  fullName: NMF.Expressions.Observable.Recurse<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(System.Linq.Expressions.Expression<System.Func<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Recurse
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 693
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Recurses the given function
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult> Recurse<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Expression<Func<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, TResult>> innerFunc)
    parameters:
    - id: innerFunc
      type: System.Linq.Expressions.Expression{System.Func{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{TResult}},{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{TResult}}}
      description: The inner function
    typeParameters:
    - id: T1
      description: The type of function argument 1
    - id: T2
      description: The type of function argument 2
    - id: T3
      description: The type of function argument 3
    - id: T4
      description: The type of function argument 4
    - id: T5
      description: The type of function argument 5
    - id: T6
      description: The type of function argument 6
    - id: T7
      description: The type of function argument 7
    - id: T8
      description: The type of function argument 8
    - id: TResult
      description: The result type
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{TResult}}
      description: An observing function that runs the given function recursively
    content.vb: Public Shared Function Recurse(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)(innerFunc As Expression(Of Func(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult), T1, T2, T3, T4, T5, T6, T7, T8, TResult))) As ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  overload: NMF.Expressions.Observable.Recurse*
  nameWithType.vb: Observable.Recurse(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)(Expression(Of Func(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult), T1, T2, T3, T4, T5, T6, T7, T8, TResult)))
  fullName.vb: NMF.Expressions.Observable.Recurse(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult), T1, T2, T3, T4, T5, T6, T7, T8, TResult)))
  name.vb: Recurse(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)(Expression(Of Func(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult), T1, T2, T3, T4, T5, T6, T7, T8, TResult)))
- uid: NMF.Expressions.Observable.Recurse``10(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})
  commentId: M:NMF.Expressions.Observable.Recurse``10(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})
  id: Recurse``10(System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Recurse<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Expression<Func<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>>)
  nameWithType: Observable.Recurse<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Expression<Func<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>>)
  fullName: NMF.Expressions.Observable.Recurse<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(System.Linq.Expressions.Expression<System.Func<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Recurse
    path: src/Expressions/Expressions/Public/Observable.cs
    startLine: 714
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Recurses the given function
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> Recurse<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Expression<Func<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> innerFunc)
    parameters:
    - id: innerFunc
      type: System.Linq.Expressions.Expression{System.Func{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{TResult}},{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{TResult}}}
      description: The inner function
    typeParameters:
    - id: T1
      description: The type of function argument 1
    - id: T2
      description: The type of function argument 2
    - id: T3
      description: The type of function argument 3
    - id: T4
      description: The type of function argument 4
    - id: T5
      description: The type of function argument 5
    - id: T6
      description: The type of function argument 6
    - id: T7
      description: The type of function argument 7
    - id: T8
      description: The type of function argument 8
    - id: T9
      description: The type of function argument 9
    - id: TResult
      description: The result type
    return:
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{TResult}}
      description: An observing function that runs the given function recursively
    content.vb: Public Shared Function Recurse(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)(innerFunc As Expression(Of Func(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult), T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult))) As ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  overload: NMF.Expressions.Observable.Recurse*
  nameWithType.vb: Observable.Recurse(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)(Expression(Of Func(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult), T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)))
  fullName.vb: NMF.Expressions.Observable.Recurse(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)(System.Linq.Expressions.Expression(Of System.Func(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult), T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)))
  name.vb: Recurse(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)(Expression(Of Func(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult), T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)))
- uid: NMF.Expressions.Observable.Expression``1(System.Linq.Expressions.Expression{System.Func{``0}})
  commentId: M:NMF.Expressions.Observable.Expression``1(System.Linq.Expressions.Expression{System.Func{``0}})
  id: Expression``1(System.Linq.Expressions.Expression{System.Func{``0}})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Expression<T>(Expression<Func<T>>)
  nameWithType: Observable.Expression<T>(Expression<Func<T>>)
  fullName: NMF.Expressions.Observable.Expression<T>(System.Linq.Expressions.Expression<System.Func<T>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Expression
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 18
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Create an observable expression from the given LINQ Expression, i.e. the expression updates its value according to model changes
  example: []
  syntax:
    content: public static INotifyValue<T> Expression<T>(Expression<Func<T>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T}}}
      description: The LINQ Expression tree of the expression
    typeParameters:
    - id: T
      description: The type of the expression
    return:
      type: NMF.Expressions.INotifyValue{{T}}
      description: A notify value
    content.vb: Public Shared Function Expression(Of T)(expression As Expression(Of Func(Of T))) As INotifyValue(Of T)
  overload: NMF.Expressions.Observable.Expression*
  nameWithType.vb: Observable.Expression(Of T)(Expression(Of Func(Of T)))
  fullName.vb: NMF.Expressions.Observable.Expression(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T)))
  name.vb: Expression(Of T)(Expression(Of Func(Of T)))
- uid: NMF.Expressions.Observable.Reversable``1(System.Linq.Expressions.Expression{System.Func{``0}})
  commentId: M:NMF.Expressions.Observable.Reversable``1(System.Linq.Expressions.Expression{System.Func{``0}})
  id: Reversable``1(System.Linq.Expressions.Expression{System.Func{``0}})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Reversable<T>(Expression<Func<T>>)
  nameWithType: Observable.Reversable<T>(Expression<Func<T>>)
  fullName: NMF.Expressions.Observable.Reversable<T>(System.Linq.Expressions.Expression<System.Func<T>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Reversable
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 31
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates a reversable and observable expression from the given LINQ expression, i.e. the expression updates its value according to model changes and any changes to the expression are propagated back to the model
  example: []
  syntax:
    content: public static INotifyReversableValue<T> Reversable<T>(Expression<Func<T>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T}}}
      description: The LINQ Expression tree of the expression
    typeParameters:
    - id: T
      description: The type of the expression
    return:
      type: NMF.Expressions.INotifyReversableValue{{T}}
      description: A reversable notify value
    content.vb: Public Shared Function Reversable(Of T)(expression As Expression(Of Func(Of T))) As INotifyReversableValue(Of T)
  overload: NMF.Expressions.Observable.Reversable*
  nameWithType.vb: Observable.Reversable(Of T)(Expression(Of Func(Of T)))
  fullName.vb: NMF.Expressions.Observable.Reversable(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T)))
  name.vb: Reversable(Of T)(Expression(Of Func(Of T)))
- uid: NMF.Expressions.Observable.ArrayIndex``1(NMF.Expressions.INotifyExpression{``0[]},NMF.Expressions.INotifyExpression{System.Int32})
  commentId: M:NMF.Expressions.Observable.ArrayIndex``1(NMF.Expressions.INotifyExpression{``0[]},NMF.Expressions.INotifyExpression{System.Int32})
  id: ArrayIndex``1(NMF.Expressions.INotifyExpression{``0[]},NMF.Expressions.INotifyExpression{System.Int32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: ArrayIndex<T>(INotifyExpression<T[]>, INotifyExpression<int>)
  nameWithType: Observable.ArrayIndex<T>(INotifyExpression<T[]>, INotifyExpression<int>)
  fullName: NMF.Expressions.Observable.ArrayIndex<T>(NMF.Expressions.INotifyExpression<T[]>, NMF.Expressions.INotifyExpression<int>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ArrayIndex
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 52
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Acesses the given array index of the given incremental array
  example: []
  syntax:
    content: public static INotifyExpression<T> ArrayIndex<T>(INotifyExpression<T[]> array, INotifyExpression<int> index)
    parameters:
    - id: array
      type: NMF.Expressions.INotifyExpression{{T}[]}
      description: The incremental array
    - id: index
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The incremental index
    typeParameters:
    - id: T
      description: The array type
    return:
      type: NMF.Expressions.INotifyExpression{{T}}
      description: An incremental expression for the array index
    content.vb: Public Shared Function ArrayIndex(Of T)(array As INotifyExpression(Of T()), index As INotifyExpression(Of Integer)) As INotifyExpression(Of T)
  overload: NMF.Expressions.Observable.ArrayIndex*
  nameWithType.vb: Observable.ArrayIndex(Of T)(INotifyExpression(Of T()), INotifyExpression(Of Integer))
  fullName.vb: NMF.Expressions.Observable.ArrayIndex(Of T)(NMF.Expressions.INotifyExpression(Of T()), NMF.Expressions.INotifyExpression(Of Integer))
  name.vb: ArrayIndex(Of T)(INotifyExpression(Of T()), INotifyExpression(Of Integer))
- uid: NMF.Expressions.Observable.ArrayIndex``1(NMF.Expressions.INotifyExpression{``0[]},NMF.Expressions.INotifyExpression{System.Int64})
  commentId: M:NMF.Expressions.Observable.ArrayIndex``1(NMF.Expressions.INotifyExpression{``0[]},NMF.Expressions.INotifyExpression{System.Int64})
  id: ArrayIndex``1(NMF.Expressions.INotifyExpression{``0[]},NMF.Expressions.INotifyExpression{System.Int64})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: ArrayIndex<T>(INotifyExpression<T[]>, INotifyExpression<long>)
  nameWithType: Observable.ArrayIndex<T>(INotifyExpression<T[]>, INotifyExpression<long>)
  fullName: NMF.Expressions.Observable.ArrayIndex<T>(NMF.Expressions.INotifyExpression<T[]>, NMF.Expressions.INotifyExpression<long>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ArrayIndex
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 64
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Acesses the given array index of the given incremental array
  example: []
  syntax:
    content: public static INotifyExpression<T> ArrayIndex<T>(INotifyExpression<T[]> array, INotifyExpression<long> index)
    parameters:
    - id: array
      type: NMF.Expressions.INotifyExpression{{T}[]}
      description: The incremental array
    - id: index
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: The incremental index
    typeParameters:
    - id: T
      description: The array type
    return:
      type: NMF.Expressions.INotifyExpression{{T}}
      description: An incremental expression for the array index
    content.vb: Public Shared Function ArrayIndex(Of T)(array As INotifyExpression(Of T()), index As INotifyExpression(Of Long)) As INotifyExpression(Of T)
  overload: NMF.Expressions.Observable.ArrayIndex*
  nameWithType.vb: Observable.ArrayIndex(Of T)(INotifyExpression(Of T()), INotifyExpression(Of Long))
  fullName.vb: NMF.Expressions.Observable.ArrayIndex(Of T)(NMF.Expressions.INotifyExpression(Of T()), NMF.Expressions.INotifyExpression(Of Long))
  name.vb: ArrayIndex(Of T)(INotifyExpression(Of T()), INotifyExpression(Of Long))
- uid: NMF.Expressions.Observable.ArrayInitialization``1(System.Collections.Generic.IEnumerable{NMF.Expressions.INotifyExpression{``0}})
  commentId: M:NMF.Expressions.Observable.ArrayInitialization``1(System.Collections.Generic.IEnumerable{NMF.Expressions.INotifyExpression{``0}})
  id: ArrayInitialization``1(System.Collections.Generic.IEnumerable{NMF.Expressions.INotifyExpression{``0}})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: ArrayInitialization<T>(IEnumerable<INotifyExpression<T>>)
  nameWithType: Observable.ArrayInitialization<T>(IEnumerable<INotifyExpression<T>>)
  fullName: NMF.Expressions.Observable.ArrayInitialization<T>(System.Collections.Generic.IEnumerable<NMF.Expressions.INotifyExpression<T>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ArrayInitialization
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 75
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Initilaizes an array incrementally
  example: []
  syntax:
    content: public static INotifyExpression<T[]> ArrayInitialization<T>(IEnumerable<INotifyExpression<T>> elements)
    parameters:
    - id: elements
      type: System.Collections.Generic.IEnumerable{NMF.Expressions.INotifyExpression{{T}}}
      description: The elements of the array
    typeParameters:
    - id: T
      description: The array element type
    return:
      type: NMF.Expressions.INotifyExpression{{T}[]}
      description: An incremental array
    content.vb: Public Shared Function ArrayInitialization(Of T)(elements As IEnumerable(Of INotifyExpression(Of T))) As INotifyExpression(Of T())
  overload: NMF.Expressions.Observable.ArrayInitialization*
  nameWithType.vb: Observable.ArrayInitialization(Of T)(IEnumerable(Of INotifyExpression(Of T)))
  fullName.vb: NMF.Expressions.Observable.ArrayInitialization(Of T)(System.Collections.Generic.IEnumerable(Of NMF.Expressions.INotifyExpression(Of T)))
  name.vb: ArrayInitialization(Of T)(IEnumerable(Of INotifyExpression(Of T)))
- uid: NMF.Expressions.Observable.Coalesce``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  commentId: M:NMF.Expressions.Observable.Coalesce``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  id: Coalesce``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Coalesce<T>(INotifyExpression<T>, INotifyExpression<T>)
  nameWithType: Observable.Coalesce<T>(INotifyExpression<T>, INotifyExpression<T>)
  fullName: NMF.Expressions.Observable.Coalesce<T>(NMF.Expressions.INotifyExpression<T>, NMF.Expressions.INotifyExpression<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Coalesce
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 87
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Coalesces the given value with the given alternative
  example: []
  syntax:
    content: 'public static INotifyExpression<T> Coalesce<T>(INotifyExpression<T> value, INotifyExpression<T> ifNull) where T : class'
    parameters:
    - id: value
      type: NMF.Expressions.INotifyExpression{{T}}
      description: The incremental value that should be coalesced
    - id: ifNull
      type: NMF.Expressions.INotifyExpression{{T}}
      description: The incremental coalesce value
    typeParameters:
    - id: T
      description: The element type
    return:
      type: NMF.Expressions.INotifyExpression{{T}}
      description: An incremental coalesced value
    content.vb: Public Shared Function Coalesce(Of T As Class)(value As INotifyExpression(Of T), ifNull As INotifyExpression(Of T)) As INotifyExpression(Of T)
  overload: NMF.Expressions.Observable.Coalesce*
  nameWithType.vb: Observable.Coalesce(Of T)(INotifyExpression(Of T), INotifyExpression(Of T))
  fullName.vb: NMF.Expressions.Observable.Coalesce(Of T)(NMF.Expressions.INotifyExpression(Of T), NMF.Expressions.INotifyExpression(Of T))
  name.vb: Coalesce(Of T)(INotifyExpression(Of T), INotifyExpression(Of T))
- uid: NMF.Expressions.Observable.Coalesce``1(NMF.Expressions.INotifyReversableExpression{``0},NMF.Expressions.INotifyReversableExpression{``0})
  commentId: M:NMF.Expressions.Observable.Coalesce``1(NMF.Expressions.INotifyReversableExpression{``0},NMF.Expressions.INotifyReversableExpression{``0})
  id: Coalesce``1(NMF.Expressions.INotifyReversableExpression{``0},NMF.Expressions.INotifyReversableExpression{``0})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Coalesce<T>(INotifyReversableExpression<T>, INotifyReversableExpression<T>)
  nameWithType: Observable.Coalesce<T>(INotifyReversableExpression<T>, INotifyReversableExpression<T>)
  fullName: NMF.Expressions.Observable.Coalesce<T>(NMF.Expressions.INotifyReversableExpression<T>, NMF.Expressions.INotifyReversableExpression<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Coalesce
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 99
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Coalesces the given value with the given alternative
  example: []
  syntax:
    content: 'public static INotifyReversableExpression<T> Coalesce<T>(INotifyReversableExpression<T> value, INotifyReversableExpression<T> ifNull) where T : class'
    parameters:
    - id: value
      type: NMF.Expressions.INotifyReversableExpression{{T}}
      description: The incremental value that should be coalesced
    - id: ifNull
      type: NMF.Expressions.INotifyReversableExpression{{T}}
      description: The incremental coalesce value
    typeParameters:
    - id: T
      description: The element type
    return:
      type: NMF.Expressions.INotifyReversableExpression{{T}}
      description: An incremental coalesced value
    content.vb: Public Shared Function Coalesce(Of T As Class)(value As INotifyReversableExpression(Of T), ifNull As INotifyReversableExpression(Of T)) As INotifyReversableExpression(Of T)
  overload: NMF.Expressions.Observable.Coalesce*
  nameWithType.vb: Observable.Coalesce(Of T)(INotifyReversableExpression(Of T), INotifyReversableExpression(Of T))
  fullName.vb: NMF.Expressions.Observable.Coalesce(Of T)(NMF.Expressions.INotifyReversableExpression(Of T), NMF.Expressions.INotifyReversableExpression(Of T))
  name.vb: Coalesce(Of T)(INotifyReversableExpression(Of T), INotifyReversableExpression(Of T))
- uid: NMF.Expressions.Observable.Box``1(NMF.Expressions.INotifyExpression{``0})
  commentId: M:NMF.Expressions.Observable.Box``1(NMF.Expressions.INotifyExpression{``0})
  id: Box``1(NMF.Expressions.INotifyExpression{``0})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Box<T>(INotifyExpression<T>)
  nameWithType: Observable.Box<T>(INotifyExpression<T>)
  fullName: NMF.Expressions.Observable.Box<T>(NMF.Expressions.INotifyExpression<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Box
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 110
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Boxes the given incremental value
  example: []
  syntax:
    content: public static INotifyExpression<object> Box<T>(INotifyExpression<T> value)
    parameters:
    - id: value
      type: NMF.Expressions.INotifyExpression{{T}}
      description: The inner incremental value expression
    typeParameters:
    - id: T
      description: The type of the box
    return:
      type: NMF.Expressions.INotifyExpression{System.Object}
      description: An incremental value of type object
    content.vb: Public Shared Function Box(Of T)(value As INotifyExpression(Of T)) As INotifyExpression(Of Object)
  overload: NMF.Expressions.Observable.Box*
  nameWithType.vb: Observable.Box(Of T)(INotifyExpression(Of T))
  fullName.vb: NMF.Expressions.Observable.Box(Of T)(NMF.Expressions.INotifyExpression(Of T))
  name.vb: Box(Of T)(INotifyExpression(Of T))
- uid: NMF.Expressions.Observable.Box``1(NMF.Expressions.INotifyReversableExpression{``0})
  commentId: M:NMF.Expressions.Observable.Box``1(NMF.Expressions.INotifyReversableExpression{``0})
  id: Box``1(NMF.Expressions.INotifyReversableExpression{``0})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Box<T>(INotifyReversableExpression<T>)
  nameWithType: Observable.Box<T>(INotifyReversableExpression<T>)
  fullName: NMF.Expressions.Observable.Box<T>(NMF.Expressions.INotifyReversableExpression<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Box
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 128
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Boxes the given incremental value
  example: []
  syntax:
    content: public static INotifyReversableExpression<object> Box<T>(INotifyReversableExpression<T> value)
    parameters:
    - id: value
      type: NMF.Expressions.INotifyReversableExpression{{T}}
      description: The inner incremental value expression
    typeParameters:
    - id: T
      description: The type of the box
    return:
      type: NMF.Expressions.INotifyReversableExpression{System.Object}
      description: An incremental value of type object
    content.vb: Public Shared Function Box(Of T)(value As INotifyReversableExpression(Of T)) As INotifyReversableExpression(Of Object)
  overload: NMF.Expressions.Observable.Box*
  nameWithType.vb: Observable.Box(Of T)(INotifyReversableExpression(Of T))
  fullName.vb: NMF.Expressions.Observable.Box(Of T)(NMF.Expressions.INotifyReversableExpression(Of T))
  name.vb: Box(Of T)(INotifyReversableExpression(Of T))
- uid: NMF.Expressions.Observable.Conditional``1(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  commentId: M:NMF.Expressions.Observable.Conditional``1(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  id: Conditional``1(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Conditional<T>(INotifyExpression<bool>, INotifyExpression<T>, INotifyExpression<T>)
  nameWithType: Observable.Conditional<T>(INotifyExpression<bool>, INotifyExpression<T>, INotifyExpression<T>)
  fullName: NMF.Expressions.Observable.Conditional<T>(NMF.Expressions.INotifyExpression<bool>, NMF.Expressions.INotifyExpression<T>, NMF.Expressions.INotifyExpression<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Conditional
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 142
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an incremental conditional
  remarks: The incremental value not used for the conditional is automatically detached
  example: []
  syntax:
    content: public static INotifyExpression<T> Conditional<T>(INotifyExpression<bool> test, INotifyExpression<T> ifTrue, INotifyExpression<T> ifFalse)
    parameters:
    - id: test
      type: NMF.Expressions.INotifyExpression{System.Boolean}
      description: An incremental value determing the test
    - id: ifTrue
      type: NMF.Expressions.INotifyExpression{{T}}
      description: The conditional value if the test is true
    - id: ifFalse
      type: NMF.Expressions.INotifyExpression{{T}}
      description: The conditional value if the test is false
    typeParameters:
    - id: T
      description: The type of the conditional
    return:
      type: NMF.Expressions.INotifyExpression{{T}}
      description: An incremental conditional
    content.vb: Public Shared Function Conditional(Of T)(test As INotifyExpression(Of Boolean), ifTrue As INotifyExpression(Of T), ifFalse As INotifyExpression(Of T)) As INotifyExpression(Of T)
  overload: NMF.Expressions.Observable.Conditional*
  nameWithType.vb: Observable.Conditional(Of T)(INotifyExpression(Of Boolean), INotifyExpression(Of T), INotifyExpression(Of T))
  fullName.vb: NMF.Expressions.Observable.Conditional(Of T)(NMF.Expressions.INotifyExpression(Of Boolean), NMF.Expressions.INotifyExpression(Of T), NMF.Expressions.INotifyExpression(Of T))
  name.vb: Conditional(Of T)(INotifyExpression(Of Boolean), INotifyExpression(Of T), INotifyExpression(Of T))
- uid: NMF.Expressions.Observable.Constant``1(``0)
  commentId: M:NMF.Expressions.Observable.Constant``1(``0)
  id: Constant``1(``0)
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Constant<T>(T)
  nameWithType: Observable.Constant<T>(T)
  fullName: NMF.Expressions.Observable.Constant<T>(T)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Constant
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 153
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an incremental constant value
  example: []
  syntax:
    content: public static INotifyExpression<T> Constant<T>(T value)
    parameters:
    - id: value
      type: '{T}'
      description: The value of the constant
    typeParameters:
    - id: T
      description: The type of the constant
    return:
      type: NMF.Expressions.INotifyExpression{{T}}
      description: An incremental constant
    content.vb: Public Shared Function Constant(Of T)(value As T) As INotifyExpression(Of T)
  overload: NMF.Expressions.Observable.Constant*
  nameWithType.vb: Observable.Constant(Of T)(T)
  fullName.vb: NMF.Expressions.Observable.Constant(Of T)(T)
  name.vb: Constant(Of T)(T)
- uid: NMF.Expressions.Observable.NewArray``1(NMF.Expressions.INotifyExpression{System.Int32})
  commentId: M:NMF.Expressions.Observable.NewArray``1(NMF.Expressions.INotifyExpression{System.Int32})
  id: NewArray``1(NMF.Expressions.INotifyExpression{System.Int32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: NewArray<T>(INotifyExpression<int>)
  nameWithType: Observable.NewArray<T>(INotifyExpression<int>)
  fullName: NMF.Expressions.Observable.NewArray<T>(NMF.Expressions.INotifyExpression<int>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NewArray
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 164
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an incremental 1-dimensional array with the given bounds
  example: []
  syntax:
    content: public static INotifyExpression<T[]> NewArray<T>(INotifyExpression<int> bounds)
    parameters:
    - id: bounds
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The bounds of the array (dimension 0)
    typeParameters:
    - id: T
      description: The array type
    return:
      type: NMF.Expressions.INotifyExpression{{T}[]}
      description: An incremental array
    content.vb: Public Shared Function NewArray(Of T)(bounds As INotifyExpression(Of Integer)) As INotifyExpression(Of T())
  overload: NMF.Expressions.Observable.NewArray*
  nameWithType.vb: Observable.NewArray(Of T)(INotifyExpression(Of Integer))
  fullName.vb: NMF.Expressions.Observable.NewArray(Of T)(NMF.Expressions.INotifyExpression(Of Integer))
  name.vb: NewArray(Of T)(INotifyExpression(Of Integer))
- uid: NMF.Expressions.Observable.NewArray``1(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  commentId: M:NMF.Expressions.Observable.NewArray``1(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  id: NewArray``1(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: NewArray<T>(INotifyExpression<int>, INotifyExpression<int>)
  nameWithType: Observable.NewArray<T>(INotifyExpression<int>, INotifyExpression<int>)
  fullName: NMF.Expressions.Observable.NewArray<T>(NMF.Expressions.INotifyExpression<int>, NMF.Expressions.INotifyExpression<int>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NewArray
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 176
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an incremental 2-dimensional array with the given bounds
  example: []
  syntax:
    content: public static INotifyExpression<T[,]> NewArray<T>(INotifyExpression<int> bounds1, INotifyExpression<int> bounds2)
    parameters:
    - id: bounds1
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The bounds of the array (dimension 0)
    - id: bounds2
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The bounds of the array (dimension 1)
    typeParameters:
    - id: T
      description: The array type
    return:
      type: NMF.Expressions.INotifyExpression{{T}[0:,0:]}
      description: An incremental array
    content.vb: Public Shared Function NewArray(Of T)(bounds1 As INotifyExpression(Of Integer), bounds2 As INotifyExpression(Of Integer)) As INotifyExpression(Of T(,))
  overload: NMF.Expressions.Observable.NewArray*
  nameWithType.vb: Observable.NewArray(Of T)(INotifyExpression(Of Integer), INotifyExpression(Of Integer))
  fullName.vb: NMF.Expressions.Observable.NewArray(Of T)(NMF.Expressions.INotifyExpression(Of Integer), NMF.Expressions.INotifyExpression(Of Integer))
  name.vb: NewArray(Of T)(INotifyExpression(Of Integer), INotifyExpression(Of Integer))
- uid: NMF.Expressions.Observable.NewArray``1(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  commentId: M:NMF.Expressions.Observable.NewArray``1(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  id: NewArray``1(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: NewArray<T>(INotifyExpression<int>, INotifyExpression<int>, INotifyExpression<int>)
  nameWithType: Observable.NewArray<T>(INotifyExpression<int>, INotifyExpression<int>, INotifyExpression<int>)
  fullName: NMF.Expressions.Observable.NewArray<T>(NMF.Expressions.INotifyExpression<int>, NMF.Expressions.INotifyExpression<int>, NMF.Expressions.INotifyExpression<int>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NewArray
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 189
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates an incremental 3-dimensional array with the given bounds
  example: []
  syntax:
    content: public static INotifyExpression<T[,,]> NewArray<T>(INotifyExpression<int> bounds1, INotifyExpression<int> bounds2, INotifyExpression<int> bounds3)
    parameters:
    - id: bounds1
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The bounds of the array (dimension 0)
    - id: bounds2
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The bounds of the array (dimension 1)
    - id: bounds3
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The bounds of the array (dimension 2)
    typeParameters:
    - id: T
      description: The array type
    return:
      type: NMF.Expressions.INotifyExpression{{T}[0:,0:,0:]}
      description: An incremental array
    content.vb: Public Shared Function NewArray(Of T)(bounds1 As INotifyExpression(Of Integer), bounds2 As INotifyExpression(Of Integer), bounds3 As INotifyExpression(Of Integer)) As INotifyExpression(Of T(,,))
  overload: NMF.Expressions.Observable.NewArray*
  nameWithType.vb: Observable.NewArray(Of T)(INotifyExpression(Of Integer), INotifyExpression(Of Integer), INotifyExpression(Of Integer))
  fullName.vb: NMF.Expressions.Observable.NewArray(Of T)(NMF.Expressions.INotifyExpression(Of Integer), NMF.Expressions.INotifyExpression(Of Integer), NMF.Expressions.INotifyExpression(Of Integer))
  name.vb: NewArray(Of T)(INotifyExpression(Of Integer), INotifyExpression(Of Integer), INotifyExpression(Of Integer))
- uid: NMF.Expressions.Observable.InstanceOf(NMF.Expressions.INotifyExpression{System.Object},System.Type)
  commentId: M:NMF.Expressions.Observable.InstanceOf(NMF.Expressions.INotifyExpression{System.Object},System.Type)
  id: InstanceOf(NMF.Expressions.INotifyExpression{System.Object},System.Type)
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: InstanceOf(INotifyExpression<object>, Type)
  nameWithType: Observable.InstanceOf(INotifyExpression<object>, Type)
  fullName: NMF.Expressions.Observable.InstanceOf(NMF.Expressions.INotifyExpression<object>, System.Type)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: InstanceOf
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 200
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Incrementally tests whether the given incremental value is an instance of the given type
  example: []
  syntax:
    content: public static INotifyExpression<bool> InstanceOf(INotifyExpression<object> inner, Type type)
    parameters:
    - id: inner
      type: NMF.Expressions.INotifyExpression{System.Object}
      description: The value that should be tested for the given type
    - id: type
      type: System.Type
      description: The type for which should be tested
    return:
      type: NMF.Expressions.INotifyExpression{System.Boolean}
      description: An incremental value whether the object is of the given type
    content.vb: Public Shared Function InstanceOf(inner As INotifyExpression(Of Object), type As Type) As INotifyExpression(Of Boolean)
  overload: NMF.Expressions.Observable.InstanceOf*
  nameWithType.vb: Observable.InstanceOf(INotifyExpression(Of Object), Type)
  fullName.vb: NMF.Expressions.Observable.InstanceOf(NMF.Expressions.INotifyExpression(Of Object), System.Type)
  name.vb: InstanceOf(INotifyExpression(Of Object), Type)
- uid: NMF.Expressions.Observable.As``2(NMF.Expressions.INotifyExpression{``0})
  commentId: M:NMF.Expressions.Observable.As``2(NMF.Expressions.INotifyExpression{``0})
  id: As``2(NMF.Expressions.INotifyExpression{``0})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: As<TInner, TOuter>(INotifyExpression<TInner>)
  nameWithType: Observable.As<TInner, TOuter>(INotifyExpression<TInner>)
  fullName: NMF.Expressions.Observable.As<TInner, TOuter>(NMF.Expressions.INotifyExpression<TInner>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: As
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 212
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Casts the given object to the given type or returns null if not successful
  example: []
  syntax:
    content: 'public static INotifyExpression<TOuter> As<TInner, TOuter>(INotifyExpression<TInner> value) where TOuter : class'
    parameters:
    - id: value
      type: NMF.Expressions.INotifyExpression{{TInner}}
      description: The incremental value to cast
    typeParameters:
    - id: TInner
      description: The type of the object that is already known
    - id: TOuter
      description: The type to which the object should be casted
    return:
      type: NMF.Expressions.INotifyExpression{{TOuter}}
      description: An incremental valuen with the new type or null
    content.vb: Public Shared Function [As](Of TInner, TOuter As Class)(value As INotifyExpression(Of TInner)) As INotifyExpression(Of TOuter)
  overload: NMF.Expressions.Observable.As*
  nameWithType.vb: Observable.As(Of TInner, TOuter)(INotifyExpression(Of TInner))
  fullName.vb: NMF.Expressions.Observable.As(Of TInner, TOuter)(NMF.Expressions.INotifyExpression(Of TInner))
  name.vb: As(Of TInner, TOuter)(INotifyExpression(Of TInner))
- uid: NMF.Expressions.Observable.Convert``2(NMF.Expressions.INotifyExpression{``0})
  commentId: M:NMF.Expressions.Observable.Convert``2(NMF.Expressions.INotifyExpression{``0})
  id: Convert``2(NMF.Expressions.INotifyExpression{``0})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Convert<TSource, TTarget>(INotifyExpression<TSource>)
  nameWithType: Observable.Convert<TSource, TTarget>(INotifyExpression<TSource>)
  fullName: NMF.Expressions.Observable.Convert<TSource, TTarget>(NMF.Expressions.INotifyExpression<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Convert
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 225
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Converts the given object to the given type incrementally
  example: []
  syntax:
    content: public static INotifyExpression<TTarget> Convert<TSource, TTarget>(INotifyExpression<TSource> source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyExpression{{TSource}}
      description: The incrementalk value that should be converted
    typeParameters:
    - id: TSource
      description: The current type of the object
    - id: TTarget
      description: The conversion type
    return:
      type: NMF.Expressions.INotifyExpression{{TTarget}}
      description: An incremental value with the conversion result
    content.vb: Public Shared Function Convert(Of TSource, TTarget)(source As INotifyExpression(Of TSource)) As INotifyExpression(Of TTarget)
  overload: NMF.Expressions.Observable.Convert*
  nameWithType.vb: Observable.Convert(Of TSource, TTarget)(INotifyExpression(Of TSource))
  fullName.vb: NMF.Expressions.Observable.Convert(Of TSource, TTarget)(NMF.Expressions.INotifyExpression(Of TSource))
  name.vb: Convert(Of TSource, TTarget)(INotifyExpression(Of TSource))
- uid: NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  commentId: M:NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  id: And(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: And(INotifyExpression<int>, INotifyExpression<int>)
  nameWithType: Observable.And(INotifyExpression<int>, INotifyExpression<int>)
  fullName: NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression<int>, NMF.Expressions.INotifyExpression<int>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: And
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 236
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Performs a bitwise and operation on the given incremental values
  example: []
  syntax:
    content: public static INotifyExpression<int> And(INotifyExpression<int> left, INotifyExpression<int> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The left operator
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The right operator
    return:
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: An incremental value with the bitwise and of the operators
    content.vb: Public Shared Function [And](left As INotifyExpression(Of Integer), right As INotifyExpression(Of Integer)) As INotifyExpression(Of Integer)
  overload: NMF.Expressions.Observable.And*
  nameWithType.vb: Observable.And(INotifyExpression(Of Integer), INotifyExpression(Of Integer))
  fullName.vb: NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression(Of Integer), NMF.Expressions.INotifyExpression(Of Integer))
  name.vb: And(INotifyExpression(Of Integer), INotifyExpression(Of Integer))
- uid: NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  commentId: M:NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  id: And(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: And(INotifyExpression<long>, INotifyExpression<long>)
  nameWithType: Observable.And(INotifyExpression<long>, INotifyExpression<long>)
  fullName: NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression<long>, NMF.Expressions.INotifyExpression<long>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: And
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 247
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Performs a bitwise and operation on the given incremental values
  example: []
  syntax:
    content: public static INotifyExpression<long> And(INotifyExpression<long> left, INotifyExpression<long> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: The left operator
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: The right operator
    return:
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: An incremental value with the bitwise and of the operators
    content.vb: Public Shared Function [And](left As INotifyExpression(Of Long), right As INotifyExpression(Of Long)) As INotifyExpression(Of Long)
  overload: NMF.Expressions.Observable.And*
  nameWithType.vb: Observable.And(INotifyExpression(Of Long), INotifyExpression(Of Long))
  fullName.vb: NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression(Of Long), NMF.Expressions.INotifyExpression(Of Long))
  name.vb: And(INotifyExpression(Of Long), INotifyExpression(Of Long))
- uid: NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  commentId: M:NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  id: And(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: And(INotifyExpression<uint>, INotifyExpression<uint>)
  nameWithType: Observable.And(INotifyExpression<uint>, INotifyExpression<uint>)
  fullName: NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression<uint>, NMF.Expressions.INotifyExpression<uint>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: And
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 258
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Performs a bitwise and operation on the given incremental values
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static INotifyExpression<uint> And(INotifyExpression<uint> left, INotifyExpression<uint> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: The left operator
    - id: right
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: The right operator
    return:
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: An incremental value with the bitwise and of the operators
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function [And](left As INotifyExpression(Of UInteger), right As INotifyExpression(Of UInteger)) As INotifyExpression(Of UInteger)
  overload: NMF.Expressions.Observable.And*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Observable.And(INotifyExpression(Of UInteger), INotifyExpression(Of UInteger))
  fullName.vb: NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression(Of UInteger), NMF.Expressions.INotifyExpression(Of UInteger))
  name.vb: And(INotifyExpression(Of UInteger), INotifyExpression(Of UInteger))
- uid: NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  commentId: M:NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  id: And(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: And(INotifyExpression<ulong>, INotifyExpression<ulong>)
  nameWithType: Observable.And(INotifyExpression<ulong>, INotifyExpression<ulong>)
  fullName: NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression<ulong>, NMF.Expressions.INotifyExpression<ulong>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: And
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 270
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Performs a bitwise and operation on the given incremental values
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static INotifyExpression<ulong> And(INotifyExpression<ulong> left, INotifyExpression<ulong> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: The left operator
    - id: right
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: The right operator
    return:
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: An incremental value with the bitwise and of the operators
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function [And](left As INotifyExpression(Of ULong), right As INotifyExpression(Of ULong)) As INotifyExpression(Of ULong)
  overload: NMF.Expressions.Observable.And*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Observable.And(INotifyExpression(Of ULong), INotifyExpression(Of ULong))
  fullName.vb: NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression(Of ULong), NMF.Expressions.INotifyExpression(Of ULong))
  name.vb: And(INotifyExpression(Of ULong), INotifyExpression(Of ULong))
- uid: NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  commentId: M:NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  id: Or(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Or(INotifyExpression<int>, INotifyExpression<int>)
  nameWithType: Observable.Or(INotifyExpression<int>, INotifyExpression<int>)
  fullName: NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression<int>, NMF.Expressions.INotifyExpression<int>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Or
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 282
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Performs a bitwise or operation on the given incremental values
  example: []
  syntax:
    content: public static INotifyExpression<int> Or(INotifyExpression<int> left, INotifyExpression<int> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The left operator
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The right operator
    return:
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: An incremental value with the bitwise or of the operators
    content.vb: Public Shared Function [Or](left As INotifyExpression(Of Integer), right As INotifyExpression(Of Integer)) As INotifyExpression(Of Integer)
  overload: NMF.Expressions.Observable.Or*
  nameWithType.vb: Observable.Or(INotifyExpression(Of Integer), INotifyExpression(Of Integer))
  fullName.vb: NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression(Of Integer), NMF.Expressions.INotifyExpression(Of Integer))
  name.vb: Or(INotifyExpression(Of Integer), INotifyExpression(Of Integer))
- uid: NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  commentId: M:NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  id: Or(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Or(INotifyExpression<long>, INotifyExpression<long>)
  nameWithType: Observable.Or(INotifyExpression<long>, INotifyExpression<long>)
  fullName: NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression<long>, NMF.Expressions.INotifyExpression<long>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Or
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 293
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Performs a bitwise or operation on the given incremental values
  example: []
  syntax:
    content: public static INotifyExpression<long> Or(INotifyExpression<long> left, INotifyExpression<long> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: The left operator
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: The right operator
    return:
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: An incremental value with the bitwise or of the operators
    content.vb: Public Shared Function [Or](left As INotifyExpression(Of Long), right As INotifyExpression(Of Long)) As INotifyExpression(Of Long)
  overload: NMF.Expressions.Observable.Or*
  nameWithType.vb: Observable.Or(INotifyExpression(Of Long), INotifyExpression(Of Long))
  fullName.vb: NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression(Of Long), NMF.Expressions.INotifyExpression(Of Long))
  name.vb: Or(INotifyExpression(Of Long), INotifyExpression(Of Long))
- uid: NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  commentId: M:NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  id: Or(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Or(INotifyExpression<uint>, INotifyExpression<uint>)
  nameWithType: Observable.Or(INotifyExpression<uint>, INotifyExpression<uint>)
  fullName: NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression<uint>, NMF.Expressions.INotifyExpression<uint>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Or
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 304
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Performs a bitwise or operation on the given incremental values
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static INotifyExpression<uint> Or(INotifyExpression<uint> left, INotifyExpression<uint> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: The left operator
    - id: right
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: The right operator
    return:
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: An incremental value with the bitwise or of the operators
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function [Or](left As INotifyExpression(Of UInteger), right As INotifyExpression(Of UInteger)) As INotifyExpression(Of UInteger)
  overload: NMF.Expressions.Observable.Or*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Observable.Or(INotifyExpression(Of UInteger), INotifyExpression(Of UInteger))
  fullName.vb: NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression(Of UInteger), NMF.Expressions.INotifyExpression(Of UInteger))
  name.vb: Or(INotifyExpression(Of UInteger), INotifyExpression(Of UInteger))
- uid: NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  commentId: M:NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  id: Or(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Or(INotifyExpression<ulong>, INotifyExpression<ulong>)
  nameWithType: Observable.Or(INotifyExpression<ulong>, INotifyExpression<ulong>)
  fullName: NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression<ulong>, NMF.Expressions.INotifyExpression<ulong>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Or
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 316
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Performs a bitwise or operation on the given incremental values
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static INotifyExpression<ulong> Or(INotifyExpression<ulong> left, INotifyExpression<ulong> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: The left operator
    - id: right
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: The right operator
    return:
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: An incremental value with the bitwise or of the operators
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function [Or](left As INotifyExpression(Of ULong), right As INotifyExpression(Of ULong)) As INotifyExpression(Of ULong)
  overload: NMF.Expressions.Observable.Or*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Observable.Or(INotifyExpression(Of ULong), INotifyExpression(Of ULong))
  fullName.vb: NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression(Of ULong), NMF.Expressions.INotifyExpression(Of ULong))
  name.vb: Or(INotifyExpression(Of ULong), INotifyExpression(Of ULong))
- uid: NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  commentId: M:NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  id: Xor(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Xor(INotifyExpression<int>, INotifyExpression<int>)
  nameWithType: Observable.Xor(INotifyExpression<int>, INotifyExpression<int>)
  fullName: NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression<int>, NMF.Expressions.INotifyExpression<int>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Xor
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 328
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Performs a bitwise xor operation on the given incremental values
  example: []
  syntax:
    content: public static INotifyExpression<int> Xor(INotifyExpression<int> left, INotifyExpression<int> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The left operator
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The right operator
    return:
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: An incremental value with the bitwise xor of the operators
    content.vb: Public Shared Function [Xor](left As INotifyExpression(Of Integer), right As INotifyExpression(Of Integer)) As INotifyExpression(Of Integer)
  overload: NMF.Expressions.Observable.Xor*
  nameWithType.vb: Observable.Xor(INotifyExpression(Of Integer), INotifyExpression(Of Integer))
  fullName.vb: NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression(Of Integer), NMF.Expressions.INotifyExpression(Of Integer))
  name.vb: Xor(INotifyExpression(Of Integer), INotifyExpression(Of Integer))
- uid: NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  commentId: M:NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  id: Xor(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Xor(INotifyExpression<long>, INotifyExpression<long>)
  nameWithType: Observable.Xor(INotifyExpression<long>, INotifyExpression<long>)
  fullName: NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression<long>, NMF.Expressions.INotifyExpression<long>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Xor
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 339
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Performs a bitwise xor operation on the given incremental values
  example: []
  syntax:
    content: public static INotifyExpression<long> Xor(INotifyExpression<long> left, INotifyExpression<long> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: The left operator
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: The right operator
    return:
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: An incremental value with the bitwise xor of the operators
    content.vb: Public Shared Function [Xor](left As INotifyExpression(Of Long), right As INotifyExpression(Of Long)) As INotifyExpression(Of Long)
  overload: NMF.Expressions.Observable.Xor*
  nameWithType.vb: Observable.Xor(INotifyExpression(Of Long), INotifyExpression(Of Long))
  fullName.vb: NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression(Of Long), NMF.Expressions.INotifyExpression(Of Long))
  name.vb: Xor(INotifyExpression(Of Long), INotifyExpression(Of Long))
- uid: NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  commentId: M:NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  id: Xor(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Xor(INotifyExpression<uint>, INotifyExpression<uint>)
  nameWithType: Observable.Xor(INotifyExpression<uint>, INotifyExpression<uint>)
  fullName: NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression<uint>, NMF.Expressions.INotifyExpression<uint>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Xor
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 350
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Performs a bitwise xor operation on the given incremental values
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static INotifyExpression<uint> Xor(INotifyExpression<uint> left, INotifyExpression<uint> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: The left operator
    - id: right
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: The right operator
    return:
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: An incremental value with the bitwise xor of the operators
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function [Xor](left As INotifyExpression(Of UInteger), right As INotifyExpression(Of UInteger)) As INotifyExpression(Of UInteger)
  overload: NMF.Expressions.Observable.Xor*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Observable.Xor(INotifyExpression(Of UInteger), INotifyExpression(Of UInteger))
  fullName.vb: NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression(Of UInteger), NMF.Expressions.INotifyExpression(Of UInteger))
  name.vb: Xor(INotifyExpression(Of UInteger), INotifyExpression(Of UInteger))
- uid: NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  commentId: M:NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  id: Xor(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Xor(INotifyExpression<ulong>, INotifyExpression<ulong>)
  nameWithType: Observable.Xor(INotifyExpression<ulong>, INotifyExpression<ulong>)
  fullName: NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression<ulong>, NMF.Expressions.INotifyExpression<ulong>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Xor
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 362
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Performs a bitwise xor operation on the given incremental values
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static INotifyExpression<ulong> Xor(INotifyExpression<ulong> left, INotifyExpression<ulong> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: The left operator
    - id: right
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: The right operator
    return:
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: An incremental value with the bitwise xor of the operators
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function [Xor](left As INotifyExpression(Of ULong), right As INotifyExpression(Of ULong)) As INotifyExpression(Of ULong)
  overload: NMF.Expressions.Observable.Xor*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Observable.Xor(INotifyExpression(Of ULong), INotifyExpression(Of ULong))
  fullName.vb: NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression(Of ULong), NMF.Expressions.INotifyExpression(Of ULong))
  name.vb: Xor(INotifyExpression(Of ULong), INotifyExpression(Of ULong))
- uid: NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{System.Boolean})
  commentId: M:NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{System.Boolean})
  id: And(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{System.Boolean})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: And(INotifyExpression<bool>, INotifyExpression<bool>)
  nameWithType: Observable.And(INotifyExpression<bool>, INotifyExpression<bool>)
  fullName: NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression<bool>, NMF.Expressions.INotifyExpression<bool>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: And
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 374
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Performs a logic and operation on the given incremental values
  example: []
  syntax:
    content: public static INotifyExpression<bool> And(INotifyExpression<bool> left, INotifyExpression<bool> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Boolean}
      description: The left operator
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Boolean}
      description: The right operator
    return:
      type: NMF.Expressions.INotifyExpression{System.Boolean}
      description: An incremental value with the logic and of the operators
    content.vb: Public Shared Function [And](left As INotifyExpression(Of Boolean), right As INotifyExpression(Of Boolean)) As INotifyExpression(Of Boolean)
  overload: NMF.Expressions.Observable.And*
  nameWithType.vb: Observable.And(INotifyExpression(Of Boolean), INotifyExpression(Of Boolean))
  fullName.vb: NMF.Expressions.Observable.And(NMF.Expressions.INotifyExpression(Of Boolean), NMF.Expressions.INotifyExpression(Of Boolean))
  name.vb: And(INotifyExpression(Of Boolean), INotifyExpression(Of Boolean))
- uid: NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{System.Boolean})
  commentId: M:NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{System.Boolean})
  id: Or(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{System.Boolean})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Or(INotifyExpression<bool>, INotifyExpression<bool>)
  nameWithType: Observable.Or(INotifyExpression<bool>, INotifyExpression<bool>)
  fullName: NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression<bool>, NMF.Expressions.INotifyExpression<bool>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Or
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 385
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Performs a logic or operation on the given incremental values
  example: []
  syntax:
    content: public static INotifyExpression<bool> Or(INotifyExpression<bool> left, INotifyExpression<bool> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Boolean}
      description: The left operator
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Boolean}
      description: The right operator
    return:
      type: NMF.Expressions.INotifyExpression{System.Boolean}
      description: An incremental value with the logic or of the operators
    content.vb: Public Shared Function [Or](left As INotifyExpression(Of Boolean), right As INotifyExpression(Of Boolean)) As INotifyExpression(Of Boolean)
  overload: NMF.Expressions.Observable.Or*
  nameWithType.vb: Observable.Or(INotifyExpression(Of Boolean), INotifyExpression(Of Boolean))
  fullName.vb: NMF.Expressions.Observable.Or(NMF.Expressions.INotifyExpression(Of Boolean), NMF.Expressions.INotifyExpression(Of Boolean))
  name.vb: Or(INotifyExpression(Of Boolean), INotifyExpression(Of Boolean))
- uid: NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{System.Boolean})
  commentId: M:NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{System.Boolean})
  id: Xor(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{System.Boolean})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Xor(INotifyExpression<bool>, INotifyExpression<bool>)
  nameWithType: Observable.Xor(INotifyExpression<bool>, INotifyExpression<bool>)
  fullName: NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression<bool>, NMF.Expressions.INotifyExpression<bool>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Xor
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 396
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Performs a logic xor operation on the given incremental values
  example: []
  syntax:
    content: public static INotifyExpression<bool> Xor(INotifyExpression<bool> left, INotifyExpression<bool> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Boolean}
      description: The left operator
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Boolean}
      description: The right operator
    return:
      type: NMF.Expressions.INotifyExpression{System.Boolean}
      description: An incremental value with the logic xor of the operators
    content.vb: Public Shared Function [Xor](left As INotifyExpression(Of Boolean), right As INotifyExpression(Of Boolean)) As INotifyExpression(Of Boolean)
  overload: NMF.Expressions.Observable.Xor*
  nameWithType.vb: Observable.Xor(INotifyExpression(Of Boolean), INotifyExpression(Of Boolean))
  fullName.vb: NMF.Expressions.Observable.Xor(NMF.Expressions.INotifyExpression(Of Boolean), NMF.Expressions.INotifyExpression(Of Boolean))
  name.vb: Xor(INotifyExpression(Of Boolean), INotifyExpression(Of Boolean))
- uid: NMF.Expressions.Observable.AndAlso(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{System.Boolean})
  commentId: M:NMF.Expressions.Observable.AndAlso(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{System.Boolean})
  id: AndAlso(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{System.Boolean})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: AndAlso(INotifyExpression<bool>, INotifyExpression<bool>)
  nameWithType: Observable.AndAlso(INotifyExpression<bool>, INotifyExpression<bool>)
  fullName: NMF.Expressions.Observable.AndAlso(NMF.Expressions.INotifyExpression<bool>, NMF.Expressions.INotifyExpression<bool>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AndAlso
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 408
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Performs a shorthand logic and operation on the given incremental values
  remarks: While the left operand returns false, the right operand is detached from the model
  example: []
  syntax:
    content: public static INotifyExpression<bool> AndAlso(INotifyExpression<bool> left, INotifyExpression<bool> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Boolean}
      description: The left operator
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Boolean}
      description: The right operator
    return:
      type: NMF.Expressions.INotifyExpression{System.Boolean}
      description: An incremental value with the logic and of the operators
    content.vb: Public Shared Function [AndAlso](left As INotifyExpression(Of Boolean), right As INotifyExpression(Of Boolean)) As INotifyExpression(Of Boolean)
  overload: NMF.Expressions.Observable.AndAlso*
  nameWithType.vb: Observable.AndAlso(INotifyExpression(Of Boolean), INotifyExpression(Of Boolean))
  fullName.vb: NMF.Expressions.Observable.AndAlso(NMF.Expressions.INotifyExpression(Of Boolean), NMF.Expressions.INotifyExpression(Of Boolean))
  name.vb: AndAlso(INotifyExpression(Of Boolean), INotifyExpression(Of Boolean))
- uid: NMF.Expressions.Observable.OrElse(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{System.Boolean})
  commentId: M:NMF.Expressions.Observable.OrElse(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{System.Boolean})
  id: OrElse(NMF.Expressions.INotifyExpression{System.Boolean},NMF.Expressions.INotifyExpression{System.Boolean})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: OrElse(INotifyExpression<bool>, INotifyExpression<bool>)
  nameWithType: Observable.OrElse(INotifyExpression<bool>, INotifyExpression<bool>)
  fullName: NMF.Expressions.Observable.OrElse(NMF.Expressions.INotifyExpression<bool>, NMF.Expressions.INotifyExpression<bool>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OrElse
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 420
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Performs a shorthand logic or operation on the given incremental values
  remarks: While the left operand returns true, the right operand is detached from the model
  example: []
  syntax:
    content: public static INotifyExpression<bool> OrElse(INotifyExpression<bool> left, INotifyExpression<bool> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Boolean}
      description: The left operator
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Boolean}
      description: The right operator
    return:
      type: NMF.Expressions.INotifyExpression{System.Boolean}
      description: An incremental value with the logic or of the operators
    content.vb: Public Shared Function [OrElse](left As INotifyExpression(Of Boolean), right As INotifyExpression(Of Boolean)) As INotifyExpression(Of Boolean)
  overload: NMF.Expressions.Observable.OrElse*
  nameWithType.vb: Observable.OrElse(INotifyExpression(Of Boolean), INotifyExpression(Of Boolean))
  fullName.vb: NMF.Expressions.Observable.OrElse(NMF.Expressions.INotifyExpression(Of Boolean), NMF.Expressions.INotifyExpression(Of Boolean))
  name.vb: OrElse(INotifyExpression(Of Boolean), INotifyExpression(Of Boolean))
- uid: NMF.Expressions.Observable.Not(NMF.Expressions.INotifyExpression{System.Boolean})
  commentId: M:NMF.Expressions.Observable.Not(NMF.Expressions.INotifyExpression{System.Boolean})
  id: Not(NMF.Expressions.INotifyExpression{System.Boolean})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Not(INotifyExpression<bool>)
  nameWithType: Observable.Not(INotifyExpression<bool>)
  fullName: NMF.Expressions.Observable.Not(NMF.Expressions.INotifyExpression<bool>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Not
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 430
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Performs a logic not on the given incremental value
  example: []
  syntax:
    content: public static INotifyExpression<bool> Not(INotifyExpression<bool> inner)
    parameters:
    - id: inner
      type: NMF.Expressions.INotifyExpression{System.Boolean}
      description: The incremental value
    return:
      type: NMF.Expressions.INotifyExpression{System.Boolean}
      description: An incremental inversed value
    content.vb: Public Shared Function [Not](inner As INotifyExpression(Of Boolean)) As INotifyExpression(Of Boolean)
  overload: NMF.Expressions.Observable.Not*
  nameWithType.vb: Observable.Not(INotifyExpression(Of Boolean))
  fullName.vb: NMF.Expressions.Observable.Not(NMF.Expressions.INotifyExpression(Of Boolean))
  name.vb: Not(INotifyExpression(Of Boolean))
- uid: NMF.Expressions.Observable.OnesComplement(NMF.Expressions.INotifyExpression{System.Int32})
  commentId: M:NMF.Expressions.Observable.OnesComplement(NMF.Expressions.INotifyExpression{System.Int32})
  id: OnesComplement(NMF.Expressions.INotifyExpression{System.Int32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: OnesComplement(INotifyExpression<int>)
  nameWithType: Observable.OnesComplement(INotifyExpression<int>)
  fullName: NMF.Expressions.Observable.OnesComplement(NMF.Expressions.INotifyExpression<int>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnesComplement
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 440
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Computes the ones complement of the given incremental value
  example: []
  syntax:
    content: public static INotifyExpression<int> OnesComplement(INotifyExpression<int> inner)
    parameters:
    - id: inner
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The inner incremental value
    return:
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: An incremental value with the ones complement
    content.vb: Public Shared Function OnesComplement(inner As INotifyExpression(Of Integer)) As INotifyExpression(Of Integer)
  overload: NMF.Expressions.Observable.OnesComplement*
  nameWithType.vb: Observable.OnesComplement(INotifyExpression(Of Integer))
  fullName.vb: NMF.Expressions.Observable.OnesComplement(NMF.Expressions.INotifyExpression(Of Integer))
  name.vb: OnesComplement(INotifyExpression(Of Integer))
- uid: NMF.Expressions.Observable.OnesComplement(NMF.Expressions.INotifyExpression{System.Int64})
  commentId: M:NMF.Expressions.Observable.OnesComplement(NMF.Expressions.INotifyExpression{System.Int64})
  id: OnesComplement(NMF.Expressions.INotifyExpression{System.Int64})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: OnesComplement(INotifyExpression<long>)
  nameWithType: Observable.OnesComplement(INotifyExpression<long>)
  fullName: NMF.Expressions.Observable.OnesComplement(NMF.Expressions.INotifyExpression<long>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnesComplement
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 450
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Computes the ones complement of the given incremental value
  example: []
  syntax:
    content: public static INotifyExpression<long> OnesComplement(INotifyExpression<long> inner)
    parameters:
    - id: inner
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: The inner incremental value
    return:
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: An incremental value with the ones complement
    content.vb: Public Shared Function OnesComplement(inner As INotifyExpression(Of Long)) As INotifyExpression(Of Long)
  overload: NMF.Expressions.Observable.OnesComplement*
  nameWithType.vb: Observable.OnesComplement(INotifyExpression(Of Long))
  fullName.vb: NMF.Expressions.Observable.OnesComplement(NMF.Expressions.INotifyExpression(Of Long))
  name.vb: OnesComplement(INotifyExpression(Of Long))
- uid: NMF.Expressions.Observable.OnesComplement(NMF.Expressions.INotifyExpression{System.UInt32})
  commentId: M:NMF.Expressions.Observable.OnesComplement(NMF.Expressions.INotifyExpression{System.UInt32})
  id: OnesComplement(NMF.Expressions.INotifyExpression{System.UInt32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: OnesComplement(INotifyExpression<uint>)
  nameWithType: Observable.OnesComplement(INotifyExpression<uint>)
  fullName: NMF.Expressions.Observable.OnesComplement(NMF.Expressions.INotifyExpression<uint>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnesComplement
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 460
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Computes the ones complement of the given incremental value
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static INotifyExpression<uint> OnesComplement(INotifyExpression<uint> inner)
    parameters:
    - id: inner
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: The inner incremental value
    return:
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: An incremental value with the ones complement
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function OnesComplement(inner As INotifyExpression(Of UInteger)) As INotifyExpression(Of UInteger)
  overload: NMF.Expressions.Observable.OnesComplement*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Observable.OnesComplement(INotifyExpression(Of UInteger))
  fullName.vb: NMF.Expressions.Observable.OnesComplement(NMF.Expressions.INotifyExpression(Of UInteger))
  name.vb: OnesComplement(INotifyExpression(Of UInteger))
- uid: NMF.Expressions.Observable.OnesComplement(NMF.Expressions.INotifyExpression{System.UInt64})
  commentId: M:NMF.Expressions.Observable.OnesComplement(NMF.Expressions.INotifyExpression{System.UInt64})
  id: OnesComplement(NMF.Expressions.INotifyExpression{System.UInt64})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: OnesComplement(INotifyExpression<ulong>)
  nameWithType: Observable.OnesComplement(INotifyExpression<ulong>)
  fullName: NMF.Expressions.Observable.OnesComplement(NMF.Expressions.INotifyExpression<ulong>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnesComplement
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 471
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Computes the ones complement of the given incremental value
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static INotifyExpression<ulong> OnesComplement(INotifyExpression<ulong> inner)
    parameters:
    - id: inner
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: The inner incremental value
    return:
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: An incremental value with the ones complement
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function OnesComplement(inner As INotifyExpression(Of ULong)) As INotifyExpression(Of ULong)
  overload: NMF.Expressions.Observable.OnesComplement*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Observable.OnesComplement(INotifyExpression(Of ULong))
  fullName.vb: NMF.Expressions.Observable.OnesComplement(NMF.Expressions.INotifyExpression(Of ULong))
  name.vb: OnesComplement(INotifyExpression(Of ULong))
- uid: NMF.Expressions.Observable.Negate(NMF.Expressions.INotifyExpression{System.Int32})
  commentId: M:NMF.Expressions.Observable.Negate(NMF.Expressions.INotifyExpression{System.Int32})
  id: Negate(NMF.Expressions.INotifyExpression{System.Int32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Negate(INotifyExpression<int>)
  nameWithType: Observable.Negate(INotifyExpression<int>)
  fullName: NMF.Expressions.Observable.Negate(NMF.Expressions.INotifyExpression<int>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Negate
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 482
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Gets the negation of the given value
  example: []
  syntax:
    content: public static INotifyExpression<int> Negate(INotifyExpression<int> inner)
    parameters:
    - id: inner
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The incremental value which should be negated
    return:
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: An incremental negated value
    content.vb: Public Shared Function Negate(inner As INotifyExpression(Of Integer)) As INotifyExpression(Of Integer)
  overload: NMF.Expressions.Observable.Negate*
  nameWithType.vb: Observable.Negate(INotifyExpression(Of Integer))
  fullName.vb: NMF.Expressions.Observable.Negate(NMF.Expressions.INotifyExpression(Of Integer))
  name.vb: Negate(INotifyExpression(Of Integer))
- uid: NMF.Expressions.Observable.Negate(NMF.Expressions.INotifyExpression{System.Int64})
  commentId: M:NMF.Expressions.Observable.Negate(NMF.Expressions.INotifyExpression{System.Int64})
  id: Negate(NMF.Expressions.INotifyExpression{System.Int64})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Negate(INotifyExpression<long>)
  nameWithType: Observable.Negate(INotifyExpression<long>)
  fullName: NMF.Expressions.Observable.Negate(NMF.Expressions.INotifyExpression<long>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Negate
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 492
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Gets the negation of the given value
  example: []
  syntax:
    content: public static INotifyExpression<long> Negate(INotifyExpression<long> inner)
    parameters:
    - id: inner
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: The incremental value which should be negated
    return:
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: An incremental negated value
    content.vb: Public Shared Function Negate(inner As INotifyExpression(Of Long)) As INotifyExpression(Of Long)
  overload: NMF.Expressions.Observable.Negate*
  nameWithType.vb: Observable.Negate(INotifyExpression(Of Long))
  fullName.vb: NMF.Expressions.Observable.Negate(NMF.Expressions.INotifyExpression(Of Long))
  name.vb: Negate(INotifyExpression(Of Long))
- uid: NMF.Expressions.Observable.Negate(NMF.Expressions.INotifyExpression{System.Single})
  commentId: M:NMF.Expressions.Observable.Negate(NMF.Expressions.INotifyExpression{System.Single})
  id: Negate(NMF.Expressions.INotifyExpression{System.Single})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Negate(INotifyExpression<float>)
  nameWithType: Observable.Negate(INotifyExpression<float>)
  fullName: NMF.Expressions.Observable.Negate(NMF.Expressions.INotifyExpression<float>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Negate
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 502
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Gets the negation of the given value
  example: []
  syntax:
    content: public static INotifyExpression<float> Negate(INotifyExpression<float> inner)
    parameters:
    - id: inner
      type: NMF.Expressions.INotifyExpression{System.Single}
      description: The incremental value which should be negated
    return:
      type: NMF.Expressions.INotifyExpression{System.Single}
      description: An incremental negated value
    content.vb: Public Shared Function Negate(inner As INotifyExpression(Of Single)) As INotifyExpression(Of Single)
  overload: NMF.Expressions.Observable.Negate*
  nameWithType.vb: Observable.Negate(INotifyExpression(Of Single))
  fullName.vb: NMF.Expressions.Observable.Negate(NMF.Expressions.INotifyExpression(Of Single))
  name.vb: Negate(INotifyExpression(Of Single))
- uid: NMF.Expressions.Observable.Negate(NMF.Expressions.INotifyExpression{System.Double})
  commentId: M:NMF.Expressions.Observable.Negate(NMF.Expressions.INotifyExpression{System.Double})
  id: Negate(NMF.Expressions.INotifyExpression{System.Double})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Negate(INotifyExpression<double>)
  nameWithType: Observable.Negate(INotifyExpression<double>)
  fullName: NMF.Expressions.Observable.Negate(NMF.Expressions.INotifyExpression<double>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Negate
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 512
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Gets the negation of the given value
  example: []
  syntax:
    content: public static INotifyExpression<double> Negate(INotifyExpression<double> inner)
    parameters:
    - id: inner
      type: NMF.Expressions.INotifyExpression{System.Double}
      description: The incremental value which should be negated
    return:
      type: NMF.Expressions.INotifyExpression{System.Double}
      description: An incremental negated value
    content.vb: Public Shared Function Negate(inner As INotifyExpression(Of Double)) As INotifyExpression(Of Double)
  overload: NMF.Expressions.Observable.Negate*
  nameWithType.vb: Observable.Negate(INotifyExpression(Of Double))
  fullName.vb: NMF.Expressions.Observable.Negate(NMF.Expressions.INotifyExpression(Of Double))
  name.vb: Negate(INotifyExpression(Of Double))
- uid: NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  commentId: M:NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  id: Divide(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Divide(INotifyExpression<int>, INotifyExpression<int>)
  nameWithType: Observable.Divide(INotifyExpression<int>, INotifyExpression<int>)
  fullName: NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression<int>, NMF.Expressions.INotifyExpression<int>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Divide
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 523
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Divides the given dividor by the given divident incrementally
  example: []
  syntax:
    content: public static INotifyExpression<int> Divide(INotifyExpression<int> left, INotifyExpression<int> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The divisor
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The divident
    return:
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The incremnetal division
    content.vb: Public Shared Function Divide(left As INotifyExpression(Of Integer), right As INotifyExpression(Of Integer)) As INotifyExpression(Of Integer)
  overload: NMF.Expressions.Observable.Divide*
  nameWithType.vb: Observable.Divide(INotifyExpression(Of Integer), INotifyExpression(Of Integer))
  fullName.vb: NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression(Of Integer), NMF.Expressions.INotifyExpression(Of Integer))
  name.vb: Divide(INotifyExpression(Of Integer), INotifyExpression(Of Integer))
- uid: NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  commentId: M:NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  id: Divide(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Divide(INotifyExpression<long>, INotifyExpression<long>)
  nameWithType: Observable.Divide(INotifyExpression<long>, INotifyExpression<long>)
  fullName: NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression<long>, NMF.Expressions.INotifyExpression<long>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Divide
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 534
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Divides the given dividor by the given divident incrementally
  example: []
  syntax:
    content: public static INotifyExpression<long> Divide(INotifyExpression<long> left, INotifyExpression<long> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: The divisor
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: The divident
    return:
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: The incremnetal division
    content.vb: Public Shared Function Divide(left As INotifyExpression(Of Long), right As INotifyExpression(Of Long)) As INotifyExpression(Of Long)
  overload: NMF.Expressions.Observable.Divide*
  nameWithType.vb: Observable.Divide(INotifyExpression(Of Long), INotifyExpression(Of Long))
  fullName.vb: NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression(Of Long), NMF.Expressions.INotifyExpression(Of Long))
  name.vb: Divide(INotifyExpression(Of Long), INotifyExpression(Of Long))
- uid: NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  commentId: M:NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  id: Divide(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Divide(INotifyExpression<uint>, INotifyExpression<uint>)
  nameWithType: Observable.Divide(INotifyExpression<uint>, INotifyExpression<uint>)
  fullName: NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression<uint>, NMF.Expressions.INotifyExpression<uint>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Divide
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 545
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Divides the given dividor by the given divident incrementally
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static INotifyExpression<uint> Divide(INotifyExpression<uint> left, INotifyExpression<uint> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: The divisor
    - id: right
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: The divident
    return:
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: The incremnetal division
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function Divide(left As INotifyExpression(Of UInteger), right As INotifyExpression(Of UInteger)) As INotifyExpression(Of UInteger)
  overload: NMF.Expressions.Observable.Divide*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Observable.Divide(INotifyExpression(Of UInteger), INotifyExpression(Of UInteger))
  fullName.vb: NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression(Of UInteger), NMF.Expressions.INotifyExpression(Of UInteger))
  name.vb: Divide(INotifyExpression(Of UInteger), INotifyExpression(Of UInteger))
- uid: NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  commentId: M:NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  id: Divide(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Divide(INotifyExpression<ulong>, INotifyExpression<ulong>)
  nameWithType: Observable.Divide(INotifyExpression<ulong>, INotifyExpression<ulong>)
  fullName: NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression<ulong>, NMF.Expressions.INotifyExpression<ulong>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Divide
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 557
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Divides the given dividor by the given divident incrementally
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static INotifyExpression<ulong> Divide(INotifyExpression<ulong> left, INotifyExpression<ulong> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: The divisor
    - id: right
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: The divident
    return:
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: The incremnetal division
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function Divide(left As INotifyExpression(Of ULong), right As INotifyExpression(Of ULong)) As INotifyExpression(Of ULong)
  overload: NMF.Expressions.Observable.Divide*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Observable.Divide(INotifyExpression(Of ULong), INotifyExpression(Of ULong))
  fullName.vb: NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression(Of ULong), NMF.Expressions.INotifyExpression(Of ULong))
  name.vb: Divide(INotifyExpression(Of ULong), INotifyExpression(Of ULong))
- uid: NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression{System.Single},NMF.Expressions.INotifyExpression{System.Single})
  commentId: M:NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression{System.Single},NMF.Expressions.INotifyExpression{System.Single})
  id: Divide(NMF.Expressions.INotifyExpression{System.Single},NMF.Expressions.INotifyExpression{System.Single})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Divide(INotifyExpression<float>, INotifyExpression<float>)
  nameWithType: Observable.Divide(INotifyExpression<float>, INotifyExpression<float>)
  fullName: NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression<float>, NMF.Expressions.INotifyExpression<float>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Divide
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 569
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Divides the given dividor by the given divident incrementally
  example: []
  syntax:
    content: public static INotifyExpression<float> Divide(INotifyExpression<float> left, INotifyExpression<float> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Single}
      description: The divisor
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Single}
      description: The divident
    return:
      type: NMF.Expressions.INotifyExpression{System.Single}
      description: The incremnetal division
    content.vb: Public Shared Function Divide(left As INotifyExpression(Of Single), right As INotifyExpression(Of Single)) As INotifyExpression(Of Single)
  overload: NMF.Expressions.Observable.Divide*
  nameWithType.vb: Observable.Divide(INotifyExpression(Of Single), INotifyExpression(Of Single))
  fullName.vb: NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression(Of Single), NMF.Expressions.INotifyExpression(Of Single))
  name.vb: Divide(INotifyExpression(Of Single), INotifyExpression(Of Single))
- uid: NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression{System.Double},NMF.Expressions.INotifyExpression{System.Double})
  commentId: M:NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression{System.Double},NMF.Expressions.INotifyExpression{System.Double})
  id: Divide(NMF.Expressions.INotifyExpression{System.Double},NMF.Expressions.INotifyExpression{System.Double})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Divide(INotifyExpression<double>, INotifyExpression<double>)
  nameWithType: Observable.Divide(INotifyExpression<double>, INotifyExpression<double>)
  fullName: NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression<double>, NMF.Expressions.INotifyExpression<double>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Divide
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 580
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Divides the given dividor by the given divident incrementally
  example: []
  syntax:
    content: public static INotifyExpression<double> Divide(INotifyExpression<double> left, INotifyExpression<double> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Double}
      description: The divisor
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Double}
      description: The divident
    return:
      type: NMF.Expressions.INotifyExpression{System.Double}
      description: The incremnetal division
    content.vb: Public Shared Function Divide(left As INotifyExpression(Of Double), right As INotifyExpression(Of Double)) As INotifyExpression(Of Double)
  overload: NMF.Expressions.Observable.Divide*
  nameWithType.vb: Observable.Divide(INotifyExpression(Of Double), INotifyExpression(Of Double))
  fullName.vb: NMF.Expressions.Observable.Divide(NMF.Expressions.INotifyExpression(Of Double), NMF.Expressions.INotifyExpression(Of Double))
  name.vb: Divide(INotifyExpression(Of Double), INotifyExpression(Of Double))
- uid: NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  commentId: M:NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  id: Subtract(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Subtract(INotifyExpression<int>, INotifyExpression<int>)
  nameWithType: Observable.Subtract(INotifyExpression<int>, INotifyExpression<int>)
  fullName: NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression<int>, NMF.Expressions.INotifyExpression<int>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Subtract
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 591
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Subtracts the given values incrementally
  example: []
  syntax:
    content: public static INotifyExpression<int> Subtract(INotifyExpression<int> left, INotifyExpression<int> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The left operand
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The right operand
    return:
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The incremental difference
    content.vb: Public Shared Function Subtract(left As INotifyExpression(Of Integer), right As INotifyExpression(Of Integer)) As INotifyExpression(Of Integer)
  overload: NMF.Expressions.Observable.Subtract*
  nameWithType.vb: Observable.Subtract(INotifyExpression(Of Integer), INotifyExpression(Of Integer))
  fullName.vb: NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression(Of Integer), NMF.Expressions.INotifyExpression(Of Integer))
  name.vb: Subtract(INotifyExpression(Of Integer), INotifyExpression(Of Integer))
- uid: NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  commentId: M:NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  id: Subtract(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Subtract(INotifyExpression<long>, INotifyExpression<long>)
  nameWithType: Observable.Subtract(INotifyExpression<long>, INotifyExpression<long>)
  fullName: NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression<long>, NMF.Expressions.INotifyExpression<long>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Subtract
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 602
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Subtracts the given values incrementally
  example: []
  syntax:
    content: public static INotifyExpression<long> Subtract(INotifyExpression<long> left, INotifyExpression<long> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: The left operand
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: The right operand
    return:
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: The incremental difference
    content.vb: Public Shared Function Subtract(left As INotifyExpression(Of Long), right As INotifyExpression(Of Long)) As INotifyExpression(Of Long)
  overload: NMF.Expressions.Observable.Subtract*
  nameWithType.vb: Observable.Subtract(INotifyExpression(Of Long), INotifyExpression(Of Long))
  fullName.vb: NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression(Of Long), NMF.Expressions.INotifyExpression(Of Long))
  name.vb: Subtract(INotifyExpression(Of Long), INotifyExpression(Of Long))
- uid: NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  commentId: M:NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  id: Subtract(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Subtract(INotifyExpression<uint>, INotifyExpression<uint>)
  nameWithType: Observable.Subtract(INotifyExpression<uint>, INotifyExpression<uint>)
  fullName: NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression<uint>, NMF.Expressions.INotifyExpression<uint>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Subtract
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 613
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Subtracts the given values incrementally
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static INotifyExpression<uint> Subtract(INotifyExpression<uint> left, INotifyExpression<uint> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: The left operand
    - id: right
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: The right operand
    return:
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: The incremental difference
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function Subtract(left As INotifyExpression(Of UInteger), right As INotifyExpression(Of UInteger)) As INotifyExpression(Of UInteger)
  overload: NMF.Expressions.Observable.Subtract*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Observable.Subtract(INotifyExpression(Of UInteger), INotifyExpression(Of UInteger))
  fullName.vb: NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression(Of UInteger), NMF.Expressions.INotifyExpression(Of UInteger))
  name.vb: Subtract(INotifyExpression(Of UInteger), INotifyExpression(Of UInteger))
- uid: NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  commentId: M:NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  id: Subtract(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Subtract(INotifyExpression<ulong>, INotifyExpression<ulong>)
  nameWithType: Observable.Subtract(INotifyExpression<ulong>, INotifyExpression<ulong>)
  fullName: NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression<ulong>, NMF.Expressions.INotifyExpression<ulong>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Subtract
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 625
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Subtracts the given values incrementally
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static INotifyExpression<ulong> Subtract(INotifyExpression<ulong> left, INotifyExpression<ulong> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: The left operand
    - id: right
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: The right operand
    return:
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: The incremental difference
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function Subtract(left As INotifyExpression(Of ULong), right As INotifyExpression(Of ULong)) As INotifyExpression(Of ULong)
  overload: NMF.Expressions.Observable.Subtract*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Observable.Subtract(INotifyExpression(Of ULong), INotifyExpression(Of ULong))
  fullName.vb: NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression(Of ULong), NMF.Expressions.INotifyExpression(Of ULong))
  name.vb: Subtract(INotifyExpression(Of ULong), INotifyExpression(Of ULong))
- uid: NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression{System.Single},NMF.Expressions.INotifyExpression{System.Single})
  commentId: M:NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression{System.Single},NMF.Expressions.INotifyExpression{System.Single})
  id: Subtract(NMF.Expressions.INotifyExpression{System.Single},NMF.Expressions.INotifyExpression{System.Single})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Subtract(INotifyExpression<float>, INotifyExpression<float>)
  nameWithType: Observable.Subtract(INotifyExpression<float>, INotifyExpression<float>)
  fullName: NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression<float>, NMF.Expressions.INotifyExpression<float>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Subtract
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 637
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Subtracts the given values incrementally
  example: []
  syntax:
    content: public static INotifyExpression<float> Subtract(INotifyExpression<float> left, INotifyExpression<float> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Single}
      description: The left operand
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Single}
      description: The right operand
    return:
      type: NMF.Expressions.INotifyExpression{System.Single}
      description: The incremental difference
    content.vb: Public Shared Function Subtract(left As INotifyExpression(Of Single), right As INotifyExpression(Of Single)) As INotifyExpression(Of Single)
  overload: NMF.Expressions.Observable.Subtract*
  nameWithType.vb: Observable.Subtract(INotifyExpression(Of Single), INotifyExpression(Of Single))
  fullName.vb: NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression(Of Single), NMF.Expressions.INotifyExpression(Of Single))
  name.vb: Subtract(INotifyExpression(Of Single), INotifyExpression(Of Single))
- uid: NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression{System.Double},NMF.Expressions.INotifyExpression{System.Double})
  commentId: M:NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression{System.Double},NMF.Expressions.INotifyExpression{System.Double})
  id: Subtract(NMF.Expressions.INotifyExpression{System.Double},NMF.Expressions.INotifyExpression{System.Double})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Subtract(INotifyExpression<double>, INotifyExpression<double>)
  nameWithType: Observable.Subtract(INotifyExpression<double>, INotifyExpression<double>)
  fullName: NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression<double>, NMF.Expressions.INotifyExpression<double>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Subtract
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 648
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Subtracts the given values incrementally
  example: []
  syntax:
    content: public static INotifyExpression<double> Subtract(INotifyExpression<double> left, INotifyExpression<double> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Double}
      description: The left operand
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Double}
      description: The right operand
    return:
      type: NMF.Expressions.INotifyExpression{System.Double}
      description: The incremental difference
    content.vb: Public Shared Function Subtract(left As INotifyExpression(Of Double), right As INotifyExpression(Of Double)) As INotifyExpression(Of Double)
  overload: NMF.Expressions.Observable.Subtract*
  nameWithType.vb: Observable.Subtract(INotifyExpression(Of Double), INotifyExpression(Of Double))
  fullName.vb: NMF.Expressions.Observable.Subtract(NMF.Expressions.INotifyExpression(Of Double), NMF.Expressions.INotifyExpression(Of Double))
  name.vb: Subtract(INotifyExpression(Of Double), INotifyExpression(Of Double))
- uid: NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  commentId: M:NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  id: Add(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Add(INotifyExpression<int>, INotifyExpression<int>)
  nameWithType: Observable.Add(INotifyExpression<int>, INotifyExpression<int>)
  fullName: NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression<int>, NMF.Expressions.INotifyExpression<int>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Add
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 659
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Adds the given values incrementally
  example: []
  syntax:
    content: public static INotifyExpression<int> Add(INotifyExpression<int> left, INotifyExpression<int> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The left operand
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The right operand
    return:
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The incremental sum
    content.vb: Public Shared Function Add(left As INotifyExpression(Of Integer), right As INotifyExpression(Of Integer)) As INotifyExpression(Of Integer)
  overload: NMF.Expressions.Observable.Add*
  nameWithType.vb: Observable.Add(INotifyExpression(Of Integer), INotifyExpression(Of Integer))
  fullName.vb: NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression(Of Integer), NMF.Expressions.INotifyExpression(Of Integer))
  name.vb: Add(INotifyExpression(Of Integer), INotifyExpression(Of Integer))
- uid: NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  commentId: M:NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  id: Add(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Add(INotifyExpression<long>, INotifyExpression<long>)
  nameWithType: Observable.Add(INotifyExpression<long>, INotifyExpression<long>)
  fullName: NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression<long>, NMF.Expressions.INotifyExpression<long>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Add
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 670
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Adds the given values incrementally
  example: []
  syntax:
    content: public static INotifyExpression<long> Add(INotifyExpression<long> left, INotifyExpression<long> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: The left operand
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: The right operand
    return:
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: The incremental sum
    content.vb: Public Shared Function Add(left As INotifyExpression(Of Long), right As INotifyExpression(Of Long)) As INotifyExpression(Of Long)
  overload: NMF.Expressions.Observable.Add*
  nameWithType.vb: Observable.Add(INotifyExpression(Of Long), INotifyExpression(Of Long))
  fullName.vb: NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression(Of Long), NMF.Expressions.INotifyExpression(Of Long))
  name.vb: Add(INotifyExpression(Of Long), INotifyExpression(Of Long))
- uid: NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  commentId: M:NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  id: Add(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Add(INotifyExpression<uint>, INotifyExpression<uint>)
  nameWithType: Observable.Add(INotifyExpression<uint>, INotifyExpression<uint>)
  fullName: NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression<uint>, NMF.Expressions.INotifyExpression<uint>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Add
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 681
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Adds the given values incrementally
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static INotifyExpression<uint> Add(INotifyExpression<uint> left, INotifyExpression<uint> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: The left operand
    - id: right
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: The right operand
    return:
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: The incremental sum
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function Add(left As INotifyExpression(Of UInteger), right As INotifyExpression(Of UInteger)) As INotifyExpression(Of UInteger)
  overload: NMF.Expressions.Observable.Add*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Observable.Add(INotifyExpression(Of UInteger), INotifyExpression(Of UInteger))
  fullName.vb: NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression(Of UInteger), NMF.Expressions.INotifyExpression(Of UInteger))
  name.vb: Add(INotifyExpression(Of UInteger), INotifyExpression(Of UInteger))
- uid: NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  commentId: M:NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  id: Add(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Add(INotifyExpression<ulong>, INotifyExpression<ulong>)
  nameWithType: Observable.Add(INotifyExpression<ulong>, INotifyExpression<ulong>)
  fullName: NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression<ulong>, NMF.Expressions.INotifyExpression<ulong>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Add
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 693
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Adds the given values incrementally
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static INotifyExpression<ulong> Add(INotifyExpression<ulong> left, INotifyExpression<ulong> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: The left operand
    - id: right
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: The right operand
    return:
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: The incremental sum
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function Add(left As INotifyExpression(Of ULong), right As INotifyExpression(Of ULong)) As INotifyExpression(Of ULong)
  overload: NMF.Expressions.Observable.Add*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Observable.Add(INotifyExpression(Of ULong), INotifyExpression(Of ULong))
  fullName.vb: NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression(Of ULong), NMF.Expressions.INotifyExpression(Of ULong))
  name.vb: Add(INotifyExpression(Of ULong), INotifyExpression(Of ULong))
- uid: NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression{System.Single},NMF.Expressions.INotifyExpression{System.Single})
  commentId: M:NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression{System.Single},NMF.Expressions.INotifyExpression{System.Single})
  id: Add(NMF.Expressions.INotifyExpression{System.Single},NMF.Expressions.INotifyExpression{System.Single})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Add(INotifyExpression<float>, INotifyExpression<float>)
  nameWithType: Observable.Add(INotifyExpression<float>, INotifyExpression<float>)
  fullName: NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression<float>, NMF.Expressions.INotifyExpression<float>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Add
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 705
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Adds the given values incrementally
  example: []
  syntax:
    content: public static INotifyExpression<float> Add(INotifyExpression<float> left, INotifyExpression<float> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Single}
      description: The left operand
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Single}
      description: The right operand
    return:
      type: NMF.Expressions.INotifyExpression{System.Single}
      description: The incremental sum
    content.vb: Public Shared Function Add(left As INotifyExpression(Of Single), right As INotifyExpression(Of Single)) As INotifyExpression(Of Single)
  overload: NMF.Expressions.Observable.Add*
  nameWithType.vb: Observable.Add(INotifyExpression(Of Single), INotifyExpression(Of Single))
  fullName.vb: NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression(Of Single), NMF.Expressions.INotifyExpression(Of Single))
  name.vb: Add(INotifyExpression(Of Single), INotifyExpression(Of Single))
- uid: NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression{System.Double},NMF.Expressions.INotifyExpression{System.Double})
  commentId: M:NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression{System.Double},NMF.Expressions.INotifyExpression{System.Double})
  id: Add(NMF.Expressions.INotifyExpression{System.Double},NMF.Expressions.INotifyExpression{System.Double})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Add(INotifyExpression<double>, INotifyExpression<double>)
  nameWithType: Observable.Add(INotifyExpression<double>, INotifyExpression<double>)
  fullName: NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression<double>, NMF.Expressions.INotifyExpression<double>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Add
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 716
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Adds the given values incrementally
  example: []
  syntax:
    content: public static INotifyExpression<double> Add(INotifyExpression<double> left, INotifyExpression<double> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Double}
      description: The left operand
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Double}
      description: The right operand
    return:
      type: NMF.Expressions.INotifyExpression{System.Double}
      description: The incremental sum
    content.vb: Public Shared Function Add(left As INotifyExpression(Of Double), right As INotifyExpression(Of Double)) As INotifyExpression(Of Double)
  overload: NMF.Expressions.Observable.Add*
  nameWithType.vb: Observable.Add(INotifyExpression(Of Double), INotifyExpression(Of Double))
  fullName.vb: NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression(Of Double), NMF.Expressions.INotifyExpression(Of Double))
  name.vb: Add(INotifyExpression(Of Double), INotifyExpression(Of Double))
- uid: NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression{System.String},NMF.Expressions.INotifyExpression{System.String})
  commentId: M:NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression{System.String},NMF.Expressions.INotifyExpression{System.String})
  id: Add(NMF.Expressions.INotifyExpression{System.String},NMF.Expressions.INotifyExpression{System.String})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Add(INotifyExpression<string>, INotifyExpression<string>)
  nameWithType: Observable.Add(INotifyExpression<string>, INotifyExpression<string>)
  fullName: NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression<string>, NMF.Expressions.INotifyExpression<string>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Add
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 727
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Adds the given values incrementally
  example: []
  syntax:
    content: public static INotifyExpression<string> Add(INotifyExpression<string> left, INotifyExpression<string> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.String}
      description: The left operand
    - id: right
      type: NMF.Expressions.INotifyExpression{System.String}
      description: The right operand
    return:
      type: NMF.Expressions.INotifyExpression{System.String}
      description: The incremental sum
    content.vb: Public Shared Function Add(left As INotifyExpression(Of String), right As INotifyExpression(Of String)) As INotifyExpression(Of String)
  overload: NMF.Expressions.Observable.Add*
  nameWithType.vb: Observable.Add(INotifyExpression(Of String), INotifyExpression(Of String))
  fullName.vb: NMF.Expressions.Observable.Add(NMF.Expressions.INotifyExpression(Of String), NMF.Expressions.INotifyExpression(Of String))
  name.vb: Add(INotifyExpression(Of String), INotifyExpression(Of String))
- uid: NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  commentId: M:NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  id: Multiply(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Multiply(INotifyExpression<int>, INotifyExpression<int>)
  nameWithType: Observable.Multiply(INotifyExpression<int>, INotifyExpression<int>)
  fullName: NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression<int>, NMF.Expressions.INotifyExpression<int>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Multiply
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 738
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Multiplies the given values incrementally
  example: []
  syntax:
    content: public static INotifyExpression<int> Multiply(INotifyExpression<int> left, INotifyExpression<int> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The left factor
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The right factor
    return:
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The incremental product
    content.vb: Public Shared Function Multiply(left As INotifyExpression(Of Integer), right As INotifyExpression(Of Integer)) As INotifyExpression(Of Integer)
  overload: NMF.Expressions.Observable.Multiply*
  nameWithType.vb: Observable.Multiply(INotifyExpression(Of Integer), INotifyExpression(Of Integer))
  fullName.vb: NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression(Of Integer), NMF.Expressions.INotifyExpression(Of Integer))
  name.vb: Multiply(INotifyExpression(Of Integer), INotifyExpression(Of Integer))
- uid: NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  commentId: M:NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  id: Multiply(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Multiply(INotifyExpression<long>, INotifyExpression<long>)
  nameWithType: Observable.Multiply(INotifyExpression<long>, INotifyExpression<long>)
  fullName: NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression<long>, NMF.Expressions.INotifyExpression<long>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Multiply
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 749
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Multiplies the given values incrementally
  example: []
  syntax:
    content: public static INotifyExpression<long> Multiply(INotifyExpression<long> left, INotifyExpression<long> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: The left factor
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: The right factor
    return:
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: The incremental product
    content.vb: Public Shared Function Multiply(left As INotifyExpression(Of Long), right As INotifyExpression(Of Long)) As INotifyExpression(Of Long)
  overload: NMF.Expressions.Observable.Multiply*
  nameWithType.vb: Observable.Multiply(INotifyExpression(Of Long), INotifyExpression(Of Long))
  fullName.vb: NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression(Of Long), NMF.Expressions.INotifyExpression(Of Long))
  name.vb: Multiply(INotifyExpression(Of Long), INotifyExpression(Of Long))
- uid: NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  commentId: M:NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  id: Multiply(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Multiply(INotifyExpression<uint>, INotifyExpression<uint>)
  nameWithType: Observable.Multiply(INotifyExpression<uint>, INotifyExpression<uint>)
  fullName: NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression<uint>, NMF.Expressions.INotifyExpression<uint>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Multiply
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 760
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Multiplies the given values incrementally
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static INotifyExpression<uint> Multiply(INotifyExpression<uint> left, INotifyExpression<uint> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: The left factor
    - id: right
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: The right factor
    return:
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: The incremental product
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function Multiply(left As INotifyExpression(Of UInteger), right As INotifyExpression(Of UInteger)) As INotifyExpression(Of UInteger)
  overload: NMF.Expressions.Observable.Multiply*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Observable.Multiply(INotifyExpression(Of UInteger), INotifyExpression(Of UInteger))
  fullName.vb: NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression(Of UInteger), NMF.Expressions.INotifyExpression(Of UInteger))
  name.vb: Multiply(INotifyExpression(Of UInteger), INotifyExpression(Of UInteger))
- uid: NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  commentId: M:NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  id: Multiply(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Multiply(INotifyExpression<ulong>, INotifyExpression<ulong>)
  nameWithType: Observable.Multiply(INotifyExpression<ulong>, INotifyExpression<ulong>)
  fullName: NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression<ulong>, NMF.Expressions.INotifyExpression<ulong>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Multiply
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 772
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Multiplies the given values incrementally
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static INotifyExpression<ulong> Multiply(INotifyExpression<ulong> left, INotifyExpression<ulong> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: The left factor
    - id: right
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: The right factor
    return:
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: The incremental product
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function Multiply(left As INotifyExpression(Of ULong), right As INotifyExpression(Of ULong)) As INotifyExpression(Of ULong)
  overload: NMF.Expressions.Observable.Multiply*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Observable.Multiply(INotifyExpression(Of ULong), INotifyExpression(Of ULong))
  fullName.vb: NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression(Of ULong), NMF.Expressions.INotifyExpression(Of ULong))
  name.vb: Multiply(INotifyExpression(Of ULong), INotifyExpression(Of ULong))
- uid: NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression{System.Single},NMF.Expressions.INotifyExpression{System.Single})
  commentId: M:NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression{System.Single},NMF.Expressions.INotifyExpression{System.Single})
  id: Multiply(NMF.Expressions.INotifyExpression{System.Single},NMF.Expressions.INotifyExpression{System.Single})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Multiply(INotifyExpression<float>, INotifyExpression<float>)
  nameWithType: Observable.Multiply(INotifyExpression<float>, INotifyExpression<float>)
  fullName: NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression<float>, NMF.Expressions.INotifyExpression<float>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Multiply
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 784
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Multiplies the given values incrementally
  example: []
  syntax:
    content: public static INotifyExpression<float> Multiply(INotifyExpression<float> left, INotifyExpression<float> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Single}
      description: The left factor
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Single}
      description: The right factor
    return:
      type: NMF.Expressions.INotifyExpression{System.Single}
      description: The incremental product
    content.vb: Public Shared Function Multiply(left As INotifyExpression(Of Single), right As INotifyExpression(Of Single)) As INotifyExpression(Of Single)
  overload: NMF.Expressions.Observable.Multiply*
  nameWithType.vb: Observable.Multiply(INotifyExpression(Of Single), INotifyExpression(Of Single))
  fullName.vb: NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression(Of Single), NMF.Expressions.INotifyExpression(Of Single))
  name.vb: Multiply(INotifyExpression(Of Single), INotifyExpression(Of Single))
- uid: NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression{System.Double},NMF.Expressions.INotifyExpression{System.Double})
  commentId: M:NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression{System.Double},NMF.Expressions.INotifyExpression{System.Double})
  id: Multiply(NMF.Expressions.INotifyExpression{System.Double},NMF.Expressions.INotifyExpression{System.Double})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Multiply(INotifyExpression<double>, INotifyExpression<double>)
  nameWithType: Observable.Multiply(INotifyExpression<double>, INotifyExpression<double>)
  fullName: NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression<double>, NMF.Expressions.INotifyExpression<double>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Multiply
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 795
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Multiplies the given values incrementally
  example: []
  syntax:
    content: public static INotifyExpression<double> Multiply(INotifyExpression<double> left, INotifyExpression<double> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Double}
      description: The left factor
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Double}
      description: The right factor
    return:
      type: NMF.Expressions.INotifyExpression{System.Double}
      description: The incremental product
    content.vb: Public Shared Function Multiply(left As INotifyExpression(Of Double), right As INotifyExpression(Of Double)) As INotifyExpression(Of Double)
  overload: NMF.Expressions.Observable.Multiply*
  nameWithType.vb: Observable.Multiply(INotifyExpression(Of Double), INotifyExpression(Of Double))
  fullName.vb: NMF.Expressions.Observable.Multiply(NMF.Expressions.INotifyExpression(Of Double), NMF.Expressions.INotifyExpression(Of Double))
  name.vb: Multiply(INotifyExpression(Of Double), INotifyExpression(Of Double))
- uid: NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  commentId: M:NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  id: Modulo(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Modulo(INotifyExpression<int>, INotifyExpression<int>)
  nameWithType: Observable.Modulo(INotifyExpression<int>, INotifyExpression<int>)
  fullName: NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression<int>, NMF.Expressions.INotifyExpression<int>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Modulo
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 806
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Computes an incremental modulo of the operands
  example: []
  syntax:
    content: public static INotifyExpression<int> Modulo(INotifyExpression<int> left, INotifyExpression<int> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The left operand
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The right operand
    return:
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The incremental modulo
    content.vb: Public Shared Function Modulo(left As INotifyExpression(Of Integer), right As INotifyExpression(Of Integer)) As INotifyExpression(Of Integer)
  overload: NMF.Expressions.Observable.Modulo*
  nameWithType.vb: Observable.Modulo(INotifyExpression(Of Integer), INotifyExpression(Of Integer))
  fullName.vb: NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression(Of Integer), NMF.Expressions.INotifyExpression(Of Integer))
  name.vb: Modulo(INotifyExpression(Of Integer), INotifyExpression(Of Integer))
- uid: NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  commentId: M:NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  id: Modulo(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int64})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Modulo(INotifyExpression<long>, INotifyExpression<long>)
  nameWithType: Observable.Modulo(INotifyExpression<long>, INotifyExpression<long>)
  fullName: NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression<long>, NMF.Expressions.INotifyExpression<long>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Modulo
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 817
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Computes an incremental modulo of the operands
  example: []
  syntax:
    content: public static INotifyExpression<long> Modulo(INotifyExpression<long> left, INotifyExpression<long> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: The left operand
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: The right operand
    return:
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: The incremental modulo
    content.vb: Public Shared Function Modulo(left As INotifyExpression(Of Long), right As INotifyExpression(Of Long)) As INotifyExpression(Of Long)
  overload: NMF.Expressions.Observable.Modulo*
  nameWithType.vb: Observable.Modulo(INotifyExpression(Of Long), INotifyExpression(Of Long))
  fullName.vb: NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression(Of Long), NMF.Expressions.INotifyExpression(Of Long))
  name.vb: Modulo(INotifyExpression(Of Long), INotifyExpression(Of Long))
- uid: NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  commentId: M:NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  id: Modulo(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.UInt32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Modulo(INotifyExpression<uint>, INotifyExpression<uint>)
  nameWithType: Observable.Modulo(INotifyExpression<uint>, INotifyExpression<uint>)
  fullName: NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression<uint>, NMF.Expressions.INotifyExpression<uint>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Modulo
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 828
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Computes an incremental modulo of the operands
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static INotifyExpression<uint> Modulo(INotifyExpression<uint> left, INotifyExpression<uint> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: The left operand
    - id: right
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: The right operand
    return:
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: The incremental modulo
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function Modulo(left As INotifyExpression(Of UInteger), right As INotifyExpression(Of UInteger)) As INotifyExpression(Of UInteger)
  overload: NMF.Expressions.Observable.Modulo*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Observable.Modulo(INotifyExpression(Of UInteger), INotifyExpression(Of UInteger))
  fullName.vb: NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression(Of UInteger), NMF.Expressions.INotifyExpression(Of UInteger))
  name.vb: Modulo(INotifyExpression(Of UInteger), INotifyExpression(Of UInteger))
- uid: NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  commentId: M:NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  id: Modulo(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.UInt64})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Modulo(INotifyExpression<ulong>, INotifyExpression<ulong>)
  nameWithType: Observable.Modulo(INotifyExpression<ulong>, INotifyExpression<ulong>)
  fullName: NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression<ulong>, NMF.Expressions.INotifyExpression<ulong>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Modulo
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 840
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Computes an incremental modulo of the operands
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static INotifyExpression<ulong> Modulo(INotifyExpression<ulong> left, INotifyExpression<ulong> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: The left operand
    - id: right
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: The right operand
    return:
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: The incremental modulo
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function Modulo(left As INotifyExpression(Of ULong), right As INotifyExpression(Of ULong)) As INotifyExpression(Of ULong)
  overload: NMF.Expressions.Observable.Modulo*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Observable.Modulo(INotifyExpression(Of ULong), INotifyExpression(Of ULong))
  fullName.vb: NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression(Of ULong), NMF.Expressions.INotifyExpression(Of ULong))
  name.vb: Modulo(INotifyExpression(Of ULong), INotifyExpression(Of ULong))
- uid: NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression{System.Single},NMF.Expressions.INotifyExpression{System.Single})
  commentId: M:NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression{System.Single},NMF.Expressions.INotifyExpression{System.Single})
  id: Modulo(NMF.Expressions.INotifyExpression{System.Single},NMF.Expressions.INotifyExpression{System.Single})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Modulo(INotifyExpression<float>, INotifyExpression<float>)
  nameWithType: Observable.Modulo(INotifyExpression<float>, INotifyExpression<float>)
  fullName: NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression<float>, NMF.Expressions.INotifyExpression<float>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Modulo
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 852
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Computes an incremental modulo of the operands
  example: []
  syntax:
    content: public static INotifyExpression<float> Modulo(INotifyExpression<float> left, INotifyExpression<float> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Single}
      description: The left operand
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Single}
      description: The right operand
    return:
      type: NMF.Expressions.INotifyExpression{System.Single}
      description: The incremental modulo
    content.vb: Public Shared Function Modulo(left As INotifyExpression(Of Single), right As INotifyExpression(Of Single)) As INotifyExpression(Of Single)
  overload: NMF.Expressions.Observable.Modulo*
  nameWithType.vb: Observable.Modulo(INotifyExpression(Of Single), INotifyExpression(Of Single))
  fullName.vb: NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression(Of Single), NMF.Expressions.INotifyExpression(Of Single))
  name.vb: Modulo(INotifyExpression(Of Single), INotifyExpression(Of Single))
- uid: NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression{System.Double},NMF.Expressions.INotifyExpression{System.Double})
  commentId: M:NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression{System.Double},NMF.Expressions.INotifyExpression{System.Double})
  id: Modulo(NMF.Expressions.INotifyExpression{System.Double},NMF.Expressions.INotifyExpression{System.Double})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Modulo(INotifyExpression<double>, INotifyExpression<double>)
  nameWithType: Observable.Modulo(INotifyExpression<double>, INotifyExpression<double>)
  fullName: NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression<double>, NMF.Expressions.INotifyExpression<double>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Modulo
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 863
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Computes an incremental modulo of the operands
  example: []
  syntax:
    content: public static INotifyExpression<double> Modulo(INotifyExpression<double> left, INotifyExpression<double> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Double}
      description: The left operand
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Double}
      description: The right operand
    return:
      type: NMF.Expressions.INotifyExpression{System.Double}
      description: The incremental modulo
    content.vb: Public Shared Function Modulo(left As INotifyExpression(Of Double), right As INotifyExpression(Of Double)) As INotifyExpression(Of Double)
  overload: NMF.Expressions.Observable.Modulo*
  nameWithType.vb: Observable.Modulo(INotifyExpression(Of Double), INotifyExpression(Of Double))
  fullName.vb: NMF.Expressions.Observable.Modulo(NMF.Expressions.INotifyExpression(Of Double), NMF.Expressions.INotifyExpression(Of Double))
  name.vb: Modulo(INotifyExpression(Of Double), INotifyExpression(Of Double))
- uid: NMF.Expressions.Observable.RightShift(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  commentId: M:NMF.Expressions.Observable.RightShift(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  id: RightShift(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: RightShift(INotifyExpression<int>, INotifyExpression<int>)
  nameWithType: Observable.RightShift(INotifyExpression<int>, INotifyExpression<int>)
  fullName: NMF.Expressions.Observable.RightShift(NMF.Expressions.INotifyExpression<int>, NMF.Expressions.INotifyExpression<int>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RightShift
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 874
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Performs an incremental right shift
  example: []
  syntax:
    content: public static INotifyExpression<int> RightShift(INotifyExpression<int> left, INotifyExpression<int> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The value to be shifted
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The shift
    return:
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: An incremental shift
    content.vb: Public Shared Function RightShift(left As INotifyExpression(Of Integer), right As INotifyExpression(Of Integer)) As INotifyExpression(Of Integer)
  overload: NMF.Expressions.Observable.RightShift*
  nameWithType.vb: Observable.RightShift(INotifyExpression(Of Integer), INotifyExpression(Of Integer))
  fullName.vb: NMF.Expressions.Observable.RightShift(NMF.Expressions.INotifyExpression(Of Integer), NMF.Expressions.INotifyExpression(Of Integer))
  name.vb: RightShift(INotifyExpression(Of Integer), INotifyExpression(Of Integer))
- uid: NMF.Expressions.Observable.RightShift(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int32})
  commentId: M:NMF.Expressions.Observable.RightShift(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int32})
  id: RightShift(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: RightShift(INotifyExpression<long>, INotifyExpression<int>)
  nameWithType: Observable.RightShift(INotifyExpression<long>, INotifyExpression<int>)
  fullName: NMF.Expressions.Observable.RightShift(NMF.Expressions.INotifyExpression<long>, NMF.Expressions.INotifyExpression<int>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RightShift
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 885
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Performs an incremental right shift
  example: []
  syntax:
    content: public static INotifyExpression<long> RightShift(INotifyExpression<long> left, INotifyExpression<int> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: The value to be shifted
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The shift
    return:
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: An incremental shift
    content.vb: Public Shared Function RightShift(left As INotifyExpression(Of Long), right As INotifyExpression(Of Integer)) As INotifyExpression(Of Long)
  overload: NMF.Expressions.Observable.RightShift*
  nameWithType.vb: Observable.RightShift(INotifyExpression(Of Long), INotifyExpression(Of Integer))
  fullName.vb: NMF.Expressions.Observable.RightShift(NMF.Expressions.INotifyExpression(Of Long), NMF.Expressions.INotifyExpression(Of Integer))
  name.vb: RightShift(INotifyExpression(Of Long), INotifyExpression(Of Integer))
- uid: NMF.Expressions.Observable.RightShift(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.Int32})
  commentId: M:NMF.Expressions.Observable.RightShift(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.Int32})
  id: RightShift(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.Int32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: RightShift(INotifyExpression<uint>, INotifyExpression<int>)
  nameWithType: Observable.RightShift(INotifyExpression<uint>, INotifyExpression<int>)
  fullName: NMF.Expressions.Observable.RightShift(NMF.Expressions.INotifyExpression<uint>, NMF.Expressions.INotifyExpression<int>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RightShift
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 896
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Performs an incremental right shift
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static INotifyExpression<uint> RightShift(INotifyExpression<uint> left, INotifyExpression<int> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: The value to be shifted
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The shift
    return:
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: An incremental shift
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function RightShift(left As INotifyExpression(Of UInteger), right As INotifyExpression(Of Integer)) As INotifyExpression(Of UInteger)
  overload: NMF.Expressions.Observable.RightShift*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Observable.RightShift(INotifyExpression(Of UInteger), INotifyExpression(Of Integer))
  fullName.vb: NMF.Expressions.Observable.RightShift(NMF.Expressions.INotifyExpression(Of UInteger), NMF.Expressions.INotifyExpression(Of Integer))
  name.vb: RightShift(INotifyExpression(Of UInteger), INotifyExpression(Of Integer))
- uid: NMF.Expressions.Observable.RightShift(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.Int32})
  commentId: M:NMF.Expressions.Observable.RightShift(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.Int32})
  id: RightShift(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.Int32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: RightShift(INotifyExpression<ulong>, INotifyExpression<int>)
  nameWithType: Observable.RightShift(INotifyExpression<ulong>, INotifyExpression<int>)
  fullName: NMF.Expressions.Observable.RightShift(NMF.Expressions.INotifyExpression<ulong>, NMF.Expressions.INotifyExpression<int>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RightShift
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 908
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Performs an incremental right shift
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static INotifyExpression<ulong> RightShift(INotifyExpression<ulong> left, INotifyExpression<int> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: The value to be shifted
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The shift
    return:
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: An incremental shift
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function RightShift(left As INotifyExpression(Of ULong), right As INotifyExpression(Of Integer)) As INotifyExpression(Of ULong)
  overload: NMF.Expressions.Observable.RightShift*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Observable.RightShift(INotifyExpression(Of ULong), INotifyExpression(Of Integer))
  fullName.vb: NMF.Expressions.Observable.RightShift(NMF.Expressions.INotifyExpression(Of ULong), NMF.Expressions.INotifyExpression(Of Integer))
  name.vb: RightShift(INotifyExpression(Of ULong), INotifyExpression(Of Integer))
- uid: NMF.Expressions.Observable.LeftShift(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  commentId: M:NMF.Expressions.Observable.LeftShift(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  id: LeftShift(NMF.Expressions.INotifyExpression{System.Int32},NMF.Expressions.INotifyExpression{System.Int32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: LeftShift(INotifyExpression<int>, INotifyExpression<int>)
  nameWithType: Observable.LeftShift(INotifyExpression<int>, INotifyExpression<int>)
  fullName: NMF.Expressions.Observable.LeftShift(NMF.Expressions.INotifyExpression<int>, NMF.Expressions.INotifyExpression<int>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: LeftShift
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 920
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Performs an incremental left shift
  example: []
  syntax:
    content: public static INotifyExpression<int> LeftShift(INotifyExpression<int> left, INotifyExpression<int> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The value to be shifted
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The shift
    return:
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: An incremental shift
    content.vb: Public Shared Function LeftShift(left As INotifyExpression(Of Integer), right As INotifyExpression(Of Integer)) As INotifyExpression(Of Integer)
  overload: NMF.Expressions.Observable.LeftShift*
  nameWithType.vb: Observable.LeftShift(INotifyExpression(Of Integer), INotifyExpression(Of Integer))
  fullName.vb: NMF.Expressions.Observable.LeftShift(NMF.Expressions.INotifyExpression(Of Integer), NMF.Expressions.INotifyExpression(Of Integer))
  name.vb: LeftShift(INotifyExpression(Of Integer), INotifyExpression(Of Integer))
- uid: NMF.Expressions.Observable.LeftShift(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int32})
  commentId: M:NMF.Expressions.Observable.LeftShift(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int32})
  id: LeftShift(NMF.Expressions.INotifyExpression{System.Int64},NMF.Expressions.INotifyExpression{System.Int32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: LeftShift(INotifyExpression<long>, INotifyExpression<int>)
  nameWithType: Observable.LeftShift(INotifyExpression<long>, INotifyExpression<int>)
  fullName: NMF.Expressions.Observable.LeftShift(NMF.Expressions.INotifyExpression<long>, NMF.Expressions.INotifyExpression<int>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: LeftShift
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 931
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Performs an incremental left shift
  example: []
  syntax:
    content: public static INotifyExpression<long> LeftShift(INotifyExpression<long> left, INotifyExpression<int> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: The value to be shifted
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The shift
    return:
      type: NMF.Expressions.INotifyExpression{System.Int64}
      description: An incremental shift
    content.vb: Public Shared Function LeftShift(left As INotifyExpression(Of Long), right As INotifyExpression(Of Integer)) As INotifyExpression(Of Long)
  overload: NMF.Expressions.Observable.LeftShift*
  nameWithType.vb: Observable.LeftShift(INotifyExpression(Of Long), INotifyExpression(Of Integer))
  fullName.vb: NMF.Expressions.Observable.LeftShift(NMF.Expressions.INotifyExpression(Of Long), NMF.Expressions.INotifyExpression(Of Integer))
  name.vb: LeftShift(INotifyExpression(Of Long), INotifyExpression(Of Integer))
- uid: NMF.Expressions.Observable.LeftShift(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.Int32})
  commentId: M:NMF.Expressions.Observable.LeftShift(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.Int32})
  id: LeftShift(NMF.Expressions.INotifyExpression{System.UInt32},NMF.Expressions.INotifyExpression{System.Int32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: LeftShift(INotifyExpression<uint>, INotifyExpression<int>)
  nameWithType: Observable.LeftShift(INotifyExpression<uint>, INotifyExpression<int>)
  fullName: NMF.Expressions.Observable.LeftShift(NMF.Expressions.INotifyExpression<uint>, NMF.Expressions.INotifyExpression<int>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: LeftShift
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 942
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Performs an incremental left shift
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static INotifyExpression<uint> LeftShift(INotifyExpression<uint> left, INotifyExpression<int> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: The value to be shifted
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The shift
    return:
      type: NMF.Expressions.INotifyExpression{System.UInt32}
      description: An incremental shift
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function LeftShift(left As INotifyExpression(Of UInteger), right As INotifyExpression(Of Integer)) As INotifyExpression(Of UInteger)
  overload: NMF.Expressions.Observable.LeftShift*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Observable.LeftShift(INotifyExpression(Of UInteger), INotifyExpression(Of Integer))
  fullName.vb: NMF.Expressions.Observable.LeftShift(NMF.Expressions.INotifyExpression(Of UInteger), NMF.Expressions.INotifyExpression(Of Integer))
  name.vb: LeftShift(INotifyExpression(Of UInteger), INotifyExpression(Of Integer))
- uid: NMF.Expressions.Observable.LeftShift(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.Int32})
  commentId: M:NMF.Expressions.Observable.LeftShift(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.Int32})
  id: LeftShift(NMF.Expressions.INotifyExpression{System.UInt64},NMF.Expressions.INotifyExpression{System.Int32})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: LeftShift(INotifyExpression<ulong>, INotifyExpression<int>)
  nameWithType: Observable.LeftShift(INotifyExpression<ulong>, INotifyExpression<int>)
  fullName: NMF.Expressions.Observable.LeftShift(NMF.Expressions.INotifyExpression<ulong>, NMF.Expressions.INotifyExpression<int>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: LeftShift
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 954
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Performs an incremental left shift
  example: []
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static INotifyExpression<ulong> LeftShift(INotifyExpression<ulong> left, INotifyExpression<int> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: The value to be shifted
    - id: right
      type: NMF.Expressions.INotifyExpression{System.Int32}
      description: The shift
    return:
      type: NMF.Expressions.INotifyExpression{System.UInt64}
      description: An incremental shift
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function LeftShift(left As INotifyExpression(Of ULong), right As INotifyExpression(Of Integer)) As INotifyExpression(Of ULong)
  overload: NMF.Expressions.Observable.LeftShift*
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: Observable.LeftShift(INotifyExpression(Of ULong), INotifyExpression(Of Integer))
  fullName.vb: NMF.Expressions.Observable.LeftShift(NMF.Expressions.INotifyExpression(Of ULong), NMF.Expressions.INotifyExpression(Of Integer))
  name.vb: LeftShift(INotifyExpression(Of ULong), INotifyExpression(Of Integer))
- uid: NMF.Expressions.Observable.GreatherThan``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  commentId: M:NMF.Expressions.Observable.GreatherThan``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  id: GreatherThan``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: GreatherThan<T>(INotifyExpression<T>, INotifyExpression<T>)
  nameWithType: Observable.GreatherThan<T>(INotifyExpression<T>, INotifyExpression<T>)
  fullName: NMF.Expressions.Observable.GreatherThan<T>(NMF.Expressions.INotifyExpression<T>, NMF.Expressions.INotifyExpression<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GreatherThan
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 967
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Incrementally determines whether the left value is greather than the right value
  example: []
  syntax:
    content: 'public static INotifyExpression<bool> GreatherThan<T>(INotifyExpression<T> left, INotifyExpression<T> right) where T : IComparable<T>'
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{{T}}
      description: The left operand
    - id: right
      type: NMF.Expressions.INotifyExpression{{T}}
      description: The right operand
    typeParameters:
    - id: T
      description: The type of the elements
    return:
      type: NMF.Expressions.INotifyExpression{System.Boolean}
      description: An incremental value determing whether the left operand is greather than the right operand
    content.vb: Public Shared Function GreatherThan(Of T As IComparable(Of T))(left As INotifyExpression(Of T), right As INotifyExpression(Of T)) As INotifyExpression(Of Boolean)
  overload: NMF.Expressions.Observable.GreatherThan*
  nameWithType.vb: Observable.GreatherThan(Of T)(INotifyExpression(Of T), INotifyExpression(Of T))
  fullName.vb: NMF.Expressions.Observable.GreatherThan(Of T)(NMF.Expressions.INotifyExpression(Of T), NMF.Expressions.INotifyExpression(Of T))
  name.vb: GreatherThan(Of T)(INotifyExpression(Of T), INotifyExpression(Of T))
- uid: NMF.Expressions.Observable.GreatherThanOrEquals``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  commentId: M:NMF.Expressions.Observable.GreatherThanOrEquals``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  id: GreatherThanOrEquals``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: GreatherThanOrEquals<T>(INotifyExpression<T>, INotifyExpression<T>)
  nameWithType: Observable.GreatherThanOrEquals<T>(INotifyExpression<T>, INotifyExpression<T>)
  fullName: NMF.Expressions.Observable.GreatherThanOrEquals<T>(NMF.Expressions.INotifyExpression<T>, NMF.Expressions.INotifyExpression<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GreatherThanOrEquals
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 980
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Incrementally determines whether the left value is greather than or equals to the right value
  example: []
  syntax:
    content: 'public static INotifyExpression<bool> GreatherThanOrEquals<T>(INotifyExpression<T> left, INotifyExpression<T> right) where T : IComparable<T>'
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{{T}}
      description: The left operand
    - id: right
      type: NMF.Expressions.INotifyExpression{{T}}
      description: The right operand
    typeParameters:
    - id: T
      description: The type of the elements
    return:
      type: NMF.Expressions.INotifyExpression{System.Boolean}
      description: An incremental value determing whether the left operand is greather than or equals to the right operand
    content.vb: Public Shared Function GreatherThanOrEquals(Of T As IComparable(Of T))(left As INotifyExpression(Of T), right As INotifyExpression(Of T)) As INotifyExpression(Of Boolean)
  overload: NMF.Expressions.Observable.GreatherThanOrEquals*
  nameWithType.vb: Observable.GreatherThanOrEquals(Of T)(INotifyExpression(Of T), INotifyExpression(Of T))
  fullName.vb: NMF.Expressions.Observable.GreatherThanOrEquals(Of T)(NMF.Expressions.INotifyExpression(Of T), NMF.Expressions.INotifyExpression(Of T))
  name.vb: GreatherThanOrEquals(Of T)(INotifyExpression(Of T), INotifyExpression(Of T))
- uid: NMF.Expressions.Observable.LessThan``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  commentId: M:NMF.Expressions.Observable.LessThan``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  id: LessThan``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: LessThan<T>(INotifyExpression<T>, INotifyExpression<T>)
  nameWithType: Observable.LessThan<T>(INotifyExpression<T>, INotifyExpression<T>)
  fullName: NMF.Expressions.Observable.LessThan<T>(NMF.Expressions.INotifyExpression<T>, NMF.Expressions.INotifyExpression<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: LessThan
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 993
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Incrementally determines whether the left value is less than the right value
  example: []
  syntax:
    content: 'public static INotifyExpression<bool> LessThan<T>(INotifyExpression<T> left, INotifyExpression<T> right) where T : IComparable<T>'
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{{T}}
      description: The left operand
    - id: right
      type: NMF.Expressions.INotifyExpression{{T}}
      description: The right operand
    typeParameters:
    - id: T
      description: The type of the elements
    return:
      type: NMF.Expressions.INotifyExpression{System.Boolean}
      description: An incremental value determing whether the left operand is less than the right operand
    content.vb: Public Shared Function LessThan(Of T As IComparable(Of T))(left As INotifyExpression(Of T), right As INotifyExpression(Of T)) As INotifyExpression(Of Boolean)
  overload: NMF.Expressions.Observable.LessThan*
  nameWithType.vb: Observable.LessThan(Of T)(INotifyExpression(Of T), INotifyExpression(Of T))
  fullName.vb: NMF.Expressions.Observable.LessThan(Of T)(NMF.Expressions.INotifyExpression(Of T), NMF.Expressions.INotifyExpression(Of T))
  name.vb: LessThan(Of T)(INotifyExpression(Of T), INotifyExpression(Of T))
- uid: NMF.Expressions.Observable.LessThanOrEquals``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  commentId: M:NMF.Expressions.Observable.LessThanOrEquals``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  id: LessThanOrEquals``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: LessThanOrEquals<T>(INotifyExpression<T>, INotifyExpression<T>)
  nameWithType: Observable.LessThanOrEquals<T>(INotifyExpression<T>, INotifyExpression<T>)
  fullName: NMF.Expressions.Observable.LessThanOrEquals<T>(NMF.Expressions.INotifyExpression<T>, NMF.Expressions.INotifyExpression<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: LessThanOrEquals
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 1006
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Incrementally determines whether the left value is less than or equals the right value
  example: []
  syntax:
    content: 'public static INotifyExpression<bool> LessThanOrEquals<T>(INotifyExpression<T> left, INotifyExpression<T> right) where T : IComparable<T>'
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{{T}}
      description: The left operand
    - id: right
      type: NMF.Expressions.INotifyExpression{{T}}
      description: The right operand
    typeParameters:
    - id: T
      description: The type of the elements
    return:
      type: NMF.Expressions.INotifyExpression{System.Boolean}
      description: An incremental value determing whether the left operand is less than or equals the right operand
    content.vb: Public Shared Function LessThanOrEquals(Of T As IComparable(Of T))(left As INotifyExpression(Of T), right As INotifyExpression(Of T)) As INotifyExpression(Of Boolean)
  overload: NMF.Expressions.Observable.LessThanOrEquals*
  nameWithType.vb: Observable.LessThanOrEquals(Of T)(INotifyExpression(Of T), INotifyExpression(Of T))
  fullName.vb: NMF.Expressions.Observable.LessThanOrEquals(Of T)(NMF.Expressions.INotifyExpression(Of T), NMF.Expressions.INotifyExpression(Of T))
  name.vb: LessThanOrEquals(Of T)(INotifyExpression(Of T), INotifyExpression(Of T))
- uid: NMF.Expressions.Observable.Equals``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  commentId: M:NMF.Expressions.Observable.Equals``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  id: Equals``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: Equals<T>(INotifyExpression<T>, INotifyExpression<T>)
  nameWithType: Observable.Equals<T>(INotifyExpression<T>, INotifyExpression<T>)
  fullName: NMF.Expressions.Observable.Equals<T>(NMF.Expressions.INotifyExpression<T>, NMF.Expressions.INotifyExpression<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Equals
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 1019
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Incrementally determines whether the given values are equal
  example: []
  syntax:
    content: public static INotifyExpression<bool> Equals<T>(INotifyExpression<T> left, INotifyExpression<T> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{{T}}
      description: The left operand
    - id: right
      type: NMF.Expressions.INotifyExpression{{T}}
      description: The right operand
    typeParameters:
    - id: T
      description: The type of the elements
    return:
      type: NMF.Expressions.INotifyExpression{System.Boolean}
      description: An incremental value determing whether the given values are equal
    content.vb: Public Shared Function Equals(Of T)(left As INotifyExpression(Of T), right As INotifyExpression(Of T)) As INotifyExpression(Of Boolean)
  overload: NMF.Expressions.Observable.Equals*
  nameWithType.vb: Observable.Equals(Of T)(INotifyExpression(Of T), INotifyExpression(Of T))
  fullName.vb: NMF.Expressions.Observable.Equals(Of T)(NMF.Expressions.INotifyExpression(Of T), NMF.Expressions.INotifyExpression(Of T))
  name.vb: Equals(Of T)(INotifyExpression(Of T), INotifyExpression(Of T))
- uid: NMF.Expressions.Observable.NotEquals``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  commentId: M:NMF.Expressions.Observable.NotEquals``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  id: NotEquals``1(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``0})
  parent: NMF.Expressions.Observable
  langs:
  - csharp
  - vb
  name: NotEquals<T>(INotifyExpression<T>, INotifyExpression<T>)
  nameWithType: Observable.NotEquals<T>(INotifyExpression<T>, INotifyExpression<T>)
  fullName: NMF.Expressions.Observable.NotEquals<T>(NMF.Expressions.INotifyExpression<T>, NMF.Expressions.INotifyExpression<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/Observable.Manual.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NotEquals
    path: src/Expressions/Expressions/Public/Observable.Manual.cs
    startLine: 1031
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Incrementally determines whether the given values are not equal
  example: []
  syntax:
    content: public static INotifyExpression<bool> NotEquals<T>(INotifyExpression<T> left, INotifyExpression<T> right)
    parameters:
    - id: left
      type: NMF.Expressions.INotifyExpression{{T}}
      description: The left operand
    - id: right
      type: NMF.Expressions.INotifyExpression{{T}}
      description: The right operand
    typeParameters:
    - id: T
      description: The type of the elements
    return:
      type: NMF.Expressions.INotifyExpression{System.Boolean}
      description: An incremental value determing whether the given values are not equal
    content.vb: Public Shared Function NotEquals(Of T)(left As INotifyExpression(Of T), right As INotifyExpression(Of T)) As INotifyExpression(Of Boolean)
  overload: NMF.Expressions.Observable.NotEquals*
  nameWithType.vb: Observable.NotEquals(Of T)(INotifyExpression(Of T), INotifyExpression(Of T))
  fullName.vb: NMF.Expressions.Observable.NotEquals(Of T)(NMF.Expressions.INotifyExpression(Of T), NMF.Expressions.INotifyExpression(Of T))
  name.vb: NotEquals(Of T)(INotifyExpression(Of T), INotifyExpression(Of T))
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  href: NMF.html
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.Observable.Func*
  commentId: Overload:NMF.Expressions.Observable.Func
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_Func__2_System_Linq_Expressions_Expression_System_Func___0___1___
  name: Func
  nameWithType: Observable.Func
  fullName: NMF.Expressions.Observable.Func
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T1, TResult>>
  nameWithType: Expression<Func<T1, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, TResult>>
  nameWithType.vb: Expression(Of Func(Of T1, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, TResult))
  name.vb: Expression(Of Func(Of T1, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T1},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{``0,``1}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`2
  href: NMF.Expressions.ObservingFunc-2.html
  name: ObservingFunc<T1, TResult>
  nameWithType: ObservingFunc<T1, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>
  nameWithType.vb: ObservingFunc(Of T1, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult)
  name.vb: ObservingFunc(Of T1, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-2.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - name: TDelegate
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
- uid: NMF.Expressions.ObservingFunc`2
  commentId: T:NMF.Expressions.ObservingFunc`2
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-2.html
  name: ObservingFunc<T1, TResult>
  nameWithType: ObservingFunc<T1, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>
  nameWithType.vb: ObservingFunc(Of T1, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult)
  name.vb: ObservingFunc(Of T1, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-2.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1,`2}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T1, T2, TResult>>
  nameWithType: Expression<Func<T1, T2, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, T2, TResult>>
  nameWithType.vb: Expression(Of Func(Of T1, T2, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, TResult))
  name.vb: Expression(Of Func(Of T1, T2, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{``0,``1,``2}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`3
  href: NMF.Expressions.ObservingFunc-3.html
  name: ObservingFunc<T1, T2, TResult>
  nameWithType: ObservingFunc<T1, T2, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult)
  name.vb: ObservingFunc(Of T1, T2, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`3
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-3.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`3
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-3.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`3
  commentId: T:NMF.Expressions.ObservingFunc`3
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-3.html
  name: ObservingFunc<T1, T2, TResult>
  nameWithType: ObservingFunc<T1, T2, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult)
  name.vb: ObservingFunc(Of T1, T2, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`3
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-3.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`3
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-3.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T1, T2, T3, TResult>>
  nameWithType: Expression<Func<T1, T2, T3, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TResult>>
  nameWithType.vb: Expression(Of Func(Of T1, T2, T3, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, TResult))
  name.vb: Expression(Of Func(Of T1, T2, T3, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{``0,``1,``2,``3}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`4
  href: NMF.Expressions.ObservingFunc-4.html
  name: ObservingFunc<T1, T2, T3, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-4.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-4.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`4
  commentId: T:NMF.Expressions.ObservingFunc`4
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-4.html
  name: ObservingFunc<T1, T2, T3, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-4.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-4.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T1, T2, T3, T4, TResult>>
  nameWithType: Expression<Func<T1, T2, T3, T4, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TResult>>
  nameWithType.vb: Expression(Of Func(Of T1, T2, T3, T4, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, TResult))
  name.vb: Expression(Of Func(Of T1, T2, T3, T4, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`5
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-5
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`5
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-5
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{``0,``1,``2,``3,``4}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`5
  href: NMF.Expressions.ObservingFunc-5.html
  name: ObservingFunc<T1, T2, T3, T4, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`5
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-5.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`5
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-5.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`5
  commentId: T:NMF.Expressions.ObservingFunc`5
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-5.html
  name: ObservingFunc<T1, T2, T3, T4, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`5
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-5.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`5
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-5.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T1, T2, T3, T4, T5, TResult>>
  nameWithType: Expression<Func<T1, T2, T3, T4, T5, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TResult>>
  nameWithType.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, TResult))
  name.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`6
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-6
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`6
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-6
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{``0,``1,``2,``3,``4,``5}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`6
  href: NMF.Expressions.ObservingFunc-6.html
  name: ObservingFunc<T1, T2, T3, T4, T5, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`6
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-6.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`6
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-6.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`6
  commentId: T:NMF.Expressions.ObservingFunc`6
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-6.html
  name: ObservingFunc<T1, T2, T3, T4, T5, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`6
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-6.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`6
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-6.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T1, T2, T3, T4, T5, T6, TResult>>
  nameWithType: Expression<Func<T1, T2, T3, T4, T5, T6, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, TResult>>
  nameWithType.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, T6, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, TResult))
  name.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, T6, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`7
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-7
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`7
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-7
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{``0,``1,``2,``3,``4,``5,``6}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`7
  href: NMF.Expressions.ObservingFunc-7.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`7
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-7.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`7
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-7.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`7
  commentId: T:NMF.Expressions.ObservingFunc`7
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-7.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`7
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-7.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`7
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-7.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>>
  nameWithType: Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, TResult>>
  nameWithType.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, TResult))
  name.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`8
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-8
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`8
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-8
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{``0,``1,``2,``3,``4,``5,``6,``7}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`8
  href: NMF.Expressions.ObservingFunc-8.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`8
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-8.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`8
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-8.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`8
  commentId: T:NMF.Expressions.ObservingFunc`8
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-8.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`8
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-8.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`8
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-8.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>>
  nameWithType: Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>>
  nameWithType.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult))
  name.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`9
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-9
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`9
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-9
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`9
  href: NMF.Expressions.ObservingFunc-9.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`9
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-9.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`9
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-9.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`9
  commentId: T:NMF.Expressions.ObservingFunc`9
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-9.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`9
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-9.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`9
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-9.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>>
  nameWithType: Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>>
  nameWithType.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult))
  name.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`10
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-10
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`10
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-10
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`10
  href: NMF.Expressions.ObservingFunc-10.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`10
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-10.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`10
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-10.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`10
  commentId: T:NMF.Expressions.ObservingFunc`10
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-10.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`10
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-10.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`10
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-10.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>>
  nameWithType: Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>>
  nameWithType.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult))
  name.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`11
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-11
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`11
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-11
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`11
  href: NMF.Expressions.ObservingFunc-11.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`11
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-11.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`11
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-11.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`11
  commentId: T:NMF.Expressions.ObservingFunc`11
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-11.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`11
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-11.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`11
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-11.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>>
  nameWithType: Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>>
  nameWithType.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult))
  name.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`12
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-12
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`12
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-12
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`12
  href: NMF.Expressions.ObservingFunc-12.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`12
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-12.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`12
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-12.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`12
  commentId: T:NMF.Expressions.ObservingFunc`12
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-12.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`12
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-12.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`12
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-12.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>>
  nameWithType: Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>>
  nameWithType.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult))
  name.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`13
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-13
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`13
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-13
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`13
  href: NMF.Expressions.ObservingFunc-13.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`13
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-13.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`13
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-13.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`13
  commentId: T:NMF.Expressions.ObservingFunc`13
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-13.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`13
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-13.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`13
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-13.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>>
  nameWithType: Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>>
  nameWithType.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult))
  name.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`14
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-14
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`14
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-14
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`14
  href: NMF.Expressions.ObservingFunc-14.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`14
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-14.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`14
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-14.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`14
  commentId: T:NMF.Expressions.ObservingFunc`14
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-14.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`14
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-14.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`14
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-14.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>
  nameWithType: Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>>
  nameWithType.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult))
  name.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`15
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-15
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`15
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-15
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`15
  href: NMF.Expressions.ObservingFunc-15.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`15
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-15.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`15
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-15.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`15
  commentId: T:NMF.Expressions.ObservingFunc`15
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-15.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`15
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-15.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`15
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-15.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{T15},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>>
  nameWithType: Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>>
  nameWithType.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult))
  name.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`16
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-16
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: T15
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`16
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-16
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: T15
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{T15},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`16
  href: NMF.Expressions.ObservingFunc-16.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`16
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-16.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: T15
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`16
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-16.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: T15
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`16
  commentId: T:NMF.Expressions.ObservingFunc`16
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-16.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`16
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-16.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: T15
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`16
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-16.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: T15
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Action{{T1},{TResult}}
  commentId: T:System.Action{``0,``1}
  parent: System
  definition: System.Action`2
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<T1, TResult>
  nameWithType: Action<T1, TResult>
  fullName: System.Action<T1, TResult>
  nameWithType.vb: Action(Of T1, TResult)
  fullName.vb: System.Action(Of T1, TResult)
  name.vb: Action(Of T1, TResult)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: System.Action{{T1},{T2},{TResult}}
  commentId: T:System.Action{``0,``1,``2}
  parent: System
  definition: System.Action`3
  href: https://learn.microsoft.com/dotnet/api/system.action-3
  name: Action<T1, T2, TResult>
  nameWithType: Action<T1, T2, TResult>
  fullName: System.Action<T1, T2, TResult>
  nameWithType.vb: Action(Of T1, T2, TResult)
  fullName.vb: System.Action(Of T1, T2, TResult)
  name.vb: Action(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Action`3
  commentId: T:System.Action`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-3
  name: Action<T1, T2, T3>
  nameWithType: Action<T1, T2, T3>
  fullName: System.Action<T1, T2, T3>
  nameWithType.vb: Action(Of T1, T2, T3)
  fullName.vb: System.Action(Of T1, T2, T3)
  name.vb: Action(Of T1, T2, T3)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: )
- uid: System.Action{{T1},{T2},{T3},{TResult}}
  commentId: T:System.Action{``0,``1,``2,``3}
  parent: System
  definition: System.Action`4
  href: https://learn.microsoft.com/dotnet/api/system.action-4
  name: Action<T1, T2, T3, TResult>
  nameWithType: Action<T1, T2, T3, TResult>
  fullName: System.Action<T1, T2, T3, TResult>
  nameWithType.vb: Action(Of T1, T2, T3, TResult)
  fullName.vb: System.Action(Of T1, T2, T3, TResult)
  name.vb: Action(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Action`4
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-4
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Action`4
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-4
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Action`4
  commentId: T:System.Action`4
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-4
  name: Action<T1, T2, T3, T4>
  nameWithType: Action<T1, T2, T3, T4>
  fullName: System.Action<T1, T2, T3, T4>
  nameWithType.vb: Action(Of T1, T2, T3, T4)
  fullName.vb: System.Action(Of T1, T2, T3, T4)
  name.vb: Action(Of T1, T2, T3, T4)
  spec.csharp:
  - uid: System.Action`4
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-4
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: '>'
  spec.vb:
  - uid: System.Action`4
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-4
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: )
- uid: System.Action{{T1},{T2},{T3},{T4},{TResult}}
  commentId: T:System.Action{``0,``1,``2,``3,``4}
  parent: System
  definition: System.Action`5
  href: https://learn.microsoft.com/dotnet/api/system.action-5
  name: Action<T1, T2, T3, T4, TResult>
  nameWithType: Action<T1, T2, T3, T4, TResult>
  fullName: System.Action<T1, T2, T3, T4, TResult>
  nameWithType.vb: Action(Of T1, T2, T3, T4, TResult)
  fullName.vb: System.Action(Of T1, T2, T3, T4, TResult)
  name.vb: Action(Of T1, T2, T3, T4, TResult)
  spec.csharp:
  - uid: System.Action`5
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-5
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Action`5
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-5
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Action`5
  commentId: T:System.Action`5
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-5
  name: Action<T1, T2, T3, T4, T5>
  nameWithType: Action<T1, T2, T3, T4, T5>
  fullName: System.Action<T1, T2, T3, T4, T5>
  nameWithType.vb: Action(Of T1, T2, T3, T4, T5)
  fullName.vb: System.Action(Of T1, T2, T3, T4, T5)
  name.vb: Action(Of T1, T2, T3, T4, T5)
  spec.csharp:
  - uid: System.Action`5
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-5
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: '>'
  spec.vb:
  - uid: System.Action`5
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-5
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: )
- uid: System.Action{{T1},{T2},{T3},{T4},{T5},{TResult}}
  commentId: T:System.Action{``0,``1,``2,``3,``4,``5}
  parent: System
  definition: System.Action`6
  href: https://learn.microsoft.com/dotnet/api/system.action-6
  name: Action<T1, T2, T3, T4, T5, TResult>
  nameWithType: Action<T1, T2, T3, T4, T5, TResult>
  fullName: System.Action<T1, T2, T3, T4, T5, TResult>
  nameWithType.vb: Action(Of T1, T2, T3, T4, T5, TResult)
  fullName.vb: System.Action(Of T1, T2, T3, T4, T5, TResult)
  name.vb: Action(Of T1, T2, T3, T4, T5, TResult)
  spec.csharp:
  - uid: System.Action`6
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-6
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Action`6
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-6
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Action`6
  commentId: T:System.Action`6
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-6
  name: Action<T1, T2, T3, T4, T5, T6>
  nameWithType: Action<T1, T2, T3, T4, T5, T6>
  fullName: System.Action<T1, T2, T3, T4, T5, T6>
  nameWithType.vb: Action(Of T1, T2, T3, T4, T5, T6)
  fullName.vb: System.Action(Of T1, T2, T3, T4, T5, T6)
  name.vb: Action(Of T1, T2, T3, T4, T5, T6)
  spec.csharp:
  - uid: System.Action`6
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-6
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: '>'
  spec.vb:
  - uid: System.Action`6
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-6
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: )
- uid: System.Action{{T1},{T2},{T3},{T4},{T5},{T6},{TResult}}
  commentId: T:System.Action{``0,``1,``2,``3,``4,``5,``6}
  parent: System
  definition: System.Action`7
  href: https://learn.microsoft.com/dotnet/api/system.action-7
  name: Action<T1, T2, T3, T4, T5, T6, TResult>
  nameWithType: Action<T1, T2, T3, T4, T5, T6, TResult>
  fullName: System.Action<T1, T2, T3, T4, T5, T6, TResult>
  nameWithType.vb: Action(Of T1, T2, T3, T4, T5, T6, TResult)
  fullName.vb: System.Action(Of T1, T2, T3, T4, T5, T6, TResult)
  name.vb: Action(Of T1, T2, T3, T4, T5, T6, TResult)
  spec.csharp:
  - uid: System.Action`7
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-7
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Action`7
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-7
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Action`7
  commentId: T:System.Action`7
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-7
  name: Action<T1, T2, T3, T4, T5, T6, T7>
  nameWithType: Action<T1, T2, T3, T4, T5, T6, T7>
  fullName: System.Action<T1, T2, T3, T4, T5, T6, T7>
  nameWithType.vb: Action(Of T1, T2, T3, T4, T5, T6, T7)
  fullName.vb: System.Action(Of T1, T2, T3, T4, T5, T6, T7)
  name.vb: Action(Of T1, T2, T3, T4, T5, T6, T7)
  spec.csharp:
  - uid: System.Action`7
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-7
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: '>'
  spec.vb:
  - uid: System.Action`7
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-7
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: )
- uid: System.Action{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{TResult}}
  commentId: T:System.Action{``0,``1,``2,``3,``4,``5,``6,``7}
  parent: System
  definition: System.Action`8
  href: https://learn.microsoft.com/dotnet/api/system.action-8
  name: Action<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType: Action<T1, T2, T3, T4, T5, T6, T7, TResult>
  fullName: System.Action<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  fullName.vb: System.Action(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  name.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  spec.csharp:
  - uid: System.Action`8
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-8
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Action`8
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-8
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Action`8
  commentId: T:System.Action`8
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-8
  name: Action<T1, T2, T3, T4, T5, T6, T7, T8>
  nameWithType: Action<T1, T2, T3, T4, T5, T6, T7, T8>
  fullName: System.Action<T1, T2, T3, T4, T5, T6, T7, T8>
  nameWithType.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8)
  fullName.vb: System.Action(Of T1, T2, T3, T4, T5, T6, T7, T8)
  name.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8)
  spec.csharp:
  - uid: System.Action`8
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-8
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: '>'
  spec.vb:
  - uid: System.Action`8
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-8
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: )
- uid: System.Action{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{TResult}}
  commentId: T:System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8}
  parent: System
  definition: System.Action`9
  href: https://learn.microsoft.com/dotnet/api/system.action-9
  name: Action<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  nameWithType: Action<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  fullName: System.Action<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  nameWithType.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  fullName.vb: System.Action(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  name.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  spec.csharp:
  - uid: System.Action`9
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-9
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Action`9
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-9
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Action`9
  commentId: T:System.Action`9
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-9
  name: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>
  nameWithType: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>
  fullName: System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>
  nameWithType.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9)
  fullName.vb: System.Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9)
  name.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9)
  spec.csharp:
  - uid: System.Action`9
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-9
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: '>'
  spec.vb:
  - uid: System.Action`9
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-9
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: )
- uid: System.Action{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{TResult}}
  commentId: T:System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}
  parent: System
  definition: System.Action`10
  href: https://learn.microsoft.com/dotnet/api/system.action-10
  name: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  nameWithType: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  fullName: System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  nameWithType.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  fullName.vb: System.Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  name.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  spec.csharp:
  - uid: System.Action`10
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-10
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Action`10
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-10
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Action`10
  commentId: T:System.Action`10
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-10
  name: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
  nameWithType: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
  fullName: System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
  nameWithType.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)
  fullName.vb: System.Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)
  name.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)
  spec.csharp:
  - uid: System.Action`10
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-10
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: '>'
  spec.vb:
  - uid: System.Action`10
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-10
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: )
- uid: System.Action{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{TResult}}
  commentId: T:System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}
  parent: System
  definition: System.Action`11
  href: https://learn.microsoft.com/dotnet/api/system.action-11
  name: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  nameWithType: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  fullName: System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  nameWithType.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  fullName.vb: System.Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  name.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  spec.csharp:
  - uid: System.Action`11
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-11
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Action`11
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-11
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Action`11
  commentId: T:System.Action`11
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-11
  name: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
  nameWithType: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
  fullName: System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
  nameWithType.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)
  fullName.vb: System.Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)
  name.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)
  spec.csharp:
  - uid: System.Action`11
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-11
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: '>'
  spec.vb:
  - uid: System.Action`11
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-11
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: )
- uid: System.Action{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{TResult}}
  commentId: T:System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}
  parent: System
  definition: System.Action`12
  href: https://learn.microsoft.com/dotnet/api/system.action-12
  name: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  nameWithType: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  fullName: System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  nameWithType.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  fullName.vb: System.Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  name.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  spec.csharp:
  - uid: System.Action`12
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-12
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Action`12
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-12
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Action`12
  commentId: T:System.Action`12
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-12
  name: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
  nameWithType: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
  fullName: System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
  nameWithType.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)
  fullName.vb: System.Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)
  name.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)
  spec.csharp:
  - uid: System.Action`12
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-12
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: '>'
  spec.vb:
  - uid: System.Action`12
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-12
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: )
- uid: System.Action{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{TResult}}
  commentId: T:System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}
  parent: System
  definition: System.Action`13
  href: https://learn.microsoft.com/dotnet/api/system.action-13
  name: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  nameWithType: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  fullName: System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  nameWithType.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  fullName.vb: System.Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  name.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  spec.csharp:
  - uid: System.Action`13
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-13
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Action`13
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-13
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Action`13
  commentId: T:System.Action`13
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-13
  name: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
  nameWithType: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
  fullName: System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
  nameWithType.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
  fullName.vb: System.Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
  name.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
  spec.csharp:
  - uid: System.Action`13
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-13
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: '>'
  spec.vb:
  - uid: System.Action`13
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-13
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: )
- uid: System.Action{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
  commentId: T:System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}
  parent: System
  definition: System.Action`14
  href: https://learn.microsoft.com/dotnet/api/system.action-14
  name: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  fullName: System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  fullName.vb: System.Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  name.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  spec.csharp:
  - uid: System.Action`14
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-14
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Action`14
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-14
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Action`14
  commentId: T:System.Action`14
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-14
  name: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
  nameWithType: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
  fullName: System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
  nameWithType.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)
  fullName.vb: System.Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)
  name.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)
  spec.csharp:
  - uid: System.Action`14
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-14
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: '>'
  spec.vb:
  - uid: System.Action`14
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-14
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: )
- uid: System.Action{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{TResult}}
  commentId: T:System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}
  parent: System
  definition: System.Action`15
  href: https://learn.microsoft.com/dotnet/api/system.action-15
  name: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  fullName: System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  fullName.vb: System.Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  name.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  spec.csharp:
  - uid: System.Action`15
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-15
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Action`15
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-15
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Action`15
  commentId: T:System.Action`15
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-15
  name: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
  nameWithType: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
  fullName: System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
  nameWithType.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)
  fullName.vb: System.Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)
  name.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)
  spec.csharp:
  - uid: System.Action`15
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-15
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: T15
  - name: '>'
  spec.vb:
  - uid: System.Action`15
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-15
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: T15
  - name: )
- uid: System.Action{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{T14},{T15},{TResult}}
  commentId: T:System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}
  parent: System
  definition: System.Action`16
  href: https://learn.microsoft.com/dotnet/api/system.action-16
  name: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>
  nameWithType: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>
  fullName: System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>
  nameWithType.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)
  fullName.vb: System.Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)
  name.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)
  spec.csharp:
  - uid: System.Action`16
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-16
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: T15
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Action`16
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-16
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: T15
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Action`16
  commentId: T:System.Action`16
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-16
  name: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
  nameWithType: Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
  fullName: System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
  nameWithType.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16)
  fullName.vb: System.Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16)
  name.vb: Action(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16)
  spec.csharp:
  - uid: System.Action`16
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-16
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: T15
  - name: ','
  - name: " "
  - name: T16
  - name: '>'
  spec.vb:
  - uid: System.Action`16
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-16
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: T15
  - name: ','
  - name: " "
  - name: T16
  - name: )
- uid: NMF.Expressions.Observable.Recurse*
  commentId: Overload:NMF.Expressions.Observable.Recurse
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_Recurse__2_System_Linq_Expressions_Expression_System_Func_System_Func___0___1____0___1___
  name: Recurse
  nameWithType: Observable.Recurse
  fullName: NMF.Expressions.Observable.Recurse
- uid: System.Linq.Expressions.Expression{System.Func{System.Func{{T1},{TResult}},{T1},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1},``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<Func<T1, TResult>, T1, TResult>>
  nameWithType: Expression<Func<Func<T1, TResult>, T1, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.Func<T1, TResult>, T1, TResult>>
  nameWithType.vb: Expression(Of Func(Of Func(Of T1, TResult), T1, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of System.Func(Of T1, TResult), T1, TResult))
  name.vb: Expression(Of Func(Of Func(Of T1, TResult), T1, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{System.Func{{T1},{T2},{TResult}},{T1},{T2},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2},``0,``1,``2}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<Func<T1, T2, TResult>, T1, T2, TResult>>
  nameWithType: Expression<Func<Func<T1, T2, TResult>, T1, T2, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.Func<T1, T2, TResult>, T1, T2, TResult>>
  nameWithType.vb: Expression(Of Func(Of Func(Of T1, T2, TResult), T1, T2, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of System.Func(Of T1, T2, TResult), T1, T2, TResult))
  name.vb: Expression(Of Func(Of Func(Of T1, T2, TResult), T1, T2, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{System.Func{{T1},{T2},{T3},{TResult}},{T1},{T2},{T3},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3},``0,``1,``2,``3}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<Func<T1, T2, T3, TResult>, T1, T2, T3, TResult>>
  nameWithType: Expression<Func<Func<T1, T2, T3, TResult>, T1, T2, T3, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.Func<T1, T2, T3, TResult>, T1, T2, T3, TResult>>
  nameWithType.vb: Expression(Of Func(Of Func(Of T1, T2, T3, TResult), T1, T2, T3, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of System.Func(Of T1, T2, T3, TResult), T1, T2, T3, TResult))
  name.vb: Expression(Of Func(Of Func(Of T1, T2, T3, TResult), T1, T2, T3, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`5
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-5
  - name: <
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`5
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-5
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`4
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-4
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{System.Func{{T1},{T2},{T3},{T4},{TResult}},{T1},{T2},{T3},{T4},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4, TResult>>
  nameWithType: Expression<Func<Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.Func<T1, T2, T3, T4, TResult>, T1, T2, T3, T4, TResult>>
  nameWithType.vb: Expression(Of Func(Of Func(Of T1, T2, T3, T4, TResult), T1, T2, T3, T4, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of System.Func(Of T1, T2, T3, T4, TResult), T1, T2, T3, T4, TResult))
  name.vb: Expression(Of Func(Of Func(Of T1, T2, T3, T4, TResult), T1, T2, T3, T4, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`6
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-6
  - name: <
  - uid: System.Func`5
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-5
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`6
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-6
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`5
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-5
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{System.Func{{T1},{T2},{T3},{T4},{T5},{TResult}},{T1},{T2},{T3},{T4},{T5},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5, TResult>>
  nameWithType: Expression<Func<Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.Func<T1, T2, T3, T4, T5, TResult>, T1, T2, T3, T4, T5, TResult>>
  nameWithType.vb: Expression(Of Func(Of Func(Of T1, T2, T3, T4, T5, TResult), T1, T2, T3, T4, T5, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of System.Func(Of T1, T2, T3, T4, T5, TResult), T1, T2, T3, T4, T5, TResult))
  name.vb: Expression(Of Func(Of Func(Of T1, T2, T3, T4, T5, TResult), T1, T2, T3, T4, T5, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`7
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-7
  - name: <
  - uid: System.Func`6
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-6
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`7
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-7
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`6
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-6
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{TResult}},{T1},{T2},{T3},{T4},{T5},{T6},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<Func<T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6, TResult>>
  nameWithType: Expression<Func<Func<T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.Func<T1, T2, T3, T4, T5, T6, TResult>, T1, T2, T3, T4, T5, T6, TResult>>
  nameWithType.vb: Expression(Of Func(Of Func(Of T1, T2, T3, T4, T5, T6, TResult), T1, T2, T3, T4, T5, T6, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of System.Func(Of T1, T2, T3, T4, T5, T6, TResult), T1, T2, T3, T4, T5, T6, TResult))
  name.vb: Expression(Of Func(Of Func(Of T1, T2, T3, T4, T5, T6, TResult), T1, T2, T3, T4, T5, T6, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`8
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-8
  - name: <
  - uid: System.Func`7
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-7
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`8
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-8
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`7
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-7
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{TResult}},{T1},{T2},{T3},{T4},{T5},{T6},{T7},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<Func<T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7, TResult>>
  nameWithType: Expression<Func<Func<T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.Func<T1, T2, T3, T4, T5, T6, T7, TResult>, T1, T2, T3, T4, T5, T6, T7, TResult>>
  nameWithType.vb: Expression(Of Func(Of Func(Of T1, T2, T3, T4, T5, T6, T7, TResult), T1, T2, T3, T4, T5, T6, T7, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, TResult), T1, T2, T3, T4, T5, T6, T7, TResult))
  name.vb: Expression(Of Func(Of Func(Of T1, T2, T3, T4, T5, T6, T7, TResult), T1, T2, T3, T4, T5, T6, T7, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`9
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-9
  - name: <
  - uid: System.Func`8
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-8
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`9
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-9
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`8
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-8
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{TResult}},{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, TResult>>
  nameWithType: Expression<Func<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, TResult>>
  nameWithType.vb: Expression(Of Func(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult), T1, T2, T3, T4, T5, T6, T7, T8, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult), T1, T2, T3, T4, T5, T6, T7, T8, TResult))
  name.vb: Expression(Of Func(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult), T1, T2, T3, T4, T5, T6, T7, T8, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`10
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-10
  - name: <
  - uid: System.Func`9
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-9
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`10
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-10
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`9
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-9
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{TResult}},{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>>
  nameWithType: Expression<Func<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>>
  nameWithType.vb: Expression(Of Func(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult), T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult), T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult))
  name.vb: Expression(Of Func(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult), T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`11
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-11
  - name: <
  - uid: System.Func`10
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-10
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`11
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-11
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`10
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-10
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Observable.Expression*
  commentId: Overload:NMF.Expressions.Observable.Expression
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_Expression__1_System_Linq_Expressions_Expression_System_Func___0___
  name: Expression
  nameWithType: Observable.Expression
  fullName: NMF.Expressions.Observable.Expression
- uid: System.Linq.Expressions.Expression{System.Func{{T}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T>>
  nameWithType: Expression<Func<T>>
  fullName: System.Linq.Expressions.Expression<System.Func<T>>
  nameWithType.vb: Expression(Of Func(Of T))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T))
  name.vb: Expression(Of Func(Of T))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyValue{{T}}
  commentId: T:NMF.Expressions.INotifyValue{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<T>
  nameWithType: INotifyValue<T>
  fullName: NMF.Expressions.INotifyValue<T>
  nameWithType.vb: INotifyValue(Of T)
  fullName.vb: NMF.Expressions.INotifyValue(Of T)
  name.vb: INotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifyValue`1
  commentId: T:NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<T>
  nameWithType: INotifyValue<T>
  fullName: NMF.Expressions.INotifyValue<T>
  nameWithType.vb: INotifyValue(Of T)
  fullName.vb: NMF.Expressions.INotifyValue(Of T)
  name.vb: INotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.Observable.Reversable*
  commentId: Overload:NMF.Expressions.Observable.Reversable
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_Reversable__1_System_Linq_Expressions_Expression_System_Func___0___
  name: Reversable
  nameWithType: Observable.Reversable
  fullName: NMF.Expressions.Observable.Reversable
- uid: NMF.Expressions.INotifyReversableValue{{T}}
  commentId: T:NMF.Expressions.INotifyReversableValue{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyReversableValue`1
  href: NMF.Expressions.INotifyReversableValue-1.html
  name: INotifyReversableValue<T>
  nameWithType: INotifyReversableValue<T>
  fullName: NMF.Expressions.INotifyReversableValue<T>
  nameWithType.vb: INotifyReversableValue(Of T)
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of T)
  name.vb: INotifyReversableValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    href: NMF.Expressions.INotifyReversableValue-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    href: NMF.Expressions.INotifyReversableValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifyReversableValue`1
  commentId: T:NMF.Expressions.INotifyReversableValue`1
  href: NMF.Expressions.INotifyReversableValue-1.html
  name: INotifyReversableValue<T>
  nameWithType: INotifyReversableValue<T>
  fullName: NMF.Expressions.INotifyReversableValue<T>
  nameWithType.vb: INotifyReversableValue(Of T)
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of T)
  name.vb: INotifyReversableValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    href: NMF.Expressions.INotifyReversableValue-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    href: NMF.Expressions.INotifyReversableValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.Observable.ArrayIndex*
  commentId: Overload:NMF.Expressions.Observable.ArrayIndex
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_ArrayIndex__1_NMF_Expressions_INotifyExpression___0____NMF_Expressions_INotifyExpression_System_Int32__
  name: ArrayIndex
  nameWithType: Observable.ArrayIndex
  fullName: NMF.Expressions.Observable.ArrayIndex
- uid: NMF.Expressions.INotifyExpression{{T}[]}
  commentId: T:NMF.Expressions.INotifyExpression{``0[]}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyExpression`1
  href: NMF.Expressions.INotifyExpression-1.html
  name: INotifyExpression<T[]>
  nameWithType: INotifyExpression<T[]>
  fullName: NMF.Expressions.INotifyExpression<T[]>
  nameWithType.vb: INotifyExpression(Of T())
  fullName.vb: NMF.Expressions.INotifyExpression(Of T())
  name.vb: INotifyExpression(Of T())
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: <
  - name: T
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: (
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyExpression{System.Int32}
  commentId: T:NMF.Expressions.INotifyExpression{System.Int32}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyExpression`1
  href: NMF.Expressions.INotifyExpression-1.html
  name: INotifyExpression<int>
  nameWithType: INotifyExpression<int>
  fullName: NMF.Expressions.INotifyExpression<int>
  nameWithType.vb: INotifyExpression(Of Integer)
  fullName.vb: NMF.Expressions.INotifyExpression(Of Integer)
  name.vb: INotifyExpression(Of Integer)
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: NMF.Expressions.INotifyExpression{{T}}
  commentId: T:NMF.Expressions.INotifyExpression{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyExpression`1
  href: NMF.Expressions.INotifyExpression-1.html
  name: INotifyExpression<T>
  nameWithType: INotifyExpression<T>
  fullName: NMF.Expressions.INotifyExpression<T>
  nameWithType.vb: INotifyExpression(Of T)
  fullName.vb: NMF.Expressions.INotifyExpression(Of T)
  name.vb: INotifyExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifyExpression`1
  commentId: T:NMF.Expressions.INotifyExpression`1
  parent: NMF.Expressions
  href: NMF.Expressions.INotifyExpression-1.html
  name: INotifyExpression<T>
  nameWithType: INotifyExpression<T>
  fullName: NMF.Expressions.INotifyExpression<T>
  nameWithType.vb: INotifyExpression(Of T)
  fullName.vb: NMF.Expressions.INotifyExpression(Of T)
  name.vb: INotifyExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifyExpression{System.Int64}
  commentId: T:NMF.Expressions.INotifyExpression{System.Int64}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyExpression`1
  href: NMF.Expressions.INotifyExpression-1.html
  name: INotifyExpression<long>
  nameWithType: INotifyExpression<long>
  fullName: NMF.Expressions.INotifyExpression<long>
  nameWithType.vb: INotifyExpression(Of Long)
  fullName.vb: NMF.Expressions.INotifyExpression(Of Long)
  name.vb: INotifyExpression(Of Long)
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: <
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: )
- uid: NMF.Expressions.Observable.ArrayInitialization*
  commentId: Overload:NMF.Expressions.Observable.ArrayInitialization
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_ArrayInitialization__1_System_Collections_Generic_IEnumerable_NMF_Expressions_INotifyExpression___0___
  name: ArrayInitialization
  nameWithType: Observable.ArrayInitialization
  fullName: NMF.Expressions.Observable.ArrayInitialization
- uid: System.Collections.Generic.IEnumerable{NMF.Expressions.INotifyExpression{{T}}}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Expressions.INotifyExpression{``0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<INotifyExpression<T>>
  nameWithType: IEnumerable<INotifyExpression<T>>
  fullName: System.Collections.Generic.IEnumerable<NMF.Expressions.INotifyExpression<T>>
  nameWithType.vb: IEnumerable(Of INotifyExpression(Of T))
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Expressions.INotifyExpression(Of T))
  name.vb: IEnumerable(Of INotifyExpression(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: NMF.Expressions.Observable.Coalesce*
  commentId: Overload:NMF.Expressions.Observable.Coalesce
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_Coalesce__1_NMF_Expressions_INotifyExpression___0__NMF_Expressions_INotifyExpression___0__
  name: Coalesce
  nameWithType: Observable.Coalesce
  fullName: NMF.Expressions.Observable.Coalesce
- uid: NMF.Expressions.INotifyReversableExpression{{T}}
  commentId: T:NMF.Expressions.INotifyReversableExpression{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyReversableExpression`1
  href: NMF.Expressions.INotifyReversableExpression-1.html
  name: INotifyReversableExpression<T>
  nameWithType: INotifyReversableExpression<T>
  fullName: NMF.Expressions.INotifyReversableExpression<T>
  nameWithType.vb: INotifyReversableExpression(Of T)
  fullName.vb: NMF.Expressions.INotifyReversableExpression(Of T)
  name.vb: INotifyReversableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableExpression`1
    name: INotifyReversableExpression
    href: NMF.Expressions.INotifyReversableExpression-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableExpression`1
    name: INotifyReversableExpression
    href: NMF.Expressions.INotifyReversableExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifyReversableExpression`1
  commentId: T:NMF.Expressions.INotifyReversableExpression`1
  href: NMF.Expressions.INotifyReversableExpression-1.html
  name: INotifyReversableExpression<T>
  nameWithType: INotifyReversableExpression<T>
  fullName: NMF.Expressions.INotifyReversableExpression<T>
  nameWithType.vb: INotifyReversableExpression(Of T)
  fullName.vb: NMF.Expressions.INotifyReversableExpression(Of T)
  name.vb: INotifyReversableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableExpression`1
    name: INotifyReversableExpression
    href: NMF.Expressions.INotifyReversableExpression-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableExpression`1
    name: INotifyReversableExpression
    href: NMF.Expressions.INotifyReversableExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.Observable.Box*
  commentId: Overload:NMF.Expressions.Observable.Box
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_Box__1_NMF_Expressions_INotifyExpression___0__
  name: Box
  nameWithType: Observable.Box
  fullName: NMF.Expressions.Observable.Box
- uid: NMF.Expressions.INotifyExpression{System.Object}
  commentId: T:NMF.Expressions.INotifyExpression{System.Object}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyExpression`1
  href: NMF.Expressions.INotifyExpression-1.html
  name: INotifyExpression<object>
  nameWithType: INotifyExpression<object>
  fullName: NMF.Expressions.INotifyExpression<object>
  nameWithType.vb: INotifyExpression(Of Object)
  fullName.vb: NMF.Expressions.INotifyExpression(Of Object)
  name.vb: INotifyExpression(Of Object)
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: NMF.Expressions.INotifyReversableExpression{System.Object}
  commentId: T:NMF.Expressions.INotifyReversableExpression{System.Object}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyReversableExpression`1
  href: NMF.Expressions.INotifyReversableExpression-1.html
  name: INotifyReversableExpression<object>
  nameWithType: INotifyReversableExpression<object>
  fullName: NMF.Expressions.INotifyReversableExpression<object>
  nameWithType.vb: INotifyReversableExpression(Of Object)
  fullName.vb: NMF.Expressions.INotifyReversableExpression(Of Object)
  name.vb: INotifyReversableExpression(Of Object)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableExpression`1
    name: INotifyReversableExpression
    href: NMF.Expressions.INotifyReversableExpression-1.html
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableExpression`1
    name: INotifyReversableExpression
    href: NMF.Expressions.INotifyReversableExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: NMF.Expressions.Observable.Conditional*
  commentId: Overload:NMF.Expressions.Observable.Conditional
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_Conditional__1_NMF_Expressions_INotifyExpression_System_Boolean__NMF_Expressions_INotifyExpression___0__NMF_Expressions_INotifyExpression___0__
  name: Conditional
  nameWithType: Observable.Conditional
  fullName: NMF.Expressions.Observable.Conditional
- uid: NMF.Expressions.INotifyExpression{System.Boolean}
  commentId: T:NMF.Expressions.INotifyExpression{System.Boolean}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyExpression`1
  href: NMF.Expressions.INotifyExpression-1.html
  name: INotifyExpression<bool>
  nameWithType: INotifyExpression<bool>
  fullName: NMF.Expressions.INotifyExpression<bool>
  nameWithType.vb: INotifyExpression(Of Boolean)
  fullName.vb: NMF.Expressions.INotifyExpression(Of Boolean)
  name.vb: INotifyExpression(Of Boolean)
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: NMF.Expressions.Observable.Constant*
  commentId: Overload:NMF.Expressions.Observable.Constant
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_Constant__1___0_
  name: Constant
  nameWithType: Observable.Constant
  fullName: NMF.Expressions.Observable.Constant
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: NMF.Expressions.Observable.NewArray*
  commentId: Overload:NMF.Expressions.Observable.NewArray
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_NewArray__1_NMF_Expressions_INotifyExpression_System_Int32__
  name: NewArray
  nameWithType: Observable.NewArray
  fullName: NMF.Expressions.Observable.NewArray
- uid: NMF.Expressions.INotifyExpression{{T}[0:,0:]}
  commentId: T:NMF.Expressions.INotifyExpression{``0[0:,0:]}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyExpression`1
  href: NMF.Expressions.INotifyExpression-1.html
  name: INotifyExpression<T[,]>
  nameWithType: INotifyExpression<T[,]>
  fullName: NMF.Expressions.INotifyExpression<T[,]>
  nameWithType.vb: INotifyExpression(Of T(,))
  fullName.vb: NMF.Expressions.INotifyExpression(Of T(,))
  name.vb: INotifyExpression(Of T(,))
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: <
  - name: T
  - name: '['
  - name: ','
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: (
  - name: ','
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyExpression{{T}[0:,0:,0:]}
  commentId: T:NMF.Expressions.INotifyExpression{``0[0:,0:,0:]}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyExpression`1
  href: NMF.Expressions.INotifyExpression-1.html
  name: INotifyExpression<T[,,]>
  nameWithType: INotifyExpression<T[,,]>
  fullName: NMF.Expressions.INotifyExpression<T[,,]>
  nameWithType.vb: INotifyExpression(Of T(,,))
  fullName.vb: NMF.Expressions.INotifyExpression(Of T(,,))
  name.vb: INotifyExpression(Of T(,,))
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: <
  - name: T
  - name: '['
  - name: ','
  - name: ','
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: (
  - name: ','
  - name: ','
  - name: )
  - name: )
- uid: NMF.Expressions.Observable.InstanceOf*
  commentId: Overload:NMF.Expressions.Observable.InstanceOf
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_InstanceOf_NMF_Expressions_INotifyExpression_System_Object__System_Type_
  name: InstanceOf
  nameWithType: Observable.InstanceOf
  fullName: NMF.Expressions.Observable.InstanceOf
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: NMF.Expressions.Observable.As*
  commentId: Overload:NMF.Expressions.Observable.As
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_As__2_NMF_Expressions_INotifyExpression___0__
  name: As
  nameWithType: Observable.As
  fullName: NMF.Expressions.Observable.As
- uid: NMF.Expressions.INotifyExpression{{TInner}}
  commentId: T:NMF.Expressions.INotifyExpression{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyExpression`1
  href: NMF.Expressions.INotifyExpression-1.html
  name: INotifyExpression<TInner>
  nameWithType: INotifyExpression<TInner>
  fullName: NMF.Expressions.INotifyExpression<TInner>
  nameWithType.vb: INotifyExpression(Of TInner)
  fullName.vb: NMF.Expressions.INotifyExpression(Of TInner)
  name.vb: INotifyExpression(Of TInner)
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: <
  - name: TInner
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
- uid: NMF.Expressions.INotifyExpression{{TOuter}}
  commentId: T:NMF.Expressions.INotifyExpression{``1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyExpression`1
  href: NMF.Expressions.INotifyExpression-1.html
  name: INotifyExpression<TOuter>
  nameWithType: INotifyExpression<TOuter>
  fullName: NMF.Expressions.INotifyExpression<TOuter>
  nameWithType.vb: INotifyExpression(Of TOuter)
  fullName.vb: NMF.Expressions.INotifyExpression(Of TOuter)
  name.vb: INotifyExpression(Of TOuter)
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: <
  - name: TOuter
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: )
- uid: NMF.Expressions.Observable.Convert*
  commentId: Overload:NMF.Expressions.Observable.Convert
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_Convert__2_NMF_Expressions_INotifyExpression___0__
  name: Convert
  nameWithType: Observable.Convert
  fullName: NMF.Expressions.Observable.Convert
- uid: NMF.Expressions.INotifyExpression{{TSource}}
  commentId: T:NMF.Expressions.INotifyExpression{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyExpression`1
  href: NMF.Expressions.INotifyExpression-1.html
  name: INotifyExpression<TSource>
  nameWithType: INotifyExpression<TSource>
  fullName: NMF.Expressions.INotifyExpression<TSource>
  nameWithType.vb: INotifyExpression(Of TSource)
  fullName.vb: NMF.Expressions.INotifyExpression(Of TSource)
  name.vb: INotifyExpression(Of TSource)
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: <
  - name: TSource
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
- uid: NMF.Expressions.INotifyExpression{{TTarget}}
  commentId: T:NMF.Expressions.INotifyExpression{``1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyExpression`1
  href: NMF.Expressions.INotifyExpression-1.html
  name: INotifyExpression<TTarget>
  nameWithType: INotifyExpression<TTarget>
  fullName: NMF.Expressions.INotifyExpression<TTarget>
  nameWithType.vb: INotifyExpression(Of TTarget)
  fullName.vb: NMF.Expressions.INotifyExpression(Of TTarget)
  name.vb: INotifyExpression(Of TTarget)
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: <
  - name: TTarget
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TTarget
  - name: )
- uid: NMF.Expressions.Observable.And*
  commentId: Overload:NMF.Expressions.Observable.And
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_And_NMF_Expressions_INotifyExpression_System_Int32__NMF_Expressions_INotifyExpression_System_Int32__
  name: And
  nameWithType: Observable.And
  fullName: NMF.Expressions.Observable.And
- uid: NMF.Expressions.INotifyExpression{System.UInt32}
  commentId: T:NMF.Expressions.INotifyExpression{System.UInt32}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyExpression`1
  href: NMF.Expressions.INotifyExpression-1.html
  name: INotifyExpression<uint>
  nameWithType: INotifyExpression<uint>
  fullName: NMF.Expressions.INotifyExpression<uint>
  nameWithType.vb: INotifyExpression(Of UInteger)
  fullName.vb: NMF.Expressions.INotifyExpression(Of UInteger)
  name.vb: INotifyExpression(Of UInteger)
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: <
  - uid: System.UInt32
    name: uint
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.UInt32
    name: UInteger
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint32
  - name: )
- uid: NMF.Expressions.INotifyExpression{System.UInt64}
  commentId: T:NMF.Expressions.INotifyExpression{System.UInt64}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyExpression`1
  href: NMF.Expressions.INotifyExpression-1.html
  name: INotifyExpression<ulong>
  nameWithType: INotifyExpression<ulong>
  fullName: NMF.Expressions.INotifyExpression<ulong>
  nameWithType.vb: INotifyExpression(Of ULong)
  fullName.vb: NMF.Expressions.INotifyExpression(Of ULong)
  name.vb: INotifyExpression(Of ULong)
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: <
  - uid: System.UInt64
    name: ulong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.UInt64
    name: ULong
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint64
  - name: )
- uid: NMF.Expressions.Observable.Or*
  commentId: Overload:NMF.Expressions.Observable.Or
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_Or_NMF_Expressions_INotifyExpression_System_Int32__NMF_Expressions_INotifyExpression_System_Int32__
  name: Or
  nameWithType: Observable.Or
  fullName: NMF.Expressions.Observable.Or
- uid: NMF.Expressions.Observable.Xor*
  commentId: Overload:NMF.Expressions.Observable.Xor
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_Xor_NMF_Expressions_INotifyExpression_System_Int32__NMF_Expressions_INotifyExpression_System_Int32__
  name: Xor
  nameWithType: Observable.Xor
  fullName: NMF.Expressions.Observable.Xor
- uid: NMF.Expressions.Observable.AndAlso*
  commentId: Overload:NMF.Expressions.Observable.AndAlso
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_AndAlso_NMF_Expressions_INotifyExpression_System_Boolean__NMF_Expressions_INotifyExpression_System_Boolean__
  name: AndAlso
  nameWithType: Observable.AndAlso
  fullName: NMF.Expressions.Observable.AndAlso
- uid: NMF.Expressions.Observable.OrElse*
  commentId: Overload:NMF.Expressions.Observable.OrElse
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_OrElse_NMF_Expressions_INotifyExpression_System_Boolean__NMF_Expressions_INotifyExpression_System_Boolean__
  name: OrElse
  nameWithType: Observable.OrElse
  fullName: NMF.Expressions.Observable.OrElse
- uid: NMF.Expressions.Observable.Not*
  commentId: Overload:NMF.Expressions.Observable.Not
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_Not_NMF_Expressions_INotifyExpression_System_Boolean__
  name: Not
  nameWithType: Observable.Not
  fullName: NMF.Expressions.Observable.Not
- uid: NMF.Expressions.Observable.OnesComplement*
  commentId: Overload:NMF.Expressions.Observable.OnesComplement
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_OnesComplement_NMF_Expressions_INotifyExpression_System_Int32__
  name: OnesComplement
  nameWithType: Observable.OnesComplement
  fullName: NMF.Expressions.Observable.OnesComplement
- uid: NMF.Expressions.Observable.Negate*
  commentId: Overload:NMF.Expressions.Observable.Negate
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_Negate_NMF_Expressions_INotifyExpression_System_Int32__
  name: Negate
  nameWithType: Observable.Negate
  fullName: NMF.Expressions.Observable.Negate
- uid: NMF.Expressions.INotifyExpression{System.Single}
  commentId: T:NMF.Expressions.INotifyExpression{System.Single}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyExpression`1
  href: NMF.Expressions.INotifyExpression-1.html
  name: INotifyExpression<float>
  nameWithType: INotifyExpression<float>
  fullName: NMF.Expressions.INotifyExpression<float>
  nameWithType.vb: INotifyExpression(Of Single)
  fullName.vb: NMF.Expressions.INotifyExpression(Of Single)
  name.vb: INotifyExpression(Of Single)
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: <
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: NMF.Expressions.INotifyExpression{System.Double}
  commentId: T:NMF.Expressions.INotifyExpression{System.Double}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyExpression`1
  href: NMF.Expressions.INotifyExpression-1.html
  name: INotifyExpression<double>
  nameWithType: INotifyExpression<double>
  fullName: NMF.Expressions.INotifyExpression<double>
  nameWithType.vb: INotifyExpression(Of Double)
  fullName.vb: NMF.Expressions.INotifyExpression(Of Double)
  name.vb: INotifyExpression(Of Double)
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: <
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: )
- uid: NMF.Expressions.Observable.Divide*
  commentId: Overload:NMF.Expressions.Observable.Divide
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_Divide_NMF_Expressions_INotifyExpression_System_Int32__NMF_Expressions_INotifyExpression_System_Int32__
  name: Divide
  nameWithType: Observable.Divide
  fullName: NMF.Expressions.Observable.Divide
- uid: NMF.Expressions.Observable.Subtract*
  commentId: Overload:NMF.Expressions.Observable.Subtract
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_Subtract_NMF_Expressions_INotifyExpression_System_Int32__NMF_Expressions_INotifyExpression_System_Int32__
  name: Subtract
  nameWithType: Observable.Subtract
  fullName: NMF.Expressions.Observable.Subtract
- uid: NMF.Expressions.Observable.Add*
  commentId: Overload:NMF.Expressions.Observable.Add
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_Add_NMF_Expressions_INotifyExpression_System_Int32__NMF_Expressions_INotifyExpression_System_Int32__
  name: Add
  nameWithType: Observable.Add
  fullName: NMF.Expressions.Observable.Add
- uid: NMF.Expressions.INotifyExpression{System.String}
  commentId: T:NMF.Expressions.INotifyExpression{System.String}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyExpression`1
  href: NMF.Expressions.INotifyExpression-1.html
  name: INotifyExpression<string>
  nameWithType: INotifyExpression<string>
  fullName: NMF.Expressions.INotifyExpression<string>
  nameWithType.vb: INotifyExpression(Of String)
  fullName.vb: NMF.Expressions.INotifyExpression(Of String)
  name.vb: INotifyExpression(Of String)
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    href: NMF.Expressions.INotifyExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: NMF.Expressions.Observable.Multiply*
  commentId: Overload:NMF.Expressions.Observable.Multiply
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_Multiply_NMF_Expressions_INotifyExpression_System_Int32__NMF_Expressions_INotifyExpression_System_Int32__
  name: Multiply
  nameWithType: Observable.Multiply
  fullName: NMF.Expressions.Observable.Multiply
- uid: NMF.Expressions.Observable.Modulo*
  commentId: Overload:NMF.Expressions.Observable.Modulo
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_Modulo_NMF_Expressions_INotifyExpression_System_Int32__NMF_Expressions_INotifyExpression_System_Int32__
  name: Modulo
  nameWithType: Observable.Modulo
  fullName: NMF.Expressions.Observable.Modulo
- uid: NMF.Expressions.Observable.RightShift*
  commentId: Overload:NMF.Expressions.Observable.RightShift
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_RightShift_NMF_Expressions_INotifyExpression_System_Int32__NMF_Expressions_INotifyExpression_System_Int32__
  name: RightShift
  nameWithType: Observable.RightShift
  fullName: NMF.Expressions.Observable.RightShift
- uid: NMF.Expressions.Observable.LeftShift*
  commentId: Overload:NMF.Expressions.Observable.LeftShift
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_LeftShift_NMF_Expressions_INotifyExpression_System_Int32__NMF_Expressions_INotifyExpression_System_Int32__
  name: LeftShift
  nameWithType: Observable.LeftShift
  fullName: NMF.Expressions.Observable.LeftShift
- uid: NMF.Expressions.Observable.GreatherThan*
  commentId: Overload:NMF.Expressions.Observable.GreatherThan
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_GreatherThan__1_NMF_Expressions_INotifyExpression___0__NMF_Expressions_INotifyExpression___0__
  name: GreatherThan
  nameWithType: Observable.GreatherThan
  fullName: NMF.Expressions.Observable.GreatherThan
- uid: NMF.Expressions.Observable.GreatherThanOrEquals*
  commentId: Overload:NMF.Expressions.Observable.GreatherThanOrEquals
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_GreatherThanOrEquals__1_NMF_Expressions_INotifyExpression___0__NMF_Expressions_INotifyExpression___0__
  name: GreatherThanOrEquals
  nameWithType: Observable.GreatherThanOrEquals
  fullName: NMF.Expressions.Observable.GreatherThanOrEquals
- uid: NMF.Expressions.Observable.LessThan*
  commentId: Overload:NMF.Expressions.Observable.LessThan
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_LessThan__1_NMF_Expressions_INotifyExpression___0__NMF_Expressions_INotifyExpression___0__
  name: LessThan
  nameWithType: Observable.LessThan
  fullName: NMF.Expressions.Observable.LessThan
- uid: NMF.Expressions.Observable.LessThanOrEquals*
  commentId: Overload:NMF.Expressions.Observable.LessThanOrEquals
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_LessThanOrEquals__1_NMF_Expressions_INotifyExpression___0__NMF_Expressions_INotifyExpression___0__
  name: LessThanOrEquals
  nameWithType: Observable.LessThanOrEquals
  fullName: NMF.Expressions.Observable.LessThanOrEquals
- uid: NMF.Expressions.Observable.Equals*
  commentId: Overload:NMF.Expressions.Observable.Equals
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_Equals__1_NMF_Expressions_INotifyExpression___0__NMF_Expressions_INotifyExpression___0__
  name: Equals
  nameWithType: Observable.Equals
  fullName: NMF.Expressions.Observable.Equals
- uid: NMF.Expressions.Observable.NotEquals*
  commentId: Overload:NMF.Expressions.Observable.NotEquals
  href: NMF.Expressions.Observable.html#NMF_Expressions_Observable_NotEquals__1_NMF_Expressions_INotifyExpression___0__NMF_Expressions_INotifyExpression___0__
  name: NotEquals
  nameWithType: Observable.NotEquals
  fullName: NMF.Expressions.Observable.NotEquals
