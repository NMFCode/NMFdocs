### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.ObservingFunc`14
  commentId: T:NMF.Expressions.ObservingFunc`14
  id: ObservingFunc`14
  parent: NMF.Expressions
  children:
  - NMF.Expressions.ObservingFunc`14.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}})
  - NMF.Expressions.ObservingFunc`14.Evaluate(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)
  - NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0)
  - NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1)
  - NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2)
  - NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3)
  - NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4)
  - NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4,`5)
  - NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6)
  - NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7)
  - NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8)
  - NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)
  - NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)
  - NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)
  - NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0})
  - NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  - NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
  - NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})
  - NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})
  - NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})
  - NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})
  - NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})
  - NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})
  - NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})
  - NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10})
  - NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11})
  - NMF.Expressions.ObservingFunc`14.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}})
  - NMF.Expressions.ObservingFunc`14.InvokeReversable(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)
  - NMF.Expressions.ObservingFunc`14.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12})
  - NMF.Expressions.ObservingFunc`14.IsReversable
  - NMF.Expressions.ObservingFunc`14.Observe(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)
  - NMF.Expressions.ObservingFunc`14.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12})
  - NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0})
  - NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  - NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
  - NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})
  - NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})
  - NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})
  - NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})
  - NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})
  - NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})
  - NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})
  - NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10})
  - NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11})
  - NMF.Expressions.ObservingFunc`14.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}})~NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}
  langs:
  - csharp
  - vb
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  type: Class
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ObservingFunc
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 5870
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nRepresents an observable expression with 13 input parameters\n"
  example: []
  syntax:
    content: public class ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
    typeParameters:
    - id: T1
      description: The type of the input parameter 1
    - id: T2
      description: The type of the input parameter 2
    - id: T3
      description: The type of the input parameter 3
    - id: T4
      description: The type of the input parameter 4
    - id: T5
      description: The type of the input parameter 5
    - id: T6
      description: The type of the input parameter 6
    - id: T7
      description: The type of the input parameter 7
    - id: T8
      description: The type of the input parameter 8
    - id: T9
      description: The type of the input parameter 9
    - id: T10
      description: The type of the input parameter 10
    - id: T11
      description: The type of the input parameter 11
    - id: T12
      description: The type of the input parameter 12
    - id: T13
      description: The type of the input parameter 13
    - id: TResult
    content.vb: Public Class ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  inheritance:
  - System.Object
  derivedClasses:
  - NMF.Expressions.ReversableObservingFunc`14
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
- uid: NMF.Expressions.ObservingFunc`14.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}})
  commentId: M:NMF.Expressions.ObservingFunc`14.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}})
  id: '#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}})'
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: ObservingFunc(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservingFunc(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservingFunc(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>>)
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 5893
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nCreates a new observable expression for the given expression\n"
  example: []
  syntax:
    content: public ObservingFunc(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}}
      description: The expression that is to be observed
    content.vb: Public Sub New(expression As Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)))
  overload: NMF.Expressions.ObservingFunc`14.#ctor*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservingFunc(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservingFunc(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)))
  name.vb: ObservingFunc(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)))
- uid: NMF.Expressions.ObservingFunc`14.Evaluate(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)
  commentId: M:NMF.Expressions.ObservingFunc`14.Evaluate(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)
  id: Evaluate(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: Evaluate(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.Evaluate(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.Evaluate(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Evaluate
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 5960
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,, >), "Observe", false)]

      public TResult Evaluate(T1 in1, T2 in2, T3 in3, T4 in4, T5 in5, T6 in6, T7 in7, T8 in8, T9 in9, T10 in10, T11 in11, T12 in12, T13 in13)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    - id: in3
      type: '{T3}'
      description: The input parameter 3
    - id: in4
      type: '{T4}'
      description: The input parameter 4
    - id: in5
      type: '{T5}'
      description: The input parameter 5
    - id: in6
      type: '{T6}'
      description: The input parameter 6
    - id: in7
      type: '{T7}'
      description: The input parameter 7
    - id: in8
      type: '{T8}'
      description: The input parameter 8
    - id: in9
      type: '{T9}'
      description: The input parameter 9
    - id: in10
      type: '{T10}'
      description: The input parameter 10
    - id: in11
      type: '{T11}'
      description: The input parameter 11
    - id: in12
      type: '{T12}'
      description: The input parameter 12
    - id: in13
      type: '{T13}'
      description: The input parameter 13
    return:
      type: '{TResult}'
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of , , , , , , , , , , , , , )), "Observe", False)>

      Public Function Evaluate(in1 As T1, in2 As T2, in3 As T3, in4 As T4, in5 As T5, in6 As T6, in7 As T7, in8 As T8, in9 As T9, in10 As T10, in11 As T11, in12 As T12, in13 As T13) As TResult
  overload: NMF.Expressions.ObservingFunc`14.Evaluate*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult}
    - type: System.String
      value: Observe
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).Evaluate(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).Evaluate(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
- uid: NMF.Expressions.ObservingFunc`14.Observe(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)
  commentId: M:NMF.Expressions.ObservingFunc`14.Observe(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)
  id: Observe(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: Observe(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.Observe(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.Observe(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Observe
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 5983
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression\n"
  example: []
  syntax:
    content: public INotifyValue<TResult> Observe(T1 in1, T2 in2, T3 in3, T4 in4, T5 in5, T6 in6, T7 in7, T8 in8, T9 in9, T10 in10, T11 in11, T12 in12, T13 in13)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    - id: in3
      type: '{T3}'
      description: The input parameter 3
    - id: in4
      type: '{T4}'
      description: The input parameter 4
    - id: in5
      type: '{T5}'
      description: The input parameter 5
    - id: in6
      type: '{T6}'
      description: The input parameter 6
    - id: in7
      type: '{T7}'
      description: The input parameter 7
    - id: in8
      type: '{T8}'
      description: The input parameter 8
    - id: in9
      type: '{T9}'
      description: The input parameter 9
    - id: in10
      type: '{T10}'
      description: The input parameter 10
    - id: in11
      type: '{T11}'
      description: The input parameter 11
    - id: in12
      type: '{T12}'
      description: The input parameter 12
    - id: in13
      type: '{T13}'
      description: The input parameter 13
    return:
      type: NMF.Expressions.INotifyValue{{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function Observe(in1 As T1, in2 As T2, in3 As T3, in4 As T4, in5 As T5, in6 As T6, in7 As T7, in8 As T8, in9 As T9, in10 As T10, in11 As T11, in12 As T12, in13 As T13) As INotifyValue(Of TResult)
  overload: NMF.Expressions.ObservingFunc`14.Observe*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).Observe(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).Observe(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
- uid: NMF.Expressions.ObservingFunc`14.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12})
  commentId: M:NMF.Expressions.ObservingFunc`14.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12})
  id: Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12})
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: Observe(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>, INotifyValue<T11>, INotifyValue<T12>, INotifyValue<T13>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.Observe(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>, INotifyValue<T11>, INotifyValue<T12>, INotifyValue<T13>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.Observe(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>, NMF.Expressions.INotifyValue<T8>, NMF.Expressions.INotifyValue<T9>, NMF.Expressions.INotifyValue<T10>, NMF.Expressions.INotifyValue<T11>, NMF.Expressions.INotifyValue<T12>, NMF.Expressions.INotifyValue<T13>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Observe
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6022
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression\n"
  example: []
  syntax:
    content: public INotifyValue<TResult> Observe(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7, INotifyValue<T8> in8, INotifyValue<T9> in9, INotifyValue<T10> in10, INotifyValue<T11> in11, INotifyValue<T12> in12, INotifyValue<T13> in13)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    - id: in8
      type: NMF.Expressions.INotifyValue{{T8}}
      description: The input parameter 8
    - id: in9
      type: NMF.Expressions.INotifyValue{{T9}}
      description: The input parameter 9
    - id: in10
      type: NMF.Expressions.INotifyValue{{T10}}
      description: The input parameter 10
    - id: in11
      type: NMF.Expressions.INotifyValue{{T11}}
      description: The input parameter 11
    - id: in12
      type: NMF.Expressions.INotifyValue{{T12}}
      description: The input parameter 12
    - id: in13
      type: NMF.Expressions.INotifyValue{{T13}}
      description: The input parameter 13
    return:
      type: NMF.Expressions.INotifyValue{{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function Observe(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7), in8 As INotifyValue(Of T8), in9 As INotifyValue(Of T9), in10 As INotifyValue(Of T10), in11 As INotifyValue(Of T11), in12 As INotifyValue(Of T12), in13 As INotifyValue(Of T13)) As INotifyValue(Of TResult)
  overload: NMF.Expressions.ObservingFunc`14.Observe*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).Observe(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10), INotifyValue(Of T11), INotifyValue(Of T12), INotifyValue(Of T13))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).Observe(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7), NMF.Expressions.INotifyValue(Of T8), NMF.Expressions.INotifyValue(Of T9), NMF.Expressions.INotifyValue(Of T10), NMF.Expressions.INotifyValue(Of T11), NMF.Expressions.INotifyValue(Of T12), NMF.Expressions.INotifyValue(Of T13))
  name.vb: Observe(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10), INotifyValue(Of T11), INotifyValue(Of T12), INotifyValue(Of T13))
- uid: NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0)
  commentId: M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0)
  id: EvaluatePartial(`0)
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: EvaluatePartial(T1)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(T1)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(T1)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EvaluatePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6049
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,, >), "ObservePartial", false)]

      public Func<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> EvaluatePartial(T1 in1)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    return:
      type: System.Func{{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of , , , , , , , , , , , , , )), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As T1) As Func(Of T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(T1)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(T1)
- uid: NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0})
  commentId: M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0})
  id: EvaluatePartial(NMF.Expressions.INotifyValue{`0})
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: EvaluatePartial(INotifyValue<T1>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(INotifyValue<T1>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EvaluatePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6060
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,, >), "ObservePartial", false)]

      public Func<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> EvaluatePartial(INotifyValue<T1> in1)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    return:
      type: System.Func{{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of , , , , , , , , , , , , , )), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As INotifyValue(Of T1)) As Func(Of T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(INotifyValue(Of T1))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1))
  name.vb: EvaluatePartial(INotifyValue(Of T1))
- uid: NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0})
  commentId: M:NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0})
  id: ObservePartial(NMF.Expressions.INotifyValue{`0})
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: ObservePartial(INotifyValue<T1>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservePartial(INotifyValue<T1>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ObservePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6071
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: public ObservingFunc<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> ObservePartial(INotifyValue<T1> in1)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    return:
      type: NMF.Expressions.ObservingFunc{{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function ObservePartial(in1 As INotifyValue(Of T1)) As ObservingFunc(Of T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.ObservePartial*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservePartial(INotifyValue(Of T1))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1))
  name.vb: ObservePartial(INotifyValue(Of T1))
- uid: NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1)
  commentId: M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1)
  id: EvaluatePartial(`0,`1)
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: EvaluatePartial(T1, T2)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(T1, T2)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(T1, T2)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EvaluatePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6085
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,, >), "ObservePartial", false)]

      public Func<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> EvaluatePartial(T1 in1, T2 in2)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    return:
      type: System.Func{{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of , , , , , , , , , , , , , )), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As T1, in2 As T2) As Func(Of T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(T1, T2)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(T1, T2)
- uid: NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  commentId: M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  id: EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EvaluatePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6097
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,, >), "ObservePartial", false)]

      public Func<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> EvaluatePartial(INotifyValue<T1> in1, INotifyValue<T2> in2)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    return:
      type: System.Func{{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of , , , , , , , , , , , , , )), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2)) As Func(Of T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2))
  name.vb: EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2))
- uid: NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  commentId: M:NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  id: ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: ObservePartial(INotifyValue<T1>, INotifyValue<T2>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservePartial(INotifyValue<T1>, INotifyValue<T2>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ObservePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6109
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: public ObservingFunc<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> ObservePartial(INotifyValue<T1> in1, INotifyValue<T2> in2)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    return:
      type: NMF.Expressions.ObservingFunc{{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function ObservePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2)) As ObservingFunc(Of T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.ObservePartial*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2))
  name.vb: ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2))
- uid: NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2)
  commentId: M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2)
  id: EvaluatePartial(`0,`1,`2)
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: EvaluatePartial(T1, T2, T3)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(T1, T2, T3)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(T1, T2, T3)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EvaluatePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6125
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,, >), "ObservePartial", false)]

      public Func<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> EvaluatePartial(T1 in1, T2 in2, T3 in3)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    - id: in3
      type: '{T3}'
      description: The input parameter 3
    return:
      type: System.Func{{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of , , , , , , , , , , , , , )), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As T1, in2 As T2, in3 As T3) As Func(Of T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(T1, T2, T3)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(T1, T2, T3)
- uid: NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
  commentId: M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
  id: EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EvaluatePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6138
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,, >), "ObservePartial", false)]

      public Func<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> EvaluatePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    return:
      type: System.Func{{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of , , , , , , , , , , , , , )), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3)) As Func(Of T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3))
  name.vb: EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3))
- uid: NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
  commentId: M:NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
  id: ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2})
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ObservePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6151
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: public ObservingFunc<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> ObservePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    return:
      type: NMF.Expressions.ObservingFunc{{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function ObservePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3)) As ObservingFunc(Of T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.ObservePartial*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3))
  name.vb: ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3))
- uid: NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3)
  commentId: M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3)
  id: EvaluatePartial(`0,`1,`2,`3)
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: EvaluatePartial(T1, T2, T3, T4)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(T1, T2, T3, T4)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(T1, T2, T3, T4)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EvaluatePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6169
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,, >), "ObservePartial", false)]

      public Func<T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> EvaluatePartial(T1 in1, T2 in2, T3 in3, T4 in4)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    - id: in3
      type: '{T3}'
      description: The input parameter 3
    - id: in4
      type: '{T4}'
      description: The input parameter 4
    return:
      type: System.Func{{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of , , , , , , , , , , , , , )), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As T1, in2 As T2, in3 As T3, in4 As T4) As Func(Of T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(T1, T2, T3, T4)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(T1, T2, T3, T4)
- uid: NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})
  commentId: M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})
  id: EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EvaluatePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6183
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,, >), "ObservePartial", false)]

      public Func<T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> EvaluatePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    return:
      type: System.Func{{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of , , , , , , , , , , , , , )), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4)) As Func(Of T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4))
  name.vb: EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4))
- uid: NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})
  commentId: M:NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})
  id: ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3})
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ObservePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6197
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: public ObservingFunc<T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> ObservePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    return:
      type: NMF.Expressions.ObservingFunc{{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function ObservePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4)) As ObservingFunc(Of T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.ObservePartial*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4))
  name.vb: ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4))
- uid: NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4)
  commentId: M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4)
  id: EvaluatePartial(`0,`1,`2,`3,`4)
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: EvaluatePartial(T1, T2, T3, T4, T5)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(T1, T2, T3, T4, T5)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(T1, T2, T3, T4, T5)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EvaluatePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6217
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,, >), "ObservePartial", false)]

      public Func<T6, T7, T8, T9, T10, T11, T12, T13, TResult> EvaluatePartial(T1 in1, T2 in2, T3 in3, T4 in4, T5 in5)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    - id: in3
      type: '{T3}'
      description: The input parameter 3
    - id: in4
      type: '{T4}'
      description: The input parameter 4
    - id: in5
      type: '{T5}'
      description: The input parameter 5
    return:
      type: System.Func{{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of , , , , , , , , , , , , , )), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As T1, in2 As T2, in3 As T3, in4 As T4, in5 As T5) As Func(Of T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(T1, T2, T3, T4, T5)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(T1, T2, T3, T4, T5)
- uid: NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})
  commentId: M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})
  id: EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EvaluatePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6232
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,, >), "ObservePartial", false)]

      public Func<T6, T7, T8, T9, T10, T11, T12, T13, TResult> EvaluatePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    return:
      type: System.Func{{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of , , , , , , , , , , , , , )), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5)) As Func(Of T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5))
  name.vb: EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5))
- uid: NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})
  commentId: M:NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})
  id: ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4})
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ObservePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6247
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: public ObservingFunc<T6, T7, T8, T9, T10, T11, T12, T13, TResult> ObservePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    return:
      type: NMF.Expressions.ObservingFunc{{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function ObservePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5)) As ObservingFunc(Of T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.ObservePartial*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5))
  name.vb: ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5))
- uid: NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4,`5)
  commentId: M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4,`5)
  id: EvaluatePartial(`0,`1,`2,`3,`4,`5)
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: EvaluatePartial(T1, T2, T3, T4, T5, T6)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EvaluatePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6269
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,, >), "ObservePartial", false)]

      public Func<T7, T8, T9, T10, T11, T12, T13, TResult> EvaluatePartial(T1 in1, T2 in2, T3 in3, T4 in4, T5 in5, T6 in6)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    - id: in3
      type: '{T3}'
      description: The input parameter 3
    - id: in4
      type: '{T4}'
      description: The input parameter 4
    - id: in5
      type: '{T5}'
      description: The input parameter 5
    - id: in6
      type: '{T6}'
      description: The input parameter 6
    return:
      type: System.Func{{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of , , , , , , , , , , , , , )), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As T1, in2 As T2, in3 As T3, in4 As T4, in5 As T5, in6 As T6) As Func(Of T7, T8, T9, T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6)
- uid: NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})
  commentId: M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})
  id: EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EvaluatePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6285
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,, >), "ObservePartial", false)]

      public Func<T7, T8, T9, T10, T11, T12, T13, TResult> EvaluatePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    return:
      type: System.Func{{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of , , , , , , , , , , , , , )), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6)) As Func(Of T7, T8, T9, T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6))
  name.vb: EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6))
- uid: NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})
  commentId: M:NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})
  id: ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5})
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ObservePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6301
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: public ObservingFunc<T7, T8, T9, T10, T11, T12, T13, TResult> ObservePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    return:
      type: NMF.Expressions.ObservingFunc{{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function ObservePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6)) As ObservingFunc(Of T7, T8, T9, T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.ObservePartial*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6))
  name.vb: ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6))
- uid: NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6)
  commentId: M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6)
  id: EvaluatePartial(`0,`1,`2,`3,`4,`5,`6)
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: EvaluatePartial(T1, T2, T3, T4, T5, T6, T7)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6, T7)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6, T7)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EvaluatePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6325
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,, >), "ObservePartial", false)]

      public Func<T8, T9, T10, T11, T12, T13, TResult> EvaluatePartial(T1 in1, T2 in2, T3 in3, T4 in4, T5 in5, T6 in6, T7 in7)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    - id: in3
      type: '{T3}'
      description: The input parameter 3
    - id: in4
      type: '{T4}'
      description: The input parameter 4
    - id: in5
      type: '{T5}'
      description: The input parameter 5
    - id: in6
      type: '{T6}'
      description: The input parameter 6
    - id: in7
      type: '{T7}'
      description: The input parameter 7
    return:
      type: System.Func{{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of , , , , , , , , , , , , , )), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As T1, in2 As T2, in3 As T3, in4 As T4, in5 As T5, in6 As T6, in7 As T7) As Func(Of T8, T9, T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6, T7)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6, T7)
- uid: NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})
  commentId: M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})
  id: EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EvaluatePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6342
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,, >), "ObservePartial", false)]

      public Func<T8, T9, T10, T11, T12, T13, TResult> EvaluatePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    return:
      type: System.Func{{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of , , , , , , , , , , , , , )), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7)) As Func(Of T8, T9, T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7))
  name.vb: EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7))
- uid: NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})
  commentId: M:NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})
  id: ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6})
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ObservePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6359
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: public ObservingFunc<T8, T9, T10, T11, T12, T13, TResult> ObservePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    return:
      type: NMF.Expressions.ObservingFunc{{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function ObservePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7)) As ObservingFunc(Of T8, T9, T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.ObservePartial*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7))
  name.vb: ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7))
- uid: NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7)
  commentId: M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7)
  id: EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7)
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EvaluatePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6385
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,, >), "ObservePartial", false)]

      public Func<T9, T10, T11, T12, T13, TResult> EvaluatePartial(T1 in1, T2 in2, T3 in3, T4 in4, T5 in5, T6 in6, T7 in7, T8 in8)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    - id: in3
      type: '{T3}'
      description: The input parameter 3
    - id: in4
      type: '{T4}'
      description: The input parameter 4
    - id: in5
      type: '{T5}'
      description: The input parameter 5
    - id: in6
      type: '{T6}'
      description: The input parameter 6
    - id: in7
      type: '{T7}'
      description: The input parameter 7
    - id: in8
      type: '{T8}'
      description: The input parameter 8
    return:
      type: System.Func{{T9},{T10},{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of , , , , , , , , , , , , , )), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As T1, in2 As T2, in3 As T3, in4 As T4, in5 As T5, in6 As T6, in7 As T7, in8 As T8) As Func(Of T9, T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8)
- uid: NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})
  commentId: M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})
  id: EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>, NMF.Expressions.INotifyValue<T8>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EvaluatePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6403
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,, >), "ObservePartial", false)]

      public Func<T9, T10, T11, T12, T13, TResult> EvaluatePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7, INotifyValue<T8> in8)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    - id: in8
      type: NMF.Expressions.INotifyValue{{T8}}
      description: The input parameter 8
    return:
      type: System.Func{{T9},{T10},{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of , , , , , , , , , , , , , )), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7), in8 As INotifyValue(Of T8)) As Func(Of T9, T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7), NMF.Expressions.INotifyValue(Of T8))
  name.vb: EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8))
- uid: NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})
  commentId: M:NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})
  id: ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7})
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>, NMF.Expressions.INotifyValue<T8>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ObservePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6421
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: public ObservingFunc<T9, T10, T11, T12, T13, TResult> ObservePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7, INotifyValue<T8> in8)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    - id: in8
      type: NMF.Expressions.INotifyValue{{T8}}
      description: The input parameter 8
    return:
      type: NMF.Expressions.ObservingFunc{{T9},{T10},{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function ObservePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7), in8 As INotifyValue(Of T8)) As ObservingFunc(Of T9, T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.ObservePartial*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7), NMF.Expressions.INotifyValue(Of T8))
  name.vb: ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8))
- uid: NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8)
  commentId: M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8)
  id: EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8)
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EvaluatePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6449
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,, >), "ObservePartial", false)]

      public Func<T10, T11, T12, T13, TResult> EvaluatePartial(T1 in1, T2 in2, T3 in3, T4 in4, T5 in5, T6 in6, T7 in7, T8 in8, T9 in9)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    - id: in3
      type: '{T3}'
      description: The input parameter 3
    - id: in4
      type: '{T4}'
      description: The input parameter 4
    - id: in5
      type: '{T5}'
      description: The input parameter 5
    - id: in6
      type: '{T6}'
      description: The input parameter 6
    - id: in7
      type: '{T7}'
      description: The input parameter 7
    - id: in8
      type: '{T8}'
      description: The input parameter 8
    - id: in9
      type: '{T9}'
      description: The input parameter 9
    return:
      type: System.Func{{T10},{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of , , , , , , , , , , , , , )), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As T1, in2 As T2, in3 As T3, in4 As T4, in5 As T5, in6 As T6, in7 As T7, in8 As T8, in9 As T9) As Func(Of T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9)
- uid: NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})
  commentId: M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})
  id: EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>, NMF.Expressions.INotifyValue<T8>, NMF.Expressions.INotifyValue<T9>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EvaluatePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6468
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,, >), "ObservePartial", false)]

      public Func<T10, T11, T12, T13, TResult> EvaluatePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7, INotifyValue<T8> in8, INotifyValue<T9> in9)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    - id: in8
      type: NMF.Expressions.INotifyValue{{T8}}
      description: The input parameter 8
    - id: in9
      type: NMF.Expressions.INotifyValue{{T9}}
      description: The input parameter 9
    return:
      type: System.Func{{T10},{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of , , , , , , , , , , , , , )), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7), in8 As INotifyValue(Of T8), in9 As INotifyValue(Of T9)) As Func(Of T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7), NMF.Expressions.INotifyValue(Of T8), NMF.Expressions.INotifyValue(Of T9))
  name.vb: EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9))
- uid: NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})
  commentId: M:NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})
  id: ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8})
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>, NMF.Expressions.INotifyValue<T8>, NMF.Expressions.INotifyValue<T9>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ObservePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6487
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: public ObservingFunc<T10, T11, T12, T13, TResult> ObservePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7, INotifyValue<T8> in8, INotifyValue<T9> in9)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    - id: in8
      type: NMF.Expressions.INotifyValue{{T8}}
      description: The input parameter 8
    - id: in9
      type: NMF.Expressions.INotifyValue{{T9}}
      description: The input parameter 9
    return:
      type: NMF.Expressions.ObservingFunc{{T10},{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function ObservePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7), in8 As INotifyValue(Of T8), in9 As INotifyValue(Of T9)) As ObservingFunc(Of T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.ObservePartial*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7), NMF.Expressions.INotifyValue(Of T8), NMF.Expressions.INotifyValue(Of T9))
  name.vb: ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9))
- uid: NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)
  commentId: M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)
  id: EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EvaluatePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6517
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,, >), "ObservePartial", false)]

      public Func<T11, T12, T13, TResult> EvaluatePartial(T1 in1, T2 in2, T3 in3, T4 in4, T5 in5, T6 in6, T7 in7, T8 in8, T9 in9, T10 in10)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    - id: in3
      type: '{T3}'
      description: The input parameter 3
    - id: in4
      type: '{T4}'
      description: The input parameter 4
    - id: in5
      type: '{T5}'
      description: The input parameter 5
    - id: in6
      type: '{T6}'
      description: The input parameter 6
    - id: in7
      type: '{T7}'
      description: The input parameter 7
    - id: in8
      type: '{T8}'
      description: The input parameter 8
    - id: in9
      type: '{T9}'
      description: The input parameter 9
    - id: in10
      type: '{T10}'
      description: The input parameter 10
    return:
      type: System.Func{{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of , , , , , , , , , , , , , )), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As T1, in2 As T2, in3 As T3, in4 As T4, in5 As T5, in6 As T6, in7 As T7, in8 As T8, in9 As T9, in10 As T10) As Func(Of T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)
- uid: NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})
  commentId: M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})
  id: EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>, NMF.Expressions.INotifyValue<T8>, NMF.Expressions.INotifyValue<T9>, NMF.Expressions.INotifyValue<T10>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EvaluatePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6537
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,, >), "ObservePartial", false)]

      public Func<T11, T12, T13, TResult> EvaluatePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7, INotifyValue<T8> in8, INotifyValue<T9> in9, INotifyValue<T10> in10)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    - id: in8
      type: NMF.Expressions.INotifyValue{{T8}}
      description: The input parameter 8
    - id: in9
      type: NMF.Expressions.INotifyValue{{T9}}
      description: The input parameter 9
    - id: in10
      type: NMF.Expressions.INotifyValue{{T10}}
      description: The input parameter 10
    return:
      type: System.Func{{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of , , , , , , , , , , , , , )), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7), in8 As INotifyValue(Of T8), in9 As INotifyValue(Of T9), in10 As INotifyValue(Of T10)) As Func(Of T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7), NMF.Expressions.INotifyValue(Of T8), NMF.Expressions.INotifyValue(Of T9), NMF.Expressions.INotifyValue(Of T10))
  name.vb: EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10))
- uid: NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})
  commentId: M:NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})
  id: ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9})
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>, NMF.Expressions.INotifyValue<T8>, NMF.Expressions.INotifyValue<T9>, NMF.Expressions.INotifyValue<T10>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ObservePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6557
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: public ObservingFunc<T11, T12, T13, TResult> ObservePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7, INotifyValue<T8> in8, INotifyValue<T9> in9, INotifyValue<T10> in10)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    - id: in8
      type: NMF.Expressions.INotifyValue{{T8}}
      description: The input parameter 8
    - id: in9
      type: NMF.Expressions.INotifyValue{{T9}}
      description: The input parameter 9
    - id: in10
      type: NMF.Expressions.INotifyValue{{T10}}
      description: The input parameter 10
    return:
      type: NMF.Expressions.ObservingFunc{{T11},{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function ObservePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7), in8 As INotifyValue(Of T8), in9 As INotifyValue(Of T9), in10 As INotifyValue(Of T10)) As ObservingFunc(Of T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.ObservePartial*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7), NMF.Expressions.INotifyValue(Of T8), NMF.Expressions.INotifyValue(Of T9), NMF.Expressions.INotifyValue(Of T10))
  name.vb: ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10))
- uid: NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)
  commentId: M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)
  id: EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10)
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EvaluatePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6589
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,, >), "ObservePartial", false)]

      public Func<T12, T13, TResult> EvaluatePartial(T1 in1, T2 in2, T3 in3, T4 in4, T5 in5, T6 in6, T7 in7, T8 in8, T9 in9, T10 in10, T11 in11)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    - id: in3
      type: '{T3}'
      description: The input parameter 3
    - id: in4
      type: '{T4}'
      description: The input parameter 4
    - id: in5
      type: '{T5}'
      description: The input parameter 5
    - id: in6
      type: '{T6}'
      description: The input parameter 6
    - id: in7
      type: '{T7}'
      description: The input parameter 7
    - id: in8
      type: '{T8}'
      description: The input parameter 8
    - id: in9
      type: '{T9}'
      description: The input parameter 9
    - id: in10
      type: '{T10}'
      description: The input parameter 10
    - id: in11
      type: '{T11}'
      description: The input parameter 11
    return:
      type: System.Func{{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of , , , , , , , , , , , , , )), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As T1, in2 As T2, in3 As T3, in4 As T4, in5 As T5, in6 As T6, in7 As T7, in8 As T8, in9 As T9, in10 As T10, in11 As T11) As Func(Of T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)
- uid: NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10})
  commentId: M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10})
  id: EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10})
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>, INotifyValue<T11>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>, INotifyValue<T11>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>, NMF.Expressions.INotifyValue<T8>, NMF.Expressions.INotifyValue<T9>, NMF.Expressions.INotifyValue<T10>, NMF.Expressions.INotifyValue<T11>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EvaluatePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6610
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,, >), "ObservePartial", false)]

      public Func<T12, T13, TResult> EvaluatePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7, INotifyValue<T8> in8, INotifyValue<T9> in9, INotifyValue<T10> in10, INotifyValue<T11> in11)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    - id: in8
      type: NMF.Expressions.INotifyValue{{T8}}
      description: The input parameter 8
    - id: in9
      type: NMF.Expressions.INotifyValue{{T9}}
      description: The input parameter 9
    - id: in10
      type: NMF.Expressions.INotifyValue{{T10}}
      description: The input parameter 10
    - id: in11
      type: NMF.Expressions.INotifyValue{{T11}}
      description: The input parameter 11
    return:
      type: System.Func{{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of , , , , , , , , , , , , , )), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7), in8 As INotifyValue(Of T8), in9 As INotifyValue(Of T9), in10 As INotifyValue(Of T10), in11 As INotifyValue(Of T11)) As Func(Of T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10), INotifyValue(Of T11))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7), NMF.Expressions.INotifyValue(Of T8), NMF.Expressions.INotifyValue(Of T9), NMF.Expressions.INotifyValue(Of T10), NMF.Expressions.INotifyValue(Of T11))
  name.vb: EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10), INotifyValue(Of T11))
- uid: NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10})
  commentId: M:NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10})
  id: ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10})
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>, INotifyValue<T11>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>, INotifyValue<T11>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>, NMF.Expressions.INotifyValue<T8>, NMF.Expressions.INotifyValue<T9>, NMF.Expressions.INotifyValue<T10>, NMF.Expressions.INotifyValue<T11>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ObservePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6631
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: public ObservingFunc<T12, T13, TResult> ObservePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7, INotifyValue<T8> in8, INotifyValue<T9> in9, INotifyValue<T10> in10, INotifyValue<T11> in11)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    - id: in8
      type: NMF.Expressions.INotifyValue{{T8}}
      description: The input parameter 8
    - id: in9
      type: NMF.Expressions.INotifyValue{{T9}}
      description: The input parameter 9
    - id: in10
      type: NMF.Expressions.INotifyValue{{T10}}
      description: The input parameter 10
    - id: in11
      type: NMF.Expressions.INotifyValue{{T11}}
      description: The input parameter 11
    return:
      type: NMF.Expressions.ObservingFunc{{T12},{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function ObservePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7), in8 As INotifyValue(Of T8), in9 As INotifyValue(Of T9), in10 As INotifyValue(Of T10), in11 As INotifyValue(Of T11)) As ObservingFunc(Of T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.ObservePartial*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10), INotifyValue(Of T11))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7), NMF.Expressions.INotifyValue(Of T8), NMF.Expressions.INotifyValue(Of T9), NMF.Expressions.INotifyValue(Of T10), NMF.Expressions.INotifyValue(Of T11))
  name.vb: ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10), INotifyValue(Of T11))
- uid: NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)
  commentId: M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)
  id: EvaluatePartial(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11)
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EvaluatePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6665
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,, >), "ObservePartial", false)]

      public Func<T13, TResult> EvaluatePartial(T1 in1, T2 in2, T3 in3, T4 in4, T5 in5, T6 in6, T7 in7, T8 in8, T9 in9, T10 in10, T11 in11, T12 in12)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    - id: in3
      type: '{T3}'
      description: The input parameter 3
    - id: in4
      type: '{T4}'
      description: The input parameter 4
    - id: in5
      type: '{T5}'
      description: The input parameter 5
    - id: in6
      type: '{T6}'
      description: The input parameter 6
    - id: in7
      type: '{T7}'
      description: The input parameter 7
    - id: in8
      type: '{T8}'
      description: The input parameter 8
    - id: in9
      type: '{T9}'
      description: The input parameter 9
    - id: in10
      type: '{T10}'
      description: The input parameter 10
    - id: in11
      type: '{T11}'
      description: The input parameter 11
    - id: in12
      type: '{T12}'
      description: The input parameter 12
    return:
      type: System.Func{{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of , , , , , , , , , , , , , )), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As T1, in2 As T2, in3 As T3, in4 As T4, in5 As T5, in6 As T6, in7 As T7, in8 As T8, in9 As T9, in10 As T10, in11 As T11, in12 As T12) As Func(Of T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)
- uid: NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11})
  commentId: M:NMF.Expressions.ObservingFunc`14.EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11})
  id: EvaluatePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11})
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>, INotifyValue<T11>, INotifyValue<T12>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>, INotifyValue<T11>, INotifyValue<T12>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>, NMF.Expressions.INotifyValue<T8>, NMF.Expressions.INotifyValue<T9>, NMF.Expressions.INotifyValue<T10>, NMF.Expressions.INotifyValue<T11>, NMF.Expressions.INotifyValue<T12>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: EvaluatePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6687
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,,,,,,,,,,,, >), "ObservePartial", false)]

      public Func<T13, TResult> EvaluatePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7, INotifyValue<T8> in8, INotifyValue<T9> in9, INotifyValue<T10> in10, INotifyValue<T11> in11, INotifyValue<T12> in12)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    - id: in8
      type: NMF.Expressions.INotifyValue{{T8}}
      description: The input parameter 8
    - id: in9
      type: NMF.Expressions.INotifyValue{{T9}}
      description: The input parameter 9
    - id: in10
      type: NMF.Expressions.INotifyValue{{T10}}
      description: The input parameter 10
    - id: in11
      type: NMF.Expressions.INotifyValue{{T11}}
      description: The input parameter 11
    - id: in12
      type: NMF.Expressions.INotifyValue{{T12}}
      description: The input parameter 12
    return:
      type: System.Func{{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of , , , , , , , , , , , , , )), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7), in8 As INotifyValue(Of T8), in9 As INotifyValue(Of T9), in10 As INotifyValue(Of T10), in11 As INotifyValue(Of T11), in12 As INotifyValue(Of T12)) As Func(Of T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10), INotifyValue(Of T11), INotifyValue(Of T12))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7), NMF.Expressions.INotifyValue(Of T8), NMF.Expressions.INotifyValue(Of T9), NMF.Expressions.INotifyValue(Of T10), NMF.Expressions.INotifyValue(Of T11), NMF.Expressions.INotifyValue(Of T12))
  name.vb: EvaluatePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10), INotifyValue(Of T11), INotifyValue(Of T12))
- uid: NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11})
  commentId: M:NMF.Expressions.ObservingFunc`14.ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11})
  id: ObservePartial(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11})
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>, INotifyValue<T11>, INotifyValue<T12>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservePartial(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>, INotifyValue<T11>, INotifyValue<T12>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>, NMF.Expressions.INotifyValue<T8>, NMF.Expressions.INotifyValue<T9>, NMF.Expressions.INotifyValue<T10>, NMF.Expressions.INotifyValue<T11>, NMF.Expressions.INotifyValue<T12>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ObservePartial
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6709
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression partially\n"
  example: []
  syntax:
    content: public ObservingFunc<T13, TResult> ObservePartial(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7, INotifyValue<T8> in8, INotifyValue<T9> in9, INotifyValue<T10> in10, INotifyValue<T11> in11, INotifyValue<T12> in12)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    - id: in8
      type: NMF.Expressions.INotifyValue{{T8}}
      description: The input parameter 8
    - id: in9
      type: NMF.Expressions.INotifyValue{{T9}}
      description: The input parameter 9
    - id: in10
      type: NMF.Expressions.INotifyValue{{T10}}
      description: The input parameter 10
    - id: in11
      type: NMF.Expressions.INotifyValue{{T11}}
      description: The input parameter 11
    - id: in12
      type: NMF.Expressions.INotifyValue{{T12}}
      description: The input parameter 12
    return:
      type: NMF.Expressions.ObservingFunc{{T13},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function ObservePartial(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7), in8 As INotifyValue(Of T8), in9 As INotifyValue(Of T9), in10 As INotifyValue(Of T10), in11 As INotifyValue(Of T11), in12 As INotifyValue(Of T12)) As ObservingFunc(Of T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.ObservePartial*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10), INotifyValue(Of T11), INotifyValue(Of T12))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7), NMF.Expressions.INotifyValue(Of T8), NMF.Expressions.INotifyValue(Of T9), NMF.Expressions.INotifyValue(Of T10), NMF.Expressions.INotifyValue(Of T11), NMF.Expressions.INotifyValue(Of T12))
  name.vb: ObservePartial(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10), INotifyValue(Of T11), INotifyValue(Of T12))
- uid: NMF.Expressions.ObservingFunc`14.InvokeReversable(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)
  commentId: M:NMF.Expressions.ObservingFunc`14.InvokeReversable(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)
  id: InvokeReversable(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12)
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: InvokeReversable(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.InvokeReversable(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.InvokeReversable(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: InvokeReversable
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6746
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression\n"
  example: []
  syntax:
    content: public virtual INotifyReversableValue<TResult> InvokeReversable(T1 in1, T2 in2, T3 in3, T4 in4, T5 in5, T6 in6, T7 in7, T8 in8, T9 in9, T10 in10, T11 in11, T12 in12, T13 in13)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    - id: in3
      type: '{T3}'
      description: The input parameter 3
    - id: in4
      type: '{T4}'
      description: The input parameter 4
    - id: in5
      type: '{T5}'
      description: The input parameter 5
    - id: in6
      type: '{T6}'
      description: The input parameter 6
    - id: in7
      type: '{T7}'
      description: The input parameter 7
    - id: in8
      type: '{T8}'
      description: The input parameter 8
    - id: in9
      type: '{T9}'
      description: The input parameter 9
    - id: in10
      type: '{T10}'
      description: The input parameter 10
    - id: in11
      type: '{T11}'
      description: The input parameter 11
    - id: in12
      type: '{T12}'
      description: The input parameter 12
    - id: in13
      type: '{T13}'
      description: The input parameter 13
    return:
      type: NMF.Expressions.INotifyReversableValue{{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Overridable Function InvokeReversable(in1 As T1, in2 As T2, in3 As T3, in4 As T4, in5 As T5, in6 As T6, in7 As T7, in8 As T8, in9 As T9, in10 As T10, in11 As T11, in12 As T12, in13 As T13) As INotifyReversableValue(Of TResult)
  overload: NMF.Expressions.ObservingFunc`14.InvokeReversable*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).InvokeReversable(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).InvokeReversable(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)
- uid: NMF.Expressions.ObservingFunc`14.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12})
  commentId: M:NMF.Expressions.ObservingFunc`14.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12})
  id: InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1},NMF.Expressions.INotifyValue{`2},NMF.Expressions.INotifyValue{`3},NMF.Expressions.INotifyValue{`4},NMF.Expressions.INotifyValue{`5},NMF.Expressions.INotifyValue{`6},NMF.Expressions.INotifyValue{`7},NMF.Expressions.INotifyValue{`8},NMF.Expressions.INotifyValue{`9},NMF.Expressions.INotifyValue{`10},NMF.Expressions.INotifyValue{`11},NMF.Expressions.INotifyValue{`12})
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: InvokeReversable(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>, INotifyValue<T11>, INotifyValue<T12>, INotifyValue<T13>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.InvokeReversable(INotifyValue<T1>, INotifyValue<T2>, INotifyValue<T3>, INotifyValue<T4>, INotifyValue<T5>, INotifyValue<T6>, INotifyValue<T7>, INotifyValue<T8>, INotifyValue<T9>, INotifyValue<T10>, INotifyValue<T11>, INotifyValue<T12>, INotifyValue<T13>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.InvokeReversable(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>, NMF.Expressions.INotifyValue<T3>, NMF.Expressions.INotifyValue<T4>, NMF.Expressions.INotifyValue<T5>, NMF.Expressions.INotifyValue<T6>, NMF.Expressions.INotifyValue<T7>, NMF.Expressions.INotifyValue<T8>, NMF.Expressions.INotifyValue<T9>, NMF.Expressions.INotifyValue<T10>, NMF.Expressions.INotifyValue<T11>, NMF.Expressions.INotifyValue<T12>, NMF.Expressions.INotifyValue<T13>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: InvokeReversable
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6786
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nInvokes the expression\n"
  example: []
  syntax:
    content: public virtual INotifyReversableValue<TResult> InvokeReversable(INotifyValue<T1> in1, INotifyValue<T2> in2, INotifyValue<T3> in3, INotifyValue<T4> in4, INotifyValue<T5> in5, INotifyValue<T6> in6, INotifyValue<T7> in7, INotifyValue<T8> in8, INotifyValue<T9> in9, INotifyValue<T10> in10, INotifyValue<T11> in11, INotifyValue<T12> in12, INotifyValue<T13> in13)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    - id: in3
      type: NMF.Expressions.INotifyValue{{T3}}
      description: The input parameter 3
    - id: in4
      type: NMF.Expressions.INotifyValue{{T4}}
      description: The input parameter 4
    - id: in5
      type: NMF.Expressions.INotifyValue{{T5}}
      description: The input parameter 5
    - id: in6
      type: NMF.Expressions.INotifyValue{{T6}}
      description: The input parameter 6
    - id: in7
      type: NMF.Expressions.INotifyValue{{T7}}
      description: The input parameter 7
    - id: in8
      type: NMF.Expressions.INotifyValue{{T8}}
      description: The input parameter 8
    - id: in9
      type: NMF.Expressions.INotifyValue{{T9}}
      description: The input parameter 9
    - id: in10
      type: NMF.Expressions.INotifyValue{{T10}}
      description: The input parameter 10
    - id: in11
      type: NMF.Expressions.INotifyValue{{T11}}
      description: The input parameter 11
    - id: in12
      type: NMF.Expressions.INotifyValue{{T12}}
      description: The input parameter 12
    - id: in13
      type: NMF.Expressions.INotifyValue{{T13}}
      description: The input parameter 13
    return:
      type: NMF.Expressions.INotifyReversableValue{{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Overridable Function InvokeReversable(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2), in3 As INotifyValue(Of T3), in4 As INotifyValue(Of T4), in5 As INotifyValue(Of T5), in6 As INotifyValue(Of T6), in7 As INotifyValue(Of T7), in8 As INotifyValue(Of T8), in9 As INotifyValue(Of T9), in10 As INotifyValue(Of T10), in11 As INotifyValue(Of T11), in12 As INotifyValue(Of T12), in13 As INotifyValue(Of T13)) As INotifyReversableValue(Of TResult)
  overload: NMF.Expressions.ObservingFunc`14.InvokeReversable*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).InvokeReversable(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10), INotifyValue(Of T11), INotifyValue(Of T12), INotifyValue(Of T13))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).InvokeReversable(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2), NMF.Expressions.INotifyValue(Of T3), NMF.Expressions.INotifyValue(Of T4), NMF.Expressions.INotifyValue(Of T5), NMF.Expressions.INotifyValue(Of T6), NMF.Expressions.INotifyValue(Of T7), NMF.Expressions.INotifyValue(Of T8), NMF.Expressions.INotifyValue(Of T9), NMF.Expressions.INotifyValue(Of T10), NMF.Expressions.INotifyValue(Of T11), NMF.Expressions.INotifyValue(Of T12), NMF.Expressions.INotifyValue(Of T13))
  name.vb: InvokeReversable(INotifyValue(Of T1), INotifyValue(Of T2), INotifyValue(Of T3), INotifyValue(Of T4), INotifyValue(Of T5), INotifyValue(Of T6), INotifyValue(Of T7), INotifyValue(Of T8), INotifyValue(Of T9), INotifyValue(Of T10), INotifyValue(Of T11), INotifyValue(Of T12), INotifyValue(Of T13))
- uid: NMF.Expressions.ObservingFunc`14.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}})~NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}
  commentId: M:NMF.Expressions.ObservingFunc`14.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}})~NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}
  id: op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}})~NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: Implicit(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>> to ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.Implicit(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>> to ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.Implicit(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>> to NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>)
  type: Operator
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: op_Implicit
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6815
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nCreates a new observable expression\n"
  example: []
  syntax:
    content: public static implicit operator ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}}
      description: The expression that is to be observed
    return:
      type: NMF.Expressions.ObservingFunc`14
      description: An observable function
    content.vb: Public Shared Widening Operator CType(expression As Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult))) As ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.op_Implicit*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).Widening(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)) to ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).Widening(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)) to NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult))
  name.vb: Widening(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)) to ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult))
- uid: NMF.Expressions.ObservingFunc`14.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}})
  commentId: M:NMF.Expressions.ObservingFunc`14.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}})
  id: FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}})
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: FromExpression(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>>)
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.FromExpression(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.FromExpression(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: FromExpression
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6826
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nCreates a new observable expression from the given expression\n"
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> FromExpression(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}}
      description: The expression that is to be observed
    return:
      type: NMF.Expressions.ObservingFunc`14
      description: An observable function
    content.vb: Public Shared Function FromExpression(expression As Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult))) As ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  overload: NMF.Expressions.ObservingFunc`14.FromExpression*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).FromExpression(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).FromExpression(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)))
  name.vb: FromExpression(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)))
- uid: NMF.Expressions.ObservingFunc`14.IsReversable
  commentId: P:NMF.Expressions.ObservingFunc`14.IsReversable
  id: IsReversable
  parent: NMF.Expressions.ObservingFunc`14
  langs:
  - csharp
  - vb
  name: IsReversable
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.IsReversable
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.IsReversable
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/FunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsReversable
    path: src/Expressions/Expressions/Public/FunctionTypes.cs
    startLine: 6835
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nGets a value indicating whether this function can be reversed\n"
  example: []
  syntax:
    content: public virtual bool IsReversable { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property IsReversable As Boolean
  overload: NMF.Expressions.ObservingFunc`14.IsReversable*
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).IsReversable
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).IsReversable
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.ObservingFunc`14.#ctor*
  commentId: Overload:NMF.Expressions.ObservingFunc`14.#ctor
  name: ObservingFunc
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservingFunc
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservingFunc
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservingFunc
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservingFunc
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>>
  nameWithType: Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>>
  nameWithType.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult))
  name.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`14
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`14
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: NMF.Expressions.ObservingFunc`14.Evaluate*
  commentId: Overload:NMF.Expressions.ObservingFunc`14.Evaluate
  name: Evaluate
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.Evaluate
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.Evaluate
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).Evaluate
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).Evaluate
- uid: '{T1}'
  commentId: '!:T1'
  definition: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: '{T2}'
  commentId: '!:T2'
  definition: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: '{T3}'
  commentId: '!:T3'
  definition: T3
  name: T3
  nameWithType: T3
  fullName: T3
- uid: '{T4}'
  commentId: '!:T4'
  definition: T4
  name: T4
  nameWithType: T4
  fullName: T4
- uid: '{T5}'
  commentId: '!:T5'
  definition: T5
  name: T5
  nameWithType: T5
  fullName: T5
- uid: '{T6}'
  commentId: '!:T6'
  definition: T6
  name: T6
  nameWithType: T6
  fullName: T6
- uid: '{T7}'
  commentId: '!:T7'
  definition: T7
  name: T7
  nameWithType: T7
  fullName: T7
- uid: '{T8}'
  commentId: '!:T8'
  definition: T8
  name: T8
  nameWithType: T8
  fullName: T8
- uid: '{T9}'
  commentId: '!:T9'
  definition: T9
  name: T9
  nameWithType: T9
  fullName: T9
- uid: '{T10}'
  commentId: '!:T10'
  definition: T10
  name: T10
  nameWithType: T10
  fullName: T10
- uid: '{T11}'
  commentId: '!:T11'
  definition: T11
  name: T11
  nameWithType: T11
  fullName: T11
- uid: '{T12}'
  commentId: '!:T12'
  definition: T12
  name: T12
  nameWithType: T12
  fullName: T12
- uid: '{T13}'
  commentId: '!:T13'
  definition: T13
  name: T13
  nameWithType: T13
  fullName: T13
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: T3
  name: T3
  nameWithType: T3
  fullName: T3
- uid: T4
  name: T4
  nameWithType: T4
  fullName: T4
- uid: T5
  name: T5
  nameWithType: T5
  fullName: T5
- uid: T6
  name: T6
  nameWithType: T6
  fullName: T6
- uid: T7
  name: T7
  nameWithType: T7
  fullName: T7
- uid: T8
  name: T8
  nameWithType: T8
  fullName: T8
- uid: T9
  name: T9
  nameWithType: T9
  fullName: T9
- uid: T10
  name: T10
  nameWithType: T10
  fullName: T10
- uid: T11
  name: T11
  nameWithType: T11
  fullName: T11
- uid: T12
  name: T12
  nameWithType: T12
  fullName: T12
- uid: T13
  name: T13
  nameWithType: T13
  fullName: T13
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: NMF.Expressions.ObservingFunc`14.Observe*
  commentId: Overload:NMF.Expressions.ObservingFunc`14.Observe
  name: Observe
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.Observe
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.Observe
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).Observe
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).Observe
- uid: NMF.Expressions.INotifyValue{{TResult}}
  commentId: T:NMF.Expressions.INotifyValue{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<TResult>
  nameWithType: INotifyValue<TResult>
  fullName: NMF.Expressions.INotifyValue<TResult>
  nameWithType.vb: INotifyValue(Of TResult)
  fullName.vb: NMF.Expressions.INotifyValue(Of TResult)
  name.vb: INotifyValue(Of TResult)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue`1
  commentId: T:NMF.Expressions.INotifyValue`1
  name: INotifyValue<T>
  nameWithType: INotifyValue<T>
  fullName: NMF.Expressions.INotifyValue<T>
  nameWithType.vb: INotifyValue(Of T)
  fullName.vb: NMF.Expressions.INotifyValue(Of T)
  name.vb: INotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue{{T1}}
  commentId: T:NMF.Expressions.INotifyValue{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<T1>
  nameWithType: INotifyValue<T1>
  fullName: NMF.Expressions.INotifyValue<T1>
  nameWithType.vb: INotifyValue(Of T1)
  fullName.vb: NMF.Expressions.INotifyValue(Of T1)
  name.vb: INotifyValue(Of T1)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue{{T2}}
  commentId: T:NMF.Expressions.INotifyValue{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<T2>
  nameWithType: INotifyValue<T2>
  fullName: NMF.Expressions.INotifyValue<T2>
  nameWithType.vb: INotifyValue(Of T2)
  fullName.vb: NMF.Expressions.INotifyValue(Of T2)
  name.vb: INotifyValue(Of T2)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue{{T3}}
  commentId: T:NMF.Expressions.INotifyValue{`2}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<T3>
  nameWithType: INotifyValue<T3>
  fullName: NMF.Expressions.INotifyValue<T3>
  nameWithType.vb: INotifyValue(Of T3)
  fullName.vb: NMF.Expressions.INotifyValue(Of T3)
  name.vb: INotifyValue(Of T3)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue{{T4}}
  commentId: T:NMF.Expressions.INotifyValue{`3}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<T4>
  nameWithType: INotifyValue<T4>
  fullName: NMF.Expressions.INotifyValue<T4>
  nameWithType.vb: INotifyValue(Of T4)
  fullName.vb: NMF.Expressions.INotifyValue(Of T4)
  name.vb: INotifyValue(Of T4)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue{{T5}}
  commentId: T:NMF.Expressions.INotifyValue{`4}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<T5>
  nameWithType: INotifyValue<T5>
  fullName: NMF.Expressions.INotifyValue<T5>
  nameWithType.vb: INotifyValue(Of T5)
  fullName.vb: NMF.Expressions.INotifyValue(Of T5)
  name.vb: INotifyValue(Of T5)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue{{T6}}
  commentId: T:NMF.Expressions.INotifyValue{`5}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<T6>
  nameWithType: INotifyValue<T6>
  fullName: NMF.Expressions.INotifyValue<T6>
  nameWithType.vb: INotifyValue(Of T6)
  fullName.vb: NMF.Expressions.INotifyValue(Of T6)
  name.vb: INotifyValue(Of T6)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue{{T7}}
  commentId: T:NMF.Expressions.INotifyValue{`6}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<T7>
  nameWithType: INotifyValue<T7>
  fullName: NMF.Expressions.INotifyValue<T7>
  nameWithType.vb: INotifyValue(Of T7)
  fullName.vb: NMF.Expressions.INotifyValue(Of T7)
  name.vb: INotifyValue(Of T7)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue{{T8}}
  commentId: T:NMF.Expressions.INotifyValue{`7}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<T8>
  nameWithType: INotifyValue<T8>
  fullName: NMF.Expressions.INotifyValue<T8>
  nameWithType.vb: INotifyValue(Of T8)
  fullName.vb: NMF.Expressions.INotifyValue(Of T8)
  name.vb: INotifyValue(Of T8)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue{{T9}}
  commentId: T:NMF.Expressions.INotifyValue{`8}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<T9>
  nameWithType: INotifyValue<T9>
  fullName: NMF.Expressions.INotifyValue<T9>
  nameWithType.vb: INotifyValue(Of T9)
  fullName.vb: NMF.Expressions.INotifyValue(Of T9)
  name.vb: INotifyValue(Of T9)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue{{T10}}
  commentId: T:NMF.Expressions.INotifyValue{`9}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<T10>
  nameWithType: INotifyValue<T10>
  fullName: NMF.Expressions.INotifyValue<T10>
  nameWithType.vb: INotifyValue(Of T10)
  fullName.vb: NMF.Expressions.INotifyValue(Of T10)
  name.vb: INotifyValue(Of T10)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue{{T11}}
  commentId: T:NMF.Expressions.INotifyValue{`10}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<T11>
  nameWithType: INotifyValue<T11>
  fullName: NMF.Expressions.INotifyValue<T11>
  nameWithType.vb: INotifyValue(Of T11)
  fullName.vb: NMF.Expressions.INotifyValue(Of T11)
  name.vb: INotifyValue(Of T11)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue{{T12}}
  commentId: T:NMF.Expressions.INotifyValue{`11}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<T12>
  nameWithType: INotifyValue<T12>
  fullName: NMF.Expressions.INotifyValue<T12>
  nameWithType.vb: INotifyValue(Of T12)
  fullName.vb: NMF.Expressions.INotifyValue(Of T12)
  name.vb: INotifyValue(Of T12)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue{{T13}}
  commentId: T:NMF.Expressions.INotifyValue{`12}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<T13>
  nameWithType: INotifyValue<T13>
  fullName: NMF.Expressions.INotifyValue<T13>
  nameWithType.vb: INotifyValue(Of T13)
  fullName.vb: NMF.Expressions.INotifyValue(Of T13)
  name.vb: INotifyValue(Of T13)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`14.EvaluatePartial*
  commentId: Overload:NMF.Expressions.ObservingFunc`14.EvaluatePartial
  name: EvaluatePartial
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.EvaluatePartial
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).EvaluatePartial
- uid: System.Func{{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
  commentId: T:System.Func{`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}
  parent: System
  definition: System.Func`13
  name: Func<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType: Func<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  fullName: System.Func<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType.vb: Func(Of T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  fullName.vb: System.Func(Of T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  name.vb: Func(Of T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  spec.csharp:
  - uid: System.Func`13
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`13
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`13
  commentId: T:System.Func`13
  isExternal: true
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  spec.csharp:
  - uid: System.Func`13
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`13
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`14.ObservePartial*
  commentId: Overload:NMF.Expressions.ObservingFunc`14.ObservePartial
  name: ObservePartial
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservePartial
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.ObservePartial
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservePartial
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).ObservePartial
- uid: NMF.Expressions.ObservingFunc{{T2},{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`13
  name: ObservingFunc<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType: ObservingFunc<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  fullName: NMF.Expressions.ObservingFunc<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType.vb: ObservingFunc(Of T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  name.vb: ObservingFunc(Of T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`13
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`13
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`13
  commentId: T:NMF.Expressions.ObservingFunc`13
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`13
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`13
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
  commentId: T:System.Func{`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}
  parent: System
  definition: System.Func`12
  name: Func<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType: Func<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  fullName: System.Func<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType.vb: Func(Of T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  fullName.vb: System.Func(Of T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  name.vb: Func(Of T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  spec.csharp:
  - uid: System.Func`12
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`12
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`12
  commentId: T:System.Func`12
  isExternal: true
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  spec.csharp:
  - uid: System.Func`12
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`12
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc{{T3},{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`12
  name: ObservingFunc<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType: ObservingFunc<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  fullName: NMF.Expressions.ObservingFunc<T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType.vb: ObservingFunc(Of T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  name.vb: ObservingFunc(Of T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`12
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`12
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`12
  commentId: T:NMF.Expressions.ObservingFunc`12
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`12
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`12
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
  commentId: T:System.Func{`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}
  parent: System
  definition: System.Func`11
  name: Func<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType: Func<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  fullName: System.Func<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType.vb: Func(Of T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  fullName.vb: System.Func(Of T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  name.vb: Func(Of T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  spec.csharp:
  - uid: System.Func`11
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`11
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`11
  commentId: T:System.Func`11
  isExternal: true
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  spec.csharp:
  - uid: System.Func`11
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`11
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc{{T4},{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`11
  name: ObservingFunc<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType: ObservingFunc<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  fullName: NMF.Expressions.ObservingFunc<T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType.vb: ObservingFunc(Of T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  name.vb: ObservingFunc(Of T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`11
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`11
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`11
  commentId: T:NMF.Expressions.ObservingFunc`11
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`11
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`11
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
  commentId: T:System.Func{`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}
  parent: System
  definition: System.Func`10
  name: Func<T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType: Func<T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  fullName: System.Func<T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType.vb: Func(Of T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  fullName.vb: System.Func(Of T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  name.vb: Func(Of T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  spec.csharp:
  - uid: System.Func`10
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`10
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`10
  commentId: T:System.Func`10
  isExternal: true
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  spec.csharp:
  - uid: System.Func`10
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`10
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc{{T5},{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{`4,`5,`6,`7,`8,`9,`10,`11,`12,`13}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`10
  name: ObservingFunc<T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType: ObservingFunc<T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  fullName: NMF.Expressions.ObservingFunc<T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType.vb: ObservingFunc(Of T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  name.vb: ObservingFunc(Of T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`10
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`10
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`10
  commentId: T:NMF.Expressions.ObservingFunc`10
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`10
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`10
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
  commentId: T:System.Func{`5,`6,`7,`8,`9,`10,`11,`12,`13}
  parent: System
  definition: System.Func`9
  name: Func<T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType: Func<T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  fullName: System.Func<T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType.vb: Func(Of T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  fullName.vb: System.Func(Of T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  name.vb: Func(Of T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  spec.csharp:
  - uid: System.Func`9
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`9
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`9
  commentId: T:System.Func`9
  isExternal: true
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  spec.csharp:
  - uid: System.Func`9
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`9
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc{{T6},{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{`5,`6,`7,`8,`9,`10,`11,`12,`13}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`9
  name: ObservingFunc<T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType: ObservingFunc<T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  fullName: NMF.Expressions.ObservingFunc<T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType.vb: ObservingFunc(Of T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  name.vb: ObservingFunc(Of T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`9
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`9
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`9
  commentId: T:NMF.Expressions.ObservingFunc`9
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`9
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`9
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
  commentId: T:System.Func{`6,`7,`8,`9,`10,`11,`12,`13}
  parent: System
  definition: System.Func`8
  name: Func<T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType: Func<T7, T8, T9, T10, T11, T12, T13, TResult>
  fullName: System.Func<T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType.vb: Func(Of T7, T8, T9, T10, T11, T12, T13, TResult)
  fullName.vb: System.Func(Of T7, T8, T9, T10, T11, T12, T13, TResult)
  name.vb: Func(Of T7, T8, T9, T10, T11, T12, T13, TResult)
  spec.csharp:
  - uid: System.Func`8
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`8
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`8
  commentId: T:System.Func`8
  isExternal: true
  name: Func<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, T7, TResult>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  spec.csharp:
  - uid: System.Func`8
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`8
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc{{T7},{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{`6,`7,`8,`9,`10,`11,`12,`13}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`8
  name: ObservingFunc<T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType: ObservingFunc<T7, T8, T9, T10, T11, T12, T13, TResult>
  fullName: NMF.Expressions.ObservingFunc<T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType.vb: ObservingFunc(Of T7, T8, T9, T10, T11, T12, T13, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T7, T8, T9, T10, T11, T12, T13, TResult)
  name.vb: ObservingFunc(Of T7, T8, T9, T10, T11, T12, T13, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`8
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`8
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`8
  commentId: T:NMF.Expressions.ObservingFunc`8
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`8
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`8
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
  commentId: T:System.Func{`7,`8,`9,`10,`11,`12,`13}
  parent: System
  definition: System.Func`7
  name: Func<T8, T9, T10, T11, T12, T13, TResult>
  nameWithType: Func<T8, T9, T10, T11, T12, T13, TResult>
  fullName: System.Func<T8, T9, T10, T11, T12, T13, TResult>
  nameWithType.vb: Func(Of T8, T9, T10, T11, T12, T13, TResult)
  fullName.vb: System.Func(Of T8, T9, T10, T11, T12, T13, TResult)
  name.vb: Func(Of T8, T9, T10, T11, T12, T13, TResult)
  spec.csharp:
  - uid: System.Func`7
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`7
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`7
  commentId: T:System.Func`7
  isExternal: true
  name: Func<T1, T2, T3, T4, T5, T6, TResult>
  nameWithType: Func<T1, T2, T3, T4, T5, T6, TResult>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, T6, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, TResult)
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, TResult)
  spec.csharp:
  - uid: System.Func`7
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`7
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc{{T8},{T9},{T10},{T11},{T12},{T13},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{`7,`8,`9,`10,`11,`12,`13}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`7
  name: ObservingFunc<T8, T9, T10, T11, T12, T13, TResult>
  nameWithType: ObservingFunc<T8, T9, T10, T11, T12, T13, TResult>
  fullName: NMF.Expressions.ObservingFunc<T8, T9, T10, T11, T12, T13, TResult>
  nameWithType.vb: ObservingFunc(Of T8, T9, T10, T11, T12, T13, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T8, T9, T10, T11, T12, T13, TResult)
  name.vb: ObservingFunc(Of T8, T9, T10, T11, T12, T13, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`7
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`7
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`7
  commentId: T:NMF.Expressions.ObservingFunc`7
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`7
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`7
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T9},{T10},{T11},{T12},{T13},{TResult}}
  commentId: T:System.Func{`8,`9,`10,`11,`12,`13}
  parent: System
  definition: System.Func`6
  name: Func<T9, T10, T11, T12, T13, TResult>
  nameWithType: Func<T9, T10, T11, T12, T13, TResult>
  fullName: System.Func<T9, T10, T11, T12, T13, TResult>
  nameWithType.vb: Func(Of T9, T10, T11, T12, T13, TResult)
  fullName.vb: System.Func(Of T9, T10, T11, T12, T13, TResult)
  name.vb: Func(Of T9, T10, T11, T12, T13, TResult)
  spec.csharp:
  - uid: System.Func`6
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`6
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`6
  commentId: T:System.Func`6
  isExternal: true
  name: Func<T1, T2, T3, T4, T5, TResult>
  nameWithType: Func<T1, T2, T3, T4, T5, TResult>
  fullName: System.Func<T1, T2, T3, T4, T5, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, TResult)
  name.vb: Func(Of T1, T2, T3, T4, T5, TResult)
  spec.csharp:
  - uid: System.Func`6
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`6
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc{{T9},{T10},{T11},{T12},{T13},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{`8,`9,`10,`11,`12,`13}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`6
  name: ObservingFunc<T9, T10, T11, T12, T13, TResult>
  nameWithType: ObservingFunc<T9, T10, T11, T12, T13, TResult>
  fullName: NMF.Expressions.ObservingFunc<T9, T10, T11, T12, T13, TResult>
  nameWithType.vb: ObservingFunc(Of T9, T10, T11, T12, T13, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T9, T10, T11, T12, T13, TResult)
  name.vb: ObservingFunc(Of T9, T10, T11, T12, T13, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`6
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`6
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`6
  commentId: T:NMF.Expressions.ObservingFunc`6
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, T3, T4, T5, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`6
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`6
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T10},{T11},{T12},{T13},{TResult}}
  commentId: T:System.Func{`9,`10,`11,`12,`13}
  parent: System
  definition: System.Func`5
  name: Func<T10, T11, T12, T13, TResult>
  nameWithType: Func<T10, T11, T12, T13, TResult>
  fullName: System.Func<T10, T11, T12, T13, TResult>
  nameWithType.vb: Func(Of T10, T11, T12, T13, TResult)
  fullName.vb: System.Func(Of T10, T11, T12, T13, TResult)
  name.vb: Func(Of T10, T11, T12, T13, TResult)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`5
  commentId: T:System.Func`5
  isExternal: true
  name: Func<T1, T2, T3, T4, TResult>
  nameWithType: Func<T1, T2, T3, T4, TResult>
  fullName: System.Func<T1, T2, T3, T4, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, TResult)
  name.vb: Func(Of T1, T2, T3, T4, TResult)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc{{T10},{T11},{T12},{T13},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{`9,`10,`11,`12,`13}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`5
  name: ObservingFunc<T10, T11, T12, T13, TResult>
  nameWithType: ObservingFunc<T10, T11, T12, T13, TResult>
  fullName: NMF.Expressions.ObservingFunc<T10, T11, T12, T13, TResult>
  nameWithType.vb: ObservingFunc(Of T10, T11, T12, T13, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T10, T11, T12, T13, TResult)
  name.vb: ObservingFunc(Of T10, T11, T12, T13, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`5
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`5
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`5
  commentId: T:NMF.Expressions.ObservingFunc`5
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, T3, T4, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`5
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`5
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T11},{T12},{T13},{TResult}}
  commentId: T:System.Func{`10,`11,`12,`13}
  parent: System
  definition: System.Func`4
  name: Func<T11, T12, T13, TResult>
  nameWithType: Func<T11, T12, T13, TResult>
  fullName: System.Func<T11, T12, T13, TResult>
  nameWithType.vb: Func(Of T11, T12, T13, TResult)
  fullName.vb: System.Func(Of T11, T12, T13, TResult)
  name.vb: Func(Of T11, T12, T13, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`4
  commentId: T:System.Func`4
  isExternal: true
  name: Func<T1, T2, T3, TResult>
  nameWithType: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc{{T11},{T12},{T13},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{`10,`11,`12,`13}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`4
  name: ObservingFunc<T11, T12, T13, TResult>
  nameWithType: ObservingFunc<T11, T12, T13, TResult>
  fullName: NMF.Expressions.ObservingFunc<T11, T12, T13, TResult>
  nameWithType.vb: ObservingFunc(Of T11, T12, T13, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T11, T12, T13, TResult)
  name.vb: ObservingFunc(Of T11, T12, T13, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`4
  commentId: T:NMF.Expressions.ObservingFunc`4
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, T3, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T12},{T13},{TResult}}
  commentId: T:System.Func{`11,`12,`13}
  parent: System
  definition: System.Func`3
  name: Func<T12, T13, TResult>
  nameWithType: Func<T12, T13, TResult>
  fullName: System.Func<T12, T13, TResult>
  nameWithType.vb: Func(Of T12, T13, TResult)
  fullName.vb: System.Func(Of T12, T13, TResult)
  name.vb: Func(Of T12, T13, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc{{T12},{T13},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{`11,`12,`13}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`3
  name: ObservingFunc<T12, T13, TResult>
  nameWithType: ObservingFunc<T12, T13, TResult>
  fullName: NMF.Expressions.ObservingFunc<T12, T13, TResult>
  nameWithType.vb: ObservingFunc(Of T12, T13, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T12, T13, TResult)
  name.vb: ObservingFunc(Of T12, T13, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`3
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`3
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`3
  commentId: T:NMF.Expressions.ObservingFunc`3
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, TResult>
  nameWithType: ObservingFunc<T1, T2, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult)
  name.vb: ObservingFunc(Of T1, T2, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`3
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`3
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{T13},{TResult}}
  commentId: T:System.Func{`12,`13}
  parent: System
  definition: System.Func`2
  name: Func<T13, TResult>
  nameWithType: Func<T13, TResult>
  fullName: System.Func<T13, TResult>
  nameWithType.vb: Func(Of T13, TResult)
  fullName.vb: System.Func(Of T13, TResult)
  name.vb: Func(Of T13, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc{{T13},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{`12,`13}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`2
  name: ObservingFunc<T13, TResult>
  nameWithType: ObservingFunc<T13, TResult>
  fullName: NMF.Expressions.ObservingFunc<T13, TResult>
  nameWithType.vb: ObservingFunc(Of T13, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T13, TResult)
  name.vb: ObservingFunc(Of T13, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`2
  commentId: T:NMF.Expressions.ObservingFunc`2
  parent: NMF.Expressions
  name: ObservingFunc<T1, TResult>
  nameWithType: ObservingFunc<T1, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>
  nameWithType.vb: ObservingFunc(Of T1, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult)
  name.vb: ObservingFunc(Of T1, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`14.InvokeReversable*
  commentId: Overload:NMF.Expressions.ObservingFunc`14.InvokeReversable
  name: InvokeReversable
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.InvokeReversable
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.InvokeReversable
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).InvokeReversable
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).InvokeReversable
- uid: NMF.Expressions.INotifyReversableValue{{TResult}}
  commentId: T:NMF.Expressions.INotifyReversableValue{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyReversableValue`1
  name: INotifyReversableValue<TResult>
  nameWithType: INotifyReversableValue<TResult>
  fullName: NMF.Expressions.INotifyReversableValue<TResult>
  nameWithType.vb: INotifyReversableValue(Of TResult)
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of TResult)
  name.vb: INotifyReversableValue(Of TResult)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    nameWithType: INotifyReversableValue
    fullName: NMF.Expressions.INotifyReversableValue
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    nameWithType: INotifyReversableValue
    fullName: NMF.Expressions.INotifyReversableValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyReversableValue`1
  commentId: T:NMF.Expressions.INotifyReversableValue`1
  name: INotifyReversableValue<T>
  nameWithType: INotifyReversableValue<T>
  fullName: NMF.Expressions.INotifyReversableValue<T>
  nameWithType.vb: INotifyReversableValue(Of T)
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of T)
  name.vb: INotifyReversableValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    nameWithType: INotifyReversableValue
    fullName: NMF.Expressions.INotifyReversableValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    nameWithType: INotifyReversableValue
    fullName: NMF.Expressions.INotifyReversableValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`14.op_Implicit*
  commentId: Overload:NMF.Expressions.ObservingFunc`14.op_Implicit
  name: Implicit
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.Implicit
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.Implicit
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).Widening
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).Widening
  name.vb: Widening
- uid: NMF.Expressions.ObservingFunc`14
  commentId: T:NMF.Expressions.ObservingFunc`14
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`14
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`14
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T8
    nameWithType: T8
    fullName: T8
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T9
    nameWithType: T9
    fullName: T9
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T10
    nameWithType: T10
    fullName: T10
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T11
    nameWithType: T11
    fullName: T11
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T12
    nameWithType: T12
    fullName: T12
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T13
    nameWithType: T13
    fullName: T13
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`14.FromExpression*
  commentId: Overload:NMF.Expressions.ObservingFunc`14.FromExpression
  name: FromExpression
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.FromExpression
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.FromExpression
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).FromExpression
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).FromExpression
- uid: NMF.Expressions.ObservingFunc`14.IsReversable*
  commentId: Overload:NMF.Expressions.ObservingFunc`14.IsReversable
  name: IsReversable
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.IsReversable
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>.IsReversable
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).IsReversable
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult).IsReversable
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
