### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.ReversableObservingFunc`2
  commentId: T:NMF.Expressions.ReversableObservingFunc`2
  id: ReversableObservingFunc`2
  parent: NMF.Expressions
  children:
  - NMF.Expressions.ReversableObservingFunc`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Action{`0,`1})
  - NMF.Expressions.ReversableObservingFunc`2.InvokeReversable(NMF.Expressions.INotifyValue{`0})
  - NMF.Expressions.ReversableObservingFunc`2.InvokeReversable(`0)
  - NMF.Expressions.ReversableObservingFunc`2.IsReversable
  - NMF.Expressions.ReversableObservingFunc`2.UpdateHandler
  langs:
  - csharp
  - vb
  name: ReversableObservingFunc<T1, TResult>
  nameWithType: ReversableObservingFunc<T1, TResult>
  fullName: NMF.Expressions.ReversableObservingFunc<T1, TResult>
  type: Class
  source:
    remote:
      path: Expressions/Expressions/Public/ReversableFunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ReversableObservingFunc
    path: src/Expressions/Expressions/Public/ReversableFunctionTypes.cs
    startLine: 11
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Represents an observable expression with 1 input parameters and a custom update handler
  example: []
  syntax:
    content: 'public class ReversableObservingFunc<T1, TResult> : ObservingFunc<T1, TResult>'
    typeParameters:
    - id: T1
      description: The type of the input parameter 1
    - id: TResult
      description: The type of the result
    content.vb: Public Class ReversableObservingFunc(Of T1, TResult) Inherits ObservingFunc(Of T1, TResult)
  inheritance:
  - System.Object
  - NMF.Expressions.ObservingFunc{{T1},{TResult}}
  inheritedMembers:
  - NMF.Expressions.ObservingFunc{{T1},{TResult}}.Evaluate({T1})
  - NMF.Expressions.ObservingFunc{{T1},{TResult}}.Observe({T1})
  - NMF.Expressions.ObservingFunc{{T1},{TResult}}.Observe(NMF.Expressions.INotifyValue{{T1}})
  - NMF.Expressions.ObservingFunc{{T1},{TResult}}.InvokeReversable({T1})
  - NMF.Expressions.ObservingFunc{{T1},{TResult}}.InvokeReversable(NMF.Expressions.INotifyValue{{T1}})
  - NMF.Expressions.ObservingFunc{{T1},{TResult}}.FromExpression(System.Linq.Expressions.Expression{System.Func{{T1},{TResult}}})
  - NMF.Expressions.ObservingFunc{{T1},{TResult}}.IsReversable
  - NMF.Expressions.ObservingFunc{{T1},{TResult}}.ToString
  - NMF.Expressions.ObservingFunc{{T1},{TResult}}.Expression
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - NMF.Expressions.ReversableObservingFunc`2.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  nameWithType.vb: ReversableObservingFunc(Of T1, TResult)
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, TResult)
  name.vb: ReversableObservingFunc(Of T1, TResult)
- uid: NMF.Expressions.ReversableObservingFunc`2.UpdateHandler
  commentId: P:NMF.Expressions.ReversableObservingFunc`2.UpdateHandler
  id: UpdateHandler
  parent: NMF.Expressions.ReversableObservingFunc`2
  langs:
  - csharp
  - vb
  name: UpdateHandler
  nameWithType: ReversableObservingFunc<T1, TResult>.UpdateHandler
  fullName: NMF.Expressions.ReversableObservingFunc<T1, TResult>.UpdateHandler
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/ReversableFunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: UpdateHandler
    path: src/Expressions/Expressions/Public/ReversableFunctionTypes.cs
    startLine: 16
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: The method that handles value updates for this func
  example: []
  syntax:
    content: public Action<T1, TResult> UpdateHandler { get; }
    parameters: []
    return:
      type: System.Action{{T1},{TResult}}
    content.vb: Public Property UpdateHandler As Action(Of T1, TResult)
  overload: NMF.Expressions.ReversableObservingFunc`2.UpdateHandler*
  nameWithType.vb: ReversableObservingFunc(Of T1, TResult).UpdateHandler
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, TResult).UpdateHandler
- uid: NMF.Expressions.ReversableObservingFunc`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Action{`0,`1})
  commentId: M:NMF.Expressions.ReversableObservingFunc`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Action{`0,`1})
  id: '#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Action{`0,`1})'
  parent: NMF.Expressions.ReversableObservingFunc`2
  langs:
  - csharp
  - vb
  name: ReversableObservingFunc(Expression<Func<T1, TResult>>, Action<T1, TResult>)
  nameWithType: ReversableObservingFunc<T1, TResult>.ReversableObservingFunc(Expression<Func<T1, TResult>>, Action<T1, TResult>)
  fullName: NMF.Expressions.ReversableObservingFunc<T1, TResult>.ReversableObservingFunc(System.Linq.Expressions.Expression<System.Func<T1, TResult>>, System.Action<T1, TResult>)
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions/Public/ReversableFunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions/Public/ReversableFunctionTypes.cs
    startLine: 23
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates a new observable expression for the given expression
  example: []
  syntax:
    content: public ReversableObservingFunc(Expression<Func<T1, TResult>> expression, Action<T1, TResult> updateHandler)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{TResult}}}
      description: The expression that is to be observed
    - id: updateHandler
      type: System.Action{{T1},{TResult}}
      description: A function that is executed when the result is changed
    content.vb: Public Sub New(expression As Expression(Of Func(Of T1, TResult)), updateHandler As Action(Of T1, TResult))
  overload: NMF.Expressions.ReversableObservingFunc`2.#ctor*
  nameWithType.vb: ReversableObservingFunc(Of T1, TResult).New(Expression(Of Func(Of T1, TResult)), Action(Of T1, TResult))
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, TResult).New(System.Linq.Expressions.Expression(Of System.Func(Of T1, TResult)), System.Action(Of T1, TResult))
  name.vb: New(Expression(Of Func(Of T1, TResult)), Action(Of T1, TResult))
- uid: NMF.Expressions.ReversableObservingFunc`2.InvokeReversable(`0)
  commentId: M:NMF.Expressions.ReversableObservingFunc`2.InvokeReversable(`0)
  id: InvokeReversable(`0)
  parent: NMF.Expressions.ReversableObservingFunc`2
  langs:
  - csharp
  - vb
  name: InvokeReversable(T1)
  nameWithType: ReversableObservingFunc<T1, TResult>.InvokeReversable(T1)
  fullName: NMF.Expressions.ReversableObservingFunc<T1, TResult>.InvokeReversable(T1)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/ReversableFunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: InvokeReversable
    path: src/Expressions/Expressions/Public/ReversableFunctionTypes.cs
    startLine: 36
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression
  example: []
  syntax:
    content: public override INotifyReversableValue<TResult> InvokeReversable(T1 in1)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    return:
      type: NMF.Expressions.INotifyReversableValue{{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Overrides Function InvokeReversable(in1 As T1) As INotifyReversableValue(Of TResult)
  overridden: NMF.Expressions.ObservingFunc{{T1},{TResult}}.InvokeReversable({T1})
  overload: NMF.Expressions.ReversableObservingFunc`2.InvokeReversable*
  nameWithType.vb: ReversableObservingFunc(Of T1, TResult).InvokeReversable(T1)
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, TResult).InvokeReversable(T1)
- uid: NMF.Expressions.ReversableObservingFunc`2.InvokeReversable(NMF.Expressions.INotifyValue{`0})
  commentId: M:NMF.Expressions.ReversableObservingFunc`2.InvokeReversable(NMF.Expressions.INotifyValue{`0})
  id: InvokeReversable(NMF.Expressions.INotifyValue{`0})
  parent: NMF.Expressions.ReversableObservingFunc`2
  langs:
  - csharp
  - vb
  name: InvokeReversable(INotifyValue<T1>)
  nameWithType: ReversableObservingFunc<T1, TResult>.InvokeReversable(INotifyValue<T1>)
  fullName: NMF.Expressions.ReversableObservingFunc<T1, TResult>.InvokeReversable(NMF.Expressions.INotifyValue<T1>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/ReversableFunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: InvokeReversable
    path: src/Expressions/Expressions/Public/ReversableFunctionTypes.cs
    startLine: 50
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression
  example: []
  syntax:
    content: public override INotifyReversableValue<TResult> InvokeReversable(INotifyValue<T1> in1)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    return:
      type: NMF.Expressions.INotifyReversableValue{{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Overrides Function InvokeReversable(in1 As INotifyValue(Of T1)) As INotifyReversableValue(Of TResult)
  overridden: NMF.Expressions.ObservingFunc{{T1},{TResult}}.InvokeReversable(NMF.Expressions.INotifyValue{{T1}})
  overload: NMF.Expressions.ReversableObservingFunc`2.InvokeReversable*
  nameWithType.vb: ReversableObservingFunc(Of T1, TResult).InvokeReversable(INotifyValue(Of T1))
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, TResult).InvokeReversable(NMF.Expressions.INotifyValue(Of T1))
  name.vb: InvokeReversable(INotifyValue(Of T1))
- uid: NMF.Expressions.ReversableObservingFunc`2.IsReversable
  commentId: P:NMF.Expressions.ReversableObservingFunc`2.IsReversable
  id: IsReversable
  parent: NMF.Expressions.ReversableObservingFunc`2
  langs:
  - csharp
  - vb
  name: IsReversable
  nameWithType: ReversableObservingFunc<T1, TResult>.IsReversable
  fullName: NMF.Expressions.ReversableObservingFunc<T1, TResult>.IsReversable
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/ReversableFunctionTypes.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsReversable
    path: src/Expressions/Expressions/Public/ReversableFunctionTypes.cs
    startLine: 62
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Gets a value indicating whether this function can be reversed
  example: []
  syntax:
    content: public override bool IsReversable { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property IsReversable As Boolean
  overridden: NMF.Expressions.ObservingFunc{{T1},{TResult}}.IsReversable
  overload: NMF.Expressions.ReversableObservingFunc`2.IsReversable*
  nameWithType.vb: ReversableObservingFunc(Of T1, TResult).IsReversable
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, TResult).IsReversable
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  href: NMF.html
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NMF.Expressions.ObservingFunc{{T1},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{``0,``1}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`2
  href: NMF.Expressions.ObservingFunc-2.html
  name: ObservingFunc<T1, TResult>
  nameWithType: ObservingFunc<T1, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>
  nameWithType.vb: ObservingFunc(Of T1, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult)
  name.vb: ObservingFunc(Of T1, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-2.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T1},{TResult}}.Evaluate({T1})
  commentId: M:NMF.Expressions.ObservingFunc{`0,`1}.Evaluate(`0)
  parent: NMF.Expressions.ObservingFunc{{T1},{TResult}}
  definition: NMF.Expressions.ObservingFunc`2.Evaluate(`0)
  href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_Evaluate__0_
  name: Evaluate(T1)
  nameWithType: ObservingFunc<T1, TResult>.Evaluate(T1)
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.Evaluate(T1)
  nameWithType.vb: ObservingFunc(Of T1, TResult).Evaluate(T1)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).Evaluate(T1)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc{`0,`1}.Evaluate(`0)
    name: Evaluate
    href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_Evaluate__0_
  - name: (
  - name: T1
  - name: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc{`0,`1}.Evaluate(`0)
    name: Evaluate
    href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_Evaluate__0_
  - name: (
  - name: T1
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T1},{TResult}}.Observe({T1})
  commentId: M:NMF.Expressions.ObservingFunc{`0,`1}.Observe(`0)
  parent: NMF.Expressions.ObservingFunc{{T1},{TResult}}
  definition: NMF.Expressions.ObservingFunc`2.Observe(`0)
  href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_Observe__0_
  name: Observe(T1)
  nameWithType: ObservingFunc<T1, TResult>.Observe(T1)
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.Observe(T1)
  nameWithType.vb: ObservingFunc(Of T1, TResult).Observe(T1)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).Observe(T1)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc{`0,`1}.Observe(`0)
    name: Observe
    href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_Observe__0_
  - name: (
  - name: T1
  - name: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc{`0,`1}.Observe(`0)
    name: Observe
    href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_Observe__0_
  - name: (
  - name: T1
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T1},{TResult}}.Observe(NMF.Expressions.INotifyValue{{T1}})
  commentId: M:NMF.Expressions.ObservingFunc{`0,`1}.Observe(NMF.Expressions.INotifyValue{`0})
  parent: NMF.Expressions.ObservingFunc{{T1},{TResult}}
  definition: NMF.Expressions.ObservingFunc`2.Observe(NMF.Expressions.INotifyValue{`0})
  href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_Observe_NMF_Expressions_INotifyValue__0__
  name: Observe(INotifyValue<T1>)
  nameWithType: ObservingFunc<T1, TResult>.Observe(INotifyValue<T1>)
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.Observe(NMF.Expressions.INotifyValue<T1>)
  nameWithType.vb: ObservingFunc(Of T1, TResult).Observe(INotifyValue(Of T1))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).Observe(NMF.Expressions.INotifyValue(Of T1))
  name.vb: Observe(INotifyValue(Of T1))
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc{`0,`1}.Observe(NMF.Expressions.INotifyValue{`0})
    name: Observe
    href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_Observe_NMF_Expressions_INotifyValue__0__
  - name: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T1
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc{`0,`1}.Observe(NMF.Expressions.INotifyValue{`0})
    name: Observe
    href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_Observe_NMF_Expressions_INotifyValue__0__
  - name: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: )
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T1},{TResult}}.InvokeReversable({T1})
  commentId: M:NMF.Expressions.ObservingFunc{`0,`1}.InvokeReversable(`0)
  parent: NMF.Expressions.ObservingFunc{{T1},{TResult}}
  definition: NMF.Expressions.ObservingFunc`2.InvokeReversable(`0)
  href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_InvokeReversable__0_
  name: InvokeReversable(T1)
  nameWithType: ObservingFunc<T1, TResult>.InvokeReversable(T1)
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.InvokeReversable(T1)
  nameWithType.vb: ObservingFunc(Of T1, TResult).InvokeReversable(T1)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).InvokeReversable(T1)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc{`0,`1}.InvokeReversable(`0)
    name: InvokeReversable
    href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_InvokeReversable__0_
  - name: (
  - name: T1
  - name: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc{`0,`1}.InvokeReversable(`0)
    name: InvokeReversable
    href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_InvokeReversable__0_
  - name: (
  - name: T1
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T1},{TResult}}.InvokeReversable(NMF.Expressions.INotifyValue{{T1}})
  commentId: M:NMF.Expressions.ObservingFunc{`0,`1}.InvokeReversable(NMF.Expressions.INotifyValue{`0})
  parent: NMF.Expressions.ObservingFunc{{T1},{TResult}}
  definition: NMF.Expressions.ObservingFunc`2.InvokeReversable(NMF.Expressions.INotifyValue{`0})
  href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_InvokeReversable_NMF_Expressions_INotifyValue__0__
  name: InvokeReversable(INotifyValue<T1>)
  nameWithType: ObservingFunc<T1, TResult>.InvokeReversable(INotifyValue<T1>)
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.InvokeReversable(NMF.Expressions.INotifyValue<T1>)
  nameWithType.vb: ObservingFunc(Of T1, TResult).InvokeReversable(INotifyValue(Of T1))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).InvokeReversable(NMF.Expressions.INotifyValue(Of T1))
  name.vb: InvokeReversable(INotifyValue(Of T1))
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc{`0,`1}.InvokeReversable(NMF.Expressions.INotifyValue{`0})
    name: InvokeReversable
    href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_InvokeReversable_NMF_Expressions_INotifyValue__0__
  - name: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T1
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc{`0,`1}.InvokeReversable(NMF.Expressions.INotifyValue{`0})
    name: InvokeReversable
    href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_InvokeReversable_NMF_Expressions_INotifyValue__0__
  - name: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: )
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T1},{TResult}}.FromExpression(System.Linq.Expressions.Expression{System.Func{{T1},{TResult}}})
  commentId: M:NMF.Expressions.ObservingFunc{`0,`1}.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1}})
  parent: NMF.Expressions.ObservingFunc{{T1},{TResult}}
  definition: NMF.Expressions.ObservingFunc`2.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1}})
  href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_FromExpression_System_Linq_Expressions_Expression_System_Func__0__1___
  name: FromExpression(Expression<Func<T1, TResult>>)
  nameWithType: ObservingFunc<T1, TResult>.FromExpression(Expression<Func<T1, TResult>>)
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.FromExpression(System.Linq.Expressions.Expression<System.Func<T1, TResult>>)
  nameWithType.vb: ObservingFunc(Of T1, TResult).FromExpression(Expression(Of Func(Of T1, TResult)))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).FromExpression(System.Linq.Expressions.Expression(Of System.Func(Of T1, TResult)))
  name.vb: FromExpression(Expression(Of Func(Of T1, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc{`0,`1}.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1}})
    name: FromExpression
    href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_FromExpression_System_Linq_Expressions_Expression_System_Func__0__1___
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc{`0,`1}.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1}})
    name: FromExpression
    href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_FromExpression_System_Linq_Expressions_Expression_System_Func__0__1___
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T1},{TResult}}.IsReversable
  commentId: P:NMF.Expressions.ObservingFunc{`0,`1}.IsReversable
  parent: NMF.Expressions.ObservingFunc{{T1},{TResult}}
  definition: NMF.Expressions.ObservingFunc`2.IsReversable
  href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_IsReversable
  name: IsReversable
  nameWithType: ObservingFunc<T1, TResult>.IsReversable
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.IsReversable
  nameWithType.vb: ObservingFunc(Of T1, TResult).IsReversable
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).IsReversable
- uid: NMF.Expressions.ObservingFunc{{T1},{TResult}}.ToString
  commentId: M:NMF.Expressions.ObservingFunc{`0,`1}.ToString
  parent: NMF.Expressions.ObservingFunc{{T1},{TResult}}
  definition: NMF.Expressions.ObservingFunc`2.ToString
  href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_ToString
  name: ToString()
  nameWithType: ObservingFunc<T1, TResult>.ToString()
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.ToString()
  nameWithType.vb: ObservingFunc(Of T1, TResult).ToString()
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).ToString()
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc{`0,`1}.ToString
    name: ToString
    href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_ToString
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc{`0,`1}.ToString
    name: ToString
    href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_ToString
  - name: (
  - name: )
- uid: NMF.Expressions.ObservingFunc{{T1},{TResult}}.Expression
  commentId: P:NMF.Expressions.ObservingFunc{`0,`1}.Expression
  parent: NMF.Expressions.ObservingFunc{{T1},{TResult}}
  definition: NMF.Expressions.ObservingFunc`2.Expression
  href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_Expression
  name: Expression
  nameWithType: ObservingFunc<T1, TResult>.Expression
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.Expression
  nameWithType.vb: ObservingFunc(Of T1, TResult).Expression
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).Expression
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: NMF.Expressions.ReversableObservingFunc`2.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  name: AsOne<ReversableObservingFunc<T1, TResult>>(ReversableObservingFunc<T1, TResult>)
  nameWithType: ExpressionExtensions.AsOne<ReversableObservingFunc<T1, TResult>>(ReversableObservingFunc<T1, TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<NMF.Expressions.ReversableObservingFunc<T1, TResult>>(NMF.Expressions.ReversableObservingFunc<T1, TResult>)
  nameWithType.vb: ExpressionExtensions.AsOne(Of ReversableObservingFunc(Of T1, TResult))(ReversableObservingFunc(Of T1, TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of NMF.Expressions.ReversableObservingFunc(Of T1, TResult))(NMF.Expressions.ReversableObservingFunc(Of T1, TResult))
  name.vb: AsOne(Of ReversableObservingFunc(Of T1, TResult))(ReversableObservingFunc(Of T1, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.ReversableObservingFunc{`0,`1})
    name: AsOne
    href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  - name: <
  - uid: NMF.Expressions.ReversableObservingFunc`2
    name: ReversableObservingFunc
    href: NMF.Expressions.ReversableObservingFunc-2.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: (
  - uid: NMF.Expressions.ReversableObservingFunc`2
    name: ReversableObservingFunc
    href: NMF.Expressions.ReversableObservingFunc-2.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.ReversableObservingFunc{`0,`1})
    name: AsOne
    href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.ReversableObservingFunc`2
    name: ReversableObservingFunc
    href: NMF.Expressions.ReversableObservingFunc-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: (
  - uid: NMF.Expressions.ReversableObservingFunc`2
    name: ReversableObservingFunc
    href: NMF.Expressions.ReversableObservingFunc-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.ObservingFunc`2
  commentId: T:NMF.Expressions.ObservingFunc`2
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-2.html
  name: ObservingFunc<T1, TResult>
  nameWithType: ObservingFunc<T1, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>
  nameWithType.vb: ObservingFunc(Of T1, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult)
  name.vb: ObservingFunc(Of T1, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-2.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`2.Evaluate(`0)
  commentId: M:NMF.Expressions.ObservingFunc`2.Evaluate(`0)
  href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_Evaluate__0_
  name: Evaluate(T1)
  nameWithType: ObservingFunc<T1, TResult>.Evaluate(T1)
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.Evaluate(T1)
  nameWithType.vb: ObservingFunc(Of T1, TResult).Evaluate(T1)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).Evaluate(T1)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`2.Evaluate(`0)
    name: Evaluate
    href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_Evaluate__0_
  - name: (
  - name: T1
  - name: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`2.Evaluate(`0)
    name: Evaluate
    href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_Evaluate__0_
  - name: (
  - name: T1
  - name: )
- uid: NMF.Expressions.ObservingFunc`2.Observe(`0)
  commentId: M:NMF.Expressions.ObservingFunc`2.Observe(`0)
  href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_Observe__0_
  name: Observe(T1)
  nameWithType: ObservingFunc<T1, TResult>.Observe(T1)
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.Observe(T1)
  nameWithType.vb: ObservingFunc(Of T1, TResult).Observe(T1)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).Observe(T1)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`2.Observe(`0)
    name: Observe
    href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_Observe__0_
  - name: (
  - name: T1
  - name: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`2.Observe(`0)
    name: Observe
    href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_Observe__0_
  - name: (
  - name: T1
  - name: )
- uid: NMF.Expressions.ObservingFunc`2.Observe(NMF.Expressions.INotifyValue{`0})
  commentId: M:NMF.Expressions.ObservingFunc`2.Observe(NMF.Expressions.INotifyValue{`0})
  href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_Observe_NMF_Expressions_INotifyValue__0__
  name: Observe(INotifyValue<T1>)
  nameWithType: ObservingFunc<T1, TResult>.Observe(INotifyValue<T1>)
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.Observe(NMF.Expressions.INotifyValue<T1>)
  nameWithType.vb: ObservingFunc(Of T1, TResult).Observe(INotifyValue(Of T1))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).Observe(NMF.Expressions.INotifyValue(Of T1))
  name.vb: Observe(INotifyValue(Of T1))
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`2.Observe(NMF.Expressions.INotifyValue{`0})
    name: Observe
    href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_Observe_NMF_Expressions_INotifyValue__0__
  - name: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T1
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`2.Observe(NMF.Expressions.INotifyValue{`0})
    name: Observe
    href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_Observe_NMF_Expressions_INotifyValue__0__
  - name: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: )
  - name: )
- uid: NMF.Expressions.ObservingFunc`2.InvokeReversable(`0)
  commentId: M:NMF.Expressions.ObservingFunc`2.InvokeReversable(`0)
  href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_InvokeReversable__0_
  name: InvokeReversable(T1)
  nameWithType: ObservingFunc<T1, TResult>.InvokeReversable(T1)
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.InvokeReversable(T1)
  nameWithType.vb: ObservingFunc(Of T1, TResult).InvokeReversable(T1)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).InvokeReversable(T1)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`2.InvokeReversable(`0)
    name: InvokeReversable
    href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_InvokeReversable__0_
  - name: (
  - name: T1
  - name: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`2.InvokeReversable(`0)
    name: InvokeReversable
    href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_InvokeReversable__0_
  - name: (
  - name: T1
  - name: )
- uid: NMF.Expressions.ObservingFunc`2.InvokeReversable(NMF.Expressions.INotifyValue{`0})
  commentId: M:NMF.Expressions.ObservingFunc`2.InvokeReversable(NMF.Expressions.INotifyValue{`0})
  href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_InvokeReversable_NMF_Expressions_INotifyValue__0__
  name: InvokeReversable(INotifyValue<T1>)
  nameWithType: ObservingFunc<T1, TResult>.InvokeReversable(INotifyValue<T1>)
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.InvokeReversable(NMF.Expressions.INotifyValue<T1>)
  nameWithType.vb: ObservingFunc(Of T1, TResult).InvokeReversable(INotifyValue(Of T1))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).InvokeReversable(NMF.Expressions.INotifyValue(Of T1))
  name.vb: InvokeReversable(INotifyValue(Of T1))
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`2.InvokeReversable(NMF.Expressions.INotifyValue{`0})
    name: InvokeReversable
    href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_InvokeReversable_NMF_Expressions_INotifyValue__0__
  - name: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T1
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`2.InvokeReversable(NMF.Expressions.INotifyValue{`0})
    name: InvokeReversable
    href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_InvokeReversable_NMF_Expressions_INotifyValue__0__
  - name: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: )
  - name: )
- uid: NMF.Expressions.ObservingFunc`2.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1}})
  commentId: M:NMF.Expressions.ObservingFunc`2.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1}})
  isExternal: true
  href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_FromExpression_System_Linq_Expressions_Expression_System_Func__0__1___
  name: FromExpression(Expression<Func<T1, TResult>>)
  nameWithType: ObservingFunc<T1, TResult>.FromExpression(Expression<Func<T1, TResult>>)
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.FromExpression(System.Linq.Expressions.Expression<System.Func<T1, TResult>>)
  nameWithType.vb: ObservingFunc(Of T1, TResult).FromExpression(Expression(Of Func(Of T1, TResult)))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).FromExpression(System.Linq.Expressions.Expression(Of System.Func(Of T1, TResult)))
  name.vb: FromExpression(Expression(Of Func(Of T1, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`2.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1}})
    name: FromExpression
    href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_FromExpression_System_Linq_Expressions_Expression_System_Func__0__1___
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`2.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1}})
    name: FromExpression
    href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_FromExpression_System_Linq_Expressions_Expression_System_Func__0__1___
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.ObservingFunc`2.IsReversable
  commentId: P:NMF.Expressions.ObservingFunc`2.IsReversable
  href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_IsReversable
  name: IsReversable
  nameWithType: ObservingFunc<T1, TResult>.IsReversable
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.IsReversable
  nameWithType.vb: ObservingFunc(Of T1, TResult).IsReversable
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).IsReversable
- uid: NMF.Expressions.ObservingFunc`2.ToString
  commentId: M:NMF.Expressions.ObservingFunc`2.ToString
  href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_ToString
  name: ToString()
  nameWithType: ObservingFunc<T1, TResult>.ToString()
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.ToString()
  nameWithType.vb: ObservingFunc(Of T1, TResult).ToString()
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).ToString()
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`2.ToString
    name: ToString
    href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_ToString
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`2.ToString
    name: ToString
    href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_ToString
  - name: (
  - name: )
- uid: NMF.Expressions.ObservingFunc`2.Expression
  commentId: P:NMF.Expressions.ObservingFunc`2.Expression
  href: NMF.Expressions.ObservingFunc-2.html#NMF_Expressions_ObservingFunc_2_Expression
  name: Expression
  nameWithType: ObservingFunc<T1, TResult>.Expression
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>.Expression
  nameWithType.vb: ObservingFunc(Of T1, TResult).Expression
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult).Expression
- uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  name: AsOne<T>(T)
  nameWithType: ExpressionExtensions.AsOne<T>(T)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<T>(T)
  nameWithType.vb: ExpressionExtensions.AsOne(Of T)(T)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of T)(T)
  name.vb: AsOne(Of T)(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
    href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
    href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  parent: NMF.Expressions.Linq
  href: NMF.Expressions.Linq.ExpressionExtensions.html
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  href: NMF.html
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
    href: NMF.Expressions.Linq.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
    href: NMF.Expressions.Linq.html
- uid: NMF.Expressions.ReversableObservingFunc`2.UpdateHandler*
  commentId: Overload:NMF.Expressions.ReversableObservingFunc`2.UpdateHandler
  href: NMF.Expressions.ReversableObservingFunc-2.html#NMF_Expressions_ReversableObservingFunc_2_UpdateHandler
  name: UpdateHandler
  nameWithType: ReversableObservingFunc<T1, TResult>.UpdateHandler
  fullName: NMF.Expressions.ReversableObservingFunc<T1, TResult>.UpdateHandler
  nameWithType.vb: ReversableObservingFunc(Of T1, TResult).UpdateHandler
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, TResult).UpdateHandler
- uid: System.Action{{T1},{TResult}}
  commentId: T:System.Action{``0,``1}
  parent: System
  definition: System.Action`2
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<T1, TResult>
  nameWithType: Action<T1, TResult>
  fullName: System.Action<T1, TResult>
  nameWithType.vb: Action(Of T1, TResult)
  fullName.vb: System.Action(Of T1, TResult)
  name.vb: Action(Of T1, TResult)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-2
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-2
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: NMF.Expressions.ReversableObservingFunc`2.#ctor*
  commentId: Overload:NMF.Expressions.ReversableObservingFunc`2.#ctor
  href: NMF.Expressions.ReversableObservingFunc-2.html#NMF_Expressions_ReversableObservingFunc_2__ctor_System_Linq_Expressions_Expression_System_Func__0__1___System_Action__0__1__
  name: ReversableObservingFunc
  nameWithType: ReversableObservingFunc<T1, TResult>.ReversableObservingFunc
  fullName: NMF.Expressions.ReversableObservingFunc<T1, TResult>.ReversableObservingFunc
  nameWithType.vb: ReversableObservingFunc(Of T1, TResult).New
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, TResult).New
  name.vb: New
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T1, TResult>>
  nameWithType: Expression<Func<T1, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, TResult>>
  nameWithType.vb: Expression(Of Func(Of T1, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, TResult))
  name.vb: Expression(Of Func(Of T1, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - name: TDelegate
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
- uid: NMF.Expressions.ReversableObservingFunc`2.InvokeReversable*
  commentId: Overload:NMF.Expressions.ReversableObservingFunc`2.InvokeReversable
  href: NMF.Expressions.ReversableObservingFunc-2.html#NMF_Expressions_ReversableObservingFunc_2_InvokeReversable__0_
  name: InvokeReversable
  nameWithType: ReversableObservingFunc<T1, TResult>.InvokeReversable
  fullName: NMF.Expressions.ReversableObservingFunc<T1, TResult>.InvokeReversable
  nameWithType.vb: ReversableObservingFunc(Of T1, TResult).InvokeReversable
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, TResult).InvokeReversable
- uid: '{T1}'
  commentId: '!:T1'
  definition: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: NMF.Expressions.INotifyReversableValue{{TResult}}
  commentId: T:NMF.Expressions.INotifyReversableValue{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyReversableValue`1
  href: NMF.Expressions.INotifyReversableValue-1.html
  name: INotifyReversableValue<TResult>
  nameWithType: INotifyReversableValue<TResult>
  fullName: NMF.Expressions.INotifyReversableValue<TResult>
  nameWithType.vb: INotifyReversableValue(Of TResult)
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of TResult)
  name.vb: INotifyReversableValue(Of TResult)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    href: NMF.Expressions.INotifyReversableValue-1.html
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    href: NMF.Expressions.INotifyReversableValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: NMF.Expressions.INotifyReversableValue`1
  commentId: T:NMF.Expressions.INotifyReversableValue`1
  href: NMF.Expressions.INotifyReversableValue-1.html
  name: INotifyReversableValue<T>
  nameWithType: INotifyReversableValue<T>
  fullName: NMF.Expressions.INotifyReversableValue<T>
  nameWithType.vb: INotifyReversableValue(Of T)
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of T)
  name.vb: INotifyReversableValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    href: NMF.Expressions.INotifyReversableValue-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    href: NMF.Expressions.INotifyReversableValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifyValue{{T1}}
  commentId: T:NMF.Expressions.INotifyValue{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<T1>
  nameWithType: INotifyValue<T1>
  fullName: NMF.Expressions.INotifyValue<T1>
  nameWithType.vb: INotifyValue(Of T1)
  fullName.vb: NMF.Expressions.INotifyValue(Of T1)
  name.vb: INotifyValue(Of T1)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T1
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: )
- uid: NMF.Expressions.INotifyValue`1
  commentId: T:NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<T>
  nameWithType: INotifyValue<T>
  fullName: NMF.Expressions.INotifyValue<T>
  nameWithType.vb: INotifyValue(Of T)
  fullName.vb: NMF.Expressions.INotifyValue(Of T)
  name.vb: INotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.ReversableObservingFunc`2.IsReversable*
  commentId: Overload:NMF.Expressions.ReversableObservingFunc`2.IsReversable
  href: NMF.Expressions.ReversableObservingFunc-2.html#NMF_Expressions_ReversableObservingFunc_2_IsReversable
  name: IsReversable
  nameWithType: ReversableObservingFunc<T1, TResult>.IsReversable
  fullName: NMF.Expressions.ReversableObservingFunc<T1, TResult>.IsReversable
  nameWithType.vb: ReversableObservingFunc(Of T1, TResult).IsReversable
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, TResult).IsReversable
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
