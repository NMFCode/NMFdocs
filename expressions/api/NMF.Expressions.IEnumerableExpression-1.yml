### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.IEnumerableExpression`1
  commentId: T:NMF.Expressions.IEnumerableExpression`1
  id: IEnumerableExpression`1
  parent: NMF.Expressions
  children:
  - NMF.Expressions.IEnumerableExpression`1.AsNotifiable
  langs:
  - csharp
  - vb
  name: IEnumerableExpression<T>
  nameWithType: IEnumerableExpression<T>
  fullName: NMF.Expressions.IEnumerableExpression<T>
  type: Interface
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/IEnumerableExpression.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IEnumerableExpression
    path: src/Expressions/Expressions.Linq/Facade/IEnumerableExpression.cs
    startLine: 12
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions
  summary: "\nRepresents a collection that can be accessed incrementally, i.e. with change notifications\n"
  example: []
  syntax:
    content: 'public interface IEnumerableExpression<out T> : IEnumerable<T>, IEnumerableExpression, IEnumerable'
    typeParameters:
    - id: T
      description: The type of the elements
    content.vb: Public Interface IEnumerableExpression(Of Out T) Inherits IEnumerable(Of T), IEnumerableExpression, IEnumerable
  inheritedMembers:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  extensionMethods:
  - NMF.Expressions.IEnumerableExpression.NMF.Expressions.Linq.ExpressionExtensions.Cast``1
  - NMF.Expressions.IEnumerableExpression.NMF.Expressions.Linq.ExpressionExtensions.OfType``1
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{T}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{T}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{{T},{TResult}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{T}},System.Int32,{TResult}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{T},System.Int32}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{T},System.Int32}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{{T},System.Int32},{TResult}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{T},System.Int32}},System.Int32,{TResult}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.All``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Any``1
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Any``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Double}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Int32}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Int64}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Single}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Concat``1(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Contains``1({T},System.Collections.Generic.IEqualityComparer{{T}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Contains``1({T})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Count``1
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Count``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Distinct``1
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(System.Collections.Generic.IEqualityComparer{{T}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Except``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Except``1(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{T}},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{T}},{TResult}}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{T},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{T},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{T},{TInner},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{T},{TInner},{TResult}}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Max``1(System.Collections.Generic.IComparer{{T}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},System.Collections.Generic.IComparer{{TResult}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},System.Func{{T},{TResult}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{{TResult}}}},System.Collections.Generic.IComparer{{TResult}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{{TResult}}}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Min``1(System.Collections.Generic.IComparer{{T}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},System.Collections.Generic.IComparer{{TResult}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{{TResult}}}},System.Collections.Generic.IComparer{{TResult}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{{TResult}}}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},System.Func{{T},{TResult}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(System.Linq.Expressions.Expression{System.Func{{T},System.Collections.Generic.IEnumerable{{TResult}}}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(System.Linq.Expressions.Expression{System.Func{{T},System.Collections.Generic.IEnumerable{{TIntermediate}}}},System.Linq.Expressions.Expression{System.Func{{T},{TIntermediate},{TResult}}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Func{{T},System.Boolean})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Double}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Int32}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Int64}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Single}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{{T},{TKey}}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Union``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Union``1(System.Collections.Generic.IEnumerable{{T}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Func{{T},System.Boolean})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  - NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}})
  - System.Collections.Generic.IEnumerable{`0}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{T}},System.Int32,{TResult}})
  - System.Collections.Generic.IEnumerable{`0}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{T},System.Int32}},System.Int32,{TResult}})
  - System.Collections.Generic.IEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  nameWithType.vb: IEnumerableExpression(Of T)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T)
  name.vb: IEnumerableExpression(Of T)
- uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
  commentId: M:NMF.Expressions.IEnumerableExpression`1.AsNotifiable
  id: AsNotifiable
  parent: NMF.Expressions.IEnumerableExpression`1
  langs:
  - csharp
  - vb
  name: AsNotifiable()
  nameWithType: IEnumerableExpression<T>.AsNotifiable()
  fullName: NMF.Expressions.IEnumerableExpression<T>.AsNotifiable()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/IEnumerableExpression.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AsNotifiable
    path: src/Expressions/Expressions.Linq/Facade/IEnumerableExpression.cs
    startLine: 18
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions
  summary: "\nGets notifications for this collection\n"
  example: []
  syntax:
    content: INotifyEnumerable<out T> AsNotifiable()
    return:
      type: NMF.Expressions.INotifyEnumerable{{T}}
      description: A collection that will notify clients as new elements change
    content.vb: Function AsNotifiable() As INotifyEnumerable(Of Out T)
  overload: NMF.Expressions.IEnumerableExpression`1.AsNotifiable*
  nameWithType.vb: IEnumerableExpression(Of T).AsNotifiable()
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T).AsNotifiable()
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable{`0}.GetEnumerator
    name: GetEnumerator
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable{`0}.GetEnumerator
    name: GetEnumerator
    isExternal: true
  - name: (
  - name: )
- uid: NMF.Expressions.IEnumerableExpression.NMF.Expressions.Linq.ExpressionExtensions.Cast``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
  name: Cast<TResult>(IEnumerableExpression)
  nameWithType: ExpressionExtensions.Cast<TResult>(IEnumerableExpression)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Cast<TResult>(NMF.Expressions.IEnumerableExpression)
  nameWithType.vb: ExpressionExtensions.Cast(Of TResult)(IEnumerableExpression)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Cast(Of TResult)(NMF.Expressions.IEnumerableExpression)
  name.vb: Cast(Of TResult)(IEnumerableExpression)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
    name: Cast
  - name: <
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression
    name: IEnumerableExpression
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
    name: Cast
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression
    name: IEnumerableExpression
  - name: )
- uid: NMF.Expressions.IEnumerableExpression.NMF.Expressions.Linq.ExpressionExtensions.OfType``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
  name: OfType<TResult>(IEnumerableExpression)
  nameWithType: ExpressionExtensions.OfType<TResult>(IEnumerableExpression)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OfType<TResult>(NMF.Expressions.IEnumerableExpression)
  nameWithType.vb: ExpressionExtensions.OfType(Of TResult)(IEnumerableExpression)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OfType(Of TResult)(NMF.Expressions.IEnumerableExpression)
  name.vb: OfType(Of TResult)(IEnumerableExpression)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
    name: OfType
  - name: <
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression
    name: IEnumerableExpression
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
    name: OfType
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression
    name: IEnumerableExpression
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{T}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name: Chunk<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<T>, int, TResult>, IChunkBalancingStrategyProvider)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<T>, int, TResult>, IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<T>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult), IChunkBalancingStrategyProvider)
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: Chunk(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult), IChunkBalancingStrategyProvider)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{`0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{`0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: Chunk
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{`0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{`0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: Chunk
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{T}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{{T},{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  name: Chunk<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<T>, int, TResult>, IChunkBalancingStrategyProvider<T, TResult>)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<T>, int, TResult>, IChunkBalancingStrategyProvider<T, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<T>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider<T, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult), IChunkBalancingStrategyProvider(Of T, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of T, TResult))
  name.vb: Chunk(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult), IChunkBalancingStrategyProvider(Of T, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{`0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{`0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{`0,``1})
    name: Chunk
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{`0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{`0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{`0,``1})
    name: Chunk
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{T}},System.Int32,{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  name: Chunk<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<T>, int, TResult>)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<T>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<T>, int, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), Integer, TResult))
  name.vb: Chunk(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{`0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{`0},System.Int32,``1})
    name: Chunk
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{`0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{`0},System.Int32,``1})
    name: Chunk
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{T},System.Int32}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name: ChunkIndexed<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>, IChunkBalancingStrategyProvider)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>, IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<(T, int)>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult), IChunkBalancingStrategyProvider)
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (T, Integer)), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult), IChunkBalancingStrategyProvider)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{`0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{`0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: ChunkIndexed
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{`0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{`0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: ChunkIndexed
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{T},System.Int32}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{{T},System.Int32},{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  name: ChunkIndexed<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>, IChunkBalancingStrategyProvider<(T, int), TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>, IChunkBalancingStrategyProvider<(T, int), TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<(T, int)>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider<(T, int), TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult), IChunkBalancingStrategyProvider(Of (T, Integer), TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (T, Integer)), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of (T, Integer), TResult))
  name.vb: ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult), IChunkBalancingStrategyProvider(Of (T, Integer), TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{`0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{`0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{`0,System.Int32},``1})
    name: ChunkIndexed
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
  - name: <
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{`0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{`0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{`0,System.Int32},``1})
    name: ChunkIndexed
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{T},System.Int32}},System.Int32,{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  name: ChunkIndexed<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<(T, int)>, int, TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  name.vb: ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{`0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{`0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{`0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{`0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.All``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.All``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.All``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: All<T>(IEnumerableExpression<T>, Expression<Func<T, bool>>)
  nameWithType: ExpressionExtensions.All<T>(IEnumerableExpression<T>, Expression<Func<T, bool>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.All<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, bool>>)
  nameWithType.vb: ExpressionExtensions.All(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.All(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)))
  name.vb: All(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.All``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: All
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.All``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: All
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Any``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0})
  name: Any<T>(IEnumerableExpression<T>)
  nameWithType: ExpressionExtensions.Any<T>(IEnumerableExpression<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Any<T>(NMF.Expressions.IEnumerableExpression<T>)
  nameWithType.vb: ExpressionExtensions.Any(Of T)(IEnumerableExpression(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Any(Of T)(NMF.Expressions.IEnumerableExpression(Of T))
  name.vb: Any(Of T)(IEnumerableExpression(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{`0})
    name: Any
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{`0})
    name: Any
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Any``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Any<T>(IEnumerableExpression<T>, Expression<Func<T, bool>>)
  nameWithType: ExpressionExtensions.Any<T>(IEnumerableExpression<T>, Expression<Func<T, bool>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Any<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, bool>>)
  nameWithType.vb: ExpressionExtensions.Any(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Any(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)))
  name.vb: Any(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Any
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Any
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<IEnumerableExpression<T>>(IEnumerableExpression<T>)
  nameWithType: ExpressionExtensions.AsOne<IEnumerableExpression<T>>(IEnumerableExpression<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<NMF.Expressions.IEnumerableExpression<T>>(NMF.Expressions.IEnumerableExpression<T>)
  nameWithType.vb: ExpressionExtensions.AsOne(Of IEnumerableExpression(Of T))(IEnumerableExpression(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of NMF.Expressions.IEnumerableExpression(Of T))(NMF.Expressions.IEnumerableExpression(Of T))
  name.vb: AsOne(Of IEnumerableExpression(Of T))(IEnumerableExpression(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.IEnumerableExpression{`0})
    name: AsOne
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.IEnumerableExpression{`0})
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  name: Average<T>(IEnumerableExpression<T>, Expression<Func<T, decimal>>)
  nameWithType: ExpressionExtensions.Average<T>(IEnumerableExpression<T>, Expression<Func<T, decimal>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, decimal>>)
  nameWithType.vb: ExpressionExtensions.Average(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Decimal)))
  name.vb: Average(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Double}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  name: Average<T>(IEnumerableExpression<T>, Expression<Func<T, double>>)
  nameWithType: ExpressionExtensions.Average<T>(IEnumerableExpression<T>, Expression<Func<T, double>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, double>>)
  nameWithType.vb: ExpressionExtensions.Average(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Double)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Double)))
  name.vb: Average(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Int32}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  name: Average<T>(IEnumerableExpression<T>, Expression<Func<T, int>>)
  nameWithType: ExpressionExtensions.Average<T>(IEnumerableExpression<T>, Expression<Func<T, int>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, int>>)
  nameWithType.vb: ExpressionExtensions.Average(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Integer)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Integer)))
  name.vb: Average(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Integer)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Int64}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  name: Average<T>(IEnumerableExpression<T>, Expression<Func<T, long>>)
  nameWithType: ExpressionExtensions.Average<T>(IEnumerableExpression<T>, Expression<Func<T, long>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, long>>)
  nameWithType.vb: ExpressionExtensions.Average(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Long)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Long)))
  name.vb: Average(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Long)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  name: Average<T>(IEnumerableExpression<T>, Expression<Func<T, decimal?>>)
  nameWithType: ExpressionExtensions.Average<T>(IEnumerableExpression<T>, Expression<Func<T, decimal?>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, decimal?>>)
  nameWithType.vb: ExpressionExtensions.Average(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Decimal?)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Decimal?)))
  name.vb: Average(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Decimal?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  name: Average<T>(IEnumerableExpression<T>, Expression<Func<T, double?>>)
  nameWithType: ExpressionExtensions.Average<T>(IEnumerableExpression<T>, Expression<Func<T, double?>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, double?>>)
  nameWithType.vb: ExpressionExtensions.Average(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Double?)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Double?)))
  name.vb: Average(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Double?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  name: Average<T>(IEnumerableExpression<T>, Expression<Func<T, int?>>)
  nameWithType: ExpressionExtensions.Average<T>(IEnumerableExpression<T>, Expression<Func<T, int?>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, int?>>)
  nameWithType.vb: ExpressionExtensions.Average(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Integer?)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Integer?)))
  name.vb: Average(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Integer?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  name: Average<T>(IEnumerableExpression<T>, Expression<Func<T, long?>>)
  nameWithType: ExpressionExtensions.Average<T>(IEnumerableExpression<T>, Expression<Func<T, long?>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, long?>>)
  nameWithType.vb: ExpressionExtensions.Average(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Long?)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Long?)))
  name.vb: Average(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Long?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  name: Average<T>(IEnumerableExpression<T>, Expression<Func<T, float?>>)
  nameWithType: ExpressionExtensions.Average<T>(IEnumerableExpression<T>, Expression<Func<T, float?>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, float?>>)
  nameWithType.vb: ExpressionExtensions.Average(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Single?)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Single?)))
  name.vb: Average(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Single?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{T},System.Single}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  name: Average<T>(IEnumerableExpression<T>, Expression<Func<T, float>>)
  nameWithType: ExpressionExtensions.Average<T>(IEnumerableExpression<T>, Expression<Func<T, float>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, float>>)
  nameWithType.vb: ExpressionExtensions.Average(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Single)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Single)))
  name.vb: Average(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Concat``1(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Concat``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Concat``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  name: Concat<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.Concat<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Concat<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ExpressionExtensions.Concat(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Concat(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: Concat(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Concat``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0})
    name: Concat
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Concat``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0})
    name: Concat
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Contains``1({T},System.Collections.Generic.IEqualityComparer{{T}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  name: Contains<T>(IEnumerableExpression<T>, T, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.Contains<T>(IEnumerableExpression<T>, T, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains<T>(NMF.Expressions.IEnumerableExpression<T>, T, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ExpressionExtensions.Contains(Of T)(IEnumerableExpression(Of T), T, IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Contains(Of T)(NMF.Expressions.IEnumerableExpression(Of T), T, System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: Contains(Of T)(IEnumerableExpression(Of T), T, IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{`0},`0,System.Collections.Generic.IEqualityComparer{`0})
    name: Contains
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{`0},`0,System.Collections.Generic.IEqualityComparer{`0})
    name: Contains
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Contains``1({T})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0)
  name: Contains<T>(IEnumerableExpression<T>, T)
  nameWithType: ExpressionExtensions.Contains<T>(IEnumerableExpression<T>, T)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains<T>(NMF.Expressions.IEnumerableExpression<T>, T)
  nameWithType.vb: ExpressionExtensions.Contains(Of T)(IEnumerableExpression(Of T), T)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Contains(Of T)(NMF.Expressions.IEnumerableExpression(Of T), T)
  name.vb: Contains(Of T)(IEnumerableExpression(Of T), T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{`0},`0)
    name: Contains
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{`0},`0)
    name: Contains
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Count``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0})
  name: Count<T>(IEnumerableExpression<T>)
  nameWithType: ExpressionExtensions.Count<T>(IEnumerableExpression<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Count<T>(NMF.Expressions.IEnumerableExpression<T>)
  nameWithType.vb: ExpressionExtensions.Count(Of T)(IEnumerableExpression(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Count(Of T)(NMF.Expressions.IEnumerableExpression(Of T))
  name.vb: Count(Of T)(IEnumerableExpression(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{`0})
    name: Count
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{`0})
    name: Count
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Count``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Count<T>(IEnumerableExpression<T>, Expression<Func<T, bool>>)
  nameWithType: ExpressionExtensions.Count<T>(IEnumerableExpression<T>, Expression<Func<T, bool>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Count<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, bool>>)
  nameWithType.vb: ExpressionExtensions.Count(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Count(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)))
  name.vb: Count(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Count
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Count
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Distinct``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0})
  name: Distinct<T>(IEnumerableExpression<T>)
  nameWithType: ExpressionExtensions.Distinct<T>(IEnumerableExpression<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct<T>(NMF.Expressions.IEnumerableExpression<T>)
  nameWithType.vb: ExpressionExtensions.Distinct(Of T)(IEnumerableExpression(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Distinct(Of T)(NMF.Expressions.IEnumerableExpression(Of T))
  name.vb: Distinct(Of T)(IEnumerableExpression(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{`0})
    name: Distinct
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{`0})
    name: Distinct
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(System.Collections.Generic.IEqualityComparer{{T}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Distinct<T>(IEnumerableExpression<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.Distinct<T>(IEnumerableExpression<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ExpressionExtensions.Distinct(Of T)(IEnumerableExpression(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Distinct(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: Distinct(Of T)(IEnumerableExpression(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEqualityComparer{`0})
    name: Distinct
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEqualityComparer{`0})
    name: Distinct
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Except``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Except<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.Except<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Except<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ExpressionExtensions.Except(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Except(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: Except(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
    name: Except
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
    name: Except
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Except``1(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  name: Except<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.Except<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Except<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ExpressionExtensions.Except(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Except(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: Except(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0})
    name: Except
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0})
    name: Except
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  name: FirstOrDefault<T>(IEnumerableExpression<T>)
  nameWithType: ExpressionExtensions.FirstOrDefault<T>(IEnumerableExpression<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault<T>(NMF.Expressions.IEnumerableExpression<T>)
  nameWithType.vb: ExpressionExtensions.FirstOrDefault(Of T)(IEnumerableExpression(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault(Of T)(NMF.Expressions.IEnumerableExpression(Of T))
  name.vb: FirstOrDefault(Of T)(IEnumerableExpression(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{`0})
    name: FirstOrDefault
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{`0})
    name: FirstOrDefault
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: FirstOrDefault<T>(IEnumerableExpression<T>, Expression<Func<T, bool>>)
  nameWithType: ExpressionExtensions.FirstOrDefault<T>(IEnumerableExpression<T>, Expression<Func<T, bool>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, bool>>)
  nameWithType.vb: ExpressionExtensions.FirstOrDefault(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)))
  name.vb: FirstOrDefault(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: FirstOrDefault
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: FirstOrDefault
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  name: GroupBy<T, TKey>(IEnumerableExpression<T>, Expression<Func<T, TKey>>, IEqualityComparer<TKey>)
  nameWithType: ExpressionExtensions.GroupBy<T, TKey>(IEnumerableExpression<T>, Expression<Func<T, TKey>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<T, TKey>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.GroupBy(Of T, TKey)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TKey)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of T, TKey)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of T, TKey)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TKey)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: GroupBy<T, TKey>(IEnumerableExpression<T>, Expression<Func<T, TKey>>)
  nameWithType: ExpressionExtensions.GroupBy<T, TKey>(IEnumerableExpression<T>, Expression<Func<T, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<T, TKey>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, TKey>>)
  nameWithType.vb: ExpressionExtensions.GroupBy(Of T, TKey)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TKey)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of T, TKey)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)))
  name.vb: GroupBy(Of T, TKey)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}})
    name: GroupBy
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{T}},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  name: GroupBy<T, TKey, TResult>(IEnumerableExpression<T>, Expression<Func<T, TKey>>, Expression<Func<TKey, IEnumerable<T>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ExpressionExtensions.GroupBy<T, TKey, TResult>(IEnumerableExpression<T>, Expression<Func<T, TKey>>, Expression<Func<TKey, IEnumerable<T>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<T, TKey, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<T>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.GroupBy(Of T, TKey, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of T), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of T, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of T), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of T, TKey, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of T), TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{`0},``2}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{`0},``2}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{T}},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  name: GroupBy<T, TKey, TResult>(IEnumerableExpression<T>, Expression<Func<T, TKey>>, Expression<Func<TKey, IEnumerable<T>, TResult>>)
  nameWithType: ExpressionExtensions.GroupBy<T, TKey, TResult>(IEnumerableExpression<T>, Expression<Func<T, TKey>>, Expression<Func<TKey, IEnumerable<T>, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<T, TKey, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<T>, TResult>>)
  nameWithType.vb: ExpressionExtensions.GroupBy(Of T, TKey, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of T), TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of T, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of T), TResult)))
  name.vb: GroupBy(Of T, TKey, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of T), TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{`0},``2}})
    name: GroupBy
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{`0},``2}})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{T},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  name: GroupJoin<T, TInner, TKey, TResult>(IEnumerableExpression<T>, IEnumerable<TInner>, Expression<Func<T, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<T, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ExpressionExtensions.GroupJoin<T, TInner, TKey, TResult>(IEnumerableExpression<T>, IEnumerable<TInner>, Expression<Func<T, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<T, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin<T, TInner, TKey, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<T, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<T, System.Collections.Generic.IEnumerable<TInner>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.GroupJoin(Of T, TInner, TKey, TResult)(IEnumerableExpression(Of T), IEnumerable(Of TInner), Expression(Of Func(Of T, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of T, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin(Of T, TInner, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Collections.Generic.IEnumerable(Of TInner), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupJoin(Of T, TInner, TKey, TResult)(IEnumerableExpression(Of T), IEnumerable(Of TInner), Expression(Of Func(Of T, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of T, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{`0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{`0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{T},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  name: GroupJoin<T, TInner, TKey, TResult>(IEnumerableExpression<T>, IEnumerable<TInner>, Expression<Func<T, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<T, IEnumerable<TInner>, TResult>>)
  nameWithType: ExpressionExtensions.GroupJoin<T, TInner, TKey, TResult>(IEnumerableExpression<T>, IEnumerable<TInner>, Expression<Func<T, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<T, IEnumerable<TInner>, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin<T, TInner, TKey, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<T, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<T, System.Collections.Generic.IEnumerable<TInner>, TResult>>)
  nameWithType.vb: ExpressionExtensions.GroupJoin(Of T, TInner, TKey, TResult)(IEnumerableExpression(Of T), IEnumerable(Of TInner), Expression(Of Func(Of T, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of T, IEnumerable(Of TInner), TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin(Of T, TInner, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Collections.Generic.IEnumerable(Of TInner), TResult)))
  name.vb: GroupJoin(Of T, TInner, TKey, TResult)(IEnumerableExpression(Of T), IEnumerable(Of TInner), Expression(Of Func(Of T, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of T, IEnumerable(Of TInner), TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{`0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``1},``3}})
    name: GroupJoin
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{`0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``1},``3}})
    name: GroupJoin
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Intersect<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.Intersect<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ExpressionExtensions.Intersect(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Intersect(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: Intersect(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
    name: Intersect
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
    name: Intersect
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  name: Intersect<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.Intersect<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ExpressionExtensions.Intersect(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Intersect(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: Intersect(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0})
    name: Intersect
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0})
    name: Intersect
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsProperSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.IsProperSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ExpressionExtensions.IsProperSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsProperSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
    name: IsProperSubsetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
    name: IsProperSubsetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsProperSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.IsProperSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ExpressionExtensions.IsProperSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0})
    name: IsProperSubsetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0})
    name: IsProperSubsetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsProperSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.IsProperSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ExpressionExtensions.IsProperSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsProperSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
    name: IsProperSupersetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
    name: IsProperSupersetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsProperSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.IsProperSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ExpressionExtensions.IsProperSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0})
    name: IsProperSupersetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0})
    name: IsProperSupersetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.IsSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ExpressionExtensions.IsSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
    name: IsSubsetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
    name: IsSubsetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.IsSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ExpressionExtensions.IsSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0})
    name: IsSubsetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0})
    name: IsSubsetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.IsSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ExpressionExtensions.IsSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
    name: IsSupersetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
    name: IsSupersetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.IsSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ExpressionExtensions.IsSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0})
    name: IsSupersetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0})
    name: IsSupersetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{T},{TInner},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  name: Join<T, TInner, TKey, TResult>(IEnumerableExpression<T>, IEnumerable<TInner>, Expression<Func<T, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<T, TInner, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ExpressionExtensions.Join<T, TInner, TKey, TResult>(IEnumerableExpression<T>, IEnumerable<TInner>, Expression<Func<T, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<T, TInner, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Join<T, TInner, TKey, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<T, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<T, TInner, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.Join(Of T, TInner, TKey, TResult)(IEnumerableExpression(Of T), IEnumerable(Of TInner), Expression(Of Func(Of T, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of T, TInner, TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Join(Of T, TInner, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of T, TInner, TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Join(Of T, TInner, TKey, TResult)(IEnumerableExpression(Of T), IEnumerable(Of TInner), Expression(Of Func(Of T, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of T, TInner, TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{`0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{`0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: Join
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{`0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{`0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: Join
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{T},{TInner},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  name: Join<T, TInner, TKey, TResult>(IEnumerableExpression<T>, IEnumerable<TInner>, Expression<Func<T, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<T, TInner, TResult>>)
  nameWithType: ExpressionExtensions.Join<T, TInner, TKey, TResult>(IEnumerableExpression<T>, IEnumerable<TInner>, Expression<Func<T, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<T, TInner, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Join<T, TInner, TKey, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<T, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<T, TInner, TResult>>)
  nameWithType.vb: ExpressionExtensions.Join(Of T, TInner, TKey, TResult)(IEnumerableExpression(Of T), IEnumerable(Of TInner), Expression(Of Func(Of T, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of T, TInner, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Join(Of T, TInner, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of T, TInner, TResult)))
  name.vb: Join(Of T, TInner, TKey, TResult)(IEnumerableExpression(Of T), IEnumerable(Of TInner), Expression(Of Func(Of T, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of T, TInner, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{`0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{`0,``1,``3}})
    name: Join
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{`0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{`0,``1,``3}})
    name: Join
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Max``1(System.Collections.Generic.IComparer{{T}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  name: Max<T>(IEnumerableExpression<T>, IComparer<T>)
  nameWithType: ExpressionExtensions.Max<T>(IEnumerableExpression<T>, IComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: ExpressionExtensions.Max(Of T)(IEnumerableExpression(Of T), IComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IComparer(Of T))
  name.vb: Max(Of T)(IEnumerableExpression(Of T), IComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IComparer{`0})
    name: Max
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IComparer{`0})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},System.Collections.Generic.IComparer{{TResult}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: Max<T, TResult>(IEnumerableExpression<T>, Expression<Func<T, TResult>>, IComparer<TResult>)
  nameWithType: ExpressionExtensions.Max<T, TResult>(IEnumerableExpression<T>, Expression<Func<T, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ExpressionExtensions.Max(Of T, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of T, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TResult)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Collections.Generic.IComparer{``1})
    name: Max
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Collections.Generic.IComparer{``1})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},System.Func{{T},{TResult}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  name: Max<T, TResult>(IEnumerableExpression<T>, Expression<Func<T, TResult>>, Func<T, TResult>)
  nameWithType: ExpressionExtensions.Max<T, TResult>(IEnumerableExpression<T>, Expression<Func<T, TResult>>, Func<T, TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.Func<T, TResult>)
  nameWithType.vb: ExpressionExtensions.Max(Of T, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TResult)), Func(Of T, TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.Func(Of T, TResult))
  name.vb: Max(Of T, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TResult)), Func(Of T, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Func{`0,``1})
    name: Max
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Func{`0,``1})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: Max<T, TResult>(IEnumerableExpression<T>, Expression<Func<T, TResult>>)
  nameWithType: ExpressionExtensions.Max<T, TResult>(IEnumerableExpression<T>, Expression<Func<T, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: ExpressionExtensions.Max(Of T, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Max(Of T, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}})
    name: Max
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{{TResult}}}},System.Collections.Generic.IComparer{{TResult}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  name: Max<T, TResult>(IEnumerableExpression<T>, Expression<Func<T, TResult?>>, IComparer<TResult>)
  nameWithType: ExpressionExtensions.Max<T, TResult>(IEnumerableExpression<T>, Expression<Func<T, TResult?>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, TResult?>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ExpressionExtensions.Max(Of T, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TResult?)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult?)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of T, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TResult?)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Max
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{{TResult}}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  name: Max<T, TResult>(IEnumerableExpression<T>, Expression<Func<T, TResult?>>)
  nameWithType: ExpressionExtensions.Max<T, TResult>(IEnumerableExpression<T>, Expression<Func<T, TResult?>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, TResult?>>)
  nameWithType.vb: ExpressionExtensions.Max(Of T, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TResult?)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult?)))
  name.vb: Max(Of T, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TResult?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``1}}})
    name: Max
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``1}}})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Min``1(System.Collections.Generic.IComparer{{T}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  name: Min<T>(IEnumerableExpression<T>, IComparer<T>)
  nameWithType: ExpressionExtensions.Min<T>(IEnumerableExpression<T>, IComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: ExpressionExtensions.Min(Of T)(IEnumerableExpression(Of T), IComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IComparer(Of T))
  name.vb: Min(Of T)(IEnumerableExpression(Of T), IComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IComparer{`0})
    name: Min
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IComparer{`0})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},System.Collections.Generic.IComparer{{TResult}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: Min<T, TResult>(IEnumerableExpression<T>, Expression<Func<T, TResult>>, IComparer<TResult>)
  nameWithType: ExpressionExtensions.Min<T, TResult>(IEnumerableExpression<T>, Expression<Func<T, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ExpressionExtensions.Min(Of T, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of T, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TResult)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Collections.Generic.IComparer{``1})
    name: Min
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Collections.Generic.IComparer{``1})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: Min<T, TResult>(IEnumerableExpression<T>, Expression<Func<T, TResult>>)
  nameWithType: ExpressionExtensions.Min<T, TResult>(IEnumerableExpression<T>, Expression<Func<T, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: ExpressionExtensions.Min(Of T, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Min(Of T, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}})
    name: Min
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{{TResult}}}},System.Collections.Generic.IComparer{{TResult}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  name: Min<T, TResult>(IEnumerableExpression<T>, Expression<Func<T, TResult?>>, IComparer<TResult>)
  nameWithType: ExpressionExtensions.Min<T, TResult>(IEnumerableExpression<T>, Expression<Func<T, TResult?>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, TResult?>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ExpressionExtensions.Min(Of T, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TResult?)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult?)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of T, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TResult?)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Min
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{{TResult}}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  name: Min<T, TResult>(IEnumerableExpression<T>, Expression<Func<T, TResult?>>)
  nameWithType: ExpressionExtensions.Min<T, TResult>(IEnumerableExpression<T>, Expression<Func<T, TResult?>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, TResult?>>)
  nameWithType.vb: ExpressionExtensions.Min(Of T, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TResult?)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult?)))
  name.vb: Min(Of T, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TResult?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``1}}})
    name: Min
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``1}}})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: OrderBy<T, TKey>(IEnumerableExpression<T>, Expression<Func<T, TKey>>, IComparer<TKey>)
  nameWithType: ExpressionExtensions.OrderBy<T, TKey>(IEnumerableExpression<T>, Expression<Func<T, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy<T, TKey>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.OrderBy(Of T, TKey)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OrderBy(Of T, TKey)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderBy(Of T, TKey)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderBy
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderBy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: OrderBy<T, TKey>(IEnumerableExpression<T>, Expression<Func<T, TKey>>)
  nameWithType: ExpressionExtensions.OrderBy<T, TKey>(IEnumerableExpression<T>, Expression<Func<T, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy<T, TKey>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, TKey>>)
  nameWithType.vb: ExpressionExtensions.OrderBy(Of T, TKey)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TKey)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OrderBy(Of T, TKey)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)))
  name.vb: OrderBy(Of T, TKey)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}})
    name: OrderBy
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}})
    name: OrderBy
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: OrderByDescending<T, TKey>(IEnumerableExpression<T>, Expression<Func<T, TKey>>, IComparer<TKey>)
  nameWithType: ExpressionExtensions.OrderByDescending<T, TKey>(IEnumerableExpression<T>, Expression<Func<T, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending<T, TKey>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.OrderByDescending(Of T, TKey)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending(Of T, TKey)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderByDescending(Of T, TKey)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: OrderByDescending<T, TKey>(IEnumerableExpression<T>, Expression<Func<T, TKey>>)
  nameWithType: ExpressionExtensions.OrderByDescending<T, TKey>(IEnumerableExpression<T>, Expression<Func<T, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending<T, TKey>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, TKey>>)
  nameWithType.vb: ExpressionExtensions.OrderByDescending(Of T, TKey)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TKey)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending(Of T, TKey)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)))
  name.vb: OrderByDescending(Of T, TKey)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}})
    name: OrderByDescending
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}})
    name: OrderByDescending
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}},System.Func{{T},{TResult}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  name: Select<T, TResult>(IEnumerableExpression<T>, Expression<Func<T, TResult>>, Func<T, TResult>)
  nameWithType: ExpressionExtensions.Select<T, TResult>(IEnumerableExpression<T>, Expression<Func<T, TResult>>, Func<T, TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Select<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>, System.Func<T, TResult>)
  nameWithType.vb: ExpressionExtensions.Select(Of T, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TResult)), Func(Of T, TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Select(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)), System.Func(Of T, TResult))
  name.vb: Select(Of T, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TResult)), Func(Of T, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Func{`0,``1})
    name: Select
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Func{`0,``1})
    name: Select
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{{T},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: Select<T, TResult>(IEnumerableExpression<T>, Expression<Func<T, TResult>>)
  nameWithType: ExpressionExtensions.Select<T, TResult>(IEnumerableExpression<T>, Expression<Func<T, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Select<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, TResult>>)
  nameWithType.vb: ExpressionExtensions.Select(Of T, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Select(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TResult)))
  name.vb: Select(Of T, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}})
    name: Select
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}})
    name: Select
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(System.Linq.Expressions.Expression{System.Func{{T},System.Collections.Generic.IEnumerable{{TResult}}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  name: SelectMany<T, TResult>(IEnumerableExpression<T>, Expression<Func<T, IEnumerable<TResult>>>)
  nameWithType: ExpressionExtensions.SelectMany<T, TResult>(IEnumerableExpression<T>, Expression<Func<T, IEnumerable<TResult>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, System.Collections.Generic.IEnumerable<TResult>>>)
  nameWithType.vb: ExpressionExtensions.SelectMany(Of T, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, IEnumerable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SelectMany(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Collections.Generic.IEnumerable(Of TResult))))
  name.vb: SelectMany(Of T, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, IEnumerable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``1}}})
    name: SelectMany
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``1}}})
    name: SelectMany
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(System.Linq.Expressions.Expression{System.Func{{T},System.Collections.Generic.IEnumerable{{TIntermediate}}}},System.Linq.Expressions.Expression{System.Func{{T},{TIntermediate},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  name: SelectMany<T, TIntermediate, TResult>(IEnumerableExpression<T>, Expression<Func<T, IEnumerable<TIntermediate>>>, Expression<Func<T, TIntermediate, TResult>>)
  nameWithType: ExpressionExtensions.SelectMany<T, TIntermediate, TResult>(IEnumerableExpression<T>, Expression<Func<T, IEnumerable<TIntermediate>>>, Expression<Func<T, TIntermediate, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany<T, TIntermediate, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, System.Collections.Generic.IEnumerable<TIntermediate>>>, System.Linq.Expressions.Expression<System.Func<T, TIntermediate, TResult>>)
  nameWithType.vb: ExpressionExtensions.SelectMany(Of T, TIntermediate, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, IEnumerable(Of TIntermediate))), Expression(Of Func(Of T, TIntermediate, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SelectMany(Of T, TIntermediate, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Collections.Generic.IEnumerable(Of TIntermediate))), System.Linq.Expressions.Expression(Of System.Func(Of T, TIntermediate, TResult)))
  name.vb: SelectMany(Of T, TIntermediate, TResult)(IEnumerableExpression(Of T), Expression(Of Func(Of T, IEnumerable(Of TIntermediate))), Expression(Of Func(Of T, TIntermediate, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
    name: SelectMany
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIntermediate
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{`0,``1,``2}})
    name: SelectMany
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIntermediate
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: SetEquals<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.SetEquals<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ExpressionExtensions.SetEquals(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SetEquals(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: SetEquals(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
    name: SetEquals
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
    name: SetEquals
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  name: SetEquals<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.SetEquals<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ExpressionExtensions.SetEquals(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SetEquals(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: SetEquals(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0})
    name: SetEquals
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0})
    name: SetEquals
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  name: SingleOrDefault<T>(IEnumerableExpression<T>)
  nameWithType: ExpressionExtensions.SingleOrDefault<T>(IEnumerableExpression<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<T>(NMF.Expressions.IEnumerableExpression<T>)
  nameWithType.vb: ExpressionExtensions.SingleOrDefault(Of T)(IEnumerableExpression(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of T)(NMF.Expressions.IEnumerableExpression(Of T))
  name.vb: SingleOrDefault(Of T)(IEnumerableExpression(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{`0})
    name: SingleOrDefault
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{`0})
    name: SingleOrDefault
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Func{{T},System.Boolean})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  name: SingleOrDefault<T>(IEnumerableExpression<T>, Expression<Func<T, bool>>, Func<T, bool>)
  nameWithType: ExpressionExtensions.SingleOrDefault<T>(IEnumerableExpression<T>, Expression<Func<T, bool>>, Func<T, bool>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, bool>>, System.Func<T, bool>)
  nameWithType.vb: ExpressionExtensions.SingleOrDefault(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)), Func(Of T, Boolean))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)), System.Func(Of T, Boolean))
  name.vb: SingleOrDefault(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)), Func(Of T, Boolean))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0,System.Boolean})
    name: SingleOrDefault
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0,System.Boolean})
    name: SingleOrDefault
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: SingleOrDefault<T>(IEnumerableExpression<T>, Expression<Func<T, bool>>)
  nameWithType: ExpressionExtensions.SingleOrDefault<T>(IEnumerableExpression<T>, Expression<Func<T, bool>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, bool>>)
  nameWithType.vb: ExpressionExtensions.SingleOrDefault(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)))
  name.vb: SingleOrDefault(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SingleOrDefault
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: SingleOrDefault
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  name: Sum<T>(IEnumerableExpression<T>, Expression<Func<T, decimal>>)
  nameWithType: ExpressionExtensions.Sum<T>(IEnumerableExpression<T>, Expression<Func<T, decimal>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, decimal>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Decimal)))
  name.vb: Sum(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Decimal)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Double}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  name: Sum<T>(IEnumerableExpression<T>, Expression<Func<T, double>>)
  nameWithType: ExpressionExtensions.Sum<T>(IEnumerableExpression<T>, Expression<Func<T, double>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, double>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Double)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Double)))
  name.vb: Sum(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Double)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Double}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Int32}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  name: Sum<T>(IEnumerableExpression<T>, Expression<Func<T, int>>)
  nameWithType: ExpressionExtensions.Sum<T>(IEnumerableExpression<T>, Expression<Func<T, int>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, int>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Integer)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Integer)))
  name.vb: Sum(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Integer)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Int64}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  name: Sum<T>(IEnumerableExpression<T>, Expression<Func<T, long>>)
  nameWithType: ExpressionExtensions.Sum<T>(IEnumerableExpression<T>, Expression<Func<T, long>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, long>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Long)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Long)))
  name.vb: Sum(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Long)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  name: Sum<T>(IEnumerableExpression<T>, Expression<Func<T, decimal?>>)
  nameWithType: ExpressionExtensions.Sum<T>(IEnumerableExpression<T>, Expression<Func<T, decimal?>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, decimal?>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Decimal?)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Decimal?)))
  name.vb: Sum(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Decimal?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  name: Sum<T>(IEnumerableExpression<T>, Expression<Func<T, double?>>)
  nameWithType: ExpressionExtensions.Sum<T>(IEnumerableExpression<T>, Expression<Func<T, double?>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, double?>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Double?)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Double?)))
  name.vb: Sum(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Double?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  name: Sum<T>(IEnumerableExpression<T>, Expression<Func<T, int?>>)
  nameWithType: ExpressionExtensions.Sum<T>(IEnumerableExpression<T>, Expression<Func<T, int?>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, int?>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Integer?)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Integer?)))
  name.vb: Sum(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Integer?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  name: Sum<T>(IEnumerableExpression<T>, Expression<Func<T, long?>>)
  nameWithType: ExpressionExtensions.Sum<T>(IEnumerableExpression<T>, Expression<Func<T, long?>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, long?>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Long?)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Long?)))
  name.vb: Sum(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Long?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  name: Sum<T>(IEnumerableExpression<T>, Expression<Func<T, float?>>)
  nameWithType: ExpressionExtensions.Sum<T>(IEnumerableExpression<T>, Expression<Func<T, float?>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, float?>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Single?)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Single?)))
  name.vb: Sum(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Single?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{T},System.Single}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  name: Sum<T>(IEnumerableExpression<T>, Expression<Func<T, float>>)
  nameWithType: ExpressionExtensions.Sum<T>(IEnumerableExpression<T>, Expression<Func<T, float>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, float>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Single)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Single)))
  name.vb: Sum(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Single)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Single}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{{T},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: TopX<T, TKey>(IEnumerableExpression<T>, int, Expression<Func<T, TKey>>, IComparer<TKey>)
  nameWithType: ExpressionExtensions.TopX<T, TKey>(IEnumerableExpression<T>, int, Expression<Func<T, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX<T, TKey>(NMF.Expressions.IEnumerableExpression<T>, int, System.Linq.Expressions.Expression<System.Func<T, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.TopX(Of T, TKey)(IEnumerableExpression(Of T), Integer, Expression(Of Func(Of T, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.TopX(Of T, TKey)(NMF.Expressions.IEnumerableExpression(Of T), Integer, System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: TopX(Of T, TKey)(IEnumerableExpression(Of T), Integer, Expression(Of Func(Of T, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{`0},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Collections.Generic.IComparer{``1})
    name: TopX
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{`0},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Collections.Generic.IComparer{``1})
    name: TopX
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{{T},{TKey}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: TopX<T, TKey>(IEnumerableExpression<T>, int, Expression<Func<T, TKey>>)
  nameWithType: ExpressionExtensions.TopX<T, TKey>(IEnumerableExpression<T>, int, Expression<Func<T, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX<T, TKey>(NMF.Expressions.IEnumerableExpression<T>, int, System.Linq.Expressions.Expression<System.Func<T, TKey>>)
  nameWithType.vb: ExpressionExtensions.TopX(Of T, TKey)(IEnumerableExpression(Of T), Integer, Expression(Of Func(Of T, TKey)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.TopX(Of T, TKey)(NMF.Expressions.IEnumerableExpression(Of T), Integer, System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)))
  name.vb: TopX(Of T, TKey)(IEnumerableExpression(Of T), Integer, Expression(Of Func(Of T, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{`0},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``1}})
    name: TopX
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{`0},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``1}})
    name: TopX
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Union``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Union<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.Union<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Union<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ExpressionExtensions.Union(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Union(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: Union(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
    name: Union
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
    name: Union
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Union``1(System.Collections.Generic.IEnumerable{{T}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  name: Union<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.Union<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Union<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ExpressionExtensions.Union(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Union(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: Union(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0})
    name: Union
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{`0},System.Collections.Generic.IEnumerable{`0})
    name: Union
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}},System.Func{{T},System.Boolean})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  name: Where<T>(IEnumerableExpression<T>, Expression<Func<T, bool>>, Func<T, bool>)
  nameWithType: ExpressionExtensions.Where<T>(IEnumerableExpression<T>, Expression<Func<T, bool>>, Func<T, bool>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Where<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, bool>>, System.Func<T, bool>)
  nameWithType.vb: ExpressionExtensions.Where(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)), Func(Of T, Boolean))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Where(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)), System.Func(Of T, Boolean))
  name.vb: Where(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)), Func(Of T, Boolean))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0,System.Boolean})
    name: Where
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0,System.Boolean})
    name: Where
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.ExpressionExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Where<T>(IEnumerableExpression<T>, Expression<Func<T, bool>>)
  nameWithType: ExpressionExtensions.Where<T>(IEnumerableExpression<T>, Expression<Func<T, bool>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Where<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, bool>>)
  nameWithType.vb: ExpressionExtensions.Where(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Where(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)))
  name.vb: Where(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Where
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Where
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1.NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{{T},{TKey}}})
  commentId: M:NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.LookupExtensions
  definition: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: ToLookup<T, TKey>(IEnumerableExpression<T>, Expression<Func<T, TKey>>)
  nameWithType: LookupExtensions.ToLookup<T, TKey>(IEnumerableExpression<T>, Expression<Func<T, TKey>>)
  fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<T, TKey>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, TKey>>)
  nameWithType.vb: LookupExtensions.ToLookup(Of T, TKey)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TKey)))
  fullName.vb: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of T, TKey)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, TKey)))
  name.vb: ToLookup(Of T, TKey)(IEnumerableExpression(Of T), Expression(Of Func(Of T, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}})
    name: ToLookup
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{`0},System.Linq.Expressions.Expression{System.Func{`0,``1}})
    name: ToLookup
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable{`0}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{T}},System.Int32,{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  name: Chunk<T, TResult>(IEnumerable<T>, int, Func<IEnumerableExpression<T>, int, TResult>)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(IEnumerable<T>, int, Func<IEnumerableExpression<T>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<T>, int, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(IEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(System.Collections.Generic.IEnumerable(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), Integer, TResult))
  name.vb: Chunk(Of T, TResult)(IEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{`0},System.Int32,``1})
    name: Chunk
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{`0},System.Int32,``1})
    name: Chunk
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable{`0}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{T},System.Int32}},System.Int32,{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  name: ChunkIndexed<T, TResult>(IEnumerable<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(IEnumerable<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<(T, int)>, int, TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(IEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(System.Collections.Generic.IEnumerable(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  name.vb: ChunkIndexed(Of T, TResult)(IEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{`0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{`0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  name: WithUpdates<T>(IEnumerable<T>)
  nameWithType: ObservableExtensions.WithUpdates<T>(IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.WithUpdates(Of T)(IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: WithUpdates(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{`0})
    name: WithUpdates
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{`0})
    name: WithUpdates
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
  name: Cast<TResult>(IEnumerableExpression)
  nameWithType: ExpressionExtensions.Cast<TResult>(IEnumerableExpression)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Cast<TResult>(NMF.Expressions.IEnumerableExpression)
  nameWithType.vb: ExpressionExtensions.Cast(Of TResult)(IEnumerableExpression)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Cast(Of TResult)(NMF.Expressions.IEnumerableExpression)
  name.vb: Cast(Of TResult)(IEnumerableExpression)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
    name: Cast
  - name: <
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression
    name: IEnumerableExpression
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Cast``1(NMF.Expressions.IEnumerableExpression)
    name: Cast
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression
    name: IEnumerableExpression
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  parent: NMF.Expressions.Linq
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
- uid: NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
  name: OfType<TResult>(IEnumerableExpression)
  nameWithType: ExpressionExtensions.OfType<TResult>(IEnumerableExpression)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OfType<TResult>(NMF.Expressions.IEnumerableExpression)
  nameWithType.vb: ExpressionExtensions.OfType(Of TResult)(IEnumerableExpression)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OfType(Of TResult)(NMF.Expressions.IEnumerableExpression)
  name.vb: OfType(Of TResult)(IEnumerableExpression)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
    name: OfType
  - name: <
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression
    name: IEnumerableExpression
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OfType``1(NMF.Expressions.IEnumerableExpression)
    name: OfType
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression
    name: IEnumerableExpression
  - name: )
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  isExternal: true
  name: Chunk<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<T>, int, TResult>, IChunkBalancingStrategyProvider)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<T>, int, TResult>, IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<T>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult), IChunkBalancingStrategyProvider)
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: Chunk(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult), IChunkBalancingStrategyProvider)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: Chunk
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: Chunk
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
  - name: )
- uid: NMF.Expressions.Linq.ChunkExtensions
  commentId: T:NMF.Expressions.Linq.ChunkExtensions
  parent: NMF.Expressions.Linq
  name: ChunkExtensions
  nameWithType: ChunkExtensions
  fullName: NMF.Expressions.Linq.ChunkExtensions
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  isExternal: true
  name: Chunk<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<T>, int, TResult>, IChunkBalancingStrategyProvider<T, TResult>)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<T>, int, TResult>, IChunkBalancingStrategyProvider<T, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<T>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider<T, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult), IChunkBalancingStrategyProvider(Of T, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of T, TResult))
  name.vb: Chunk(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult), IChunkBalancingStrategyProvider(Of T, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
    name: Chunk
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
    name: Chunk
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  isExternal: true
  name: Chunk<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<T>, int, TResult>)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<T>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<T>, int, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), Integer, TResult))
  name.vb: Chunk(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
    name: Chunk
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
    name: Chunk
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  isExternal: true
  name: ChunkIndexed<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>, IChunkBalancingStrategyProvider)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>, IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<(T, int)>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult), IChunkBalancingStrategyProvider)
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (T, Integer)), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult), IChunkBalancingStrategyProvider)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: ChunkIndexed
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: ChunkIndexed
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
  - name: )
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  isExternal: true
  name: ChunkIndexed<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>, IChunkBalancingStrategyProvider<(T, int), TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>, IChunkBalancingStrategyProvider<(T, int), TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<(T, int)>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider<(T, int), TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult), IChunkBalancingStrategyProvider(Of (T, Integer), TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (T, Integer)), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of (T, Integer), TResult))
  name.vb: ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult), IChunkBalancingStrategyProvider(Of (T, Integer), TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
    name: ChunkIndexed
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
  - name: <
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
    name: ChunkIndexed
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  isExternal: true
  name: ChunkIndexed<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<(T, int)>, int, TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  name.vb: ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.All``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.All``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: All<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, bool>>)
  nameWithType: ExpressionExtensions.All<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, bool>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.All<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, bool>>)
  nameWithType.vb: ExpressionExtensions.All(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.All(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Boolean)))
  name.vb: All(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.All``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: All
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.All``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: All
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0})
  name: Any<TSource>(IEnumerableExpression<TSource>)
  nameWithType: ExpressionExtensions.Any<TSource>(IEnumerableExpression<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Any<TSource>(NMF.Expressions.IEnumerableExpression<TSource>)
  nameWithType.vb: ExpressionExtensions.Any(Of TSource)(IEnumerableExpression(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Any(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource))
  name.vb: Any(Of TSource)(IEnumerableExpression(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0})
    name: Any
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0})
    name: Any
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: Any<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, bool>>)
  nameWithType: ExpressionExtensions.Any<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, bool>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Any<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, bool>>)
  nameWithType.vb: ExpressionExtensions.Any(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Any(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Boolean)))
  name.vb: Any(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Any
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Any``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Any
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<T>(T)
  nameWithType: ExpressionExtensions.AsOne<T>(T)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<T>(T)
  nameWithType.vb: ExpressionExtensions.AsOne(Of T)(T)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of T)(T)
  name.vb: AsOne(Of T)(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, decimal>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, decimal>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, decimal>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Decimal)))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, double>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, double>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, double>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Double)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Double)))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Double)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, int>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, int>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, int>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Integer)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Integer)))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Integer)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, long>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, long>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, long>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Long)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Long)))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Long)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, decimal?>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, decimal?>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, decimal?>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Decimal?)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Decimal?)))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Decimal?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, double?>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, double?>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, double?>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Double?)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Double?)))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Double?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, int?>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, int?>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, int?>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Integer?)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Integer?)))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Integer?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, long?>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, long?>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, long?>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Long?)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Long?)))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Long?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, float?>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, float?>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, float?>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Single?)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Single?)))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Single?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  isExternal: true
  name: Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, float>>)
  nameWithType: ExpressionExtensions.Average<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, float>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Average<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, float>>)
  nameWithType.vb: ExpressionExtensions.Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Single)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Average(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Single)))
  name.vb: Average(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Single)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Average``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Concat``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Concat``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Concat<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  nameWithType: ExpressionExtensions.Concat<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Concat<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: ExpressionExtensions.Concat(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Concat(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Concat(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Concat``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: Concat
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Concat``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: Concat
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Contains<TSource>(IEnumerableExpression<TSource>, TSource, IEqualityComparer<TSource>)
  nameWithType: ExpressionExtensions.Contains<TSource>(IEnumerableExpression<TSource>, TSource, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ExpressionExtensions.Contains(Of TSource)(IEnumerableExpression(Of TSource), TSource, IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Contains(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), TSource, System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Contains(Of TSource)(IEnumerableExpression(Of TSource), TSource, IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
    name: Contains
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
    name: Contains
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0)
  name: Contains<TSource>(IEnumerableExpression<TSource>, TSource)
  nameWithType: ExpressionExtensions.Contains<TSource>(IEnumerableExpression<TSource>, TSource)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Contains<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, TSource)
  nameWithType.vb: ExpressionExtensions.Contains(Of TSource)(IEnumerableExpression(Of TSource), TSource)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Contains(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), TSource)
  name.vb: Contains(Of TSource)(IEnumerableExpression(Of TSource), TSource)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0)
    name: Contains
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - name: TSource
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Contains``1(NMF.Expressions.IEnumerableExpression{``0},``0)
    name: Contains
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - name: TSource
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0})
  name: Count<TSource>(IEnumerableExpression<TSource>)
  nameWithType: ExpressionExtensions.Count<TSource>(IEnumerableExpression<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Count<TSource>(NMF.Expressions.IEnumerableExpression<TSource>)
  nameWithType.vb: ExpressionExtensions.Count(Of TSource)(IEnumerableExpression(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Count(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource))
  name.vb: Count(Of TSource)(IEnumerableExpression(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0})
    name: Count
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0})
    name: Count
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: Count<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, bool>>)
  nameWithType: ExpressionExtensions.Count<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, bool>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Count<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, bool>>)
  nameWithType.vb: ExpressionExtensions.Count(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Count(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Boolean)))
  name.vb: Count(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Count
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Count``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Count
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0})
  name: Distinct<TSource>(IEnumerableExpression<TSource>)
  nameWithType: ExpressionExtensions.Distinct<TSource>(IEnumerableExpression<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct<TSource>(NMF.Expressions.IEnumerableExpression<TSource>)
  nameWithType.vb: ExpressionExtensions.Distinct(Of TSource)(IEnumerableExpression(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Distinct(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource))
  name.vb: Distinct(Of TSource)(IEnumerableExpression(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0})
    name: Distinct
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0})
    name: Distinct
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Distinct<TSource>(IEnumerableExpression<TSource>, IEqualityComparer<TSource>)
  nameWithType: ExpressionExtensions.Distinct<TSource>(IEnumerableExpression<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Distinct<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ExpressionExtensions.Distinct(Of TSource)(IEnumerableExpression(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Distinct(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Distinct(Of TSource)(IEnumerableExpression(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Distinct
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Distinct``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Distinct
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Except<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ExpressionExtensions.Except<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Except<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ExpressionExtensions.Except(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Except(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Except(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Except
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Except
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Except<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  nameWithType: ExpressionExtensions.Except<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Except<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: ExpressionExtensions.Except(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Except(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Except(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: Except
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Except``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: Except
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  name: FirstOrDefault<TSource>(IEnumerableExpression<TSource>)
  nameWithType: ExpressionExtensions.FirstOrDefault<TSource>(IEnumerableExpression<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault<TSource>(NMF.Expressions.IEnumerableExpression<TSource>)
  nameWithType.vb: ExpressionExtensions.FirstOrDefault(Of TSource)(IEnumerableExpression(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource))
  name.vb: FirstOrDefault(Of TSource)(IEnumerableExpression(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
    name: FirstOrDefault
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
    name: FirstOrDefault
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: FirstOrDefault<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, bool>>)
  nameWithType: ExpressionExtensions.FirstOrDefault<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, bool>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, bool>>)
  nameWithType.vb: ExpressionExtensions.FirstOrDefault(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Boolean)))
  name.vb: FirstOrDefault(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: FirstOrDefault
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.FirstOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: FirstOrDefault
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  isExternal: true
  name: GroupBy<TSource, TKey>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>, IEqualityComparer<TKey>)
  nameWithType: ExpressionExtensions.GroupBy<TSource, TKey>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TSource, TKey>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.GroupBy(Of TSource, TKey)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TSource, TKey)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: GroupBy<TSource, TKey>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>)
  nameWithType: ExpressionExtensions.GroupBy<TSource, TKey>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TSource, TKey>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  nameWithType.vb: ExpressionExtensions.GroupBy(Of TSource, TKey)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TSource, TKey)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: GroupBy(Of TSource, TKey)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: GroupBy
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  isExternal: true
  name: GroupBy<TSource, TKey, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ExpressionExtensions.GroupBy<TSource, TKey, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TSource, TKey, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.GroupBy(Of TSource, TKey, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TSource, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  isExternal: true
  name: GroupBy<TSource, TKey, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>)
  nameWithType: ExpressionExtensions.GroupBy<TSource, TKey, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupBy<TSource, TKey, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>)
  nameWithType.vb: ExpressionExtensions.GroupBy(Of TSource, TKey, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupBy(Of TSource, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)))
  name.vb: GroupBy(Of TSource, TKey, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
    name: GroupBy
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupBy``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  isExternal: true
  name: GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ExpressionExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(NMF.Expressions.IEnumerableExpression<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TOuter
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  isExternal: true
  name: GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>)
  nameWithType: ExpressionExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(NMF.Expressions.IEnumerableExpression<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>)
  nameWithType.vb: ExpressionExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
    name: GroupJoin
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TOuter
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.GroupJoin``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
    name: GroupJoin
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Intersect<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ExpressionExtensions.Intersect<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ExpressionExtensions.Intersect(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Intersect(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Intersect(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Intersect
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Intersect
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Intersect<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  nameWithType: ExpressionExtensions.Intersect<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Intersect<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: ExpressionExtensions.Intersect(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Intersect(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Intersect(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: Intersect
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Intersect``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: Intersect
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsProperSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.IsProperSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ExpressionExtensions.IsProperSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsProperSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSubsetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSubsetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsProperSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.IsProperSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ExpressionExtensions.IsProperSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsProperSubsetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsProperSubsetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsProperSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.IsProperSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ExpressionExtensions.IsProperSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsProperSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSupersetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSupersetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsProperSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.IsProperSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ExpressionExtensions.IsProperSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsProperSupersetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsProperSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsProperSupersetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.IsSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ExpressionExtensions.IsSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSubsetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSubsetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.IsSubsetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ExpressionExtensions.IsSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSubsetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsSubsetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSubsetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsSubsetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.IsSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ExpressionExtensions.IsSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSupersetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSupersetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.IsSupersetOf<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ExpressionExtensions.IsSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSupersetOf(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsSupersetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.IsSupersetOf``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsSupersetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  isExternal: true
  name: Join<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ExpressionExtensions.Join<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Join<TOuter, TInner, TKey, TResult>(NMF.Expressions.IEnumerableExpression<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.Join(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Join(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: Join
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TOuter
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: Join
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  isExternal: true
  name: Join<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>)
  nameWithType: ExpressionExtensions.Join<TOuter, TInner, TKey, TResult>(IEnumerableExpression<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Join<TOuter, TInner, TKey, TResult>(NMF.Expressions.IEnumerableExpression<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>)
  nameWithType.vb: ExpressionExtensions.Join(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Join(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.IEnumerableExpression(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult)))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(IEnumerableExpression(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
    name: Join
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TOuter
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Join``4(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
    name: Join
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  isExternal: true
  name: Max<TSource>(IEnumerableExpression<TSource>, IComparer<TSource>)
  nameWithType: ExpressionExtensions.Max<TSource>(IEnumerableExpression<TSource>, IComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IComparer<TSource>)
  nameWithType.vb: ExpressionExtensions.Max(Of TSource)(IEnumerableExpression(Of TSource), IComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IComparer(Of TSource))
  name.vb: Max(Of TSource)(IEnumerableExpression(Of TSource), IComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
    name: Max
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  nameWithType: ExpressionExtensions.Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ExpressionExtensions.Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Max
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  isExternal: true
  name: Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, Func<TSource, TResult>)
  nameWithType: ExpressionExtensions.Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, Func<TSource, TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Func<TSource, TResult>)
  nameWithType.vb: ExpressionExtensions.Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), Func(Of TSource, TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Func(Of TSource, TResult))
  name.vb: Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), Func(Of TSource, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
    name: Max
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>)
  nameWithType: ExpressionExtensions.Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  nameWithType.vb: ExpressionExtensions.Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Max
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult?>>, IComparer<TResult>)
  nameWithType: ExpressionExtensions.Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult?>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult?>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ExpressionExtensions.Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult?)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult?)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult?)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Max
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  isExternal: true
  name: Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult?>>)
  nameWithType: ExpressionExtensions.Max<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult?>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Max<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult?>>)
  nameWithType.vb: ExpressionExtensions.Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult?)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Max(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult?)))
  name.vb: Max(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Max
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Max``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
  isExternal: true
  name: Min<TSource>(IEnumerableExpression<TSource>, IComparer<TSource>)
  nameWithType: ExpressionExtensions.Min<TSource>(IEnumerableExpression<TSource>, IComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IComparer<TSource>)
  nameWithType.vb: ExpressionExtensions.Min(Of TSource)(IEnumerableExpression(Of TSource), IComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IComparer(Of TSource))
  name.vb: Min(Of TSource)(IEnumerableExpression(Of TSource), IComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
    name: Min
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IComparer{``0})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  nameWithType: ExpressionExtensions.Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ExpressionExtensions.Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Min
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>)
  nameWithType: ExpressionExtensions.Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  nameWithType.vb: ExpressionExtensions.Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Min
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult?>>, IComparer<TResult>)
  nameWithType: ExpressionExtensions.Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult?>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult?>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ExpressionExtensions.Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult?)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult?)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult?)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Min
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  isExternal: true
  name: Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult?>>)
  nameWithType: ExpressionExtensions.Min<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult?>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Min<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult?>>)
  nameWithType.vb: ExpressionExtensions.Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult?)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Min(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult?)))
  name.vb: Min(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Min
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Min``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: OrderBy<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ExpressionExtensions.OrderBy<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy<TItem, TKey>(NMF.Expressions.IEnumerableExpression<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.OrderBy(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OrderBy(Of TItem, TKey)(NMF.Expressions.IEnumerableExpression(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderBy(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderBy
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderBy
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: OrderBy<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>)
  nameWithType: ExpressionExtensions.OrderBy<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderBy<TItem, TKey>(NMF.Expressions.IEnumerableExpression<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ExpressionExtensions.OrderBy(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OrderBy(Of TItem, TKey)(NMF.Expressions.IEnumerableExpression(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: OrderBy(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderBy
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderBy``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderBy
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: OrderByDescending<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ExpressionExtensions.OrderByDescending<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending<TItem, TKey>(NMF.Expressions.IEnumerableExpression<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.OrderByDescending(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending(Of TItem, TKey)(NMF.Expressions.IEnumerableExpression(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderByDescending(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: OrderByDescending<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>)
  nameWithType: ExpressionExtensions.OrderByDescending<TItem, TKey>(IEnumerableExpression<TItem>, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending<TItem, TKey>(NMF.Expressions.IEnumerableExpression<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ExpressionExtensions.OrderByDescending(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending(Of TItem, TKey)(NMF.Expressions.IEnumerableExpression(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: OrderByDescending(Of TItem, TKey)(IEnumerableExpression(Of TItem), Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderByDescending
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.OrderByDescending``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderByDescending
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  isExternal: true
  name: Select<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, Func<TSource, TResult>)
  nameWithType: ExpressionExtensions.Select<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>, Func<TSource, TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Select<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Func<TSource, TResult>)
  nameWithType.vb: ExpressionExtensions.Select(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), Func(Of TSource, TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Select(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Func(Of TSource, TResult))
  name.vb: Select(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)), Func(Of TSource, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
    name: Select
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
    name: Select
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: Select<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>)
  nameWithType: ExpressionExtensions.Select<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Select<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  nameWithType.vb: ExpressionExtensions.Select(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Select(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Select(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Select
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Select``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Select
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  isExternal: true
  name: SelectMany<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, IEnumerable<TResult>>>)
  nameWithType: ExpressionExtensions.SelectMany<TSource, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, IEnumerable<TResult>>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany<TSource, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>>)
  nameWithType.vb: ExpressionExtensions.SelectMany(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SelectMany(Of TSource, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult))))
  name.vb: SelectMany(Of TSource, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
    name: SelectMany
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
    name: SelectMany
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  isExternal: true
  name: SelectMany<TSource, TIntermediate, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, IEnumerable<TIntermediate>>>, Expression<Func<TSource, TIntermediate, TResult>>)
  nameWithType: ExpressionExtensions.SelectMany<TSource, TIntermediate, TResult>(IEnumerableExpression<TSource>, Expression<Func<TSource, IEnumerable<TIntermediate>>>, Expression<Func<TSource, TIntermediate, TResult>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SelectMany<TSource, TIntermediate, TResult>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TIntermediate>>>, System.Linq.Expressions.Expression<System.Func<TSource, TIntermediate, TResult>>)
  nameWithType.vb: ExpressionExtensions.SelectMany(Of TSource, TIntermediate, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate))), Expression(Of Func(Of TSource, TIntermediate, TResult)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SelectMany(Of TSource, TIntermediate, TResult)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TIntermediate))), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TIntermediate, TResult)))
  name.vb: SelectMany(Of TSource, TIntermediate, TResult)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate))), Expression(Of Func(Of TSource, TIntermediate, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
    name: SelectMany
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIntermediate
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SelectMany``3(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
    name: SelectMany
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIntermediate
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: SetEquals<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ExpressionExtensions.SetEquals<T>(IEnumerableExpression<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ExpressionExtensions.SetEquals(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SetEquals(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: SetEquals(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: SetEquals
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: SetEquals
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: SetEquals<T>(IEnumerableExpression<T>, IEnumerable<T>)
  nameWithType: ExpressionExtensions.SetEquals<T>(IEnumerableExpression<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SetEquals<T>(NMF.Expressions.IEnumerableExpression<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ExpressionExtensions.SetEquals(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SetEquals(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: SetEquals(Of T)(IEnumerableExpression(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: SetEquals
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SetEquals``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: SetEquals
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
  name: SingleOrDefault<TSource>(IEnumerableExpression<TSource>)
  nameWithType: ExpressionExtensions.SingleOrDefault<TSource>(IEnumerableExpression<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TSource>(NMF.Expressions.IEnumerableExpression<TSource>)
  nameWithType.vb: ExpressionExtensions.SingleOrDefault(Of TSource)(IEnumerableExpression(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource))
  name.vb: SingleOrDefault(Of TSource)(IEnumerableExpression(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
    name: SingleOrDefault
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0})
    name: SingleOrDefault
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  isExternal: true
  name: SingleOrDefault<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, bool>>, Func<TSource, bool>)
  nameWithType: ExpressionExtensions.SingleOrDefault<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, bool>>, Func<TSource, bool>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, bool>>, System.Func<TSource, bool>)
  nameWithType.vb: ExpressionExtensions.SingleOrDefault(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)), Func(Of TSource, Boolean))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Boolean)), System.Func(Of TSource, Boolean))
  name.vb: SingleOrDefault(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)), Func(Of TSource, Boolean))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
    name: SingleOrDefault
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
    name: SingleOrDefault
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: SingleOrDefault<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, bool>>)
  nameWithType: ExpressionExtensions.SingleOrDefault<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, bool>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, bool>>)
  nameWithType.vb: ExpressionExtensions.SingleOrDefault(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Boolean)))
  name.vb: SingleOrDefault(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: SingleOrDefault
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.SingleOrDefault``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: SingleOrDefault
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, decimal>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, decimal>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, decimal>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Decimal)))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, double>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, double>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, double>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Double)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Double)))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Double)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, int>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, int>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, int>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Integer)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Integer)))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Integer)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, long>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, long>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, long>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Long)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Long)))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Long)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, decimal?>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, decimal?>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, decimal?>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Decimal?)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Decimal?)))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Decimal?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, double?>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, double?>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, double?>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Double?)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Double?)))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Double?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, int?>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, int?>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, int?>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Integer?)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Integer?)))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Integer?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, long?>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, long?>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, long?>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Long?)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Long?)))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Long?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, float?>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, float?>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, float?>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Single?)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Single?)))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Single?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  isExternal: true
  name: Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, float>>)
  nameWithType: ExpressionExtensions.Sum<TSource>(IEnumerableExpression<TSource>, Expression<Func<TSource, float>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Sum<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, float>>)
  nameWithType.vb: ExpressionExtensions.Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Single)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Sum(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Single)))
  name.vb: Sum(Of TSource)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, Single)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Sum``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: TopX<TItem, TKey>(IEnumerableExpression<TItem>, int, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ExpressionExtensions.TopX<TItem, TKey>(IEnumerableExpression<TItem>, int, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX<TItem, TKey>(NMF.Expressions.IEnumerableExpression<TItem>, int, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ExpressionExtensions.TopX(Of TItem, TKey)(IEnumerableExpression(Of TItem), Integer, Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.TopX(Of TItem, TKey)(NMF.Expressions.IEnumerableExpression(Of TItem), Integer, System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: TopX(Of TItem, TKey)(IEnumerableExpression(Of TItem), Integer, Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: TopX
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: TopX
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: TopX<TItem, TKey>(IEnumerableExpression<TItem>, int, Expression<Func<TItem, TKey>>)
  nameWithType: ExpressionExtensions.TopX<TItem, TKey>(IEnumerableExpression<TItem>, int, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.TopX<TItem, TKey>(NMF.Expressions.IEnumerableExpression<TItem>, int, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ExpressionExtensions.TopX(Of TItem, TKey)(IEnumerableExpression(Of TItem), Integer, Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.TopX(Of TItem, TKey)(NMF.Expressions.IEnumerableExpression(Of TItem), Integer, System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: TopX(Of TItem, TKey)(IEnumerableExpression(Of TItem), Integer, Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: TopX
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.TopX``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: TopX
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Union<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ExpressionExtensions.Union<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Union<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ExpressionExtensions.Union(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Union(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Union(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Union
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Union
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Union<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  nameWithType: ExpressionExtensions.Union<TSource>(IEnumerableExpression<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Union<TSource>(NMF.Expressions.IEnumerableExpression<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: ExpressionExtensions.Union(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Union(Of TSource)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Union(Of TSource)(IEnumerableExpression(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: Union
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Union``1(NMF.Expressions.IEnumerableExpression{``0},System.Collections.Generic.IEnumerable{``0})
    name: Union
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  isExternal: true
  name: Where<T>(IEnumerableExpression<T>, Expression<Func<T, bool>>, Func<T, bool>)
  nameWithType: ExpressionExtensions.Where<T>(IEnumerableExpression<T>, Expression<Func<T, bool>>, Func<T, bool>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Where<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, bool>>, System.Func<T, bool>)
  nameWithType.vb: ExpressionExtensions.Where(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)), Func(Of T, Boolean))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Where(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)), System.Func(Of T, Boolean))
  name.vb: Where(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)), Func(Of T, Boolean))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
    name: Where
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
    name: Where
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: Where<T>(IEnumerableExpression<T>, Expression<Func<T, bool>>)
  nameWithType: ExpressionExtensions.Where<T>(IEnumerableExpression<T>, Expression<Func<T, bool>>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.Where<T>(NMF.Expressions.IEnumerableExpression<T>, System.Linq.Expressions.Expression<System.Func<T, bool>>)
  nameWithType.vb: ExpressionExtensions.Where(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.Where(Of T)(NMF.Expressions.IEnumerableExpression(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)))
  name.vb: Where(Of T)(IEnumerableExpression(Of T), Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.Where``1(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: ToLookup<TSource, TKey>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>)
  nameWithType: LookupExtensions.ToLookup<TSource, TKey>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>)
  fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TSource, TKey>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  nameWithType.vb: LookupExtensions.ToLookup(Of TSource, TKey)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)))
  fullName.vb: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TSource, TKey)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: ToLookup(Of TSource, TKey)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.LookupExtensions
  commentId: T:NMF.Expressions.Linq.LookupExtensions
  parent: NMF.Expressions.Linq
  name: LookupExtensions
  nameWithType: LookupExtensions
  fullName: NMF.Expressions.Linq.LookupExtensions
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  isExternal: true
  name: Chunk<T, TResult>(IEnumerable<T>, int, Func<IEnumerableExpression<T>, int, TResult>)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(IEnumerable<T>, int, Func<IEnumerableExpression<T>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<T>, int, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(IEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(System.Collections.Generic.IEnumerable(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), Integer, TResult))
  name.vb: Chunk(Of T, TResult)(IEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
    name: Chunk
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
    name: Chunk
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  isExternal: true
  name: ChunkIndexed<T, TResult>(IEnumerable<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(IEnumerable<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<(T, int)>, int, TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(IEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(System.Collections.Generic.IEnumerable(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  name.vb: ChunkIndexed(Of T, TResult)(IEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: WithUpdates<T>(IEnumerable<T>)
  nameWithType: ObservableExtensions.WithUpdates<T>(IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.WithUpdates(Of T)(IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: WithUpdates(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
    name: WithUpdates
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
    name: WithUpdates
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions
  commentId: T:NMF.Expressions.Linq.ObservableExtensions
  parent: NMF.Expressions.Linq
  name: ObservableExtensions
  nameWithType: ObservableExtensions
  fullName: NMF.Expressions.Linq.ObservableExtensions
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
- uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable*
  commentId: Overload:NMF.Expressions.IEnumerableExpression`1.AsNotifiable
  name: AsNotifiable
  nameWithType: IEnumerableExpression<T>.AsNotifiable
  fullName: NMF.Expressions.IEnumerableExpression<T>.AsNotifiable
  nameWithType.vb: IEnumerableExpression(Of T).AsNotifiable
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T).AsNotifiable
- uid: NMF.Expressions.INotifyEnumerable{{T}}
  commentId: T:NMF.Expressions.INotifyEnumerable{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<T>
  nameWithType: INotifyEnumerable<T>
  fullName: NMF.Expressions.INotifyEnumerable<T>
  nameWithType.vb: INotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of T)
  name.vb: INotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifyEnumerable`1
  commentId: T:NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<T>
  nameWithType: INotifyEnumerable<T>
  fullName: NMF.Expressions.INotifyEnumerable<T>
  nameWithType.vb: INotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of T)
  name.vb: INotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
