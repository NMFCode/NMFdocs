### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.NotifyReversableValue`1
  commentId: T:NMF.Expressions.NotifyReversableValue`1
  id: NotifyReversableValue`1
  parent: NMF.Expressions
  children:
  - NMF.Expressions.NotifyReversableValue`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0}},System.Collections.Generic.IDictionary{System.String,System.Object})
  - NMF.Expressions.NotifyReversableValue`1.AllSuccessors
  - NMF.Expressions.NotifyReversableValue`1.Count
  - NMF.Expressions.NotifyReversableValue`1.Dependencies
  - NMF.Expressions.NotifyReversableValue`1.Dispose
  - NMF.Expressions.NotifyReversableValue`1.Dispose(System.Boolean)
  - NMF.Expressions.NotifyReversableValue`1.ExecutionMetaData
  - NMF.Expressions.NotifyReversableValue`1.GetSuccessor(System.Int32)
  - NMF.Expressions.NotifyReversableValue`1.HasSuccessors
  - NMF.Expressions.NotifyReversableValue`1.IsAttached
  - NMF.Expressions.NotifyReversableValue`1.IsReversable
  - NMF.Expressions.NotifyReversableValue`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  - NMF.Expressions.NotifyReversableValue`1.OnAttach
  - NMF.Expressions.NotifyReversableValue`1.OnDetach
  - NMF.Expressions.NotifyReversableValue`1.OnPropertyChanged(System.String)
  - NMF.Expressions.NotifyReversableValue`1.OnValueChanged(`0,`0)
  - NMF.Expressions.NotifyReversableValue`1.PropertyChanged
  - NMF.Expressions.NotifyReversableValue`1.Set(NMF.Expressions.INotifiable)
  - NMF.Expressions.NotifyReversableValue`1.SetDummy
  - NMF.Expressions.NotifyReversableValue`1.Successors
  - NMF.Expressions.NotifyReversableValue`1.Unset(NMF.Expressions.INotifiable,System.Boolean)
  - NMF.Expressions.NotifyReversableValue`1.UnsetAll
  - NMF.Expressions.NotifyReversableValue`1.Value
  - NMF.Expressions.NotifyReversableValue`1.ValueChanged
  langs:
  - csharp
  - vb
  name: NotifyReversableValue<T>
  nameWithType: NotifyReversableValue<T>
  fullName: NMF.Expressions.NotifyReversableValue<T>
  type: Class
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NotifyReversableValue
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 134
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: 'public class NotifyReversableValue<T> : INotifyReversableValue<T>, INotifyValue<T>, INotifiable, IDisposable, INotifyPropertyChanged, ISuccessorList'
    typeParameters:
    - id: T
    content.vb: Public Class NotifyReversableValue(Of T) Implements INotifyReversableValue(Of T), INotifyValue(Of T), INotifiable, IDisposable, INotifyPropertyChanged, ISuccessorList
  inheritance:
  - System.Object
  implements:
  - NMF.Expressions.INotifyReversableValue{{T}}
  - NMF.Expressions.INotifyValue{{T}}
  - NMF.Expressions.INotifiable
  - System.IDisposable
  - System.ComponentModel.INotifyPropertyChanged
  - NMF.Expressions.ISuccessorList
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - NMF.Expressions.INotifiable.NMF.Expressions.Debug.DebugExtensions.ExportToDgml(System.String)
  - NMF.Expressions.INotifiable.NMF.Expressions.Debug.DebugExtensions.Visualize
  - NMF.Expressions.INotifyValue{`0}.NMF.Expressions.ReversableExtensions.AsReversable``1(System.Action{{T}})
  - NMF.Expressions.NotifyReversableValue`1.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  nameWithType.vb: NotifyReversableValue(Of T)
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T)
  name.vb: NotifyReversableValue(Of T)
- uid: NMF.Expressions.NotifyReversableValue`1.Value
  commentId: P:NMF.Expressions.NotifyReversableValue`1.Value
  id: Value
  parent: NMF.Expressions.NotifyReversableValue`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: NotifyReversableValue<T>.Value
  fullName: NMF.Expressions.NotifyReversableValue<T>.Value
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Value
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 138
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public T Value { get; set; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public Property Value As T
  overload: NMF.Expressions.NotifyReversableValue`1.Value*
  implements:
  - NMF.Expressions.INotifyReversableValue{{T}}.Value
  - NMF.Expressions.INotifyValue{{T}}.Value
  nameWithType.vb: NotifyReversableValue(Of T).Value
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).Value
- uid: NMF.Expressions.NotifyReversableValue`1.ValueChanged
  commentId: E:NMF.Expressions.NotifyReversableValue`1.ValueChanged
  id: ValueChanged
  parent: NMF.Expressions.NotifyReversableValue`1
  langs:
  - csharp
  - vb
  name: ValueChanged
  nameWithType: NotifyReversableValue<T>.ValueChanged
  fullName: NMF.Expressions.NotifyReversableValue<T>.ValueChanged
  type: Event
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ValueChanged
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 150
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public event EventHandler<ValueChangedEventArgs> ValueChanged
    return:
      type: System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
    content.vb: Public Event ValueChanged As EventHandler(Of ValueChangedEventArgs)
  implements:
  - NMF.Expressions.INotifyValue{{T}}.ValueChanged
  nameWithType.vb: NotifyReversableValue(Of T).ValueChanged
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).ValueChanged
- uid: NMF.Expressions.NotifyReversableValue`1.PropertyChanged
  commentId: E:NMF.Expressions.NotifyReversableValue`1.PropertyChanged
  id: PropertyChanged
  parent: NMF.Expressions.NotifyReversableValue`1
  langs:
  - csharp
  - vb
  name: PropertyChanged
  nameWithType: NotifyReversableValue<T>.PropertyChanged
  fullName: NMF.Expressions.NotifyReversableValue<T>.PropertyChanged
  type: Event
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: PropertyChanged
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 152
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public event PropertyChangedEventHandler PropertyChanged
    return:
      type: System.ComponentModel.PropertyChangedEventHandler
    content.vb: Public Event PropertyChanged As PropertyChangedEventHandler
  implements:
  - System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  nameWithType.vb: NotifyReversableValue(Of T).PropertyChanged
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).PropertyChanged
- uid: NMF.Expressions.NotifyReversableValue`1.Successors
  commentId: P:NMF.Expressions.NotifyReversableValue`1.Successors
  id: Successors
  parent: NMF.Expressions.NotifyReversableValue`1
  langs:
  - csharp
  - vb
  name: Successors
  nameWithType: NotifyReversableValue<T>.Successors
  fullName: NMF.Expressions.NotifyReversableValue<T>.Successors
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Successors
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 155
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public ISuccessorList Successors { get; }
    parameters: []
    return:
      type: NMF.Expressions.ISuccessorList
    content.vb: Public ReadOnly Property Successors As ISuccessorList
  overload: NMF.Expressions.NotifyReversableValue`1.Successors*
  implements:
  - NMF.Expressions.INotifiable.Successors
  nameWithType.vb: NotifyReversableValue(Of T).Successors
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).Successors
- uid: NMF.Expressions.NotifyReversableValue`1.Dependencies
  commentId: P:NMF.Expressions.NotifyReversableValue`1.Dependencies
  id: Dependencies
  parent: NMF.Expressions.NotifyReversableValue`1
  langs:
  - csharp
  - vb
  name: Dependencies
  nameWithType: NotifyReversableValue<T>.Dependencies
  fullName: NMF.Expressions.NotifyReversableValue<T>.Dependencies
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Dependencies
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 157
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public IEnumerable<INotifiable> Dependencies { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
    content.vb: Public ReadOnly Property Dependencies As IEnumerable(Of INotifiable)
  overload: NMF.Expressions.NotifyReversableValue`1.Dependencies*
  implements:
  - NMF.Expressions.INotifiable.Dependencies
  nameWithType.vb: NotifyReversableValue(Of T).Dependencies
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).Dependencies
- uid: NMF.Expressions.NotifyReversableValue`1.ExecutionMetaData
  commentId: P:NMF.Expressions.NotifyReversableValue`1.ExecutionMetaData
  id: ExecutionMetaData
  parent: NMF.Expressions.NotifyReversableValue`1
  langs:
  - csharp
  - vb
  name: ExecutionMetaData
  nameWithType: NotifyReversableValue<T>.ExecutionMetaData
  fullName: NMF.Expressions.NotifyReversableValue<T>.ExecutionMetaData
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ExecutionMetaData
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 159
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public ExecutionMetaData ExecutionMetaData { get; }
    parameters: []
    return:
      type: NMF.Expressions.ExecutionMetaData
    content.vb: Public ReadOnly Property ExecutionMetaData As ExecutionMetaData
  overload: NMF.Expressions.NotifyReversableValue`1.ExecutionMetaData*
  implements:
  - NMF.Expressions.INotifiable.ExecutionMetaData
  nameWithType.vb: NotifyReversableValue(Of T).ExecutionMetaData
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).ExecutionMetaData
- uid: NMF.Expressions.NotifyReversableValue`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0}},System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:NMF.Expressions.NotifyReversableValue`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0}},System.Collections.Generic.IDictionary{System.String,System.Object})
  id: '#ctor(System.Linq.Expressions.Expression{System.Func{`0}},System.Collections.Generic.IDictionary{System.String,System.Object})'
  parent: NMF.Expressions.NotifyReversableValue`1
  langs:
  - csharp
  - vb
  name: NotifyReversableValue(Expression<Func<T>>, IDictionary<string, object>)
  nameWithType: NotifyReversableValue<T>.NotifyReversableValue(Expression<Func<T>>, IDictionary<string, object>)
  fullName: NMF.Expressions.NotifyReversableValue<T>.NotifyReversableValue(System.Linq.Expressions.Expression<System.Func<T>>, System.Collections.Generic.IDictionary<string, object>)
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 161
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public NotifyReversableValue(Expression<Func<T>> expression, IDictionary<string, object> parameterMappings = null)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T}}}
    - id: parameterMappings
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
    content.vb: Public Sub New(expression As Expression(Of Func(Of T)), parameterMappings As IDictionary(Of String, Object) = Nothing)
  overload: NMF.Expressions.NotifyReversableValue`1.#ctor*
  nameWithType.vb: NotifyReversableValue(Of T).New(Expression(Of Func(Of T)), IDictionary(Of String, Object))
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).New(System.Linq.Expressions.Expression(Of System.Func(Of T)), System.Collections.Generic.IDictionary(Of String, Object))
  name.vb: New(Expression(Of Func(Of T)), IDictionary(Of String, Object))
- uid: NMF.Expressions.NotifyReversableValue`1.IsReversable
  commentId: P:NMF.Expressions.NotifyReversableValue`1.IsReversable
  id: IsReversable
  parent: NMF.Expressions.NotifyReversableValue`1
  langs:
  - csharp
  - vb
  name: IsReversable
  nameWithType: NotifyReversableValue<T>.IsReversable
  fullName: NMF.Expressions.NotifyReversableValue<T>.IsReversable
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsReversable
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 171
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public bool IsReversable { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReversable As Boolean
  overload: NMF.Expressions.NotifyReversableValue`1.IsReversable*
  implements:
  - NMF.Expressions.INotifyReversableValue{{T}}.IsReversable
  nameWithType.vb: NotifyReversableValue(Of T).IsReversable
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).IsReversable
- uid: NMF.Expressions.NotifyReversableValue`1.OnValueChanged(`0,`0)
  commentId: M:NMF.Expressions.NotifyReversableValue`1.OnValueChanged(`0,`0)
  id: OnValueChanged(`0,`0)
  parent: NMF.Expressions.NotifyReversableValue`1
  langs:
  - csharp
  - vb
  name: OnValueChanged(T, T)
  nameWithType: NotifyReversableValue<T>.OnValueChanged(T, T)
  fullName: NMF.Expressions.NotifyReversableValue<T>.OnValueChanged(T, T)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnValueChanged
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 176
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected virtual void OnValueChanged(T oldValue, T newValue)
    parameters:
    - id: oldValue
      type: '{T}'
    - id: newValue
      type: '{T}'
    content.vb: Protected Overridable Sub OnValueChanged(oldValue As T, newValue As T)
  overload: NMF.Expressions.NotifyReversableValue`1.OnValueChanged*
  nameWithType.vb: NotifyReversableValue(Of T).OnValueChanged(T, T)
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).OnValueChanged(T, T)
- uid: NMF.Expressions.NotifyReversableValue`1.OnPropertyChanged(System.String)
  commentId: M:NMF.Expressions.NotifyReversableValue`1.OnPropertyChanged(System.String)
  id: OnPropertyChanged(System.String)
  parent: NMF.Expressions.NotifyReversableValue`1
  langs:
  - csharp
  - vb
  name: OnPropertyChanged(string)
  nameWithType: NotifyReversableValue<T>.OnPropertyChanged(string)
  fullName: NMF.Expressions.NotifyReversableValue<T>.OnPropertyChanged(string)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnPropertyChanged
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 181
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected virtual void OnPropertyChanged(string propertyName)
    parameters:
    - id: propertyName
      type: System.String
    content.vb: Protected Overridable Sub OnPropertyChanged(propertyName As String)
  overload: NMF.Expressions.NotifyReversableValue`1.OnPropertyChanged*
  nameWithType.vb: NotifyReversableValue(Of T).OnPropertyChanged(String)
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).OnPropertyChanged(String)
  name.vb: OnPropertyChanged(String)
- uid: NMF.Expressions.NotifyReversableValue`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  commentId: M:NMF.Expressions.NotifyReversableValue`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  id: Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  parent: NMF.Expressions.NotifyReversableValue`1
  langs:
  - csharp
  - vb
  name: Notify(IList<INotificationResult>)
  nameWithType: NotifyReversableValue<T>.Notify(IList<INotificationResult>)
  fullName: NMF.Expressions.NotifyReversableValue<T>.Notify(System.Collections.Generic.IList<NMF.Expressions.INotificationResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Notify
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 186
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public virtual INotificationResult Notify(IList<INotificationResult> sources)
    parameters:
    - id: sources
      type: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
    return:
      type: NMF.Expressions.INotificationResult
    content.vb: Public Overridable Function Notify(sources As IList(Of INotificationResult)) As INotificationResult
  overload: NMF.Expressions.NotifyReversableValue`1.Notify*
  implements:
  - NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  nameWithType.vb: NotifyReversableValue(Of T).Notify(IList(Of INotificationResult))
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).Notify(System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
- uid: NMF.Expressions.NotifyReversableValue`1.Dispose
  commentId: M:NMF.Expressions.NotifyReversableValue`1.Dispose
  id: Dispose
  parent: NMF.Expressions.NotifyReversableValue`1
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: NotifyReversableValue<T>.Dispose()
  fullName: NMF.Expressions.NotifyReversableValue<T>.Dispose()
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Dispose
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 198
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose()
  overload: NMF.Expressions.NotifyReversableValue`1.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: NotifyReversableValue(Of T).Dispose()
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).Dispose()
- uid: NMF.Expressions.NotifyReversableValue`1.Dispose(System.Boolean)
  commentId: M:NMF.Expressions.NotifyReversableValue`1.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: NMF.Expressions.NotifyReversableValue`1
  langs:
  - csharp
  - vb
  name: Dispose(bool)
  nameWithType: NotifyReversableValue<T>.Dispose(bool)
  fullName: NMF.Expressions.NotifyReversableValue<T>.Dispose(bool)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Dispose
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 204
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: NMF.Expressions.NotifyReversableValue`1.Dispose*
  nameWithType.vb: NotifyReversableValue(Of T).Dispose(Boolean)
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).Dispose(Boolean)
  name.vb: Dispose(Boolean)
- uid: NMF.Expressions.NotifyReversableValue`1.OnAttach
  commentId: M:NMF.Expressions.NotifyReversableValue`1.OnAttach
  id: OnAttach
  parent: NMF.Expressions.NotifyReversableValue`1
  langs:
  - csharp
  - vb
  name: OnAttach()
  nameWithType: NotifyReversableValue<T>.OnAttach()
  fullName: NMF.Expressions.NotifyReversableValue<T>.OnAttach()
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnAttach
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 227
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nOccurs when this node gets (re)attached to another node for the first time\n"
  example: []
  syntax:
    content: protected virtual void OnAttach()
    content.vb: Protected Overridable Sub OnAttach()
  overload: NMF.Expressions.NotifyReversableValue`1.OnAttach*
  nameWithType.vb: NotifyReversableValue(Of T).OnAttach()
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).OnAttach()
- uid: NMF.Expressions.NotifyReversableValue`1.OnDetach
  commentId: M:NMF.Expressions.NotifyReversableValue`1.OnDetach
  id: OnDetach
  parent: NMF.Expressions.NotifyReversableValue`1
  langs:
  - csharp
  - vb
  name: OnDetach()
  nameWithType: NotifyReversableValue<T>.OnDetach()
  fullName: NMF.Expressions.NotifyReversableValue<T>.OnDetach()
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnDetach
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 232
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nOccurs when the last successor of this node gets removed\n"
  example: []
  syntax:
    content: protected virtual void OnDetach()
    content.vb: Protected Overridable Sub OnDetach()
  overload: NMF.Expressions.NotifyReversableValue`1.OnDetach*
  nameWithType.vb: NotifyReversableValue(Of T).OnDetach()
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).OnDetach()
- uid: NMF.Expressions.NotifyReversableValue`1.HasSuccessors
  commentId: P:NMF.Expressions.NotifyReversableValue`1.HasSuccessors
  id: HasSuccessors
  parent: NMF.Expressions.NotifyReversableValue`1
  langs:
  - csharp
  - vb
  name: HasSuccessors
  nameWithType: NotifyReversableValue<T>.HasSuccessors
  fullName: NMF.Expressions.NotifyReversableValue<T>.HasSuccessors
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: HasSuccessors
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 241
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: public bool HasSuccessors { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property HasSuccessors As Boolean
  overload: NMF.Expressions.NotifyReversableValue`1.HasSuccessors*
  implements:
  - NMF.Expressions.ISuccessorList.HasSuccessors
  nameWithType.vb: NotifyReversableValue(Of T).HasSuccessors
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).HasSuccessors
- uid: NMF.Expressions.NotifyReversableValue`1.IsAttached
  commentId: P:NMF.Expressions.NotifyReversableValue`1.IsAttached
  id: IsAttached
  parent: NMF.Expressions.NotifyReversableValue`1
  langs:
  - csharp
  - vb
  name: IsAttached
  nameWithType: NotifyReversableValue<T>.IsAttached
  fullName: NMF.Expressions.NotifyReversableValue<T>.IsAttached
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsAttached
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 244
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: public bool IsAttached { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsAttached As Boolean
  overload: NMF.Expressions.NotifyReversableValue`1.IsAttached*
  implements:
  - NMF.Expressions.ISuccessorList.IsAttached
  nameWithType.vb: NotifyReversableValue(Of T).IsAttached
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).IsAttached
- uid: NMF.Expressions.NotifyReversableValue`1.Count
  commentId: P:NMF.Expressions.NotifyReversableValue`1.Count
  id: Count
  parent: NMF.Expressions.NotifyReversableValue`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: NotifyReversableValue<T>.Count
  fullName: NMF.Expressions.NotifyReversableValue<T>.Count
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Count
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 247
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: NMF.Expressions.NotifyReversableValue`1.Count*
  implements:
  - NMF.Expressions.ISuccessorList.Count
  nameWithType.vb: NotifyReversableValue(Of T).Count
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).Count
- uid: NMF.Expressions.NotifyReversableValue`1.AllSuccessors
  commentId: P:NMF.Expressions.NotifyReversableValue`1.AllSuccessors
  id: AllSuccessors
  parent: NMF.Expressions.NotifyReversableValue`1
  langs:
  - csharp
  - vb
  name: AllSuccessors
  nameWithType: NotifyReversableValue<T>.AllSuccessors
  fullName: NMF.Expressions.NotifyReversableValue<T>.AllSuccessors
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AllSuccessors
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 249
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public IEnumerable<INotifiable> AllSuccessors { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
    content.vb: Public ReadOnly Property AllSuccessors As IEnumerable(Of INotifiable)
  overload: NMF.Expressions.NotifyReversableValue`1.AllSuccessors*
  nameWithType.vb: NotifyReversableValue(Of T).AllSuccessors
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).AllSuccessors
- uid: NMF.Expressions.NotifyReversableValue`1.Set(NMF.Expressions.INotifiable)
  commentId: M:NMF.Expressions.NotifyReversableValue`1.Set(NMF.Expressions.INotifiable)
  id: Set(NMF.Expressions.INotifiable)
  parent: NMF.Expressions.NotifyReversableValue`1
  langs:
  - csharp
  - vb
  name: Set(INotifiable)
  nameWithType: NotifyReversableValue<T>.Set(INotifiable)
  fullName: NMF.Expressions.NotifyReversableValue<T>.Set(NMF.Expressions.INotifiable)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Set
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 253
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: public void Set(INotifiable node)
    parameters:
    - id: node
      type: NMF.Expressions.INotifiable
    content.vb: Public Sub [Set](node As INotifiable)
  overload: NMF.Expressions.NotifyReversableValue`1.Set*
  implements:
  - NMF.Expressions.ISuccessorList.Set(NMF.Expressions.INotifiable)
  nameWithType.vb: NotifyReversableValue(Of T).Set(INotifiable)
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).Set(NMF.Expressions.INotifiable)
- uid: NMF.Expressions.NotifyReversableValue`1.SetDummy
  commentId: M:NMF.Expressions.NotifyReversableValue`1.SetDummy
  id: SetDummy
  parent: NMF.Expressions.NotifyReversableValue`1
  langs:
  - csharp
  - vb
  name: SetDummy()
  nameWithType: NotifyReversableValue<T>.SetDummy()
  fullName: NMF.Expressions.NotifyReversableValue<T>.SetDummy()
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SetDummy
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 274
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: public void SetDummy()
    content.vb: Public Sub SetDummy()
  overload: NMF.Expressions.NotifyReversableValue`1.SetDummy*
  implements:
  - NMF.Expressions.ISuccessorList.SetDummy
  nameWithType.vb: NotifyReversableValue(Of T).SetDummy()
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).SetDummy()
- uid: NMF.Expressions.NotifyReversableValue`1.Unset(NMF.Expressions.INotifiable,System.Boolean)
  commentId: M:NMF.Expressions.NotifyReversableValue`1.Unset(NMF.Expressions.INotifiable,System.Boolean)
  id: Unset(NMF.Expressions.INotifiable,System.Boolean)
  parent: NMF.Expressions.NotifyReversableValue`1
  langs:
  - csharp
  - vb
  name: Unset(INotifiable, bool)
  nameWithType: NotifyReversableValue<T>.Unset(INotifiable, bool)
  fullName: NMF.Expressions.NotifyReversableValue<T>.Unset(NMF.Expressions.INotifiable, bool)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Unset
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 285
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: public void Unset(INotifiable node, bool leaveDummy = false)
    parameters:
    - id: node
      type: NMF.Expressions.INotifiable
    - id: leaveDummy
      type: System.Boolean
    content.vb: Public Sub Unset(node As INotifiable, leaveDummy As Boolean = False)
  overload: NMF.Expressions.NotifyReversableValue`1.Unset*
  implements:
  - NMF.Expressions.ISuccessorList.Unset(NMF.Expressions.INotifiable,System.Boolean)
  nameWithType.vb: NotifyReversableValue(Of T).Unset(INotifiable, Boolean)
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).Unset(NMF.Expressions.INotifiable, Boolean)
  name.vb: Unset(INotifiable, Boolean)
- uid: NMF.Expressions.NotifyReversableValue`1.UnsetAll
  commentId: M:NMF.Expressions.NotifyReversableValue`1.UnsetAll
  id: UnsetAll
  parent: NMF.Expressions.NotifyReversableValue`1
  langs:
  - csharp
  - vb
  name: UnsetAll()
  nameWithType: NotifyReversableValue<T>.UnsetAll()
  fullName: NMF.Expressions.NotifyReversableValue<T>.UnsetAll()
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: UnsetAll
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 302
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: public void UnsetAll()
    content.vb: Public Sub UnsetAll()
  overload: NMF.Expressions.NotifyReversableValue`1.UnsetAll*
  implements:
  - NMF.Expressions.ISuccessorList.UnsetAll
  nameWithType.vb: NotifyReversableValue(Of T).UnsetAll()
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).UnsetAll()
- uid: NMF.Expressions.NotifyReversableValue`1.GetSuccessor(System.Int32)
  commentId: M:NMF.Expressions.NotifyReversableValue`1.GetSuccessor(System.Int32)
  id: GetSuccessor(System.Int32)
  parent: NMF.Expressions.NotifyReversableValue`1
  langs:
  - csharp
  - vb
  name: GetSuccessor(int)
  nameWithType: NotifyReversableValue<T>.GetSuccessor(int)
  fullName: NMF.Expressions.NotifyReversableValue<T>.GetSuccessor(int)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/NotifyValue.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetSuccessor
    path: src/Expressions/Expressions/Public/NotifyValue.cs
    startLine: 312
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: public INotifiable GetSuccessor(int index)
    parameters:
    - id: index
      type: System.Int32
    return:
      type: NMF.Expressions.INotifiable
    content.vb: Public Function GetSuccessor(index As Integer) As INotifiable
  overload: NMF.Expressions.NotifyReversableValue`1.GetSuccessor*
  implements:
  - NMF.Expressions.ISuccessorList.GetSuccessor(System.Int32)
  nameWithType.vb: NotifyReversableValue(Of T).GetSuccessor(Integer)
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).GetSuccessor(Integer)
  name.vb: GetSuccessor(Integer)
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NMF.Expressions.INotifyReversableValue{{T}}
  commentId: T:NMF.Expressions.INotifyReversableValue{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyReversableValue`1
  name: INotifyReversableValue<T>
  nameWithType: INotifyReversableValue<T>
  fullName: NMF.Expressions.INotifyReversableValue<T>
  nameWithType.vb: INotifyReversableValue(Of T)
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of T)
  name.vb: INotifyReversableValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifyValue{{T}}
  commentId: T:NMF.Expressions.INotifyValue{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<T>
  nameWithType: INotifyValue<T>
  fullName: NMF.Expressions.INotifyValue<T>
  nameWithType.vb: INotifyValue(Of T)
  fullName.vb: NMF.Expressions.INotifyValue(Of T)
  name.vb: INotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifiable
  commentId: T:NMF.Expressions.INotifiable
  parent: NMF.Expressions
  name: INotifiable
  nameWithType: INotifiable
  fullName: NMF.Expressions.INotifiable
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.ComponentModel.INotifyPropertyChanged
  commentId: T:System.ComponentModel.INotifyPropertyChanged
  parent: System.ComponentModel
  isExternal: true
  name: INotifyPropertyChanged
  nameWithType: INotifyPropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged
- uid: NMF.Expressions.ISuccessorList
  commentId: T:NMF.Expressions.ISuccessorList
  parent: NMF.Expressions
  name: ISuccessorList
  nameWithType: ISuccessorList
  fullName: NMF.Expressions.ISuccessorList
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: NMF.Expressions.INotifiable.NMF.Expressions.Debug.DebugExtensions.ExportToDgml(System.String)
  commentId: M:NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
  parent: NMF.Expressions.Debug.DebugExtensions
  definition: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
  name: ExportToDgml(INotifiable, string)
  nameWithType: DebugExtensions.ExportToDgml(INotifiable, string)
  fullName: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable, string)
  nameWithType.vb: DebugExtensions.ExportToDgml(INotifiable, String)
  fullName.vb: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable, String)
  name.vb: ExportToDgml(INotifiable, String)
  spec.csharp:
  - uid: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
    name: ExportToDgml
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
    name: ExportToDgml
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: NMF.Expressions.INotifiable.NMF.Expressions.Debug.DebugExtensions.Visualize
  commentId: M:NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
  parent: NMF.Expressions.Debug.DebugExtensions
  definition: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
  name: Visualize(INotifiable)
  nameWithType: DebugExtensions.Visualize(INotifiable)
  fullName: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
  spec.csharp:
  - uid: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
    name: Visualize
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
    name: Visualize
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: )
- uid: NMF.Expressions.INotifyValue{`0}.NMF.Expressions.ReversableExtensions.AsReversable``1(System.Action{{T}})
  commentId: M:NMF.Expressions.ReversableExtensions.AsReversable``1(NMF.Expressions.INotifyValue{``0},System.Action{``0})
  parent: NMF.Expressions.ReversableExtensions
  definition: NMF.Expressions.ReversableExtensions.AsReversable``1(NMF.Expressions.INotifyValue{``0},System.Action{``0})
  name: AsReversable<T>(INotifyValue<T>, Action<T>)
  nameWithType: ReversableExtensions.AsReversable<T>(INotifyValue<T>, Action<T>)
  fullName: NMF.Expressions.ReversableExtensions.AsReversable<T>(NMF.Expressions.INotifyValue<T>, System.Action<T>)
  nameWithType.vb: ReversableExtensions.AsReversable(Of T)(INotifyValue(Of T), Action(Of T))
  fullName.vb: NMF.Expressions.ReversableExtensions.AsReversable(Of T)(NMF.Expressions.INotifyValue(Of T), System.Action(Of T))
  name.vb: AsReversable(Of T)(INotifyValue(Of T), Action(Of T))
  spec.csharp:
  - uid: NMF.Expressions.ReversableExtensions.AsReversable``1(NMF.Expressions.INotifyValue{`0},System.Action{`0})
    name: AsReversable
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.ReversableExtensions.AsReversable``1(NMF.Expressions.INotifyValue{`0},System.Action{`0})
    name: AsReversable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.NotifyReversableValue`1.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<NotifyReversableValue<T>>(NotifyReversableValue<T>)
  nameWithType: ExpressionExtensions.AsOne<NotifyReversableValue<T>>(NotifyReversableValue<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<NMF.Expressions.NotifyReversableValue<T>>(NMF.Expressions.NotifyReversableValue<T>)
  nameWithType.vb: ExpressionExtensions.AsOne(Of NotifyReversableValue(Of T))(NotifyReversableValue(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of NMF.Expressions.NotifyReversableValue(Of T))(NMF.Expressions.NotifyReversableValue(Of T))
  name.vb: AsOne(Of NotifyReversableValue(Of T))(NotifyReversableValue(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.NotifyReversableValue{`0})
    name: AsOne
  - name: <
  - uid: NMF.Expressions.NotifyReversableValue`1
    name: NotifyReversableValue
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  - name: (
  - uid: NMF.Expressions.NotifyReversableValue`1
    name: NotifyReversableValue
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.NotifyReversableValue{`0})
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.NotifyReversableValue`1
    name: NotifyReversableValue
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
  - name: (
  - uid: NMF.Expressions.NotifyReversableValue`1
    name: NotifyReversableValue
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.INotifyReversableValue`1
  commentId: T:NMF.Expressions.INotifyReversableValue`1
  name: INotifyReversableValue<T>
  nameWithType: INotifyReversableValue<T>
  fullName: NMF.Expressions.INotifyReversableValue<T>
  nameWithType.vb: INotifyReversableValue(Of T)
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of T)
  name.vb: INotifyReversableValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifyValue`1
  commentId: T:NMF.Expressions.INotifyValue`1
  name: INotifyValue<T>
  nameWithType: INotifyValue<T>
  fullName: NMF.Expressions.INotifyValue<T>
  nameWithType.vb: INotifyValue(Of T)
  fullName.vb: NMF.Expressions.INotifyValue(Of T)
  name.vb: INotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.ComponentModel
  commentId: N:System.ComponentModel
  isExternal: true
  name: System.ComponentModel
  nameWithType: System.ComponentModel
  fullName: System.ComponentModel
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.ComponentModel
    name: ComponentModel
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.ComponentModel
    name: ComponentModel
    isExternal: true
- uid: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
  commentId: M:NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
  isExternal: true
  name: ExportToDgml(INotifiable, string)
  nameWithType: DebugExtensions.ExportToDgml(INotifiable, string)
  fullName: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable, string)
  nameWithType.vb: DebugExtensions.ExportToDgml(INotifiable, String)
  fullName.vb: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable, String)
  name.vb: ExportToDgml(INotifiable, String)
  spec.csharp:
  - uid: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
    name: ExportToDgml
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
    name: ExportToDgml
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: NMF.Expressions.Debug.DebugExtensions
  commentId: T:NMF.Expressions.Debug.DebugExtensions
  parent: NMF.Expressions.Debug
  name: DebugExtensions
  nameWithType: DebugExtensions
  fullName: NMF.Expressions.Debug.DebugExtensions
- uid: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
  commentId: M:NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
  name: Visualize(INotifiable)
  nameWithType: DebugExtensions.Visualize(INotifiable)
  fullName: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
  spec.csharp:
  - uid: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
    name: Visualize
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
    name: Visualize
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: )
- uid: NMF.Expressions.ReversableExtensions.AsReversable``1(NMF.Expressions.INotifyValue{``0},System.Action{``0})
  commentId: M:NMF.Expressions.ReversableExtensions.AsReversable``1(NMF.Expressions.INotifyValue{``0},System.Action{``0})
  isExternal: true
  name: AsReversable<T>(INotifyValue<T>, Action<T>)
  nameWithType: ReversableExtensions.AsReversable<T>(INotifyValue<T>, Action<T>)
  fullName: NMF.Expressions.ReversableExtensions.AsReversable<T>(NMF.Expressions.INotifyValue<T>, System.Action<T>)
  nameWithType.vb: ReversableExtensions.AsReversable(Of T)(INotifyValue(Of T), Action(Of T))
  fullName.vb: NMF.Expressions.ReversableExtensions.AsReversable(Of T)(NMF.Expressions.INotifyValue(Of T), System.Action(Of T))
  name.vb: AsReversable(Of T)(INotifyValue(Of T), Action(Of T))
  spec.csharp:
  - uid: NMF.Expressions.ReversableExtensions.AsReversable``1(NMF.Expressions.INotifyValue{``0},System.Action{``0})
    name: AsReversable
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.ReversableExtensions.AsReversable``1(NMF.Expressions.INotifyValue{``0},System.Action{``0})
    name: AsReversable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.ReversableExtensions
  commentId: T:NMF.Expressions.ReversableExtensions
  parent: NMF.Expressions
  name: ReversableExtensions
  nameWithType: ReversableExtensions
  fullName: NMF.Expressions.ReversableExtensions
- uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<T>(T)
  nameWithType: ExpressionExtensions.AsOne<T>(T)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<T>(T)
  nameWithType.vb: ExpressionExtensions.AsOne(Of T)(T)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of T)(T)
  name.vb: AsOne(Of T)(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  parent: NMF.Expressions.Linq
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
- uid: NMF.Expressions.Debug
  commentId: N:NMF.Expressions.Debug
  name: NMF.Expressions.Debug
  nameWithType: NMF.Expressions.Debug
  fullName: NMF.Expressions.Debug
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Debug
    name: Debug
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Debug
    name: Debug
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
- uid: NMF.Expressions.NotifyReversableValue`1.Value*
  commentId: Overload:NMF.Expressions.NotifyReversableValue`1.Value
  name: Value
  nameWithType: NotifyReversableValue<T>.Value
  fullName: NMF.Expressions.NotifyReversableValue<T>.Value
  nameWithType.vb: NotifyReversableValue(Of T).Value
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).Value
- uid: NMF.Expressions.INotifyReversableValue{{T}}.Value
  commentId: P:NMF.Expressions.INotifyReversableValue{`0}.Value
  parent: NMF.Expressions.INotifyReversableValue{{T}}
  definition: NMF.Expressions.INotifyReversableValue`1.Value
  name: Value
  nameWithType: INotifyReversableValue<T>.Value
  fullName: NMF.Expressions.INotifyReversableValue<T>.Value
  nameWithType.vb: INotifyReversableValue(Of T).Value
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of T).Value
- uid: NMF.Expressions.INotifyValue{{T}}.Value
  commentId: P:NMF.Expressions.INotifyValue{`0}.Value
  parent: NMF.Expressions.INotifyValue{{T}}
  definition: NMF.Expressions.INotifyValue`1.Value
  name: Value
  nameWithType: INotifyValue<T>.Value
  fullName: NMF.Expressions.INotifyValue<T>.Value
  nameWithType.vb: INotifyValue(Of T).Value
  fullName.vb: NMF.Expressions.INotifyValue(Of T).Value
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: NMF.Expressions.INotifyReversableValue`1.Value
  commentId: P:NMF.Expressions.INotifyReversableValue`1.Value
  name: Value
  nameWithType: INotifyReversableValue<T>.Value
  fullName: NMF.Expressions.INotifyReversableValue<T>.Value
  nameWithType.vb: INotifyReversableValue(Of T).Value
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of T).Value
- uid: NMF.Expressions.INotifyValue`1.Value
  commentId: P:NMF.Expressions.INotifyValue`1.Value
  name: Value
  nameWithType: INotifyValue<T>.Value
  fullName: NMF.Expressions.INotifyValue<T>.Value
  nameWithType.vb: INotifyValue(Of T).Value
  fullName.vb: NMF.Expressions.INotifyValue(Of T).Value
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: NMF.Expressions.INotifyValue{{T}}.ValueChanged
  commentId: E:NMF.Expressions.INotifyValue{`0}.ValueChanged
  parent: NMF.Expressions.INotifyValue{{T}}
  definition: NMF.Expressions.INotifyValue`1.ValueChanged
  name: ValueChanged
  nameWithType: INotifyValue<T>.ValueChanged
  fullName: NMF.Expressions.INotifyValue<T>.ValueChanged
  nameWithType.vb: INotifyValue(Of T).ValueChanged
  fullName.vb: NMF.Expressions.INotifyValue(Of T).ValueChanged
- uid: System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
  commentId: T:System.EventHandler{NMF.Expressions.ValueChangedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<ValueChangedEventArgs>
  nameWithType: EventHandler<ValueChangedEventArgs>
  fullName: System.EventHandler<NMF.Expressions.ValueChangedEventArgs>
  nameWithType.vb: EventHandler(Of ValueChangedEventArgs)
  fullName.vb: System.EventHandler(Of NMF.Expressions.ValueChangedEventArgs)
  name.vb: EventHandler(Of ValueChangedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
  - name: <
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
  - name: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
  - name: )
- uid: NMF.Expressions.INotifyValue`1.ValueChanged
  commentId: E:NMF.Expressions.INotifyValue`1.ValueChanged
  name: ValueChanged
  nameWithType: INotifyValue<T>.ValueChanged
  fullName: NMF.Expressions.INotifyValue<T>.ValueChanged
  nameWithType.vb: INotifyValue(Of T).ValueChanged
  fullName.vb: NMF.Expressions.INotifyValue(Of T).ValueChanged
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
  - name: <
  - name: TEventArgs
  - name: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TEventArgs
  - name: )
- uid: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  commentId: E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  parent: System.ComponentModel.INotifyPropertyChanged
  isExternal: true
  name: PropertyChanged
  nameWithType: INotifyPropertyChanged.PropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
- uid: System.ComponentModel.PropertyChangedEventHandler
  commentId: T:System.ComponentModel.PropertyChangedEventHandler
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventHandler
  nameWithType: PropertyChangedEventHandler
  fullName: System.ComponentModel.PropertyChangedEventHandler
- uid: NMF.Expressions.NotifyReversableValue`1.Successors*
  commentId: Overload:NMF.Expressions.NotifyReversableValue`1.Successors
  name: Successors
  nameWithType: NotifyReversableValue<T>.Successors
  fullName: NMF.Expressions.NotifyReversableValue<T>.Successors
  nameWithType.vb: NotifyReversableValue(Of T).Successors
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).Successors
- uid: NMF.Expressions.INotifiable.Successors
  commentId: P:NMF.Expressions.INotifiable.Successors
  parent: NMF.Expressions.INotifiable
  name: Successors
  nameWithType: INotifiable.Successors
  fullName: NMF.Expressions.INotifiable.Successors
- uid: NMF.Expressions.NotifyReversableValue`1.Dependencies*
  commentId: Overload:NMF.Expressions.NotifyReversableValue`1.Dependencies
  name: Dependencies
  nameWithType: NotifyReversableValue<T>.Dependencies
  fullName: NMF.Expressions.NotifyReversableValue<T>.Dependencies
  nameWithType.vb: NotifyReversableValue(Of T).Dependencies
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).Dependencies
- uid: NMF.Expressions.INotifiable.Dependencies
  commentId: P:NMF.Expressions.INotifiable.Dependencies
  parent: NMF.Expressions.INotifiable
  name: Dependencies
  nameWithType: INotifiable.Dependencies
  fullName: NMF.Expressions.INotifiable.Dependencies
- uid: System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<INotifiable>
  nameWithType: IEnumerable<INotifiable>
  fullName: System.Collections.Generic.IEnumerable<NMF.Expressions.INotifiable>
  nameWithType.vb: IEnumerable(Of INotifiable)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Expressions.INotifiable)
  name.vb: IEnumerable(Of INotifiable)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: NMF.Expressions.NotifyReversableValue`1.ExecutionMetaData*
  commentId: Overload:NMF.Expressions.NotifyReversableValue`1.ExecutionMetaData
  name: ExecutionMetaData
  nameWithType: NotifyReversableValue<T>.ExecutionMetaData
  fullName: NMF.Expressions.NotifyReversableValue<T>.ExecutionMetaData
  nameWithType.vb: NotifyReversableValue(Of T).ExecutionMetaData
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).ExecutionMetaData
- uid: NMF.Expressions.INotifiable.ExecutionMetaData
  commentId: P:NMF.Expressions.INotifiable.ExecutionMetaData
  parent: NMF.Expressions.INotifiable
  name: ExecutionMetaData
  nameWithType: INotifiable.ExecutionMetaData
  fullName: NMF.Expressions.INotifiable.ExecutionMetaData
- uid: NMF.Expressions.ExecutionMetaData
  commentId: T:NMF.Expressions.ExecutionMetaData
  parent: NMF.Expressions
  name: ExecutionMetaData
  nameWithType: ExecutionMetaData
  fullName: NMF.Expressions.ExecutionMetaData
- uid: NMF.Expressions.NotifyReversableValue`1.#ctor*
  commentId: Overload:NMF.Expressions.NotifyReversableValue`1.#ctor
  name: NotifyReversableValue
  nameWithType: NotifyReversableValue<T>.NotifyReversableValue
  fullName: NMF.Expressions.NotifyReversableValue<T>.NotifyReversableValue
  nameWithType.vb: NotifyReversableValue(Of T).New
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).New
  name.vb: New
- uid: System.Linq.Expressions.Expression{System.Func{{T}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T>>
  nameWithType: Expression<Func<T>>
  fullName: System.Linq.Expressions.Expression<System.Func<T>>
  nameWithType.vb: Expression(Of Func(Of T))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T))
  name.vb: Expression(Of Func(Of T))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<string, object>
  nameWithType: IDictionary<string, object>
  fullName: System.Collections.Generic.IDictionary<string, object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of String, Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - name: TDelegate
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: NMF.Expressions.NotifyReversableValue`1.IsReversable*
  commentId: Overload:NMF.Expressions.NotifyReversableValue`1.IsReversable
  name: IsReversable
  nameWithType: NotifyReversableValue<T>.IsReversable
  fullName: NMF.Expressions.NotifyReversableValue<T>.IsReversable
  nameWithType.vb: NotifyReversableValue(Of T).IsReversable
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).IsReversable
- uid: NMF.Expressions.INotifyReversableValue{{T}}.IsReversable
  commentId: P:NMF.Expressions.INotifyReversableValue{`0}.IsReversable
  parent: NMF.Expressions.INotifyReversableValue{{T}}
  definition: NMF.Expressions.INotifyReversableValue`1.IsReversable
  name: IsReversable
  nameWithType: INotifyReversableValue<T>.IsReversable
  fullName: NMF.Expressions.INotifyReversableValue<T>.IsReversable
  nameWithType.vb: INotifyReversableValue(Of T).IsReversable
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of T).IsReversable
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: NMF.Expressions.INotifyReversableValue`1.IsReversable
  commentId: P:NMF.Expressions.INotifyReversableValue`1.IsReversable
  name: IsReversable
  nameWithType: INotifyReversableValue<T>.IsReversable
  fullName: NMF.Expressions.INotifyReversableValue<T>.IsReversable
  nameWithType.vb: INotifyReversableValue(Of T).IsReversable
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of T).IsReversable
- uid: NMF.Expressions.NotifyReversableValue`1.OnValueChanged*
  commentId: Overload:NMF.Expressions.NotifyReversableValue`1.OnValueChanged
  name: OnValueChanged
  nameWithType: NotifyReversableValue<T>.OnValueChanged
  fullName: NMF.Expressions.NotifyReversableValue<T>.OnValueChanged
  nameWithType.vb: NotifyReversableValue(Of T).OnValueChanged
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).OnValueChanged
- uid: NMF.Expressions.NotifyReversableValue`1.OnPropertyChanged*
  commentId: Overload:NMF.Expressions.NotifyReversableValue`1.OnPropertyChanged
  name: OnPropertyChanged
  nameWithType: NotifyReversableValue<T>.OnPropertyChanged
  fullName: NMF.Expressions.NotifyReversableValue<T>.OnPropertyChanged
  nameWithType.vb: NotifyReversableValue(Of T).OnPropertyChanged
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).OnPropertyChanged
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: NMF.Expressions.NotifyReversableValue`1.Notify*
  commentId: Overload:NMF.Expressions.NotifyReversableValue`1.Notify
  name: Notify
  nameWithType: NotifyReversableValue<T>.Notify
  fullName: NMF.Expressions.NotifyReversableValue<T>.Notify
  nameWithType.vb: NotifyReversableValue(Of T).Notify
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).Notify
- uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  commentId: M:NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  parent: NMF.Expressions.INotifiable
  isExternal: true
  name: Notify(IList<INotificationResult>)
  nameWithType: INotifiable.Notify(IList<INotificationResult>)
  fullName: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList<NMF.Expressions.INotificationResult>)
  nameWithType.vb: INotifiable.Notify(IList(Of INotificationResult))
  fullName.vb: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
  spec.csharp:
  - uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
  - name: )
  - name: )
- uid: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  commentId: T:System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<INotificationResult>
  nameWithType: IList<INotificationResult>
  fullName: System.Collections.Generic.IList<NMF.Expressions.INotificationResult>
  nameWithType.vb: IList(Of INotificationResult)
  fullName.vb: System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult)
  name.vb: IList(Of INotificationResult)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
  - name: )
- uid: NMF.Expressions.INotificationResult
  commentId: T:NMF.Expressions.INotificationResult
  parent: NMF.Expressions
  name: INotificationResult
  nameWithType: INotificationResult
  fullName: NMF.Expressions.INotificationResult
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.NotifyReversableValue`1.Dispose*
  commentId: Overload:NMF.Expressions.NotifyReversableValue`1.Dispose
  name: Dispose
  nameWithType: NotifyReversableValue<T>.Dispose
  fullName: NMF.Expressions.NotifyReversableValue<T>.Dispose
  nameWithType.vb: NotifyReversableValue(Of T).Dispose
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
  - name: (
  - name: )
- uid: NMF.Expressions.NotifyReversableValue`1.OnAttach*
  commentId: Overload:NMF.Expressions.NotifyReversableValue`1.OnAttach
  name: OnAttach
  nameWithType: NotifyReversableValue<T>.OnAttach
  fullName: NMF.Expressions.NotifyReversableValue<T>.OnAttach
  nameWithType.vb: NotifyReversableValue(Of T).OnAttach
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).OnAttach
- uid: NMF.Expressions.NotifyReversableValue`1.OnDetach*
  commentId: Overload:NMF.Expressions.NotifyReversableValue`1.OnDetach
  name: OnDetach
  nameWithType: NotifyReversableValue<T>.OnDetach
  fullName: NMF.Expressions.NotifyReversableValue<T>.OnDetach
  nameWithType.vb: NotifyReversableValue(Of T).OnDetach
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).OnDetach
- uid: NMF.Expressions.NotifyReversableValue`1.HasSuccessors*
  commentId: Overload:NMF.Expressions.NotifyReversableValue`1.HasSuccessors
  name: HasSuccessors
  nameWithType: NotifyReversableValue<T>.HasSuccessors
  fullName: NMF.Expressions.NotifyReversableValue<T>.HasSuccessors
  nameWithType.vb: NotifyReversableValue(Of T).HasSuccessors
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).HasSuccessors
- uid: NMF.Expressions.ISuccessorList.HasSuccessors
  commentId: P:NMF.Expressions.ISuccessorList.HasSuccessors
  parent: NMF.Expressions.ISuccessorList
  name: HasSuccessors
  nameWithType: ISuccessorList.HasSuccessors
  fullName: NMF.Expressions.ISuccessorList.HasSuccessors
- uid: NMF.Expressions.NotifyReversableValue`1.IsAttached*
  commentId: Overload:NMF.Expressions.NotifyReversableValue`1.IsAttached
  name: IsAttached
  nameWithType: NotifyReversableValue<T>.IsAttached
  fullName: NMF.Expressions.NotifyReversableValue<T>.IsAttached
  nameWithType.vb: NotifyReversableValue(Of T).IsAttached
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).IsAttached
- uid: NMF.Expressions.ISuccessorList.IsAttached
  commentId: P:NMF.Expressions.ISuccessorList.IsAttached
  parent: NMF.Expressions.ISuccessorList
  name: IsAttached
  nameWithType: ISuccessorList.IsAttached
  fullName: NMF.Expressions.ISuccessorList.IsAttached
- uid: NMF.Expressions.NotifyReversableValue`1.Count*
  commentId: Overload:NMF.Expressions.NotifyReversableValue`1.Count
  name: Count
  nameWithType: NotifyReversableValue<T>.Count
  fullName: NMF.Expressions.NotifyReversableValue<T>.Count
  nameWithType.vb: NotifyReversableValue(Of T).Count
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).Count
- uid: NMF.Expressions.ISuccessorList.Count
  commentId: P:NMF.Expressions.ISuccessorList.Count
  parent: NMF.Expressions.ISuccessorList
  name: Count
  nameWithType: ISuccessorList.Count
  fullName: NMF.Expressions.ISuccessorList.Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: NMF.Expressions.NotifyReversableValue`1.AllSuccessors*
  commentId: Overload:NMF.Expressions.NotifyReversableValue`1.AllSuccessors
  name: AllSuccessors
  nameWithType: NotifyReversableValue<T>.AllSuccessors
  fullName: NMF.Expressions.NotifyReversableValue<T>.AllSuccessors
  nameWithType.vb: NotifyReversableValue(Of T).AllSuccessors
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).AllSuccessors
- uid: NMF.Expressions.NotifyReversableValue`1.Set*
  commentId: Overload:NMF.Expressions.NotifyReversableValue`1.Set
  name: Set
  nameWithType: NotifyReversableValue<T>.Set
  fullName: NMF.Expressions.NotifyReversableValue<T>.Set
  nameWithType.vb: NotifyReversableValue(Of T).Set
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).Set
- uid: NMF.Expressions.ISuccessorList.Set(NMF.Expressions.INotifiable)
  commentId: M:NMF.Expressions.ISuccessorList.Set(NMF.Expressions.INotifiable)
  parent: NMF.Expressions.ISuccessorList
  name: Set(INotifiable)
  nameWithType: ISuccessorList.Set(INotifiable)
  fullName: NMF.Expressions.ISuccessorList.Set(NMF.Expressions.INotifiable)
  spec.csharp:
  - uid: NMF.Expressions.ISuccessorList.Set(NMF.Expressions.INotifiable)
    name: Set
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: )
  spec.vb:
  - uid: NMF.Expressions.ISuccessorList.Set(NMF.Expressions.INotifiable)
    name: Set
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: )
- uid: NMF.Expressions.NotifyReversableValue`1.SetDummy*
  commentId: Overload:NMF.Expressions.NotifyReversableValue`1.SetDummy
  name: SetDummy
  nameWithType: NotifyReversableValue<T>.SetDummy
  fullName: NMF.Expressions.NotifyReversableValue<T>.SetDummy
  nameWithType.vb: NotifyReversableValue(Of T).SetDummy
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).SetDummy
- uid: NMF.Expressions.ISuccessorList.SetDummy
  commentId: M:NMF.Expressions.ISuccessorList.SetDummy
  parent: NMF.Expressions.ISuccessorList
  name: SetDummy()
  nameWithType: ISuccessorList.SetDummy()
  fullName: NMF.Expressions.ISuccessorList.SetDummy()
  spec.csharp:
  - uid: NMF.Expressions.ISuccessorList.SetDummy
    name: SetDummy
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Expressions.ISuccessorList.SetDummy
    name: SetDummy
  - name: (
  - name: )
- uid: NMF.Expressions.NotifyReversableValue`1.Unset*
  commentId: Overload:NMF.Expressions.NotifyReversableValue`1.Unset
  name: Unset
  nameWithType: NotifyReversableValue<T>.Unset
  fullName: NMF.Expressions.NotifyReversableValue<T>.Unset
  nameWithType.vb: NotifyReversableValue(Of T).Unset
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).Unset
- uid: NMF.Expressions.ISuccessorList.Unset(NMF.Expressions.INotifiable,System.Boolean)
  commentId: M:NMF.Expressions.ISuccessorList.Unset(NMF.Expressions.INotifiable,System.Boolean)
  parent: NMF.Expressions.ISuccessorList
  isExternal: true
  name: Unset(INotifiable, bool)
  nameWithType: ISuccessorList.Unset(INotifiable, bool)
  fullName: NMF.Expressions.ISuccessorList.Unset(NMF.Expressions.INotifiable, bool)
  nameWithType.vb: ISuccessorList.Unset(INotifiable, Boolean)
  fullName.vb: NMF.Expressions.ISuccessorList.Unset(NMF.Expressions.INotifiable, Boolean)
  name.vb: Unset(INotifiable, Boolean)
  spec.csharp:
  - uid: NMF.Expressions.ISuccessorList.Unset(NMF.Expressions.INotifiable,System.Boolean)
    name: Unset
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.ISuccessorList.Unset(NMF.Expressions.INotifiable,System.Boolean)
    name: Unset
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Expressions.NotifyReversableValue`1.UnsetAll*
  commentId: Overload:NMF.Expressions.NotifyReversableValue`1.UnsetAll
  name: UnsetAll
  nameWithType: NotifyReversableValue<T>.UnsetAll
  fullName: NMF.Expressions.NotifyReversableValue<T>.UnsetAll
  nameWithType.vb: NotifyReversableValue(Of T).UnsetAll
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).UnsetAll
- uid: NMF.Expressions.ISuccessorList.UnsetAll
  commentId: M:NMF.Expressions.ISuccessorList.UnsetAll
  parent: NMF.Expressions.ISuccessorList
  name: UnsetAll()
  nameWithType: ISuccessorList.UnsetAll()
  fullName: NMF.Expressions.ISuccessorList.UnsetAll()
  spec.csharp:
  - uid: NMF.Expressions.ISuccessorList.UnsetAll
    name: UnsetAll
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Expressions.ISuccessorList.UnsetAll
    name: UnsetAll
  - name: (
  - name: )
- uid: NMF.Expressions.NotifyReversableValue`1.GetSuccessor*
  commentId: Overload:NMF.Expressions.NotifyReversableValue`1.GetSuccessor
  name: GetSuccessor
  nameWithType: NotifyReversableValue<T>.GetSuccessor
  fullName: NMF.Expressions.NotifyReversableValue<T>.GetSuccessor
  nameWithType.vb: NotifyReversableValue(Of T).GetSuccessor
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T).GetSuccessor
- uid: NMF.Expressions.ISuccessorList.GetSuccessor(System.Int32)
  commentId: M:NMF.Expressions.ISuccessorList.GetSuccessor(System.Int32)
  parent: NMF.Expressions.ISuccessorList
  isExternal: true
  name: GetSuccessor(int)
  nameWithType: ISuccessorList.GetSuccessor(int)
  fullName: NMF.Expressions.ISuccessorList.GetSuccessor(int)
  nameWithType.vb: ISuccessorList.GetSuccessor(Integer)
  fullName.vb: NMF.Expressions.ISuccessorList.GetSuccessor(Integer)
  name.vb: GetSuccessor(Integer)
  spec.csharp:
  - uid: NMF.Expressions.ISuccessorList.GetSuccessor(System.Int32)
    name: GetSuccessor
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.ISuccessorList.GetSuccessor(System.Int32)
    name: GetSuccessor
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
