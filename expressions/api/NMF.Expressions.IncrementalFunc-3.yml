### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.IncrementalFunc`3
  commentId: T:NMF.Expressions.IncrementalFunc`3
  id: IncrementalFunc`3
  parent: NMF.Expressions
  children:
  - NMF.Expressions.IncrementalFunc`3.#ctor(NMF.Expressions.ObservingFunc{`0,`1,`2})
  - NMF.Expressions.IncrementalFunc`3.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2}})
  - NMF.Expressions.IncrementalFunc`3.GetNotifyValue(`0,`1)
  - NMF.Expressions.IncrementalFunc`3.Item(`0,`1)
  langs:
  - csharp
  - vb
  name: IncrementalFunc<T1, T2, TResult>
  nameWithType: IncrementalFunc<T1, T2, TResult>
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, TResult>
  type: Class
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalFunc.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IncrementalFunc
    path: src/Expressions/Expressions.Utilities/IncrementalFunc.cs
    startLine: 109
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nRepresents a function class which tracks any calls\n"
  example: []
  syntax:
    content: public class IncrementalFunc<T1, T2, TResult>
    typeParameters:
    - id: T1
      description: The type of argument 1
    - id: T2
      description: The type of argument 2
    - id: TResult
      description: The result type
    content.vb: Public Class IncrementalFunc(Of T1, T2, TResult)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - NMF.Expressions.IncrementalFunc`3.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  nameWithType.vb: IncrementalFunc(Of T1, T2, TResult)
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, TResult)
  name.vb: IncrementalFunc(Of T1, T2, TResult)
- uid: NMF.Expressions.IncrementalFunc`3.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2}})
  commentId: M:NMF.Expressions.IncrementalFunc`3.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2}})
  id: '#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2}})'
  parent: NMF.Expressions.IncrementalFunc`3
  langs:
  - csharp
  - vb
  name: IncrementalFunc(Expression<Func<T1, T2, TResult>>)
  nameWithType: IncrementalFunc<T1, T2, TResult>.IncrementalFunc(Expression<Func<T1, T2, TResult>>)
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, TResult>.IncrementalFunc(System.Linq.Expressions.Expression<System.Func<T1, T2, TResult>>)
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalFunc.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions.Utilities/IncrementalFunc.cs
    startLine: 155
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nCreate an incremental func for the given expression\n"
  example: []
  syntax:
    content: public IncrementalFunc(Expression<Func<T1, T2, TResult>> func)
    parameters:
    - id: func
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{TResult}}}
      description: The expression that should be observed
    content.vb: Public Sub New(func As Expression(Of Func(Of T1, T2, TResult)))
  overload: NMF.Expressions.IncrementalFunc`3.#ctor*
  nameWithType.vb: IncrementalFunc(Of T1, T2, TResult).New(Expression(Of Func(Of T1, T2, TResult)))
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, TResult).New(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, TResult)))
  name.vb: New(Expression(Of Func(Of T1, T2, TResult)))
- uid: NMF.Expressions.IncrementalFunc`3.#ctor(NMF.Expressions.ObservingFunc{`0,`1,`2})
  commentId: M:NMF.Expressions.IncrementalFunc`3.#ctor(NMF.Expressions.ObservingFunc{`0,`1,`2})
  id: '#ctor(NMF.Expressions.ObservingFunc{`0,`1,`2})'
  parent: NMF.Expressions.IncrementalFunc`3
  langs:
  - csharp
  - vb
  name: IncrementalFunc(ObservingFunc<T1, T2, TResult>)
  nameWithType: IncrementalFunc<T1, T2, TResult>.IncrementalFunc(ObservingFunc<T1, T2, TResult>)
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, TResult>.IncrementalFunc(NMF.Expressions.ObservingFunc<T1, T2, TResult>)
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalFunc.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions.Utilities/IncrementalFunc.cs
    startLine: 161
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nCreate an incremental func for the given expression\n"
  example: []
  syntax:
    content: public IncrementalFunc(ObservingFunc<T1, T2, TResult> func)
    parameters:
    - id: func
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{TResult}}
      description: The expression that should be observed
    content.vb: Public Sub New(func As ObservingFunc(Of T1, T2, TResult))
  overload: NMF.Expressions.IncrementalFunc`3.#ctor*
  nameWithType.vb: IncrementalFunc(Of T1, T2, TResult).New(ObservingFunc(Of T1, T2, TResult))
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, TResult).New(NMF.Expressions.ObservingFunc(Of T1, T2, TResult))
  name.vb: New(ObservingFunc(Of T1, T2, TResult))
- uid: NMF.Expressions.IncrementalFunc`3.Item(`0,`1)
  commentId: P:NMF.Expressions.IncrementalFunc`3.Item(`0,`1)
  id: Item(`0,`1)
  parent: NMF.Expressions.IncrementalFunc`3
  langs:
  - csharp
  - vb
  name: this[T1, T2]
  nameWithType: IncrementalFunc<T1, T2, TResult>.this[T1, T2]
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, TResult>.this[T1, T2]
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalFunc.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: this[]
    path: src/Expressions/Expressions.Utilities/IncrementalFunc.cs
    startLine: 172
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nGets the function value for the given arguments\n"
  example: []
  syntax:
    content: public TResult this[T1 arg1, T2 arg2] { get; }
    parameters:
    - id: arg1
      type: '{T1}'
      description: Input argument 1
    - id: arg2
      type: '{T2}'
      description: Input argument 2
    return:
      type: '{TResult}'
      description: The current function valur for the provided argument
    content.vb: Public ReadOnly Default Property this[](arg1 As T1, arg2 As T2) As TResult
  overload: NMF.Expressions.IncrementalFunc`3.Item*
  nameWithType.vb: IncrementalFunc(Of T1, T2, TResult).this[](T1, T2)
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, TResult).this[](T1, T2)
  name.vb: this[](T1, T2)
- uid: NMF.Expressions.IncrementalFunc`3.GetNotifyValue(`0,`1)
  commentId: M:NMF.Expressions.IncrementalFunc`3.GetNotifyValue(`0,`1)
  id: GetNotifyValue(`0,`1)
  parent: NMF.Expressions.IncrementalFunc`3
  langs:
  - csharp
  - vb
  name: GetNotifyValue(T1, T2)
  nameWithType: IncrementalFunc<T1, T2, TResult>.GetNotifyValue(T1, T2)
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, TResult>.GetNotifyValue(T1, T2)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalFunc.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetNotifyValue
    path: src/Expressions/Expressions.Utilities/IncrementalFunc.cs
    startLine: 194
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nGets the changable value for the given arguments\n"
  example: []
  syntax:
    content: public INotifyValue<TResult> GetNotifyValue(T1 arg1, T2 arg2)
    parameters:
    - id: arg1
      type: '{T1}'
      description: Argument 1
    - id: arg2
      type: '{T2}'
      description: Argument 2
    return:
      type: NMF.Expressions.INotifyValue{{TResult}}
      description: A changable function value
    content.vb: Public Function GetNotifyValue(arg1 As T1, arg2 As T2) As INotifyValue(Of TResult)
  overload: NMF.Expressions.IncrementalFunc`3.GetNotifyValue*
  nameWithType.vb: IncrementalFunc(Of T1, T2, TResult).GetNotifyValue(T1, T2)
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, TResult).GetNotifyValue(T1, T2)
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: NMF.Expressions.IncrementalFunc`3.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<IncrementalFunc<T1, T2, TResult>>(IncrementalFunc<T1, T2, TResult>)
  nameWithType: ExpressionExtensions.AsOne<IncrementalFunc<T1, T2, TResult>>(IncrementalFunc<T1, T2, TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<NMF.Expressions.IncrementalFunc<T1, T2, TResult>>(NMF.Expressions.IncrementalFunc<T1, T2, TResult>)
  nameWithType.vb: ExpressionExtensions.AsOne(Of IncrementalFunc(Of T1, T2, TResult))(IncrementalFunc(Of T1, T2, TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of NMF.Expressions.IncrementalFunc(Of T1, T2, TResult))(NMF.Expressions.IncrementalFunc(Of T1, T2, TResult))
  name.vb: AsOne(Of IncrementalFunc(Of T1, T2, TResult))(IncrementalFunc(Of T1, T2, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.IncrementalFunc{`0,`1,`2})
    name: AsOne
  - name: <
  - uid: NMF.Expressions.IncrementalFunc`3
    name: IncrementalFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IncrementalFunc`3
    name: IncrementalFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.IncrementalFunc{`0,`1,`2})
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IncrementalFunc`3
    name: IncrementalFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: (
  - uid: NMF.Expressions.IncrementalFunc`3
    name: IncrementalFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<T>(T)
  nameWithType: ExpressionExtensions.AsOne<T>(T)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<T>(T)
  nameWithType.vb: ExpressionExtensions.AsOne(Of T)(T)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of T)(T)
  name.vb: AsOne(Of T)(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  parent: NMF.Expressions.Linq
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
- uid: NMF.Expressions.IncrementalFunc`3.#ctor*
  commentId: Overload:NMF.Expressions.IncrementalFunc`3.#ctor
  name: IncrementalFunc
  nameWithType: IncrementalFunc<T1, T2, TResult>.IncrementalFunc
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, TResult>.IncrementalFunc
  nameWithType.vb: IncrementalFunc(Of T1, T2, TResult).New
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, TResult).New
  name.vb: New
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1,`2}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T1, T2, TResult>>
  nameWithType: Expression<Func<T1, T2, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, T2, TResult>>
  nameWithType.vb: Expression(Of Func(Of T1, T2, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, TResult))
  name.vb: Expression(Of Func(Of T1, T2, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - name: TDelegate
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{``0,``1,``2}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`3
  name: ObservingFunc<T1, T2, TResult>
  nameWithType: ObservingFunc<T1, T2, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult)
  name.vb: ObservingFunc(Of T1, T2, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`3
    name: ObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`3
    name: ObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`3
  commentId: T:NMF.Expressions.ObservingFunc`3
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, TResult>
  nameWithType: ObservingFunc<T1, T2, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult)
  name.vb: ObservingFunc(Of T1, T2, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`3
    name: ObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`3
    name: ObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.IncrementalFunc`3.Item*
  commentId: Overload:NMF.Expressions.IncrementalFunc`3.Item
  name: this
  nameWithType: IncrementalFunc<T1, T2, TResult>.this
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, TResult>.this
  nameWithType.vb: IncrementalFunc(Of T1, T2, TResult).this[]
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, TResult).this[]
  name.vb: this[]
- uid: '{T1}'
  commentId: '!:T1'
  definition: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: '{T2}'
  commentId: '!:T2'
  definition: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: NMF.Expressions.IncrementalFunc`3.GetNotifyValue*
  commentId: Overload:NMF.Expressions.IncrementalFunc`3.GetNotifyValue
  name: GetNotifyValue
  nameWithType: IncrementalFunc<T1, T2, TResult>.GetNotifyValue
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, TResult>.GetNotifyValue
  nameWithType.vb: IncrementalFunc(Of T1, T2, TResult).GetNotifyValue
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, TResult).GetNotifyValue
- uid: NMF.Expressions.INotifyValue{{TResult}}
  commentId: T:NMF.Expressions.INotifyValue{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<TResult>
  nameWithType: INotifyValue<TResult>
  fullName: NMF.Expressions.INotifyValue<TResult>
  nameWithType.vb: INotifyValue(Of TResult)
  fullName.vb: NMF.Expressions.INotifyValue(Of TResult)
  name.vb: INotifyValue(Of TResult)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.INotifyValue`1
  commentId: T:NMF.Expressions.INotifyValue`1
  name: INotifyValue<T>
  nameWithType: INotifyValue<T>
  fullName: NMF.Expressions.INotifyValue<T>
  nameWithType.vb: INotifyValue(Of T)
  fullName.vb: NMF.Expressions.INotifyValue(Of T)
  name.vb: INotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
