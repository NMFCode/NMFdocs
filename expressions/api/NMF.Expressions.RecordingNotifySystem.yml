### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.RecordingNotifySystem
  commentId: T:NMF.Expressions.RecordingNotifySystem
  id: RecordingNotifySystem
  parent: NMF.Expressions
  children:
  - NMF.Expressions.RecordingNotifySystem.#ctor(NMF.Expressions.INotifySystem)
  - NMF.Expressions.RecordingNotifySystem.Configuration
  - NMF.Expressions.RecordingNotifySystem.CreateExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  - NMF.Expressions.RecordingNotifySystem.CreateExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  - NMF.Expressions.RecordingNotifySystem.CreateReversableExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  - NMF.Expressions.RecordingNotifySystem.DefaultStrategy
  - NMF.Expressions.RecordingNotifySystem.GetApplicableStrategies(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - NMF.Expressions.RecordingNotifySystem.Inner
  - NMF.Expressions.RecordingNotifySystem.RecordExpressionUsage(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Boolean)
  langs:
  - csharp
  - vb
  name: RecordingNotifySystem
  nameWithType: RecordingNotifySystem
  fullName: NMF.Expressions.RecordingNotifySystem
  type: Class
  source:
    remote:
      path: Expressions/Expressions.Configuration/RecordingNotifySystem.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RecordingNotifySystem
    path: src/Expressions/Expressions.Configuration/RecordingNotifySystem.cs
    startLine: 14
  assemblies:
  - NMF.Expressions.Configuration
  namespace: NMF.Expressions
  summary: "\nDenotes an incrementalization system that records any requests\n"
  example: []
  syntax:
    content: 'public class RecordingNotifySystem : INotifySystem'
    content.vb: Public Class RecordingNotifySystem Implements INotifySystem
  inheritance:
  - System.Object
  implements:
  - NMF.Expressions.INotifySystem
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - NMF.Expressions.RecordingNotifySystem.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
- uid: NMF.Expressions.RecordingNotifySystem.Inner
  commentId: P:NMF.Expressions.RecordingNotifySystem.Inner
  id: Inner
  parent: NMF.Expressions.RecordingNotifySystem
  langs:
  - csharp
  - vb
  name: Inner
  nameWithType: RecordingNotifySystem.Inner
  fullName: NMF.Expressions.RecordingNotifySystem.Inner
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Configuration/RecordingNotifySystem.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Inner
    path: src/Expressions/Expressions.Configuration/RecordingNotifySystem.cs
    startLine: 19
  assemblies:
  - NMF.Expressions.Configuration
  namespace: NMF.Expressions
  summary: "\nThe inner incrementalization system\n"
  example: []
  syntax:
    content: public INotifySystem Inner { get; }
    parameters: []
    return:
      type: NMF.Expressions.INotifySystem
    content.vb: Public Property Inner As INotifySystem
  overload: NMF.Expressions.RecordingNotifySystem.Inner*
- uid: NMF.Expressions.RecordingNotifySystem.Configuration
  commentId: P:NMF.Expressions.RecordingNotifySystem.Configuration
  id: Configuration
  parent: NMF.Expressions.RecordingNotifySystem
  langs:
  - csharp
  - vb
  name: Configuration
  nameWithType: RecordingNotifySystem.Configuration
  fullName: NMF.Expressions.RecordingNotifySystem.Configuration
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Configuration/RecordingNotifySystem.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Configuration
    path: src/Expressions/Expressions.Configuration/RecordingNotifySystem.cs
    startLine: 24
  assemblies:
  - NMF.Expressions.Configuration
  namespace: NMF.Expressions
  summary: "\nThe recorded configuration\n"
  example: []
  syntax:
    content: public Configuration Configuration { get; }
    parameters: []
    return:
      type: NMF.Expressions.IncrementalizationConfiguration.Configuration
    content.vb: Public Property Configuration As Configuration
  overload: NMF.Expressions.RecordingNotifySystem.Configuration*
- uid: NMF.Expressions.RecordingNotifySystem.DefaultStrategy
  commentId: P:NMF.Expressions.RecordingNotifySystem.DefaultStrategy
  id: DefaultStrategy
  parent: NMF.Expressions.RecordingNotifySystem
  langs:
  - csharp
  - vb
  name: DefaultStrategy
  nameWithType: RecordingNotifySystem.DefaultStrategy
  fullName: NMF.Expressions.RecordingNotifySystem.DefaultStrategy
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Configuration/RecordingNotifySystem.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: DefaultStrategy
    path: src/Expressions/Expressions.Configuration/RecordingNotifySystem.cs
    startLine: 29
  assemblies:
  - NMF.Expressions.Configuration
  namespace: NMF.Expressions
  summary: "\nThe default strategy to apply\n"
  example: []
  syntax:
    content: public IncrementalizationStrategy DefaultStrategy { get; set; }
    parameters: []
    return:
      type: NMF.Expressions.IncrementalizationConfiguration.IncrementalizationStrategy
    content.vb: Public Property DefaultStrategy As IncrementalizationStrategy
  overload: NMF.Expressions.RecordingNotifySystem.DefaultStrategy*
- uid: NMF.Expressions.RecordingNotifySystem.#ctor(NMF.Expressions.INotifySystem)
  commentId: M:NMF.Expressions.RecordingNotifySystem.#ctor(NMF.Expressions.INotifySystem)
  id: '#ctor(NMF.Expressions.INotifySystem)'
  parent: NMF.Expressions.RecordingNotifySystem
  langs:
  - csharp
  - vb
  name: RecordingNotifySystem(INotifySystem)
  nameWithType: RecordingNotifySystem.RecordingNotifySystem(INotifySystem)
  fullName: NMF.Expressions.RecordingNotifySystem.RecordingNotifySystem(NMF.Expressions.INotifySystem)
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions.Configuration/RecordingNotifySystem.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions.Configuration/RecordingNotifySystem.cs
    startLine: 35
  assemblies:
  - NMF.Expressions.Configuration
  namespace: NMF.Expressions
  summary: "\nCreates a new recording incrementalization system\n"
  example: []
  syntax:
    content: public RecordingNotifySystem(INotifySystem inner)
    parameters:
    - id: inner
      type: NMF.Expressions.INotifySystem
      description: The inner incrementalization system
    content.vb: Public Sub New(inner As INotifySystem)
  overload: NMF.Expressions.RecordingNotifySystem.#ctor*
  nameWithType.vb: RecordingNotifySystem.New(INotifySystem)
  fullName.vb: NMF.Expressions.RecordingNotifySystem.New(NMF.Expressions.INotifySystem)
  name.vb: New(INotifySystem)
- uid: NMF.Expressions.RecordingNotifySystem.GetApplicableStrategies(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  commentId: M:NMF.Expressions.RecordingNotifySystem.GetApplicableStrategies(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: GetApplicableStrategies(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: NMF.Expressions.RecordingNotifySystem
  langs:
  - csharp
  - vb
  name: GetApplicableStrategies(Expression, IEnumerable<ParameterExpression>)
  nameWithType: RecordingNotifySystem.GetApplicableStrategies(Expression, IEnumerable<ParameterExpression>)
  fullName: NMF.Expressions.RecordingNotifySystem.GetApplicableStrategies(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Configuration/RecordingNotifySystem.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetApplicableStrategies
    path: src/Expressions/Expressions.Configuration/RecordingNotifySystem.cs
    startLine: 48
  assemblies:
  - NMF.Expressions.Configuration
  namespace: NMF.Expressions
  summary: "\nCalculates the strategies applicable to incrementalize the given expression\n"
  example: []
  syntax:
    content: protected virtual IEnumerable<IncrementalizationStrategy> GetApplicableStrategies(Expression expression, IEnumerable<ParameterExpression> parameters)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: The expression that shall be incrementalized
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: The parameters
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Expressions.IncrementalizationConfiguration.IncrementalizationStrategy}
      description: A colection of viable incrementalization strategies
    content.vb: Protected Overridable Function GetApplicableStrategies(expression As Expression, parameters As IEnumerable(Of ParameterExpression)) As IEnumerable(Of IncrementalizationStrategy)
  overload: NMF.Expressions.RecordingNotifySystem.GetApplicableStrategies*
  nameWithType.vb: RecordingNotifySystem.GetApplicableStrategies(Expression, IEnumerable(Of ParameterExpression))
  fullName.vb: NMF.Expressions.RecordingNotifySystem.GetApplicableStrategies(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  name.vb: GetApplicableStrategies(Expression, IEnumerable(Of ParameterExpression))
- uid: NMF.Expressions.RecordingNotifySystem.CreateExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:NMF.Expressions.RecordingNotifySystem.CreateExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  id: CreateExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: NMF.Expressions.RecordingNotifySystem
  langs:
  - csharp
  - vb
  name: CreateExpression(Expression, IEnumerable<ParameterExpression>, IDictionary<string, object>)
  nameWithType: RecordingNotifySystem.CreateExpression(Expression, IEnumerable<ParameterExpression>, IDictionary<string, object>)
  fullName: NMF.Expressions.RecordingNotifySystem.CreateExpression(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IDictionary<string, object>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Configuration/RecordingNotifySystem.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateExpression
    path: src/Expressions/Expressions.Configuration/RecordingNotifySystem.cs
    startLine: 96
  assemblies:
  - NMF.Expressions.Configuration
  namespace: NMF.Expressions
  summary: "\nCreates an incremental expression for the given code expression\n"
  example: []
  syntax:
    content: public INotifyExpression CreateExpression(Expression expression, IEnumerable<ParameterExpression> parameters, IDictionary<string, object> parameterMappings)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: The expression from which to create an incremental expression
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: The parameters of the expression
    - id: parameterMappings
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: A given mapping of parameters
    return:
      type: NMF.Expressions.INotifyExpression
      description: An incremental expression object
    content.vb: Public Function CreateExpression(expression As Expression, parameters As IEnumerable(Of ParameterExpression), parameterMappings As IDictionary(Of String, Object)) As INotifyExpression
  overload: NMF.Expressions.RecordingNotifySystem.CreateExpression*
  implements:
  - NMF.Expressions.INotifySystem.CreateExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  nameWithType.vb: RecordingNotifySystem.CreateExpression(Expression, IEnumerable(Of ParameterExpression), IDictionary(Of String, Object))
  fullName.vb: NMF.Expressions.RecordingNotifySystem.CreateExpression(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Collections.Generic.IDictionary(Of String, Object))
  name.vb: CreateExpression(Expression, IEnumerable(Of ParameterExpression), IDictionary(Of String, Object))
- uid: NMF.Expressions.RecordingNotifySystem.RecordExpressionUsage(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Boolean)
  commentId: M:NMF.Expressions.RecordingNotifySystem.RecordExpressionUsage(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Boolean)
  id: RecordExpressionUsage(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Boolean)
  parent: NMF.Expressions.RecordingNotifySystem
  langs:
  - csharp
  - vb
  name: RecordExpressionUsage(Expression, IEnumerable<ParameterExpression>, bool)
  nameWithType: RecordingNotifySystem.RecordExpressionUsage(Expression, IEnumerable<ParameterExpression>, bool)
  fullName: NMF.Expressions.RecordingNotifySystem.RecordExpressionUsage(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, bool)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Configuration/RecordingNotifySystem.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RecordExpressionUsage
    path: src/Expressions/Expressions.Configuration/RecordingNotifySystem.cs
    startLine: 108
  assemblies:
  - NMF.Expressions.Configuration
  namespace: NMF.Expressions
  summary: "\nRecords the usage of the given expression\n"
  example: []
  syntax:
    content: protected virtual void RecordExpressionUsage(Expression expression, IEnumerable<ParameterExpression> parameters, bool reversible)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: The expression that was used
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: The parameters
    - id: reversible
      type: System.Boolean
      description: True, if the expression should be incrementalized reversable
    content.vb: Protected Overridable Sub RecordExpressionUsage(expression As Expression, parameters As IEnumerable(Of ParameterExpression), reversible As Boolean)
  overload: NMF.Expressions.RecordingNotifySystem.RecordExpressionUsage*
  nameWithType.vb: RecordingNotifySystem.RecordExpressionUsage(Expression, IEnumerable(Of ParameterExpression), Boolean)
  fullName.vb: NMF.Expressions.RecordingNotifySystem.RecordExpressionUsage(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), Boolean)
  name.vb: RecordExpressionUsage(Expression, IEnumerable(Of ParameterExpression), Boolean)
- uid: NMF.Expressions.RecordingNotifySystem.CreateExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:NMF.Expressions.RecordingNotifySystem.CreateExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  id: CreateExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: NMF.Expressions.RecordingNotifySystem
  langs:
  - csharp
  - vb
  name: CreateExpression<T>(Expression, IEnumerable<ParameterExpression>, IDictionary<string, object>)
  nameWithType: RecordingNotifySystem.CreateExpression<T>(Expression, IEnumerable<ParameterExpression>, IDictionary<string, object>)
  fullName: NMF.Expressions.RecordingNotifySystem.CreateExpression<T>(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IDictionary<string, object>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Configuration/RecordingNotifySystem.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateExpression
    path: src/Expressions/Expressions.Configuration/RecordingNotifySystem.cs
    startLine: 124
  assemblies:
  - NMF.Expressions.Configuration
  namespace: NMF.Expressions
  summary: "\nCreates an incremental expression for the given code expression\n"
  example: []
  syntax:
    content: public INotifyExpression<T> CreateExpression<T>(Expression expression, IEnumerable<ParameterExpression> parameters, IDictionary<string, object> parameterMappings)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: The expression from which to create an incremental expression
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: The parameters of the expression
    - id: parameterMappings
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: A given mapping of parameters
    typeParameters:
    - id: T
      description: The type of the expression
    return:
      type: NMF.Expressions.INotifyExpression{{T}}
      description: An incremental expression object
    content.vb: Public Function CreateExpression(Of T)(expression As Expression, parameters As IEnumerable(Of ParameterExpression), parameterMappings As IDictionary(Of String, Object)) As INotifyExpression(Of T)
  overload: NMF.Expressions.RecordingNotifySystem.CreateExpression*
  implements:
  - NMF.Expressions.INotifySystem.CreateExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  nameWithType.vb: RecordingNotifySystem.CreateExpression(Of T)(Expression, IEnumerable(Of ParameterExpression), IDictionary(Of String, Object))
  fullName.vb: NMF.Expressions.RecordingNotifySystem.CreateExpression(Of T)(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Collections.Generic.IDictionary(Of String, Object))
  name.vb: CreateExpression(Of T)(Expression, IEnumerable(Of ParameterExpression), IDictionary(Of String, Object))
- uid: NMF.Expressions.RecordingNotifySystem.CreateReversableExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:NMF.Expressions.RecordingNotifySystem.CreateReversableExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  id: CreateReversableExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: NMF.Expressions.RecordingNotifySystem
  langs:
  - csharp
  - vb
  name: CreateReversableExpression<T>(Expression, IEnumerable<ParameterExpression>, IDictionary<string, object>)
  nameWithType: RecordingNotifySystem.CreateReversableExpression<T>(Expression, IEnumerable<ParameterExpression>, IDictionary<string, object>)
  fullName: NMF.Expressions.RecordingNotifySystem.CreateReversableExpression<T>(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IDictionary<string, object>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Configuration/RecordingNotifySystem.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateReversableExpression
    path: src/Expressions/Expressions.Configuration/RecordingNotifySystem.cs
    startLine: 131
  assemblies:
  - NMF.Expressions.Configuration
  namespace: NMF.Expressions
  summary: "\nCreates an incremental expression for the given code expression\n"
  example: []
  syntax:
    content: public INotifyReversableExpression<T> CreateReversableExpression<T>(Expression expression, IEnumerable<ParameterExpression> parameters, IDictionary<string, object> parameterMappings)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: The expression from which to create an incremental expression
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: The parameters of the expression
    - id: parameterMappings
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: A given mapping of parameters
    typeParameters:
    - id: T
      description: The type of the expression
    return:
      type: NMF.Expressions.INotifyReversableExpression{{T}}
      description: An incremental expression object
    content.vb: Public Function CreateReversableExpression(Of T)(expression As Expression, parameters As IEnumerable(Of ParameterExpression), parameterMappings As IDictionary(Of String, Object)) As INotifyReversableExpression(Of T)
  overload: NMF.Expressions.RecordingNotifySystem.CreateReversableExpression*
  implements:
  - NMF.Expressions.INotifySystem.CreateReversableExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  nameWithType.vb: RecordingNotifySystem.CreateReversableExpression(Of T)(Expression, IEnumerable(Of ParameterExpression), IDictionary(Of String, Object))
  fullName.vb: NMF.Expressions.RecordingNotifySystem.CreateReversableExpression(Of T)(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Collections.Generic.IDictionary(Of String, Object))
  name.vb: CreateReversableExpression(Of T)(Expression, IEnumerable(Of ParameterExpression), IDictionary(Of String, Object))
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NMF.Expressions.INotifySystem
  commentId: T:NMF.Expressions.INotifySystem
  parent: NMF.Expressions
  name: INotifySystem
  nameWithType: INotifySystem
  fullName: NMF.Expressions.INotifySystem
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: NMF.Expressions.RecordingNotifySystem.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<RecordingNotifySystem>(RecordingNotifySystem)
  nameWithType: ExpressionExtensions.AsOne<RecordingNotifySystem>(RecordingNotifySystem)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<NMF.Expressions.RecordingNotifySystem>(NMF.Expressions.RecordingNotifySystem)
  nameWithType.vb: ExpressionExtensions.AsOne(Of RecordingNotifySystem)(RecordingNotifySystem)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of NMF.Expressions.RecordingNotifySystem)(NMF.Expressions.RecordingNotifySystem)
  name.vb: AsOne(Of RecordingNotifySystem)(RecordingNotifySystem)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.RecordingNotifySystem)
    name: AsOne
  - name: <
  - uid: NMF.Expressions.RecordingNotifySystem
    name: RecordingNotifySystem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.RecordingNotifySystem
    name: RecordingNotifySystem
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.RecordingNotifySystem)
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.RecordingNotifySystem
    name: RecordingNotifySystem
  - name: )
  - name: (
  - uid: NMF.Expressions.RecordingNotifySystem
    name: RecordingNotifySystem
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<T>(T)
  nameWithType: ExpressionExtensions.AsOne<T>(T)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<T>(T)
  nameWithType.vb: ExpressionExtensions.AsOne(Of T)(T)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of T)(T)
  name.vb: AsOne(Of T)(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  parent: NMF.Expressions.Linq
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
- uid: NMF.Expressions.RecordingNotifySystem.Inner*
  commentId: Overload:NMF.Expressions.RecordingNotifySystem.Inner
  name: Inner
  nameWithType: RecordingNotifySystem.Inner
  fullName: NMF.Expressions.RecordingNotifySystem.Inner
- uid: NMF.Expressions.RecordingNotifySystem.Configuration*
  commentId: Overload:NMF.Expressions.RecordingNotifySystem.Configuration
  name: Configuration
  nameWithType: RecordingNotifySystem.Configuration
  fullName: NMF.Expressions.RecordingNotifySystem.Configuration
- uid: NMF.Expressions.IncrementalizationConfiguration.Configuration
  commentId: T:NMF.Expressions.IncrementalizationConfiguration.Configuration
  parent: NMF.Expressions.IncrementalizationConfiguration
  name: Configuration
  nameWithType: Configuration
  fullName: NMF.Expressions.IncrementalizationConfiguration.Configuration
- uid: NMF.Expressions.IncrementalizationConfiguration
  commentId: N:NMF.Expressions.IncrementalizationConfiguration
  name: NMF.Expressions.IncrementalizationConfiguration
  nameWithType: NMF.Expressions.IncrementalizationConfiguration
  fullName: NMF.Expressions.IncrementalizationConfiguration
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.IncrementalizationConfiguration
    name: IncrementalizationConfiguration
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.IncrementalizationConfiguration
    name: IncrementalizationConfiguration
- uid: NMF.Expressions.RecordingNotifySystem.DefaultStrategy*
  commentId: Overload:NMF.Expressions.RecordingNotifySystem.DefaultStrategy
  name: DefaultStrategy
  nameWithType: RecordingNotifySystem.DefaultStrategy
  fullName: NMF.Expressions.RecordingNotifySystem.DefaultStrategy
- uid: NMF.Expressions.IncrementalizationConfiguration.IncrementalizationStrategy
  commentId: T:NMF.Expressions.IncrementalizationConfiguration.IncrementalizationStrategy
  parent: NMF.Expressions.IncrementalizationConfiguration
  name: IncrementalizationStrategy
  nameWithType: IncrementalizationStrategy
  fullName: NMF.Expressions.IncrementalizationConfiguration.IncrementalizationStrategy
- uid: NMF.Expressions.RecordingNotifySystem.#ctor*
  commentId: Overload:NMF.Expressions.RecordingNotifySystem.#ctor
  name: RecordingNotifySystem
  nameWithType: RecordingNotifySystem.RecordingNotifySystem
  fullName: NMF.Expressions.RecordingNotifySystem.RecordingNotifySystem
  nameWithType.vb: RecordingNotifySystem.New
  fullName.vb: NMF.Expressions.RecordingNotifySystem.New
  name.vb: New
- uid: NMF.Expressions.RecordingNotifySystem.GetApplicableStrategies*
  commentId: Overload:NMF.Expressions.RecordingNotifySystem.GetApplicableStrategies
  name: GetApplicableStrategies
  nameWithType: RecordingNotifySystem.GetApplicableStrategies
  fullName: NMF.Expressions.RecordingNotifySystem.GetApplicableStrategies
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
  commentId: T:System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ParameterExpression>
  nameWithType: IEnumerable<ParameterExpression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>
  nameWithType.vb: IEnumerable(Of ParameterExpression)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression)
  name.vb: IEnumerable(Of ParameterExpression)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    isExternal: true
  - name: )
- uid: System.Collections.Generic.IEnumerable{NMF.Expressions.IncrementalizationConfiguration.IncrementalizationStrategy}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Expressions.IncrementalizationConfiguration.IncrementalizationStrategy}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IncrementalizationStrategy>
  nameWithType: IEnumerable<IncrementalizationStrategy>
  fullName: System.Collections.Generic.IEnumerable<NMF.Expressions.IncrementalizationConfiguration.IncrementalizationStrategy>
  nameWithType.vb: IEnumerable(Of IncrementalizationStrategy)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Expressions.IncrementalizationConfiguration.IncrementalizationStrategy)
  name.vb: IEnumerable(Of IncrementalizationStrategy)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IncrementalizationConfiguration.IncrementalizationStrategy
    name: IncrementalizationStrategy
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IncrementalizationConfiguration.IncrementalizationStrategy
    name: IncrementalizationStrategy
  - name: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: NMF.Expressions.RecordingNotifySystem.CreateExpression*
  commentId: Overload:NMF.Expressions.RecordingNotifySystem.CreateExpression
  name: CreateExpression
  nameWithType: RecordingNotifySystem.CreateExpression
  fullName: NMF.Expressions.RecordingNotifySystem.CreateExpression
- uid: NMF.Expressions.INotifySystem.CreateExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:NMF.Expressions.INotifySystem.CreateExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: NMF.Expressions.INotifySystem
  isExternal: true
  name: CreateExpression(Expression, IEnumerable<ParameterExpression>, IDictionary<string, object>)
  nameWithType: INotifySystem.CreateExpression(Expression, IEnumerable<ParameterExpression>, IDictionary<string, object>)
  fullName: NMF.Expressions.INotifySystem.CreateExpression(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IDictionary<string, object>)
  nameWithType.vb: INotifySystem.CreateExpression(Expression, IEnumerable(Of ParameterExpression), IDictionary(Of String, Object))
  fullName.vb: NMF.Expressions.INotifySystem.CreateExpression(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Collections.Generic.IDictionary(Of String, Object))
  name.vb: CreateExpression(Expression, IEnumerable(Of ParameterExpression), IDictionary(Of String, Object))
  spec.csharp:
  - uid: NMF.Expressions.INotifySystem.CreateExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
    name: CreateExpression
  - name: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.INotifySystem.CreateExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
    name: CreateExpression
  - name: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
  - name: )
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<string, object>
  nameWithType: IDictionary<string, object>
  fullName: System.Collections.Generic.IDictionary<string, object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of String, Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: NMF.Expressions.INotifyExpression
  commentId: T:NMF.Expressions.INotifyExpression
  parent: NMF.Expressions
  name: INotifyExpression
  nameWithType: INotifyExpression
  fullName: NMF.Expressions.INotifyExpression
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: NMF.Expressions.RecordingNotifySystem.RecordExpressionUsage*
  commentId: Overload:NMF.Expressions.RecordingNotifySystem.RecordExpressionUsage
  name: RecordExpressionUsage
  nameWithType: RecordingNotifySystem.RecordExpressionUsage
  fullName: NMF.Expressions.RecordingNotifySystem.RecordExpressionUsage
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: NMF.Expressions.INotifySystem.CreateExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:NMF.Expressions.INotifySystem.CreateExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: NMF.Expressions.INotifySystem
  isExternal: true
  name: CreateExpression<T>(Expression, IEnumerable<ParameterExpression>, IDictionary<string, object>)
  nameWithType: INotifySystem.CreateExpression<T>(Expression, IEnumerable<ParameterExpression>, IDictionary<string, object>)
  fullName: NMF.Expressions.INotifySystem.CreateExpression<T>(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IDictionary<string, object>)
  nameWithType.vb: INotifySystem.CreateExpression(Of T)(Expression, IEnumerable(Of ParameterExpression), IDictionary(Of String, Object))
  fullName.vb: NMF.Expressions.INotifySystem.CreateExpression(Of T)(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Collections.Generic.IDictionary(Of String, Object))
  name.vb: CreateExpression(Of T)(Expression, IEnumerable(Of ParameterExpression), IDictionary(Of String, Object))
  spec.csharp:
  - uid: NMF.Expressions.INotifySystem.CreateExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
    name: CreateExpression
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.INotifySystem.CreateExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
    name: CreateExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyExpression{{T}}
  commentId: T:NMF.Expressions.INotifyExpression{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyExpression`1
  name: INotifyExpression<T>
  nameWithType: INotifyExpression<T>
  fullName: NMF.Expressions.INotifyExpression<T>
  nameWithType.vb: INotifyExpression(Of T)
  fullName.vb: NMF.Expressions.INotifyExpression(Of T)
  name.vb: INotifyExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifyExpression`1
  commentId: T:NMF.Expressions.INotifyExpression`1
  parent: NMF.Expressions
  name: INotifyExpression<T>
  nameWithType: INotifyExpression<T>
  fullName: NMF.Expressions.INotifyExpression<T>
  nameWithType.vb: INotifyExpression(Of T)
  fullName.vb: NMF.Expressions.INotifyExpression(Of T)
  name.vb: INotifyExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.RecordingNotifySystem.CreateReversableExpression*
  commentId: Overload:NMF.Expressions.RecordingNotifySystem.CreateReversableExpression
  name: CreateReversableExpression
  nameWithType: RecordingNotifySystem.CreateReversableExpression
  fullName: NMF.Expressions.RecordingNotifySystem.CreateReversableExpression
- uid: NMF.Expressions.INotifySystem.CreateReversableExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:NMF.Expressions.INotifySystem.CreateReversableExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: NMF.Expressions.INotifySystem
  isExternal: true
  name: CreateReversableExpression<T>(Expression, IEnumerable<ParameterExpression>, IDictionary<string, object>)
  nameWithType: INotifySystem.CreateReversableExpression<T>(Expression, IEnumerable<ParameterExpression>, IDictionary<string, object>)
  fullName: NMF.Expressions.INotifySystem.CreateReversableExpression<T>(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IDictionary<string, object>)
  nameWithType.vb: INotifySystem.CreateReversableExpression(Of T)(Expression, IEnumerable(Of ParameterExpression), IDictionary(Of String, Object))
  fullName.vb: NMF.Expressions.INotifySystem.CreateReversableExpression(Of T)(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Collections.Generic.IDictionary(Of String, Object))
  name.vb: CreateReversableExpression(Of T)(Expression, IEnumerable(Of ParameterExpression), IDictionary(Of String, Object))
  spec.csharp:
  - uid: NMF.Expressions.INotifySystem.CreateReversableExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
    name: CreateReversableExpression
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    isExternal: true
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.INotifySystem.CreateReversableExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
    name: CreateReversableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyReversableExpression{{T}}
  commentId: T:NMF.Expressions.INotifyReversableExpression{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyReversableExpression`1
  name: INotifyReversableExpression<T>
  nameWithType: INotifyReversableExpression<T>
  fullName: NMF.Expressions.INotifyReversableExpression<T>
  nameWithType.vb: INotifyReversableExpression(Of T)
  fullName.vb: NMF.Expressions.INotifyReversableExpression(Of T)
  name.vb: INotifyReversableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableExpression`1
    name: INotifyReversableExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableExpression`1
    name: INotifyReversableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifyReversableExpression`1
  commentId: T:NMF.Expressions.INotifyReversableExpression`1
  name: INotifyReversableExpression<T>
  nameWithType: INotifyReversableExpression<T>
  fullName: NMF.Expressions.INotifyReversableExpression<T>
  nameWithType.vb: INotifyReversableExpression(Of T)
  fullName.vb: NMF.Expressions.INotifyReversableExpression(Of T)
  name.vb: INotifyReversableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableExpression`1
    name: INotifyReversableExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableExpression`1
    name: INotifyReversableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
