### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.INotifySystem
  commentId: T:NMF.Expressions.INotifySystem
  id: INotifySystem
  parent: NMF.Expressions
  children:
  - NMF.Expressions.INotifySystem.CreateExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  - NMF.Expressions.INotifySystem.CreateExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  - NMF.Expressions.INotifySystem.CreateReversableExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  langs:
  - csharp
  - vb
  name: INotifySystem
  nameWithType: INotifySystem
  fullName: NMF.Expressions.INotifySystem
  type: Interface
  source:
    remote:
      path: Expressions/Expressions/Public/INotifySystem.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: INotifySystem
    path: src/Expressions/Expressions/Public/INotifySystem.cs
    startLine: 8
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nRepresents an incremental computation system\n"
  example: []
  syntax:
    content: public interface INotifySystem
    content.vb: Public Interface INotifySystem
  extensionMethods:
  - NMF.Expressions.INotifySystem.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
- uid: NMF.Expressions.INotifySystem.CreateExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:NMF.Expressions.INotifySystem.CreateExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  id: CreateExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: NMF.Expressions.INotifySystem
  langs:
  - csharp
  - vb
  name: CreateExpression<T>(Expression, IEnumerable<ParameterExpression>, IDictionary<string, object>)
  nameWithType: INotifySystem.CreateExpression<T>(Expression, IEnumerable<ParameterExpression>, IDictionary<string, object>)
  fullName: NMF.Expressions.INotifySystem.CreateExpression<T>(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IDictionary<string, object>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/INotifySystem.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateExpression
    path: src/Expressions/Expressions/Public/INotifySystem.cs
    startLine: 18
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nCreates an incremental expression for the given code expression\n"
  example: []
  syntax:
    content: INotifyExpression<T> CreateExpression<T>(Expression expression, IEnumerable<ParameterExpression> parameters, IDictionary<string, object> parameterMappings)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: The expression from which to create an incremental expression
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: The parameters of the expression
    - id: parameterMappings
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: A given mapping of parameters
    typeParameters:
    - id: T
      description: The type of the expression
    return:
      type: NMF.Expressions.INotifyExpression{{T}}
      description: An incremental expression object
    content.vb: Function CreateExpression(Of T)(expression As Expression, parameters As IEnumerable(Of ParameterExpression), parameterMappings As IDictionary(Of String, Object)) As INotifyExpression(Of T)
  overload: NMF.Expressions.INotifySystem.CreateExpression*
  nameWithType.vb: INotifySystem.CreateExpression(Of T)(Expression, IEnumerable(Of ParameterExpression), IDictionary(Of String, Object))
  fullName.vb: NMF.Expressions.INotifySystem.CreateExpression(Of T)(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Collections.Generic.IDictionary(Of String, Object))
  name.vb: CreateExpression(Of T)(Expression, IEnumerable(Of ParameterExpression), IDictionary(Of String, Object))
- uid: NMF.Expressions.INotifySystem.CreateExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:NMF.Expressions.INotifySystem.CreateExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  id: CreateExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: NMF.Expressions.INotifySystem
  langs:
  - csharp
  - vb
  name: CreateExpression(Expression, IEnumerable<ParameterExpression>, IDictionary<string, object>)
  nameWithType: INotifySystem.CreateExpression(Expression, IEnumerable<ParameterExpression>, IDictionary<string, object>)
  fullName: NMF.Expressions.INotifySystem.CreateExpression(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IDictionary<string, object>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/INotifySystem.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateExpression
    path: src/Expressions/Expressions/Public/INotifySystem.cs
    startLine: 27
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nCreates an incremental expression for the given code expression\n"
  example: []
  syntax:
    content: INotifyExpression CreateExpression(Expression expression, IEnumerable<ParameterExpression> parameters, IDictionary<string, object> parameterMappings)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: The expression from which to create an incremental expression
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: The parameters of the expression
    - id: parameterMappings
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: A given mapping of parameters
    return:
      type: NMF.Expressions.INotifyExpression
      description: An incremental expression object
    content.vb: Function CreateExpression(expression As Expression, parameters As IEnumerable(Of ParameterExpression), parameterMappings As IDictionary(Of String, Object)) As INotifyExpression
  overload: NMF.Expressions.INotifySystem.CreateExpression*
  nameWithType.vb: INotifySystem.CreateExpression(Expression, IEnumerable(Of ParameterExpression), IDictionary(Of String, Object))
  fullName.vb: NMF.Expressions.INotifySystem.CreateExpression(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Collections.Generic.IDictionary(Of String, Object))
  name.vb: CreateExpression(Expression, IEnumerable(Of ParameterExpression), IDictionary(Of String, Object))
- uid: NMF.Expressions.INotifySystem.CreateReversableExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:NMF.Expressions.INotifySystem.CreateReversableExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  id: CreateReversableExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: NMF.Expressions.INotifySystem
  langs:
  - csharp
  - vb
  name: CreateReversableExpression<T>(Expression, IEnumerable<ParameterExpression>, IDictionary<string, object>)
  nameWithType: INotifySystem.CreateReversableExpression<T>(Expression, IEnumerable<ParameterExpression>, IDictionary<string, object>)
  fullName: NMF.Expressions.INotifySystem.CreateReversableExpression<T>(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IDictionary<string, object>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/INotifySystem.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateReversableExpression
    path: src/Expressions/Expressions/Public/INotifySystem.cs
    startLine: 37
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nCreates an incremental expression for the given code expression\n"
  example: []
  syntax:
    content: INotifyReversableExpression<T> CreateReversableExpression<T>(Expression expression, IEnumerable<ParameterExpression> parameters, IDictionary<string, object> parameterMappings)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: The expression from which to create an incremental expression
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: The parameters of the expression
    - id: parameterMappings
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: A given mapping of parameters
    typeParameters:
    - id: T
      description: The type of the expression
    return:
      type: NMF.Expressions.INotifyReversableExpression{{T}}
      description: An incremental expression object
    content.vb: Function CreateReversableExpression(Of T)(expression As Expression, parameters As IEnumerable(Of ParameterExpression), parameterMappings As IDictionary(Of String, Object)) As INotifyReversableExpression(Of T)
  overload: NMF.Expressions.INotifySystem.CreateReversableExpression*
  nameWithType.vb: INotifySystem.CreateReversableExpression(Of T)(Expression, IEnumerable(Of ParameterExpression), IDictionary(Of String, Object))
  fullName.vb: NMF.Expressions.INotifySystem.CreateReversableExpression(Of T)(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Collections.Generic.IDictionary(Of String, Object))
  name.vb: CreateReversableExpression(Of T)(Expression, IEnumerable(Of ParameterExpression), IDictionary(Of String, Object))
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
- uid: NMF.Expressions.INotifySystem.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<INotifySystem>(INotifySystem)
  nameWithType: ExpressionExtensions.AsOne<INotifySystem>(INotifySystem)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<NMF.Expressions.INotifySystem>(NMF.Expressions.INotifySystem)
  nameWithType.vb: ExpressionExtensions.AsOne(Of INotifySystem)(INotifySystem)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of NMF.Expressions.INotifySystem)(NMF.Expressions.INotifySystem)
  name.vb: AsOne(Of INotifySystem)(INotifySystem)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.INotifySystem)
    name: AsOne
  - name: <
  - uid: NMF.Expressions.INotifySystem
    name: INotifySystem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifySystem
    name: INotifySystem
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.INotifySystem)
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.INotifySystem
    name: INotifySystem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifySystem
    name: INotifySystem
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<T>(T)
  nameWithType: ExpressionExtensions.AsOne<T>(T)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<T>(T)
  nameWithType.vb: ExpressionExtensions.AsOne(Of T)(T)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of T)(T)
  name.vb: AsOne(Of T)(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  parent: NMF.Expressions.Linq
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
- uid: NMF.Expressions.INotifySystem.CreateExpression*
  commentId: Overload:NMF.Expressions.INotifySystem.CreateExpression
  name: CreateExpression
  nameWithType: INotifySystem.CreateExpression
  fullName: NMF.Expressions.INotifySystem.CreateExpression
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
  commentId: T:System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ParameterExpression>
  nameWithType: IEnumerable<ParameterExpression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>
  nameWithType.vb: IEnumerable(Of ParameterExpression)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression)
  name.vb: IEnumerable(Of ParameterExpression)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    isExternal: true
  - name: )
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<string, object>
  nameWithType: IDictionary<string, object>
  fullName: System.Collections.Generic.IDictionary<string, object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.IDictionary(Of String, Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: NMF.Expressions.INotifyExpression{{T}}
  commentId: T:NMF.Expressions.INotifyExpression{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyExpression`1
  name: INotifyExpression<T>
  nameWithType: INotifyExpression<T>
  fullName: NMF.Expressions.INotifyExpression<T>
  nameWithType.vb: INotifyExpression(Of T)
  fullName.vb: NMF.Expressions.INotifyExpression(Of T)
  name.vb: INotifyExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: NMF.Expressions.INotifyExpression`1
  commentId: T:NMF.Expressions.INotifyExpression`1
  parent: NMF.Expressions
  name: INotifyExpression<T>
  nameWithType: INotifyExpression<T>
  fullName: NMF.Expressions.INotifyExpression<T>
  nameWithType.vb: INotifyExpression(Of T)
  fullName.vb: NMF.Expressions.INotifyExpression(Of T)
  name.vb: INotifyExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifyExpression
  commentId: T:NMF.Expressions.INotifyExpression
  parent: NMF.Expressions
  name: INotifyExpression
  nameWithType: INotifyExpression
  fullName: NMF.Expressions.INotifyExpression
- uid: NMF.Expressions.INotifySystem.CreateReversableExpression*
  commentId: Overload:NMF.Expressions.INotifySystem.CreateReversableExpression
  name: CreateReversableExpression
  nameWithType: INotifySystem.CreateReversableExpression
  fullName: NMF.Expressions.INotifySystem.CreateReversableExpression
- uid: NMF.Expressions.INotifyReversableExpression{{T}}
  commentId: T:NMF.Expressions.INotifyReversableExpression{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyReversableExpression`1
  name: INotifyReversableExpression<T>
  nameWithType: INotifyReversableExpression<T>
  fullName: NMF.Expressions.INotifyReversableExpression<T>
  nameWithType.vb: INotifyReversableExpression(Of T)
  fullName.vb: NMF.Expressions.INotifyReversableExpression(Of T)
  name.vb: INotifyReversableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableExpression`1
    name: INotifyReversableExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableExpression`1
    name: INotifyReversableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifyReversableExpression`1
  commentId: T:NMF.Expressions.INotifyReversableExpression`1
  name: INotifyReversableExpression<T>
  nameWithType: INotifyReversableExpression<T>
  fullName: NMF.Expressions.INotifyReversableExpression<T>
  nameWithType.vb: INotifyReversableExpression(Of T)
  fullName.vb: NMF.Expressions.INotifyReversableExpression(Of T)
  name.vb: INotifyReversableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableExpression`1
    name: INotifyReversableExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableExpression`1
    name: INotifyReversableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
