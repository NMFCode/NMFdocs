### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.Linq.ObservableExtensions
  commentId: T:NMF.Expressions.Linq.ObservableExtensions
  id: ObservableExtensions
  parent: NMF.Expressions.Linq
  children:
  - NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0})
  - NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Decimal})
  - NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Double})
  - NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Int32})
  - NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Int64})
  - NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Decimal}})
  - NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Double}})
  - NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Int32}})
  - NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Int64}})
  - NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Single}})
  - NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Single})
  - NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  - NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  - NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  - NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  - NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  - NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  - NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  - NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  - NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  - NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  - NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
  - NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  - NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0)
  - NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0})
  - NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0})
  - NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  - NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  - NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  - NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  - NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  - NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  - NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  - NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  - NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  - NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  - NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  - NMF.Expressions.Linq.ObservableExtensions.KeepOrder
  - NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  - NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0})
  - NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{System.Nullable{``0}},System.Collections.Generic.IComparer{``0})
  - NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{System.Nullable{``0}})
  - NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  - NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  - NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  - NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0})
  - NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{System.Nullable{``0}},System.Collections.Generic.IComparer{``0})
  - NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{System.Nullable{``0}})
  - NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  - NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  - NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
  - NMF.Expressions.Linq.ObservableExtensions.OfType``2(NMF.Expressions.INotifyCollection{``0})
  - NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  - NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  - NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  - NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Func{``0,``1,``2})
  - NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  - NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  - NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Decimal})
  - NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Double})
  - NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Int32})
  - NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Int64})
  - NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Decimal}})
  - NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Double}})
  - NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Int32}})
  - NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Int64}})
  - NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Single}})
  - NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Single})
  - NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  - NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  - NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  - NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  - NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  - NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  - NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  - NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  - NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  - NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  - NMF.Expressions.Linq.ObservableExtensions.ThenBy``2(NMF.Expressions.IOrderableNotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - NMF.Expressions.Linq.ObservableExtensions.ThenBy``2(NMF.Expressions.IOrderableNotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - NMF.Expressions.Linq.ObservableExtensions.ThenByDescending``2(NMF.Expressions.IOrderableNotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - NMF.Expressions.Linq.ObservableExtensions.ThenByDescending``2(NMF.Expressions.IOrderableNotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  - NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  - NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  - NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
  - NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  langs:
  - csharp
  - vb
  name: ObservableExtensions
  nameWithType: ObservableExtensions
  fullName: NMF.Expressions.Linq.ObservableExtensions
  type: Class
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ObservableExtensions
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 13
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nDefines a set of extension methods on the <xref href=\"NMF.Expressions.INotifyValue%601?text=INotifyValue\" data-throw-if-not-resolved=\"false\"></xref> monad\n"
  example: []
  syntax:
    content: public static class ObservableExtensions
    content.vb: Public Module ObservableExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: NMF.Expressions.Linq.ObservableExtensions.KeepOrder
  commentId: P:NMF.Expressions.Linq.ObservableExtensions.KeepOrder
  id: KeepOrder
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: KeepOrder
  nameWithType: ObservableExtensions.KeepOrder
  fullName: NMF.Expressions.Linq.ObservableExtensions.KeepOrder
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: KeepOrder
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 18
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets or sets a global flag indicating whether projections and filters should maintain the element order\n"
  example: []
  syntax:
    content: public static bool KeepOrder { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared Property KeepOrder As Boolean
  overload: NMF.Expressions.Linq.ObservableExtensions.KeepOrder*
- uid: NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: All``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: All<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  nameWithType: ObservableExtensions.All<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.All<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, bool>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: All
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 28
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets a value indicating whether all items in the given collection match the given predicate\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableAll<>), "Create", false)]

      public static bool All<TSource>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, bool>> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: A custom predicate that is applied to all items in the collection
    typeParameters:
    - id: TSource
      description: The type of the elements in the source collection
    return:
      type: System.Boolean
      description: True, if all items in the collection match the given predicate
    content.vb: >-
      <ObservableProxy(GetType(ObservableAll(Of )), "Create", False)>

      Public Shared Function All(Of TSource)(source As INotifyEnumerable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Boolean
  overload: NMF.Expressions.Linq.ObservableExtensions.All*
  nameWithType.vb: ObservableExtensions.All(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.All(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Boolean)))
  name.vb: All(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0})
  id: Any``1(NMF.Expressions.INotifyEnumerable{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Any<TSource>(INotifyEnumerable<TSource>)
  nameWithType: ObservableExtensions.Any<TSource>(INotifyEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Any<TSource>(NMF.Expressions.INotifyEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Any
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 42
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets a value indicating whether there is any item in the source collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableAny<>), "Create", false)]

      public static bool Any<TSource>(this INotifyEnumerable<TSource> source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    typeParameters:
    - id: TSource
      description: The type of the elements in the source collection
    return:
      type: System.Boolean
      description: True, if the collection has an item, otherwise false
    content.vb: >-
      <ObservableProxy(GetType(ObservableAny(Of )), "Create", False)>

      Public Shared Function Any(Of TSource)(source As INotifyEnumerable(Of TSource)) As Boolean
  overload: NMF.Expressions.Linq.ObservableExtensions.Any*
  nameWithType.vb: ObservableExtensions.Any(Of TSource)(INotifyEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Any(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource))
  name.vb: Any(Of TSource)(INotifyEnumerable(Of TSource))
- uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Any``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Any<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  nameWithType: ObservableExtensions.Any<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Any<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, bool>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Any
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 56
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets a value indicating whether there is any item in the source collection that matches the given predicate\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableLambdaAny<>), "Create", false)]

      public static bool Any<TSource>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, bool>> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: A custom predicate that is checked for every item
    typeParameters:
    - id: TSource
      description: The type of the elements in the source collection
    return:
      type: System.Boolean
      description: True, if there is an item that matches the givn criteria, otherwise false
    content.vb: >-
      <ObservableProxy(GetType(ObservableLambdaAny(Of )), "Create", False)>

      Public Shared Function Any(Of TSource)(source As INotifyEnumerable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Boolean
  overload: NMF.Expressions.Linq.ObservableExtensions.Any*
  nameWithType.vb: ObservableExtensions.Any(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Any(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Boolean)))
  name.vb: Any(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Int32})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Int32})
  id: Average(NMF.Expressions.INotifyEnumerable{System.Int32})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Average(INotifyEnumerable<int>)
  nameWithType: ObservableExtensions.Average(INotifyEnumerable<int>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable<int>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 69
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given collection of numbers\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableIntAverage), "Create", false)]

      public static double Average(this INotifyEnumerable<int> source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{System.Int32}
      description: A collection of numbers
    return:
      type: System.Double
      description: The average of the given collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableIntAverage), "Create", False)>

      Public Shared Function Average(source As INotifyEnumerable(Of Integer)) As Double
  overload: NMF.Expressions.Linq.ObservableExtensions.Average*
  nameWithType.vb: ObservableExtensions.Average(INotifyEnumerable(Of Integer))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable(Of Integer))
  name.vb: Average(INotifyEnumerable(Of Integer))
- uid: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Int64})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Int64})
  id: Average(NMF.Expressions.INotifyEnumerable{System.Int64})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Average(INotifyEnumerable<long>)
  nameWithType: ObservableExtensions.Average(INotifyEnumerable<long>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable<long>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 81
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given collection of numbers\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableLongAverage), "Create", false)]

      public static double Average(this INotifyEnumerable<long> source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{System.Int64}
      description: A collection of numbers
    return:
      type: System.Double
      description: The average of the given collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableLongAverage), "Create", False)>

      Public Shared Function Average(source As INotifyEnumerable(Of Long)) As Double
  overload: NMF.Expressions.Linq.ObservableExtensions.Average*
  nameWithType.vb: ObservableExtensions.Average(INotifyEnumerable(Of Long))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable(Of Long))
  name.vb: Average(INotifyEnumerable(Of Long))
- uid: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Single})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Single})
  id: Average(NMF.Expressions.INotifyEnumerable{System.Single})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Average(INotifyEnumerable<float>)
  nameWithType: ObservableExtensions.Average(INotifyEnumerable<float>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable<float>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 93
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given collection of numbers\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableFloatAverage), "Create", false)]

      public static float Average(this INotifyEnumerable<float> source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{System.Single}
      description: A collection of numbers
    return:
      type: System.Single
      description: The average of the given collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableFloatAverage), "Create", False)>

      Public Shared Function Average(source As INotifyEnumerable(Of Single)) As Single
  overload: NMF.Expressions.Linq.ObservableExtensions.Average*
  nameWithType.vb: ObservableExtensions.Average(INotifyEnumerable(Of Single))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable(Of Single))
  name.vb: Average(INotifyEnumerable(Of Single))
- uid: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Double})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Double})
  id: Average(NMF.Expressions.INotifyEnumerable{System.Double})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Average(INotifyEnumerable<double>)
  nameWithType: ObservableExtensions.Average(INotifyEnumerable<double>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable<double>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 105
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given collection of numbers\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableDoubleAverage), "Create", false)]

      public static double Average(this INotifyEnumerable<double> source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{System.Double}
      description: A collection of numbers
    return:
      type: System.Double
      description: The average of the given collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableDoubleAverage), "Create", False)>

      Public Shared Function Average(source As INotifyEnumerable(Of Double)) As Double
  overload: NMF.Expressions.Linq.ObservableExtensions.Average*
  nameWithType.vb: ObservableExtensions.Average(INotifyEnumerable(Of Double))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable(Of Double))
  name.vb: Average(INotifyEnumerable(Of Double))
- uid: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Decimal})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Decimal})
  id: Average(NMF.Expressions.INotifyEnumerable{System.Decimal})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Average(INotifyEnumerable<decimal>)
  nameWithType: ObservableExtensions.Average(INotifyEnumerable<decimal>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable<decimal>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 117
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given collection of numbers\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableDecimalAverage), "Create", false)]

      public static decimal Average(this INotifyEnumerable<decimal> source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{System.Decimal}
      description: A collection of numbers
    return:
      type: System.Decimal
      description: The average of the given collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableDecimalAverage), "Create", False)>

      Public Shared Function Average(source As INotifyEnumerable(Of Decimal)) As Decimal
  overload: NMF.Expressions.Linq.ObservableExtensions.Average*
  nameWithType.vb: ObservableExtensions.Average(INotifyEnumerable(Of Decimal))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable(Of Decimal))
  name.vb: Average(INotifyEnumerable(Of Decimal))
- uid: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Int32}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Int32}})
  id: Average(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Average(INotifyEnumerable<int?>)
  nameWithType: ObservableExtensions.Average(INotifyEnumerable<int?>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable<int?>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 129
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given collection of numbers\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableNullableIntAverage), "Create", false)]

      public static double? Average(this INotifyEnumerable<int?> source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{System.Nullable{System.Int32}}
      description: A collection of numbers
    return:
      type: System.Nullable{System.Double}
      description: The average of the given collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableNullableIntAverage), "Create", False)>

      Public Shared Function Average(source As INotifyEnumerable(Of Integer?)) As Double?
  overload: NMF.Expressions.Linq.ObservableExtensions.Average*
  nameWithType.vb: ObservableExtensions.Average(INotifyEnumerable(Of Integer?))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable(Of Integer?))
  name.vb: Average(INotifyEnumerable(Of Integer?))
- uid: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Int64}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Int64}})
  id: Average(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Average(INotifyEnumerable<long?>)
  nameWithType: ObservableExtensions.Average(INotifyEnumerable<long?>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable<long?>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 141
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given collection of numbers\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableNullableLongAverage), "Create", false)]

      public static double? Average(this INotifyEnumerable<long?> source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{System.Nullable{System.Int64}}
      description: A collection of numbers
    return:
      type: System.Nullable{System.Double}
      description: The average of the given collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableNullableLongAverage), "Create", False)>

      Public Shared Function Average(source As INotifyEnumerable(Of Long?)) As Double?
  overload: NMF.Expressions.Linq.ObservableExtensions.Average*
  nameWithType.vb: ObservableExtensions.Average(INotifyEnumerable(Of Long?))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable(Of Long?))
  name.vb: Average(INotifyEnumerable(Of Long?))
- uid: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Single}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Single}})
  id: Average(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Average(INotifyEnumerable<float?>)
  nameWithType: ObservableExtensions.Average(INotifyEnumerable<float?>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable<float?>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 153
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given collection of numbers\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableNullableFloatAverage), "Create", false)]

      public static float? Average(this INotifyEnumerable<float?> source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{System.Nullable{System.Single}}
      description: A collection of numbers
    return:
      type: System.Nullable{System.Single}
      description: The average of the given collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableNullableFloatAverage), "Create", False)>

      Public Shared Function Average(source As INotifyEnumerable(Of Single?)) As Single?
  overload: NMF.Expressions.Linq.ObservableExtensions.Average*
  nameWithType.vb: ObservableExtensions.Average(INotifyEnumerable(Of Single?))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable(Of Single?))
  name.vb: Average(INotifyEnumerable(Of Single?))
- uid: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Double}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Double}})
  id: Average(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Average(INotifyEnumerable<double?>)
  nameWithType: ObservableExtensions.Average(INotifyEnumerable<double?>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable<double?>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 165
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given collection of numbers\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableNullableDoubleAverage), "Create", false)]

      public static double? Average(this INotifyEnumerable<double?> source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{System.Nullable{System.Double}}
      description: A collection of numbers
    return:
      type: System.Nullable{System.Double}
      description: The average of the given collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableNullableDoubleAverage), "Create", False)>

      Public Shared Function Average(source As INotifyEnumerable(Of Double?)) As Double?
  overload: NMF.Expressions.Linq.ObservableExtensions.Average*
  nameWithType.vb: ObservableExtensions.Average(INotifyEnumerable(Of Double?))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable(Of Double?))
  name.vb: Average(INotifyEnumerable(Of Double?))
- uid: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Decimal}})
  id: Average(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Average(INotifyEnumerable<decimal?>)
  nameWithType: ObservableExtensions.Average(INotifyEnumerable<decimal?>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable<decimal?>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 177
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given collection of numbers\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableNullableDecimalAverage), "Create", false)]

      public static decimal? Average(this INotifyEnumerable<decimal?> source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{System.Nullable{System.Decimal}}
      description: A collection of numbers
    return:
      type: System.Nullable{System.Decimal}
      description: The average of the given collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableNullableDecimalAverage), "Create", False)>

      Public Shared Function Average(source As INotifyEnumerable(Of Decimal?)) As Decimal?
  overload: NMF.Expressions.Linq.ObservableExtensions.Average*
  nameWithType.vb: ObservableExtensions.Average(INotifyEnumerable(Of Decimal?))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(NMF.Expressions.INotifyEnumerable(Of Decimal?))
  name.vb: Average(INotifyEnumerable(Of Decimal?))
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  id: Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, int>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, int>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, int>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 190
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given feature based on items of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableAverage), "CreateInt", false)]

      public static double Average<TSource>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, int>> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32}}
      description: The feature of the source items that should be averaged
    typeParameters:
    - id: TSource
      description: The type of the items in the source collection
    return:
      type: System.Double
    content.vb: >-
      <ObservableProxy(GetType(ObservableAverage), "CreateInt", False)>

      Public Shared Function Average(Of TSource)(source As INotifyEnumerable(Of TSource), predicate As Expression(Of Func(Of TSource, Integer))) As Double
  overload: NMF.Expressions.Linq.ObservableExtensions.Average*
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Integer)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Integer)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Integer)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  id: Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, long>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, long>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, long>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 204
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given feature based on items of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableAverage), "CreateLong", false)]

      public static double Average<TSource>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, long>> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int64}}
      description: The feature of the source items that should be averaged
    typeParameters:
    - id: TSource
      description: The type of the items in the source collection
    return:
      type: System.Double
    content.vb: >-
      <ObservableProxy(GetType(ObservableAverage), "CreateLong", False)>

      Public Shared Function Average(Of TSource)(source As INotifyEnumerable(Of TSource), predicate As Expression(Of Func(Of TSource, Long))) As Double
  overload: NMF.Expressions.Linq.ObservableExtensions.Average*
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Long)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Long)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Long)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  id: Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, float>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, float>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, float>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 218
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given feature based on items of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableAverage), "CreateFloat", false)]

      public static float Average<TSource>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, float>> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Single}}
      description: The feature of the source items that should be averaged
    typeParameters:
    - id: TSource
      description: The type of the items in the source collection
    return:
      type: System.Single
    content.vb: >-
      <ObservableProxy(GetType(ObservableAverage), "CreateFloat", False)>

      Public Shared Function Average(Of TSource)(source As INotifyEnumerable(Of TSource), predicate As Expression(Of Func(Of TSource, Single))) As Single
  overload: NMF.Expressions.Linq.ObservableExtensions.Average*
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Single)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  id: Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, double>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, double>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, double>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 232
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given feature based on items of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableAverage), "CreateDouble", false)]

      public static double Average<TSource>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, double>> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Double}}
      description: The feature of the source items that should be averaged
    typeParameters:
    - id: TSource
      description: The type of the items in the source collection
    return:
      type: System.Double
    content.vb: >-
      <ObservableProxy(GetType(ObservableAverage), "CreateDouble", False)>

      Public Shared Function Average(Of TSource)(source As INotifyEnumerable(Of TSource), predicate As Expression(Of Func(Of TSource, Double))) As Double
  overload: NMF.Expressions.Linq.ObservableExtensions.Average*
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Double)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  id: Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, decimal>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, decimal>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, decimal>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 246
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given feature based on items of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableAverage), "CreateDecimal", false)]

      public static decimal Average<TSource>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, decimal>> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Decimal}}
      description: The feature of the source items that should be averaged
    typeParameters:
    - id: TSource
      description: The type of the items in the source collection
    return:
      type: System.Decimal
    content.vb: >-
      <ObservableProxy(GetType(ObservableAverage), "CreateDecimal", False)>

      Public Shared Function Average(Of TSource)(source As INotifyEnumerable(Of TSource), predicate As Expression(Of Func(Of TSource, Decimal))) As Decimal
  overload: NMF.Expressions.Linq.ObservableExtensions.Average*
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Decimal)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  id: Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, int?>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, int?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, int?>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 260
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given feature based on items of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableAverage), "CreateNullableInt", false)]

      public static double? Average<TSource>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, int?>> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int32}}}
      description: The feature of the source items that should be averaged
    typeParameters:
    - id: TSource
      description: The type of the items in the source collection
    return:
      type: System.Nullable{System.Double}
    content.vb: >-
      <ObservableProxy(GetType(ObservableAverage), "CreateNullableInt", False)>

      Public Shared Function Average(Of TSource)(source As INotifyEnumerable(Of TSource), predicate As Expression(Of Func(Of TSource, Integer?))) As Double?
  overload: NMF.Expressions.Linq.ObservableExtensions.Average*
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Integer?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Integer?)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Integer?)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  id: Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, long?>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, long?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, long?>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 274
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given feature based on items of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableAverage), "CreateNullableLong", false)]

      public static double? Average<TSource>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, long?>> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int64}}}
      description: The feature of the source items that should be averaged
    typeParameters:
    - id: TSource
      description: The type of the items in the source collection
    return:
      type: System.Nullable{System.Double}
    content.vb: >-
      <ObservableProxy(GetType(ObservableAverage), "CreateNullableLong", False)>

      Public Shared Function Average(Of TSource)(source As INotifyEnumerable(Of TSource), predicate As Expression(Of Func(Of TSource, Long?))) As Double?
  overload: NMF.Expressions.Linq.ObservableExtensions.Average*
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Long?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Long?)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Long?)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  id: Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, float?>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, float?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, float?>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 288
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given feature based on items of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableAverage), "CreateNullableFloat", false)]

      public static float? Average<TSource>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, float?>> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Single}}}
      description: The feature of the source items that should be averaged
    typeParameters:
    - id: TSource
      description: The type of the items in the source collection
    return:
      type: System.Nullable{System.Single}
    content.vb: >-
      <ObservableProxy(GetType(ObservableAverage), "CreateNullableFloat", False)>

      Public Shared Function Average(Of TSource)(source As INotifyEnumerable(Of TSource), predicate As Expression(Of Func(Of TSource, Single?))) As Single?
  overload: NMF.Expressions.Linq.ObservableExtensions.Average*
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Single?)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single?)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  id: Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, double?>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, double?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, double?>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 302
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given feature based on items of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableAverage), "CreateNullableDouble", false)]

      public static double? Average<TSource>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, double?>> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Double}}}
      description: The feature of the source items that should be averaged
    typeParameters:
    - id: TSource
      description: The type of the items in the source collection
    return:
      type: System.Nullable{System.Double}
    content.vb: >-
      <ObservableProxy(GetType(ObservableAverage), "CreateNullableDouble", False)>

      Public Shared Function Average(Of TSource)(source As INotifyEnumerable(Of TSource), predicate As Expression(Of Func(Of TSource, Double?))) As Double?
  overload: NMF.Expressions.Linq.ObservableExtensions.Average*
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Double?)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double?)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  id: Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, decimal?>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, decimal?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, decimal?>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Average
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 316
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the average of the given feature based on items of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableAverage), "CreateNullableDecimal", false)]

      public static decimal? Average<TSource>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, decimal?>> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Decimal}}}
      description: The feature of the source items that should be averaged
    typeParameters:
    - id: TSource
      description: The type of the items in the source collection
    return:
      type: System.Nullable{System.Decimal}
    content.vb: >-
      <ObservableProxy(GetType(ObservableAverage), "CreateNullableDecimal", False)>

      Public Shared Function Average(Of TSource)(source As INotifyEnumerable(Of TSource), predicate As Expression(Of Func(Of TSource, Decimal?))) As Decimal?
  overload: NMF.Expressions.Linq.ObservableExtensions.Average*
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Decimal?)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal?)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
  id: Cast``1(NMF.Expressions.INotifyEnumerable)
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Cast<TResult>(INotifyEnumerable)
  nameWithType: ObservableExtensions.Cast<TResult>(INotifyEnumerable)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Cast<TResult>(NMF.Expressions.INotifyEnumerable)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Cast
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 330
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nCasts the given notifying enumerable to the given type\n"
  remarks: If any item in the source collection is not of type <code data-dev-comment-type="typeparamref" class="typeparamref">TResult</code>, an exception is thrown. Consider using <xref href="NMF.Expressions.Linq.ObservableExtensions.OfType%60%601(NMF.Expressions.INotifyEnumerable)" data-throw-if-not-resolved="false"></xref> in this scenario.
  example: []
  syntax:
    content: public static INotifyEnumerable<TResult> Cast<TResult>(this INotifyEnumerable source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable
      description: The source collection
    typeParameters:
    - id: TResult
      description: The true type of the items in the collection
    return:
      type: NMF.Expressions.INotifyEnumerable{{TResult}}
      description: A notifying collection casted to the given type
    content.vb: Public Shared Function Cast(Of TResult)(source As INotifyEnumerable) As INotifyEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ObservableExtensions.Cast*
  nameWithType.vb: ObservableExtensions.Cast(Of TResult)(INotifyEnumerable)
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Cast(Of TResult)(NMF.Expressions.INotifyEnumerable)
  name.vb: Cast(Of TResult)(INotifyEnumerable)
- uid: NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Concat``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Concat<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: ObservableExtensions.Concat<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Concat<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Concat
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 349
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nConcats the given notifying enumerables\n"
  remarks: The second collection does not have to be a notifying collection, but if it is not, it must not change its contents.
  example: []
  syntax:
    content: public static INotifyEnumerable<TSource> Concat<TSource>(this INotifyEnumerable<TSource> source, IEnumerable<TSource> source2)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The first source
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The second source
    typeParameters:
    - id: TSource
      description: The type of the items
    return:
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The concatenation of both sources
    content.vb: Public Shared Function Concat(Of TSource)(source As INotifyEnumerable(Of TSource), source2 As IEnumerable(Of TSource)) As INotifyEnumerable(Of TSource)
  overload: NMF.Expressions.Linq.ObservableExtensions.Concat*
  nameWithType.vb: ObservableExtensions.Concat(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Concat(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Concat(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
- uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0)
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0)
  id: Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0)
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Contains<TSource>(INotifyEnumerable<TSource>, TSource)
  nameWithType: ObservableExtensions.Contains<TSource>(INotifyEnumerable<TSource>, TSource)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Contains<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, TSource)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Contains
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 364
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nSearches the given collection for the given item\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableContains<>), "Create", false)]

      public static bool Contains<TSource>(this INotifyEnumerable<TSource> source, TSource item)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    - id: item
      type: '{TSource}'
      description: The item that needs to be checked
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    return:
      type: System.Boolean
      description: True, if the given source collection contains the provided item, otherwise false
    content.vb: >-
      <ObservableProxy(GetType(ObservableContains(Of )), "Create", False)>

      Public Shared Function Contains(Of TSource)(source As INotifyEnumerable(Of TSource), item As TSource) As Boolean
  overload: NMF.Expressions.Linq.ObservableExtensions.Contains*
  nameWithType.vb: ObservableExtensions.Contains(Of TSource)(INotifyEnumerable(Of TSource), TSource)
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Contains(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), TSource)
  name.vb: Contains(Of TSource)(INotifyEnumerable(Of TSource), TSource)
- uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  id: Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Contains<TSource>(INotifyEnumerable<TSource>, TSource, IEqualityComparer<TSource>)
  nameWithType: ObservableExtensions.Contains<TSource>(INotifyEnumerable<TSource>, TSource, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Contains<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Contains
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 379
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nSearches the given collection for the given item\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableContains<>), "CreateWithComparer", false)]

      public static bool Contains<TSource>(this INotifyEnumerable<TSource> source, TSource item, IEqualityComparer<TSource> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    - id: item
      type: '{TSource}'
      description: The item that needs to be checked
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: The equality comparer to decide whether items are equal. Can be omitted
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    return:
      type: System.Boolean
      description: True, if the given source collection contains the provided item, otherwise false
    content.vb: >-
      <ObservableProxy(GetType(ObservableContains(Of )), "CreateWithComparer", False)>

      Public Shared Function Contains(Of TSource)(source As INotifyEnumerable(Of TSource), item As TSource, comparer As IEqualityComparer(Of TSource)) As Boolean
  overload: NMF.Expressions.Linq.ObservableExtensions.Contains*
  nameWithType.vb: ObservableExtensions.Contains(Of TSource)(INotifyEnumerable(Of TSource), TSource, IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Contains(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), TSource, System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Contains(Of TSource)(INotifyEnumerable(Of TSource), TSource, IEqualityComparer(Of TSource))
- uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0})
  id: Count``1(NMF.Expressions.INotifyEnumerable{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Count<TSource>(INotifyEnumerable<TSource>)
  nameWithType: ObservableExtensions.Count<TSource>(INotifyEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Count<TSource>(NMF.Expressions.INotifyEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Count
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 392
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nReturns how many items are in the source collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableCount<>), "Create", false)]

      public static int Count<TSource>(this INotifyEnumerable<TSource> source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    typeParameters:
    - id: TSource
      description: The type of elements within the source collection
    return:
      type: System.Int32
      description: The amount of elements in the source collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableCount(Of )), "Create", False)>

      Public Shared Function Count(Of TSource)(source As INotifyEnumerable(Of TSource)) As Integer
  overload: NMF.Expressions.Linq.ObservableExtensions.Count*
  nameWithType.vb: ObservableExtensions.Count(Of TSource)(INotifyEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Count(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource))
  name.vb: Count(Of TSource)(INotifyEnumerable(Of TSource))
- uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Count``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Count<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  nameWithType: ObservableExtensions.Count<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Count<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, bool>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Count
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 406
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nReturns how many items are in the source collection that match the given predicate\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableCount<>), "CreateWithComparer", false)]

      public static int Count<TSource>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, bool>> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: The predicate that is to be checked for each item
    typeParameters:
    - id: TSource
      description: The type of elements within the source collection
    return:
      type: System.Int32
      description: The amount of elements in the source collection that match the given predicate
    content.vb: >-
      <ObservableProxy(GetType(ObservableCount(Of )), "CreateWithComparer", False)>

      Public Shared Function Count(Of TSource)(source As INotifyEnumerable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As Integer
  overload: NMF.Expressions.Linq.ObservableExtensions.Count*
  nameWithType.vb: ObservableExtensions.Count(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Count(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Boolean)))
  name.vb: Count(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0})
  id: Distinct``1(NMF.Expressions.INotifyEnumerable{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Distinct<TSource>(INotifyEnumerable<TSource>)
  nameWithType: ObservableExtensions.Distinct<TSource>(INotifyEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct<TSource>(NMF.Expressions.INotifyEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Distinct
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 420
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nEliminates duplicates from the given collection\n"
  remarks: This method destroys the original order of the items
  example: []
  syntax:
    content: public static INotifyEnumerable<TSource> Distinct<TSource>(this INotifyEnumerable<TSource> source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    return:
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: A notifying collection with no duplicates
    content.vb: Public Shared Function Distinct(Of TSource)(source As INotifyEnumerable(Of TSource)) As INotifyEnumerable(Of TSource)
  overload: NMF.Expressions.Linq.ObservableExtensions.Distinct*
  nameWithType.vb: ObservableExtensions.Distinct(Of TSource)(INotifyEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Distinct(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource))
  name.vb: Distinct(Of TSource)(INotifyEnumerable(Of TSource))
- uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Distinct``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Distinct<TSource>(INotifyEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ObservableExtensions.Distinct<TSource>(INotifyEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Distinct
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 433
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nEliminates duplicates from the given collection\n"
  remarks: This method destroys the original order of the items
  example: []
  syntax:
    content: public static INotifyEnumerable<TSource> Distinct<TSource>(this INotifyEnumerable<TSource> source, IEqualityComparer<TSource> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: The comparer to decide whether items match
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    return:
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: A notifying collection with no duplicates
    content.vb: Public Shared Function Distinct(Of TSource)(source As INotifyEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As INotifyEnumerable(Of TSource)
  overload: NMF.Expressions.Linq.ObservableExtensions.Distinct*
  nameWithType.vb: ObservableExtensions.Distinct(Of TSource)(INotifyEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Distinct(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Distinct(Of TSource)(INotifyEnumerable(Of TSource), IEqualityComparer(Of TSource))
- uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Except<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: ObservableExtensions.Except<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Except<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Except
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 448
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nReturns the given source collection without the elements from the second collection\n"
  remarks: If the exceptions collection will ever change, it must implement <xref href="System.Collections.Specialized.INotifyCollectionChanged" data-throw-if-not-resolved="false"></xref>, otherwise the implementation will get corrupted.
  example: []
  syntax:
    content: public static INotifyEnumerable<TSource> Except<TSource>(this INotifyEnumerable<TSource> source, IEnumerable<TSource> exceptions)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    - id: exceptions
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The exceptions. Can be a static collection, but in that case must not change
    typeParameters:
    - id: TSource
      description: The type of the items
    return:
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection without the exceptions
    content.vb: Public Shared Function Except(Of TSource)(source As INotifyEnumerable(Of TSource), exceptions As IEnumerable(Of TSource)) As INotifyEnumerable(Of TSource)
  overload: NMF.Expressions.Linq.ObservableExtensions.Except*
  nameWithType.vb: ObservableExtensions.Except(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Except(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Except(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
- uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Except<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ObservableExtensions.Except<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Except<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Except
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 462
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nReturns the given source collection without the elements from the second collection\n"
  remarks: If the exceptions collection will ever change, it must implement <xref href="System.Collections.Specialized.INotifyCollectionChanged" data-throw-if-not-resolved="false"></xref>, otherwise the implementation will get corrupted.
  example: []
  syntax:
    content: public static INotifyEnumerable<TSource> Except<TSource>(this INotifyEnumerable<TSource> source, IEnumerable<TSource> exceptions, IEqualityComparer<TSource> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    - id: exceptions
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The exceptions. Can be a static collection, but in that case must not change
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: A comparer to decide whether two items match
    typeParameters:
    - id: TSource
      description: The type of the items
    return:
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection without the exceptions
    content.vb: Public Shared Function Except(Of TSource)(source As INotifyEnumerable(Of TSource), exceptions As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As INotifyEnumerable(Of TSource)
  overload: NMF.Expressions.Linq.ObservableExtensions.Except*
  nameWithType.vb: ObservableExtensions.Except(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Except(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Except(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
- uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  id: FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: FirstOrDefault<TSource>(INotifyEnumerable<TSource>)
  nameWithType: ObservableExtensions.FirstOrDefault<TSource>(INotifyEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault<TSource>(NMF.Expressions.INotifyEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: FirstOrDefault
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 476
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the first item of the given source collection or the item type default value, if the collection is empty\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableFirstOrDefault<>), "Create", false)]

      [SetExpressionRewriter(typeof(ObservableFirstOrDefault<>), "CreateSetExpression")]

      public static TSource FirstOrDefault<TSource>(this INotifyEnumerable<TSource> source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    return:
      type: '{TSource}'
      description: The first item of the collection or the type default value, if the collection is empty
    content.vb: >-
      <ObservableProxy(GetType(ObservableFirstOrDefault(Of )), "Create", False)>

      <SetExpressionRewriter(GetType(ObservableFirstOrDefault(Of )), "CreateSetExpression")>

      Public Shared Function FirstOrDefault(Of TSource)(source As INotifyEnumerable(Of TSource)) As TSource
  overload: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault*
  nameWithType.vb: ObservableExtensions.FirstOrDefault(Of TSource)(INotifyEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource))
  name.vb: FirstOrDefault(Of TSource)(INotifyEnumerable(Of TSource))
- uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: FirstOrDefault<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  nameWithType: ObservableExtensions.FirstOrDefault<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, bool>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: FirstOrDefault
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 491
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the first item of the given source collection that matches the given predicate or the item type default value, if the collection is empty or no item matches the given predicate\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableFirstOrDefault<>), "CreateForPredicate", false)]

      [SetExpressionRewriter(typeof(ObservableFirstOrDefault<>), "CreateSetExpressionWithPredicate")]

      public static TSource FirstOrDefault<TSource>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, bool>> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: The filter predicate
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    return:
      type: '{TSource}'
      description: The first item of the collection that matches the predicate or the type default value
    content.vb: >-
      <ObservableProxy(GetType(ObservableFirstOrDefault(Of )), "CreateForPredicate", False)>

      <SetExpressionRewriter(GetType(ObservableFirstOrDefault(Of )), "CreateSetExpressionWithPredicate")>

      Public Shared Function FirstOrDefault(Of TSource)(source As INotifyEnumerable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As TSource
  overload: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault*
  nameWithType.vb: ObservableExtensions.FirstOrDefault(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Boolean)))
  name.vb: FirstOrDefault(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GroupBy
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 507
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGroups the given collection by the given predicate\n"
  example: []
  syntax:
    content: public static INotifyEnumerable<INotifyGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, TKey>> keySelector)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: The predicate expression selecting the keys for grouping
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    - id: TKey
      description: The type of keys used for grouping
    return:
      type: NMF.Expressions.INotifyEnumerable{NMF.Expressions.INotifyGrouping{{TKey},{TSource}}}
      description: A collection of groups
    content.vb: Public Shared Function GroupBy(Of TSource, TKey)(source As INotifyEnumerable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey))) As INotifyEnumerable(Of INotifyGrouping(Of TKey, TSource))
  overload: NMF.Expressions.Linq.ObservableExtensions.GroupBy*
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)))
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  id: GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Func<TSource, TKey>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Func<TSource, TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GroupBy
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 521
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGroups the given collection by the given predicate\n"
  example: []
  syntax:
    content: public static INotifyEnumerable<INotifyGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, TKey>> keySelector, Func<TSource, TKey> keySelectorCompiled)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: The predicate expression selecting the keys for grouping
    - id: keySelectorCompiled
      type: System.Func{{TSource},{TKey}}
      description: A compiled version of keySelector
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    - id: TKey
      description: The type of keys used for grouping
    return:
      type: NMF.Expressions.INotifyEnumerable{NMF.Expressions.INotifyGrouping{{TKey},{TSource}}}
      description: A collection of groups
    content.vb: Public Shared Function GroupBy(Of TSource, TKey)(source As INotifyEnumerable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), keySelectorCompiled As Func(Of TSource, TKey)) As INotifyEnumerable(Of INotifyGrouping(Of TKey, TSource))
  overload: NMF.Expressions.Linq.ObservableExtensions.GroupBy*
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Func(Of TSource, TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Func(Of TSource, TKey))
  name.vb: GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Func(Of TSource, TKey))
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GroupBy
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 535
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGroups the given collection by the given predicate\n"
  example: []
  syntax:
    content: public static INotifyEnumerable<INotifyGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, TKey>> keySelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: The predicate expression selecting the keys for grouping
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: A comparer that decides whether items are identical
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    - id: TKey
      description: The type of keys used for grouping
    return:
      type: NMF.Expressions.INotifyEnumerable{NMF.Expressions.INotifyGrouping{{TKey},{TSource}}}
      description: A collection of groups
    content.vb: Public Shared Function GroupBy(Of TSource, TKey)(source As INotifyEnumerable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), comparer As IEqualityComparer(Of TKey)) As INotifyEnumerable(Of INotifyGrouping(Of TKey, TSource))
  overload: NMF.Expressions.Linq.ObservableExtensions.GroupBy*
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), IEqualityComparer(Of TKey))
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GroupBy
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 550
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGroups the given collection by the given predicate\n"
  example: []
  syntax:
    content: public static INotifyEnumerable<INotifyGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, TKey>> keySelector, Func<TSource, TKey> keySelectorCompiled, IEqualityComparer<TKey> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: The predicate expression selecting the keys for grouping
    - id: keySelectorCompiled
      type: System.Func{{TSource},{TKey}}
      description: A compiled version of keySelector
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: A comparer that decides whether items are identical
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    - id: TKey
      description: The type of keys used for grouping
    return:
      type: NMF.Expressions.INotifyEnumerable{NMF.Expressions.INotifyGrouping{{TKey},{TSource}}}
      description: A collection of groups
    content.vb: Public Shared Function GroupBy(Of TSource, TKey)(source As INotifyEnumerable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), keySelectorCompiled As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As INotifyEnumerable(Of INotifyGrouping(Of TKey, TSource))
  overload: NMF.Expressions.Linq.ObservableExtensions.GroupBy*
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  id: GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GroupBy
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 567
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGroups the given collection by the given predicate into the given result\n"
  example: []
  syntax:
    content: public static INotifyEnumerable<TResult> GroupBy<TSource, TKey, TResult>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, TKey>> keySelector, Expression<Func<TKey, IEnumerable<TSource>, TResult>> resultSelector)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: The predicate expression selecting the keys for grouping
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}}
      description: A function to get the result element for a group
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    - id: TKey
      description: The type of keys used for grouping
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.INotifyEnumerable{{TResult}}
      description: A collection of groups
    content.vb: Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As INotifyEnumerable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), resultSelector As Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult))) As INotifyEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ObservableExtensions.GroupBy*
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)))
  name.vb: GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)))
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  id: GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Func<TSource, TKey>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, Func<TKey, IEnumerable<TSource>, TResult>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Func<TSource, TKey>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, Func<TKey, IEnumerable<TSource>, TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Func<TSource, TKey>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GroupBy
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 584
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGroups the given collection by the given predicate into the given result\n"
  example: []
  syntax:
    content: public static INotifyEnumerable<TResult> GroupBy<TSource, TKey, TResult>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, TKey>> keySelector, Func<TSource, TKey> keySelectorCompiled, Expression<Func<TKey, IEnumerable<TSource>, TResult>> resultSelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelectorCompiled)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: The predicate expression selecting the keys for grouping
    - id: keySelectorCompiled
      type: System.Func{{TSource},{TKey}}
      description: A compiled version of keySelector
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}}
      description: A function to get the result element for a group
    - id: resultSelectorCompiled
      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}
      description: A compiled version of resultSelector
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    - id: TKey
      description: The type of keys used for grouping
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.INotifyEnumerable{{TResult}}
      description: A collection of groups
    content.vb: Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As INotifyEnumerable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), keySelectorCompiled As Func(Of TSource, TKey), resultSelector As Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), resultSelectorCompiled As Func(Of TKey, IEnumerable(Of TSource), TResult)) As INotifyEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ObservableExtensions.GroupBy*
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Func(Of TSource, TKey), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), Func(Of TKey, IEnumerable(Of TSource), TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Func(Of TSource, TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult))
  name.vb: GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Func(Of TSource, TKey), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), Func(Of TKey, IEnumerable(Of TSource), TResult))
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GroupBy
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 600
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGroups the given collection by the given predicate into the given result\n"
  example: []
  syntax:
    content: public static INotifyEnumerable<TResult> GroupBy<TSource, TKey, TResult>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, TKey>> keySelector, Expression<Func<TKey, IEnumerable<TSource>, TResult>> resultSelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: The predicate expression selecting the keys for grouping
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}}
      description: A function to get the result element for a group
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: A comparer that decides whether items are identical
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    - id: TKey
      description: The type of keys used for grouping
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.INotifyEnumerable{{TResult}}
      description: A collection of groups
    content.vb: Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As INotifyEnumerable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), resultSelector As Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), comparer As IEqualityComparer(Of TKey)) As INotifyEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ObservableExtensions.GroupBy*
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), IEqualityComparer(Of TKey))
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Func<TSource, TKey>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, Func<TKey, IEnumerable<TSource>, TResult>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Func<TSource, TKey>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, Func<TKey, IEnumerable<TSource>, TResult>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Func<TSource, TKey>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GroupBy
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 618
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGroups the given collection by the given predicate into the given result\n"
  example: []
  syntax:
    content: public static INotifyEnumerable<TResult> GroupBy<TSource, TKey, TResult>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, TKey>> keySelector, Func<TSource, TKey> keySelectorCompiled, Expression<Func<TKey, IEnumerable<TSource>, TResult>> resultSelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelectorCompiled, IEqualityComparer<TKey> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: The predicate expression selecting the keys for grouping
    - id: keySelectorCompiled
      type: System.Func{{TSource},{TKey}}
      description: A compiled version of keySelector
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}}
      description: A function to get the result element for a group
    - id: resultSelectorCompiled
      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}
      description: A compiled version of resultSelector
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: A comparer that decides whether items are identical
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    - id: TKey
      description: The type of keys used for grouping
    - id: TResult
      description: The type of the result
    return:
      type: NMF.Expressions.INotifyEnumerable{{TResult}}
      description: A collection of groups
    content.vb: Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As INotifyEnumerable(Of TSource), keySelector As Expression(Of Func(Of TSource, TKey)), keySelectorCompiled As Func(Of TSource, TKey), resultSelector As Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), resultSelectorCompiled As Func(Of TKey, IEnumerable(Of TSource), TResult), comparer As IEqualityComparer(Of TKey)) As INotifyEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ObservableExtensions.GroupBy*
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Func(Of TSource, TKey), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), Func(Of TKey, IEnumerable(Of TSource), TResult), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Func(Of TSource, TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Func(Of TSource, TKey), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), Func(Of TKey, IEnumerable(Of TSource), TResult), IEqualityComparer(Of TKey))
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  id: GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: GroupJoin<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>)
  nameWithType: ObservableExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GroupJoin
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 647
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nJoins the given collections based on keys into groups\n"
  example: []
  syntax:
    content: public static INotifyEnumerable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this INotifyEnumerable<TOuter> outer, IEnumerable<TInner> inner, Expression<Func<TOuter, TKey>> outerKeySelector, Expression<Func<TInner, TKey>> innerKeySelector, Expression<Func<TOuter, IEnumerable<TInner>, TResult>> resultSelector)
    parameters:
    - id: outer
      type: NMF.Expressions.INotifyEnumerable{{TOuter}}
      description: The outer collection
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: The inner collection
    - id: outerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TKey}}}
      description: A predicate that returns the key for each outer item
    - id: innerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}}
      description: A predicate that returns the key for each inner item
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}}
      description: A function that creates a result for each group of an outer item and a group of inner items
    typeParameters:
    - id: TOuter
      description: The element type of the outer collection
    - id: TInner
      description: The element type of the inner collection
    - id: TKey
      description: The key type to be matched
    - id: TResult
      description: The resulting type
    return:
      type: NMF.Expressions.INotifyEnumerable{{TResult}}
      description: A collection of grouped results
    content.vb: Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As INotifyEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Expression(Of Func(Of TOuter, TKey)), innerKeySelector As Expression(Of Func(Of TInner, TKey)), resultSelector As Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult))) As INotifyEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ObservableExtensions.GroupJoin*
  nameWithType.vb: ObservableExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)))
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  id: GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: GroupJoin<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GroupJoin
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 666
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nJoins the given collections based on keys into groups\n"
  example: []
  syntax:
    content: public static INotifyEnumerable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this INotifyEnumerable<TOuter> outer, IEnumerable<TInner> inner, Expression<Func<TOuter, TKey>> outerKeySelector, Expression<Func<TInner, TKey>> innerKeySelector, Expression<Func<TOuter, IEnumerable<TInner>, TResult>> resultSelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: outer
      type: NMF.Expressions.INotifyEnumerable{{TOuter}}
      description: The outer collection
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: The inner collection
    - id: outerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TKey}}}
      description: A predicate that returns the key for each outer item
    - id: innerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}}
      description: A predicate that returns the key for each inner item
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}}
      description: A function that creates a result for each group of an outer item and a group of inner items
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: A comparer to decide when two items are equal
    typeParameters:
    - id: TOuter
      description: The element type of the outer collection
    - id: TInner
      description: The element type of the inner collection
    - id: TKey
      description: The key type to be matched
    - id: TResult
      description: The resulting type
    return:
      type: NMF.Expressions.INotifyEnumerable{{TResult}}
      description: A collection of grouped results
    content.vb: Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As INotifyEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Expression(Of Func(Of TOuter, TKey)), innerKeySelector As Expression(Of Func(Of TInner, TKey)), resultSelector As Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)), comparer As IEqualityComparer(Of TKey)) As INotifyEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ObservableExtensions.GroupJoin*
  nameWithType.vb: ObservableExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
- uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Intersect<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: ObservableExtensions.Intersect<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Intersect
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 681
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nIntersects two collections\n"
  remarks: No deduplication is done
  example: []
  syntax:
    content: public static INotifyEnumerable<TSource> Intersect<TSource>(this INotifyEnumerable<TSource> source, IEnumerable<TSource> source2)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The first collection
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The second collection
    typeParameters:
    - id: TSource
      description: The element type of the collections
    return:
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The intersection of both collections
    content.vb: Public Shared Function Intersect(Of TSource)(source As INotifyEnumerable(Of TSource), source2 As IEnumerable(Of TSource)) As INotifyEnumerable(Of TSource)
  overload: NMF.Expressions.Linq.ObservableExtensions.Intersect*
  nameWithType.vb: ObservableExtensions.Intersect(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Intersect(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Intersect(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
- uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Intersect<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ObservableExtensions.Intersect<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Intersect
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 695
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nIntersects two collections\n"
  remarks: No deduplication is done
  example: []
  syntax:
    content: public static INotifyEnumerable<TSource> Intersect<TSource>(this INotifyEnumerable<TSource> source, IEnumerable<TSource> source2, IEqualityComparer<TSource> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The first collection
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The second collection
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: A comparer to decide when two items are equal
    typeParameters:
    - id: TSource
      description: The element type of the collections
    return:
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The intersection of both collections
    content.vb: Public Shared Function Intersect(Of TSource)(source As INotifyEnumerable(Of TSource), source2 As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As INotifyEnumerable(Of TSource)
  overload: NMF.Expressions.Linq.ObservableExtensions.Intersect*
  nameWithType.vb: ObservableExtensions.Intersect(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Intersect(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Intersect(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
- uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: IsProperSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  nameWithType: ObservableExtensions.IsProperSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsProperSubsetOf
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 710
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets a value indicating whether the given collection is a proper subset of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableProperSubsetOf<>), "Create", false)]

      public static bool IsProperSubsetOf<T>(this INotifyEnumerable<T> source, IEnumerable<T> other)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{T}}
      description: The source collection
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection that is compared to
    typeParameters:
    - id: T
      description: The element type
    return:
      type: System.Boolean
      description: True, if all elements of the current collection are contained in the given collection but not inverse, otherwise False
    content.vb: >-
      <ObservableProxy(GetType(ObservableProperSubsetOf(Of )), "Create", False)>

      Public Shared Function IsProperSubsetOf(Of T)(source As INotifyEnumerable(Of T), other As IEnumerable(Of T)) As Boolean
  overload: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf*
  nameWithType.vb: ObservableExtensions.IsProperSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
- uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: IsProperSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.IsProperSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsProperSubsetOf
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 725
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets a value indicating whether the given collection is a proper subset of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableProperSubsetOf<>), "CreateWithComparer", false)]

      public static bool IsProperSubsetOf<T>(this INotifyEnumerable<T> source, IEnumerable<T> other, IEqualityComparer<T> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{T}}
      description: The source collection
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection that is compared to
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The comparer to define equality
    typeParameters:
    - id: T
      description: The element type
    return:
      type: System.Boolean
      description: True, if all elements of the current collection are contained in the given collection but not inverse, otherwise False
    content.vb: >-
      <ObservableProxy(GetType(ObservableProperSubsetOf(Of )), "CreateWithComparer", False)>

      Public Shared Function IsProperSubsetOf(Of T)(source As INotifyEnumerable(Of T), other As IEnumerable(Of T), comparer As IEqualityComparer(Of T)) As Boolean
  overload: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf*
  nameWithType.vb: ObservableExtensions.IsProperSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsProperSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
- uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: IsProperSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  nameWithType: ObservableExtensions.IsProperSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsProperSupersetOf
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 740
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets a value indicating whether the given collection is a proper superset of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableProperSupersetOf<>), "Create", false)]

      public static bool IsProperSupersetOf<T>(this INotifyEnumerable<T> source, IEnumerable<T> other)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{T}}
      description: The source collection
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection that is compared to
    typeParameters:
    - id: T
      description: The element type
    return:
      type: System.Boolean
      description: True, if all elements of the given collection are contained in the current collection but not inverse, otherwise False
    content.vb: >-
      <ObservableProxy(GetType(ObservableProperSupersetOf(Of )), "Create", False)>

      Public Shared Function IsProperSupersetOf(Of T)(source As INotifyEnumerable(Of T), other As IEnumerable(Of T)) As Boolean
  overload: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf*
  nameWithType.vb: ObservableExtensions.IsProperSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
- uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: IsProperSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.IsProperSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsProperSupersetOf
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 755
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets a value indicating whether the given collection is a proper superset of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableProperSupersetOf<>), "CreateWithComparer", false)]

      public static bool IsProperSupersetOf<T>(this INotifyEnumerable<T> source, IEnumerable<T> other, IEqualityComparer<T> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{T}}
      description: The source collection
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection that is compared to
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The comparer to define equality
    typeParameters:
    - id: T
      description: The element type
    return:
      type: System.Boolean
      description: True, if all elements of the given collection are contained in the current collection but not inverse, otherwise False
    content.vb: >-
      <ObservableProxy(GetType(ObservableProperSupersetOf(Of )), "CreateWithComparer", False)>

      Public Shared Function IsProperSupersetOf(Of T)(source As INotifyEnumerable(Of T), other As IEnumerable(Of T), comparer As IEqualityComparer(Of T)) As Boolean
  overload: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf*
  nameWithType.vb: ObservableExtensions.IsProperSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsProperSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
- uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: IsSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  nameWithType: ObservableExtensions.IsSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsSubsetOf
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 770
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets a value indicating whether the given collection is a proper subset of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSubsetOf<>), "Create", false)]

      public static bool IsSubsetOf<T>(this INotifyEnumerable<T> source, IEnumerable<T> other)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{T}}
      description: The source collection
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection that is compared to
    typeParameters:
    - id: T
      description: The element type
    return:
      type: System.Boolean
      description: True, if all elements of the current collection are contained in the given collection, otherwise False
    content.vb: >-
      <ObservableProxy(GetType(ObservableSubsetOf(Of )), "Create", False)>

      Public Shared Function IsSubsetOf(Of T)(source As INotifyEnumerable(Of T), other As IEnumerable(Of T)) As Boolean
  overload: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf*
  nameWithType.vb: ObservableExtensions.IsSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
- uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: IsSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.IsSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsSubsetOf
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 785
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets a value indicating whether the given collection is a proper subset of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSubsetOf<>), "CreateWithComparer", false)]

      public static bool IsSubsetOf<T>(this INotifyEnumerable<T> source, IEnumerable<T> other, IEqualityComparer<T> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{T}}
      description: The source collection
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection that is compared to
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The comparer to define equality
    typeParameters:
    - id: T
      description: The element type
    return:
      type: System.Boolean
      description: True, if all elements of the current collection are contained in the given collection, otherwise False
    content.vb: >-
      <ObservableProxy(GetType(ObservableSubsetOf(Of )), "CreateWithComparer", False)>

      Public Shared Function IsSubsetOf(Of T)(source As INotifyEnumerable(Of T), other As IEnumerable(Of T), comparer As IEqualityComparer(Of T)) As Boolean
  overload: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf*
  nameWithType.vb: ObservableExtensions.IsSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
- uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: IsSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  nameWithType: ObservableExtensions.IsSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsSupersetOf
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 800
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets a value indicating whether the given collection is a proper superset of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSupersetOf<>), "Create", false)]

      public static bool IsSupersetOf<T>(this INotifyEnumerable<T> source, IEnumerable<T> other)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{T}}
      description: The source collection
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection that is compared to
    typeParameters:
    - id: T
      description: The element type
    return:
      type: System.Boolean
      description: True, if all elements of the given collection are contained in the current collection, otherwise False
    content.vb: >-
      <ObservableProxy(GetType(ObservableSupersetOf(Of )), "Create", False)>

      Public Shared Function IsSupersetOf(Of T)(source As INotifyEnumerable(Of T), other As IEnumerable(Of T)) As Boolean
  overload: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf*
  nameWithType.vb: ObservableExtensions.IsSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
- uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: IsSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.IsSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsSupersetOf
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 815
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets a value indicating whether the given collection is a proper superset of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSupersetOf<>), "CreateWithComparer", false)]

      public static bool IsSupersetOf<T>(this INotifyEnumerable<T> source, IEnumerable<T> other, IEqualityComparer<T> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{T}}
      description: The source collection
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection that is compared to
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: The comparer to define equality
    typeParameters:
    - id: T
      description: The element type
    return:
      type: System.Boolean
      description: True, if all elements of the given collection are contained in the current collection, otherwise False
    content.vb: >-
      <ObservableProxy(GetType(ObservableSupersetOf(Of )), "CreateWithComparer", False)>

      Public Shared Function IsSupersetOf(Of T)(source As INotifyEnumerable(Of T), other As IEnumerable(Of T), comparer As IEqualityComparer(Of T)) As Boolean
  overload: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf*
  nameWithType.vb: ObservableExtensions.IsSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
- uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  id: Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Join<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>)
  nameWithType: ObservableExtensions.Join<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Join<TOuter, TInner, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Join
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 835
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nJoins the current collection with the given other collection\n"
  example: []
  syntax:
    content: public static INotifyEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>(this INotifyEnumerable<TOuter> outerSource, IEnumerable<TInner> innerSource, Expression<Func<TOuter, TKey>> outerKeySelector, Expression<Func<TInner, TKey>> innerKeySelector, Expression<Func<TOuter, TInner, TResult>> resultSelector)
    parameters:
    - id: outerSource
      type: NMF.Expressions.INotifyEnumerable{{TOuter}}
      description: The current collection
    - id: innerSource
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: The other collection to join with
    - id: outerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TKey}}}
      description: A lambda expression to select the key for the current collections items
    - id: innerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}}
      description: A lambda expression to select the key for the given other collections items
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TInner},{TResult}}}
      description: A lambda expression to select the result for a given pair of elements
    typeParameters:
    - id: TOuter
      description: The element type of the current collection
    - id: TInner
      description: The element type of the other collection
    - id: TKey
      description: The type of the keys for which the collections should be joined
    - id: TResult
      description: The join result type
    return:
      type: NMF.Expressions.INotifyEnumerable{{TResult}}
      description: A joined collection
    content.vb: Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outerSource As INotifyEnumerable(Of TOuter), innerSource As IEnumerable(Of TInner), outerKeySelector As Expression(Of Func(Of TOuter, TKey)), innerKeySelector As Expression(Of Func(Of TInner, TKey)), resultSelector As Expression(Of Func(Of TOuter, TInner, TResult))) As INotifyEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ObservableExtensions.Join*
  nameWithType.vb: ObservableExtensions.Join(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Join(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult)))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  id: Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Join<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.Join<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Join<TOuter, TInner, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Join
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 854
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nJoins the current collection with the given other collection\n"
  example: []
  syntax:
    content: public static INotifyEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>(this INotifyEnumerable<TOuter> outerSource, IEnumerable<TInner> innerSource, Expression<Func<TOuter, TKey>> outerKeySelector, Expression<Func<TInner, TKey>> innerKeySelector, Expression<Func<TOuter, TInner, TResult>> resultSelector, IEqualityComparer<TKey> comparer)
    parameters:
    - id: outerSource
      type: NMF.Expressions.INotifyEnumerable{{TOuter}}
      description: The current collection
    - id: innerSource
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: The other collection to join with
    - id: outerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TKey}}}
      description: A lambda expression to select the key for the current collections items
    - id: innerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}}
      description: A lambda expression to select the key for the given other collections items
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TInner},{TResult}}}
      description: A lambda expression to select the result for a given pair of elements
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An equality comparer to define when two keys are equivalent
    typeParameters:
    - id: TOuter
      description: The element type of the current collection
    - id: TInner
      description: The element type of the other collection
    - id: TKey
      description: The type of the keys for which the collections should be joined
    - id: TResult
      description: The join result type
    return:
      type: NMF.Expressions.INotifyEnumerable{{TResult}}
      description: A joined collection
    content.vb: Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outerSource As INotifyEnumerable(Of TOuter), innerSource As IEnumerable(Of TInner), outerKeySelector As Expression(Of Func(Of TOuter, TKey)), innerKeySelector As Expression(Of Func(Of TInner, TKey)), resultSelector As Expression(Of Func(Of TOuter, TInner, TResult)), comparer As IEqualityComparer(Of TKey)) As INotifyEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ObservableExtensions.Join*
  nameWithType.vb: ObservableExtensions.Join(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Join(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)), IEqualityComparer(Of TKey))
- uid: NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0})
  id: Max``1(NMF.Expressions.INotifyEnumerable{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Max<TSource>(INotifyEnumerable<TSource>)
  nameWithType: ObservableExtensions.Max<TSource>(INotifyEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource>(NMF.Expressions.INotifyEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Max
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 868
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the maximum element of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableComparisons), "Max", false)]

      public static TSource Max<TSource>(this INotifyEnumerable<TSource> source) where TSource : IComparable<TSource>
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The collection
    typeParameters:
    - id: TSource
      description: The element type
    return:
      type: '{TSource}'
      description: An element which is maximal
    content.vb: >-
      <ObservableProxy(GetType(ObservableComparisons), "Max", False)>

      Public Shared Function Max(Of TSource As IComparable(Of TSource))(source As INotifyEnumerable(Of TSource)) As TSource
  overload: NMF.Expressions.Linq.ObservableExtensions.Max*
  nameWithType.vb: ObservableExtensions.Max(Of TSource)(INotifyEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource))
  name.vb: Max(Of TSource)(INotifyEnumerable(Of TSource))
- uid: NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  id: Max``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Max<TSource>(INotifyEnumerable<TSource>, IComparer<TSource>)
  nameWithType: ObservableExtensions.Max<TSource>(INotifyEnumerable<TSource>, IComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IComparer<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Max
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 883
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the maximum element of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableComparisons), "MaxWithComparer", false)]

      public static TSource Max<TSource>(this INotifyEnumerable<TSource> source, IComparer<TSource> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The collection
    - id: comparer
      type: System.Collections.Generic.IComparer{{TSource}}
      description: A comparer for custom comparison
    typeParameters:
    - id: TSource
      description: The element type
    return:
      type: '{TSource}'
      description: An element which is maximal
    content.vb: >-
      <ObservableProxy(GetType(ObservableComparisons), "MaxWithComparer", False)>

      Public Shared Function Max(Of TSource)(source As INotifyEnumerable(Of TSource), comparer As IComparer(Of TSource)) As TSource
  overload: NMF.Expressions.Linq.ObservableExtensions.Max*
  nameWithType.vb: ObservableExtensions.Max(Of TSource)(INotifyEnumerable(Of TSource), IComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IComparer(Of TSource))
  name.vb: Max(Of TSource)(INotifyEnumerable(Of TSource), IComparer(Of TSource))
- uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  nameWithType: ObservableExtensions.Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Max
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 919
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the maximum feature of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableComparisons), "LambdaMax", false)]

      public static TResult Max<TSource, TResult>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, TResult>> selector) where TResult : IComparable<TResult>
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The collection
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
      description: A lambda expression to obtain the elements feature in quest
    typeParameters:
    - id: TSource
      description: The element type
    - id: TResult
      description: The result type of the comparison
    return:
      type: '{TResult}'
      description: An elements feature which is maximal
    content.vb: >-
      <ObservableProxy(GetType(ObservableComparisons), "LambdaMax", False)>

      Public Shared Function Max(Of TSource, TResult As IComparable(Of TResult))(source As INotifyEnumerable(Of TSource), selector As Expression(Of Func(Of TSource, TResult))) As TResult
  overload: NMF.Expressions.Linq.ObservableExtensions.Max*
  nameWithType.vb: ObservableExtensions.Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Collections.Generic.IComparer<TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Max
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 938
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the maximum feature of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableComparisons), "LambdaMaxWithComparer", false)]

      public static TResult Max<TSource, TResult>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, TResult>> selector, IComparer<TResult> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The collection
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
      description: A lambda expression to obtain the elements feature in quest
    - id: comparer
      type: System.Collections.Generic.IComparer{{TResult}}
      description: A comparer for custom comparison
    typeParameters:
    - id: TSource
      description: The element type
    - id: TResult
      description: The result type of the comparison
    return:
      type: '{TResult}'
      description: An elements feature which is maximal
    content.vb: >-
      <ObservableProxy(GetType(ObservableComparisons), "LambdaMaxWithComparer", False)>

      Public Shared Function Max(Of TSource, TResult)(source As INotifyEnumerable(Of TSource), selector As Expression(Of Func(Of TSource, TResult)), comparer As IComparer(Of TResult)) As TResult
  overload: NMF.Expressions.Linq.ObservableExtensions.Max*
  nameWithType.vb: ObservableExtensions.Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
- uid: NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{System.Nullable{``0}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{System.Nullable{``0}})
  id: Max``1(NMF.Expressions.INotifyEnumerable{System.Nullable{``0}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Max<TSource>(INotifyEnumerable<TSource?>)
  nameWithType: ObservableExtensions.Max<TSource>(INotifyEnumerable<TSource?>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource>(NMF.Expressions.INotifyEnumerable<TSource?>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Max
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 975
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the maximum element of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableComparisons), "NullableMax", false)]

      public static TSource? Max<TSource>(this INotifyEnumerable<TSource?> source) where TSource : struct, IComparable<TSource>
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{System.Nullable{{TSource}}}
      description: The collection
    typeParameters:
    - id: TSource
      description: The element type
    return:
      type: System.Nullable{{TSource}}
      description: An element which is maximal
    content.vb: >-
      <ObservableProxy(GetType(ObservableComparisons), "NullableMax", False)>

      Public Shared Function Max(Of TSource As {Structure, IComparable(Of TSource)})(source As INotifyEnumerable(Of TSource?)) As TSource?
  overload: NMF.Expressions.Linq.ObservableExtensions.Max*
  nameWithType.vb: ObservableExtensions.Max(Of TSource)(INotifyEnumerable(Of TSource?))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource?))
  name.vb: Max(Of TSource)(INotifyEnumerable(Of TSource?))
- uid: NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{System.Nullable{``0}},System.Collections.Generic.IComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{System.Nullable{``0}},System.Collections.Generic.IComparer{``0})
  id: Max``1(NMF.Expressions.INotifyEnumerable{System.Nullable{``0}},System.Collections.Generic.IComparer{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Max<TSource>(INotifyEnumerable<TSource?>, IComparer<TSource>)
  nameWithType: ObservableExtensions.Max<TSource>(INotifyEnumerable<TSource?>, IComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource>(NMF.Expressions.INotifyEnumerable<TSource?>, System.Collections.Generic.IComparer<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Max
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 990
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the maximum element of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableComparisons), "NullableMaxWithComparer", false)]

      public static TSource? Max<TSource>(this INotifyEnumerable<TSource?> source, IComparer<TSource> comparer) where TSource : struct
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{System.Nullable{{TSource}}}
      description: The collection
    - id: comparer
      type: System.Collections.Generic.IComparer{{TSource}}
      description: A comparer for custom comparison
    typeParameters:
    - id: TSource
      description: The element type
    return:
      type: System.Nullable{{TSource}}
      description: An element which is maximal
    content.vb: >-
      <ObservableProxy(GetType(ObservableComparisons), "NullableMaxWithComparer", False)>

      Public Shared Function Max(Of TSource As Structure)(source As INotifyEnumerable(Of TSource?), comparer As IComparer(Of TSource)) As TSource?
  overload: NMF.Expressions.Linq.ObservableExtensions.Max*
  nameWithType.vb: ObservableExtensions.Max(Of TSource)(INotifyEnumerable(Of TSource?), IComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource?), System.Collections.Generic.IComparer(Of TSource))
  name.vb: Max(Of TSource)(INotifyEnumerable(Of TSource?), IComparer(Of TSource))
- uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  id: Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult?>>)
  nameWithType: ObservableExtensions.Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult?>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Max
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1027
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the maximum feature of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableComparisons), "LambdaNullableMax", false)]

      public static TResult? Max<TSource, TResult>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, TResult?>> selector) where TResult : struct, IComparable<TResult>
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The collection
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{{TResult}}}}
      description: A lambda expression to obtain the elements feature in quest
    typeParameters:
    - id: TSource
      description: The element type
    - id: TResult
      description: The result type of the comparison
    return:
      type: System.Nullable{{TResult}}
      description: An elements feature which is maximal
    content.vb: >-
      <ObservableProxy(GetType(ObservableComparisons), "LambdaNullableMax", False)>

      Public Shared Function Max(Of TSource, TResult As {Structure, IComparable(Of TResult)})(source As INotifyEnumerable(Of TSource), selector As Expression(Of Func(Of TSource, TResult?))) As TResult?
  overload: NMF.Expressions.Linq.ObservableExtensions.Max*
  nameWithType.vb: ObservableExtensions.Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult?)))
  name.vb: Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult?)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  id: Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult?>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult?>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult?>>, System.Collections.Generic.IComparer<TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Max
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1044
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the maximum feature of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableComparisons), "LambdaNullableMaxWithComparer", false)]

      public static TResult? Max<TSource, TResult>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, TResult?>> selector, IComparer<TResult> comparer) where TResult : struct
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The collection
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{{TResult}}}}
      description: A lambda expression to obtain the elements feature in quest
    - id: comparer
      type: System.Collections.Generic.IComparer{{TResult}}
      description: A comparer for custom comparison
    typeParameters:
    - id: TSource
      description: The element type
    - id: TResult
      description: The result type of the comparison
    return:
      type: System.Nullable{{TResult}}
      description: An elements feature which is maximal
    content.vb: >-
      <ObservableProxy(GetType(ObservableComparisons), "LambdaNullableMaxWithComparer", False)>

      Public Shared Function Max(Of TSource, TResult As Structure)(source As INotifyEnumerable(Of TSource), selector As Expression(Of Func(Of TSource, TResult?)), comparer As IComparer(Of TResult)) As TResult?
  overload: NMF.Expressions.Linq.ObservableExtensions.Max*
  nameWithType.vb: ObservableExtensions.Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult?)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult?)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult?)), IComparer(Of TResult))
- uid: NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0})
  id: Min``1(NMF.Expressions.INotifyEnumerable{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Min<TSource>(INotifyEnumerable<TSource>)
  nameWithType: ObservableExtensions.Min<TSource>(INotifyEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource>(NMF.Expressions.INotifyEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Min
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1084
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the minimum element of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableComparisons), "Min", false)]

      public static TSource Min<TSource>(this INotifyEnumerable<TSource> source) where TSource : IComparable<TSource>
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The collection
    typeParameters:
    - id: TSource
      description: The element type
    return:
      type: '{TSource}'
      description: An element which is minimal
    content.vb: >-
      <ObservableProxy(GetType(ObservableComparisons), "Min", False)>

      Public Shared Function Min(Of TSource As IComparable(Of TSource))(source As INotifyEnumerable(Of TSource)) As TSource
  overload: NMF.Expressions.Linq.ObservableExtensions.Min*
  nameWithType.vb: ObservableExtensions.Min(Of TSource)(INotifyEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource))
  name.vb: Min(Of TSource)(INotifyEnumerable(Of TSource))
- uid: NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  id: Min``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Min<TSource>(INotifyEnumerable<TSource>, IComparer<TSource>)
  nameWithType: ObservableExtensions.Min<TSource>(INotifyEnumerable<TSource>, IComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IComparer<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Min
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1099
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the minimum element of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableComparisons), "MinWithComparer", false)]

      public static TSource Min<TSource>(this INotifyEnumerable<TSource> source, IComparer<TSource> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The collection
    - id: comparer
      type: System.Collections.Generic.IComparer{{TSource}}
      description: A comparer for custom comparison
    typeParameters:
    - id: TSource
      description: The element type
    return:
      type: '{TSource}'
      description: An element which is minimal
    content.vb: >-
      <ObservableProxy(GetType(ObservableComparisons), "MinWithComparer", False)>

      Public Shared Function Min(Of TSource)(source As INotifyEnumerable(Of TSource), comparer As IComparer(Of TSource)) As TSource
  overload: NMF.Expressions.Linq.ObservableExtensions.Min*
  nameWithType.vb: ObservableExtensions.Min(Of TSource)(INotifyEnumerable(Of TSource), IComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IComparer(Of TSource))
  name.vb: Min(Of TSource)(INotifyEnumerable(Of TSource), IComparer(Of TSource))
- uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  nameWithType: ObservableExtensions.Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Min
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1135
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the minimum feature of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableComparisons), "LambdaMin", false)]

      public static TResult Min<TSource, TResult>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, TResult>> selector) where TResult : IComparable<TResult>
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The collection
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
      description: A lambda expression to obtain the elements feature in quest
    typeParameters:
    - id: TSource
      description: The element type
    - id: TResult
      description: The result type of the comparison
    return:
      type: '{TResult}'
      description: An elements feature which is minimal
    content.vb: >-
      <ObservableProxy(GetType(ObservableComparisons), "LambdaMin", False)>

      Public Shared Function Min(Of TSource, TResult As IComparable(Of TResult))(source As INotifyEnumerable(Of TSource), selector As Expression(Of Func(Of TSource, TResult))) As TResult
  overload: NMF.Expressions.Linq.ObservableExtensions.Min*
  nameWithType.vb: ObservableExtensions.Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Collections.Generic.IComparer<TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Min
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1153
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the minimum feature of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableComparisons), "LambdaMinWithComparer", false)]

      public static TResult Min<TSource, TResult>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, TResult>> selector, IComparer<TResult> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The collection
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
      description: A lambda expression to obtain the elements feature in quest
    - id: comparer
      type: System.Collections.Generic.IComparer{{TResult}}
      description: A comparer for custom comparison
    typeParameters:
    - id: TSource
      description: The element type
    - id: TResult
      description: The result type of the comparison
    return:
      type: '{TResult}'
      description: An elements feature which is minimal
    content.vb: >-
      <ObservableProxy(GetType(ObservableComparisons), "LambdaMinWithComparer", False)>

      Public Shared Function Min(Of TSource, TResult)(source As INotifyEnumerable(Of TSource), selector As Expression(Of Func(Of TSource, TResult)), comparer As IComparer(Of TResult)) As TResult
  overload: NMF.Expressions.Linq.ObservableExtensions.Min*
  nameWithType.vb: ObservableExtensions.Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
- uid: NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{System.Nullable{``0}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{System.Nullable{``0}})
  id: Min``1(NMF.Expressions.INotifyEnumerable{System.Nullable{``0}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Min<TSource>(INotifyEnumerable<TSource?>)
  nameWithType: ObservableExtensions.Min<TSource>(INotifyEnumerable<TSource?>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource>(NMF.Expressions.INotifyEnumerable<TSource?>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Min
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1190
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the minimum element of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableComparisons), "NullableMin", false)]

      public static TSource? Min<TSource>(this INotifyEnumerable<TSource?> source) where TSource : struct, IComparable<TSource>
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{System.Nullable{{TSource}}}
      description: The collection
    typeParameters:
    - id: TSource
      description: The element type
    return:
      type: System.Nullable{{TSource}}
      description: An element which is minimal
    content.vb: >-
      <ObservableProxy(GetType(ObservableComparisons), "NullableMin", False)>

      Public Shared Function Min(Of TSource As {Structure, IComparable(Of TSource)})(source As INotifyEnumerable(Of TSource?)) As TSource?
  overload: NMF.Expressions.Linq.ObservableExtensions.Min*
  nameWithType.vb: ObservableExtensions.Min(Of TSource)(INotifyEnumerable(Of TSource?))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource?))
  name.vb: Min(Of TSource)(INotifyEnumerable(Of TSource?))
- uid: NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{System.Nullable{``0}},System.Collections.Generic.IComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{System.Nullable{``0}},System.Collections.Generic.IComparer{``0})
  id: Min``1(NMF.Expressions.INotifyEnumerable{System.Nullable{``0}},System.Collections.Generic.IComparer{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Min<TSource>(INotifyEnumerable<TSource?>, IComparer<TSource>)
  nameWithType: ObservableExtensions.Min<TSource>(INotifyEnumerable<TSource?>, IComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource>(NMF.Expressions.INotifyEnumerable<TSource?>, System.Collections.Generic.IComparer<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Min
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1205
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the minimum element of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableComparisons), "NullableMinWithComparer", false)]

      public static TSource? Min<TSource>(this INotifyEnumerable<TSource?> source, IComparer<TSource> comparer) where TSource : struct
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{System.Nullable{{TSource}}}
      description: The collection
    - id: comparer
      type: System.Collections.Generic.IComparer{{TSource}}
      description: A comparer for custom comparison
    typeParameters:
    - id: TSource
      description: The element type
    return:
      type: System.Nullable{{TSource}}
      description: An element which is minimal
    content.vb: >-
      <ObservableProxy(GetType(ObservableComparisons), "NullableMinWithComparer", False)>

      Public Shared Function Min(Of TSource As Structure)(source As INotifyEnumerable(Of TSource?), comparer As IComparer(Of TSource)) As TSource?
  overload: NMF.Expressions.Linq.ObservableExtensions.Min*
  nameWithType.vb: ObservableExtensions.Min(Of TSource)(INotifyEnumerable(Of TSource?), IComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource?), System.Collections.Generic.IComparer(Of TSource))
  name.vb: Min(Of TSource)(INotifyEnumerable(Of TSource?), IComparer(Of TSource))
- uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  id: Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult?>>)
  nameWithType: ObservableExtensions.Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult?>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Min
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1242
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the minimum feature of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableComparisons), "LambdaNullableMin", false)]

      public static TResult? Min<TSource, TResult>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, TResult?>> selector) where TResult : struct, IComparable<TResult>
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The collection
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{{TResult}}}}
      description: A lambda expression to obtain the elements feature in quest
    typeParameters:
    - id: TSource
      description: The element type
    - id: TResult
      description: The result type of the comparison
    return:
      type: System.Nullable{{TResult}}
      description: An elements feature which is minimal
    content.vb: >-
      <ObservableProxy(GetType(ObservableComparisons), "LambdaNullableMin", False)>

      Public Shared Function Min(Of TSource, TResult As {Structure, IComparable(Of TResult)})(source As INotifyEnumerable(Of TSource), selector As Expression(Of Func(Of TSource, TResult?))) As TResult?
  overload: NMF.Expressions.Linq.ObservableExtensions.Min*
  nameWithType.vb: ObservableExtensions.Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult?)))
  name.vb: Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult?)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  id: Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult?>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult?>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult?>>, System.Collections.Generic.IComparer<TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Min
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1259
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the minimum feature of the given collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableComparisons), "LambdaNullableMinWithComparer", false)]

      public static TResult? Min<TSource, TResult>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, TResult?>> selector, IComparer<TResult> comparer) where TResult : struct
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The collection
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{{TResult}}}}
      description: A lambda expression to obtain the elements feature in quest
    - id: comparer
      type: System.Collections.Generic.IComparer{{TResult}}
      description: A comparer for custom comparison
    typeParameters:
    - id: TSource
      description: The element type
    - id: TResult
      description: The result type of the comparison
    return:
      type: System.Nullable{{TResult}}
      description: An elements feature which is minimal
    content.vb: >-
      <ObservableProxy(GetType(ObservableComparisons), "LambdaNullableMinWithComparer", False)>

      Public Shared Function Min(Of TSource, TResult As Structure)(source As INotifyEnumerable(Of TSource), selector As Expression(Of Func(Of TSource, TResult?)), comparer As IComparer(Of TResult)) As TResult?
  overload: NMF.Expressions.Linq.ObservableExtensions.Min*
  nameWithType.vb: ObservableExtensions.Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult?)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult?)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult?)), IComparer(Of TResult))
- uid: NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
  id: OfType``1(NMF.Expressions.INotifyEnumerable)
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: OfType<TResult>(INotifyEnumerable)
  nameWithType: ObservableExtensions.OfType<TResult>(INotifyEnumerable)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OfType<TResult>(NMF.Expressions.INotifyEnumerable)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OfType
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1298
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nFilters the given collection for elements of the given type\n"
  example: []
  syntax:
    content: public static INotifyEnumerable<TResult> OfType<TResult>(this INotifyEnumerable source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable
      description: The current collection
    typeParameters:
    - id: TResult
      description: The result type
    return:
      type: NMF.Expressions.INotifyEnumerable{{TResult}}
      description: A collection containing the elements of the given type
    content.vb: Public Shared Function OfType(Of TResult)(source As INotifyEnumerable) As INotifyEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ObservableExtensions.OfType*
  nameWithType.vb: ObservableExtensions.OfType(Of TResult)(INotifyEnumerable)
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OfType(Of TResult)(NMF.Expressions.INotifyEnumerable)
  name.vb: OfType(Of TResult)(INotifyEnumerable)
- uid: NMF.Expressions.Linq.ObservableExtensions.OfType``2(NMF.Expressions.INotifyCollection{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OfType``2(NMF.Expressions.INotifyCollection{``0})
  id: OfType``2(NMF.Expressions.INotifyCollection{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: OfType<TSource, TResult>(INotifyCollection<TSource>)
  nameWithType: ObservableExtensions.OfType<TSource, TResult>(INotifyCollection<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OfType<TSource, TResult>(NMF.Expressions.INotifyCollection<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OfType
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1312
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nFilters the given collection for elements of the given type\n"
  example: []
  syntax:
    content: 'public static INotifyCollection<TResult> OfType<TSource, TResult>(this INotifyCollection<TSource> source) where TResult : TSource'
    parameters:
    - id: source
      type: NMF.Expressions.INotifyCollection{{TSource}}
      description: The current collection
    typeParameters:
    - id: TSource
      description: The type of the original collection
    - id: TResult
      description: The result type
    return:
      type: NMF.Expressions.INotifyCollection{{TResult}}
      description: A collection containing the elements of the given type
    content.vb: Public Shared Function OfType(Of TSource, TResult As TSource)(source As INotifyCollection(Of TSource)) As INotifyCollection(Of TResult)
  overload: NMF.Expressions.Linq.ObservableExtensions.OfType*
  nameWithType.vb: ObservableExtensions.OfType(Of TSource, TResult)(INotifyCollection(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OfType(Of TSource, TResult)(NMF.Expressions.INotifyCollection(Of TSource))
  name.vb: OfType(Of TSource, TResult)(INotifyCollection(Of TSource))
- uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: OrderBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  nameWithType: ObservableExtensions.OrderBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OrderBy
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1328
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nOrders the given collection ascending by the given predicate\n"
  example: []
  syntax:
    content: public static IOrderableNotifyEnumerable<TItem> OrderBy<TItem, TKey>(this INotifyEnumerable<TItem> source, Expression<Func<TItem, TKey>> keySelector)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TItem}}
      description: The collection that should be sorted
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}}
      description: A lambda expression selecting the sorting keys for the given collection
    typeParameters:
    - id: TItem
      description: The elements type
    - id: TKey
      description: The type of the keys used for ordering
    return:
      type: NMF.Expressions.IOrderableNotifyEnumerable{{TItem}}
      description: A collection with the elements contained in the current collection sorted by the given predicate
    content.vb: Public Shared Function OrderBy(Of TItem, TKey)(source As INotifyEnumerable(Of TItem), keySelector As Expression(Of Func(Of TItem, TKey))) As IOrderableNotifyEnumerable(Of TItem)
  overload: NMF.Expressions.Linq.ObservableExtensions.OrderBy*
  nameWithType.vb: ObservableExtensions.OrderBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderBy(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: OrderBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
- uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: OrderBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.OrderBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OrderBy
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1342
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nOrders the given collection ascending by the given predicate\n"
  example: []
  syntax:
    content: public static IOrderableNotifyEnumerable<TItem> OrderBy<TItem, TKey>(this INotifyEnumerable<TItem> source, Expression<Func<TItem, TKey>> keySelector, IComparer<TKey> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TItem}}
      description: The collection that should be sorted
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}}
      description: A lambda expression selecting the sorting keys for the given collection
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: A comparer for custom comparison
    typeParameters:
    - id: TItem
      description: The elements type
    - id: TKey
      description: The type of the keys used for ordering
    return:
      type: NMF.Expressions.IOrderableNotifyEnumerable{{TItem}}
      description: A collection with the elements contained in the current collection sorted by the given predicate
    content.vb: Public Shared Function OrderBy(Of TItem, TKey)(source As INotifyEnumerable(Of TItem), keySelector As Expression(Of Func(Of TItem, TKey)), comparer As IComparer(Of TKey)) As IOrderableNotifyEnumerable(Of TItem)
  overload: NMF.Expressions.Linq.ObservableExtensions.OrderBy*
  nameWithType.vb: ObservableExtensions.OrderBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderBy(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
- uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: OrderByDescending<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  nameWithType: ObservableExtensions.OrderByDescending<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OrderByDescending
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1357
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nOrders the given collection descending by the given predicate\n"
  example: []
  syntax:
    content: public static IOrderableNotifyEnumerable<TItem> OrderByDescending<TItem, TKey>(this INotifyEnumerable<TItem> source, Expression<Func<TItem, TKey>> keySelector)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TItem}}
      description: The collection that should be sorted
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}}
      description: A lambda expression selecting the sorting keys for the given collection
    typeParameters:
    - id: TItem
      description: The elements type
    - id: TKey
      description: The type of the keys used for ordering
    return:
      type: NMF.Expressions.IOrderableNotifyEnumerable{{TItem}}
      description: A collection with the elements contained in the current collection sorted by the given predicate
    content.vb: Public Shared Function OrderByDescending(Of TItem, TKey)(source As INotifyEnumerable(Of TItem), keySelector As Expression(Of Func(Of TItem, TKey))) As IOrderableNotifyEnumerable(Of TItem)
  overload: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending*
  nameWithType.vb: ObservableExtensions.OrderByDescending(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: OrderByDescending(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
- uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: OrderByDescending<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.OrderByDescending<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OrderByDescending
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1371
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nOrders the given collection descending by the given predicate\n"
  example: []
  syntax:
    content: public static IOrderableNotifyEnumerable<TItem> OrderByDescending<TItem, TKey>(this INotifyEnumerable<TItem> source, Expression<Func<TItem, TKey>> keySelector, IComparer<TKey> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TItem}}
      description: The collection that should be sorted
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}}
      description: A lambda expression selecting the sorting keys for the given collection
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: A comparer for custom comparison
    typeParameters:
    - id: TItem
      description: The elements type
    - id: TKey
      description: The type of the keys used for ordering
    return:
      type: NMF.Expressions.IOrderableNotifyEnumerable{{TItem}}
      description: A collection with the elements contained in the current collection sorted by the given predicate
    content.vb: Public Shared Function OrderByDescending(Of TItem, TKey)(source As INotifyEnumerable(Of TItem), keySelector As Expression(Of Func(Of TItem, TKey)), comparer As IComparer(Of TKey)) As IOrderableNotifyEnumerable(Of TItem)
  overload: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending*
  nameWithType.vb: ObservableExtensions.OrderByDescending(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderByDescending(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
- uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Select<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  nameWithType: ObservableExtensions.Select<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Select<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Select
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1384
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nMaps the current collection to the given lambda expression\n"
  example: []
  syntax:
    content: public static INotifyEnumerable<TResult> Select<TSource, TResult>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, TResult>> selector)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The current collection
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
      description: A lambda expression representing the mapping result for a given item
    typeParameters:
    - id: TSource
      description: The elements type
    - id: TResult
      description: The result element type
    return:
      type: NMF.Expressions.INotifyEnumerable{{TResult}}
      description: A collection with the mapping results
    content.vb: Public Shared Function [Select](Of TSource, TResult)(source As INotifyEnumerable(Of TSource), selector As Expression(Of Func(Of TSource, TResult))) As INotifyEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ObservableExtensions.Select*
  nameWithType.vb: ObservableExtensions.Select(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Select(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Select(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  id: Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Select<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>, Func<TSource, TResult>)
  nameWithType: ObservableExtensions.Select<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>, Func<TSource, TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Select<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Func<TSource, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Select
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1398
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nMaps the current collection to the given lambda expression\n"
  example: []
  syntax:
    content: public static INotifyEnumerable<TResult> Select<TSource, TResult>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, TResult>> selector, Func<TSource, TResult> selectorCompiled)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The current collection
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
      description: A lambda expression representing the mapping result for a given item
    - id: selectorCompiled
      type: System.Func{{TSource},{TResult}}
      description: A compiled form of the selector
    typeParameters:
    - id: TSource
      description: The elements type
    - id: TResult
      description: The result element type
    return:
      type: NMF.Expressions.INotifyEnumerable{{TResult}}
      description: A collection with the mapping results
    content.vb: Public Shared Function [Select](Of TSource, TResult)(source As INotifyEnumerable(Of TSource), selector As Expression(Of Func(Of TSource, TResult)), selectorCompiled As Func(Of TSource, TResult)) As INotifyEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ObservableExtensions.Select*
  nameWithType.vb: ObservableExtensions.Select(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)), Func(Of TSource, TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Select(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Func(Of TSource, TResult))
  name.vb: Select(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)), Func(Of TSource, TResult))
- uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  id: SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TIntermediate, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TIntermediate>>>, Expression<Func<TSource, TIntermediate, TResult>>)
  nameWithType: ObservableExtensions.SelectMany<TSource, TIntermediate, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TIntermediate>>>, Expression<Func<TSource, TIntermediate, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TSource, TIntermediate, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TIntermediate>>>, System.Linq.Expressions.Expression<System.Func<TSource, TIntermediate, TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SelectMany
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1415
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nFlattens the given collection of collections where the subsequent collections are selected by a predicate\n"
  example: []
  syntax:
    content: public static INotifyEnumerable<TResult> SelectMany<TSource, TIntermediate, TResult>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, IEnumerable<TIntermediate>>> func, Expression<Func<TSource, TIntermediate, TResult>> selector)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The current collection
    - id: func
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Collections.Generic.IEnumerable{{TIntermediate}}}}
      description: A lambda expression to select subsequent collections
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TIntermediate},{TResult}}}
      description: A lambda expression that determines the result element given the element of the source collection and the element of the subsequent collection
    typeParameters:
    - id: TSource
      description: The source element type
    - id: TIntermediate
      description: The element type of the subsequent collection
    - id: TResult
      description: The result element type
    return:
      type: NMF.Expressions.INotifyEnumerable{{TResult}}
      description: A collection with the results
    content.vb: Public Shared Function SelectMany(Of TSource, TIntermediate, TResult)(source As INotifyEnumerable(Of TSource), func As Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate))), selector As Expression(Of Func(Of TSource, TIntermediate, TResult))) As INotifyEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ObservableExtensions.SelectMany*
  nameWithType.vb: ObservableExtensions.SelectMany(Of TSource, TIntermediate, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate))), Expression(Of Func(Of TSource, TIntermediate, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TSource, TIntermediate, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TIntermediate))), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TIntermediate, TResult)))
  name.vb: SelectMany(Of TSource, TIntermediate, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate))), Expression(Of Func(Of TSource, TIntermediate, TResult)))
- uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Func{``0,``1,``2})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Func{``0,``1,``2})
  id: SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Func{``0,``1,``2})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TIntermediate, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TIntermediate>>>, Func<TSource, IEnumerable<TIntermediate>>, Expression<Func<TSource, TIntermediate, TResult>>, Func<TSource, TIntermediate, TResult>)
  nameWithType: ObservableExtensions.SelectMany<TSource, TIntermediate, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TIntermediate>>>, Func<TSource, IEnumerable<TIntermediate>>, Expression<Func<TSource, TIntermediate, TResult>>, Func<TSource, TIntermediate, TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TSource, TIntermediate, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TIntermediate>>>, System.Func<TSource, System.Collections.Generic.IEnumerable<TIntermediate>>, System.Linq.Expressions.Expression<System.Func<TSource, TIntermediate, TResult>>, System.Func<TSource, TIntermediate, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SelectMany
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1432
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nFlattens the given collection of collections where the subsequent collections are selected by a predicate\n"
  example: []
  syntax:
    content: public static INotifyEnumerable<TResult> SelectMany<TSource, TIntermediate, TResult>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, IEnumerable<TIntermediate>>> func, Func<TSource, IEnumerable<TIntermediate>> funcCompiled, Expression<Func<TSource, TIntermediate, TResult>> selector, Func<TSource, TIntermediate, TResult> selectorCompiled)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The current collection
    - id: func
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Collections.Generic.IEnumerable{{TIntermediate}}}}
      description: A lambda expression to select subsequent collections
    - id: funcCompiled
      type: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TIntermediate}}}
      description: A compiled version of func
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TIntermediate},{TResult}}}
      description: A lambda expression that determines the result element given the element of the source collection and the element of the subsequent collection
    - id: selectorCompiled
      type: System.Func{{TSource},{TIntermediate},{TResult}}
      description: A compiled version of selector
    typeParameters:
    - id: TSource
      description: The source element type
    - id: TIntermediate
      description: The element type of the subsequent collection
    - id: TResult
      description: The result element type
    return:
      type: NMF.Expressions.INotifyEnumerable{{TResult}}
      description: A collection with the results
    content.vb: Public Shared Function SelectMany(Of TSource, TIntermediate, TResult)(source As INotifyEnumerable(Of TSource), func As Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate))), funcCompiled As Func(Of TSource, IEnumerable(Of TIntermediate)), selector As Expression(Of Func(Of TSource, TIntermediate, TResult)), selectorCompiled As Func(Of TSource, TIntermediate, TResult)) As INotifyEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ObservableExtensions.SelectMany*
  nameWithType.vb: ObservableExtensions.SelectMany(Of TSource, TIntermediate, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate))), Func(Of TSource, IEnumerable(Of TIntermediate)), Expression(Of Func(Of TSource, TIntermediate, TResult)), Func(Of TSource, TIntermediate, TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TSource, TIntermediate, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TIntermediate))), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TIntermediate)), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TIntermediate, TResult)), System.Func(Of TSource, TIntermediate, TResult))
  name.vb: SelectMany(Of TSource, TIntermediate, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate))), Func(Of TSource, IEnumerable(Of TIntermediate)), Expression(Of Func(Of TSource, TIntermediate, TResult)), Func(Of TSource, TIntermediate, TResult))
- uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  id: SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TResult>>>)
  nameWithType: ObservableExtensions.SelectMany<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TResult>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SelectMany
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1447
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nFlattens the given collection of collections where the subsequent collections are selected by a predicate\n"
  example: []
  syntax:
    content: public static INotifyEnumerable<TResult> SelectMany<TSource, TResult>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, IEnumerable<TResult>>> selector)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The current collection
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}}
      description: A lambda expression to select subsequent collections
    typeParameters:
    - id: TSource
      description: The source element type
    - id: TResult
      description: The result element type
    return:
      type: NMF.Expressions.INotifyEnumerable{{TResult}}
      description: A collection with the results
    content.vb: Public Shared Function SelectMany(Of TSource, TResult)(source As INotifyEnumerable(Of TSource), selector As Expression(Of Func(Of TSource, IEnumerable(Of TResult)))) As INotifyEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ObservableExtensions.SelectMany*
  nameWithType.vb: ObservableExtensions.SelectMany(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult))))
  name.vb: SelectMany(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TResult))))
- uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  id: SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TResult>>>, Func<TSource, IEnumerable<TResult>>)
  nameWithType: ObservableExtensions.SelectMany<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TResult>>>, Func<TSource, IEnumerable<TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>>, System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SelectMany
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1463
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nFlattens the given collection of collections where the subsequent collections are selected by a predicate\n"
  example: []
  syntax:
    content: public static INotifyEnumerable<TResult> SelectMany<TSource, TResult>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, IEnumerable<TResult>>> selector, Func<TSource, IEnumerable<TResult>> selectorCompiled)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The current collection
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}}
      description: A lambda expression to select subsequent collections
    - id: selectorCompiled
      type: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}
      description: A compiled version of the selector
    typeParameters:
    - id: TSource
      description: The source element type
    - id: TResult
      description: The result element type
    return:
      type: NMF.Expressions.INotifyEnumerable{{TResult}}
      description: A collection with the results
    content.vb: Public Shared Function SelectMany(Of TSource, TResult)(source As INotifyEnumerable(Of TSource), selector As Expression(Of Func(Of TSource, IEnumerable(Of TResult))), selectorCompiled As Func(Of TSource, IEnumerable(Of TResult))) As INotifyEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ObservableExtensions.SelectMany*
  nameWithType.vb: ObservableExtensions.SelectMany(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TResult))), Func(Of TSource, IEnumerable(Of TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult))), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult)))
  name.vb: SelectMany(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TResult))), Func(Of TSource, IEnumerable(Of TResult)))
- uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: SetEquals<T>(INotifyEnumerable<T>, IEnumerable<T>)
  nameWithType: ObservableExtensions.SetEquals<T>(INotifyEnumerable<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SetEquals
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1478
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets a value indicating whether the current collection and the given collection contain the same set of elements, regardless of their order\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSetEquals<>), "Create", false)]

      public static bool SetEquals<T>(this INotifyEnumerable<T> source, IEnumerable<T> other)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{T}}
      description: The current collection
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The given other collection
    typeParameters:
    - id: T
      description: The element type
    return:
      type: System.Boolean
      description: True, if both collections contain the same set of elements, otherwise False
    content.vb: >-
      <ObservableProxy(GetType(ObservableSetEquals(Of )), "Create", False)>

      Public Shared Function SetEquals(Of T)(source As INotifyEnumerable(Of T), other As IEnumerable(Of T)) As Boolean
  overload: NMF.Expressions.Linq.ObservableExtensions.SetEquals*
  nameWithType.vb: ObservableExtensions.SetEquals(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SetEquals(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: SetEquals(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
- uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: SetEquals<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.SetEquals<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SetEquals
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1493
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets a value indicating whether the current collection and the given collection contain the same set of elements, regardless of their order\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSetEquals<>), "CreateWithComparer", false)]

      public static bool SetEquals<T>(this INotifyEnumerable<T> source, IEnumerable<T> other, IEqualityComparer<T> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{T}}
      description: The current collection
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The given other collection
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
      description: An equality comparer used to determine equality in the sets
    typeParameters:
    - id: T
      description: The element type
    return:
      type: System.Boolean
      description: True, if both collections contain the same set of elements, otherwise False
    content.vb: >-
      <ObservableProxy(GetType(ObservableSetEquals(Of )), "CreateWithComparer", False)>

      Public Shared Function SetEquals(Of T)(source As INotifyEnumerable(Of T), other As IEnumerable(Of T), comparer As IEqualityComparer(Of T)) As Boolean
  overload: NMF.Expressions.Linq.ObservableExtensions.SetEquals*
  nameWithType.vb: ObservableExtensions.SetEquals(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SetEquals(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: SetEquals(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
- uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  id: SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: SingleOrDefault<TSource>(INotifyEnumerable<TSource>)
  nameWithType: ObservableExtensions.SingleOrDefault<TSource>(INotifyEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault<TSource>(NMF.Expressions.INotifyEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SingleOrDefault
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1510
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the single item of the given source collection or the item type default value, if the collection is empty\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSingleOrDefault<>), "Create", false)]

      [SetExpressionRewriter(typeof(ObservableSingleOrDefault<>), "CreateSetExpression")]

      public static TSource SingleOrDefault<TSource>(this INotifyEnumerable<TSource> source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    return:
      type: '{TSource}'
      description: The single item of the collection or the type default value, if the collection is empty
    content.vb: >-
      <ObservableProxy(GetType(ObservableSingleOrDefault(Of )), "Create", False)>

      <SetExpressionRewriter(GetType(ObservableSingleOrDefault(Of )), "CreateSetExpression")>

      Public Shared Function SingleOrDefault(Of TSource)(source As INotifyEnumerable(Of TSource)) As TSource
  overload: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault*
  nameWithType.vb: ObservableExtensions.SingleOrDefault(Of TSource)(INotifyEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource))
  name.vb: SingleOrDefault(Of TSource)(INotifyEnumerable(Of TSource))
- uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: SingleOrDefault<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  nameWithType: ObservableExtensions.SingleOrDefault<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, bool>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SingleOrDefault
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1525
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the first item of the given source collection that matches the given predicate or the item type default value, if the collection is empty or no item matches the given predicate\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSingleOrDefault<>), "CreateForPredicate", false)]

      [SetExpressionRewriter(typeof(ObservableSingleOrDefault<>), "CreateSetExpressionWithPredicate")]

      public static TSource SingleOrDefault<TSource>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, bool>> predicate)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source collection
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: The filter predicate
    typeParameters:
    - id: TSource
      description: The element type of the source collection
    return:
      type: '{TSource}'
      description: The first item of the collection that matches the predicate or the type default value
    content.vb: >-
      <ObservableProxy(GetType(ObservableSingleOrDefault(Of )), "CreateForPredicate", False)>

      <SetExpressionRewriter(GetType(ObservableSingleOrDefault(Of )), "CreateSetExpressionWithPredicate")>

      Public Shared Function SingleOrDefault(Of TSource)(source As INotifyEnumerable(Of TSource), predicate As Expression(Of Func(Of TSource, Boolean))) As TSource
  overload: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault*
  nameWithType.vb: ObservableExtensions.SingleOrDefault(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Boolean)))
  name.vb: SingleOrDefault(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Int32})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Int32})
  id: Sum(NMF.Expressions.INotifyEnumerable{System.Int32})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Sum(INotifyEnumerable<int>)
  nameWithType: ObservableExtensions.Sum(INotifyEnumerable<int>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable<int>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1539
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumInt", false)]

      public static int Sum(this INotifyEnumerable<int> source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{System.Int32}
      description: The collection of numbers
    return:
      type: System.Int32
      description: The sum of the numbers contained in this collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumInt", False)>

      Public Shared Function Sum(source As INotifyEnumerable(Of Integer)) As Integer
  overload: NMF.Expressions.Linq.ObservableExtensions.Sum*
  nameWithType.vb: ObservableExtensions.Sum(INotifyEnumerable(Of Integer))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable(Of Integer))
  name.vb: Sum(INotifyEnumerable(Of Integer))
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Int64})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Int64})
  id: Sum(NMF.Expressions.INotifyEnumerable{System.Int64})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Sum(INotifyEnumerable<long>)
  nameWithType: ObservableExtensions.Sum(INotifyEnumerable<long>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable<long>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1551
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumLong", false)]

      public static long Sum(this INotifyEnumerable<long> source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{System.Int64}
      description: The collection of numbers
    return:
      type: System.Int64
      description: The sum of the numbers contained in this collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumLong", False)>

      Public Shared Function Sum(source As INotifyEnumerable(Of Long)) As Long
  overload: NMF.Expressions.Linq.ObservableExtensions.Sum*
  nameWithType.vb: ObservableExtensions.Sum(INotifyEnumerable(Of Long))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable(Of Long))
  name.vb: Sum(INotifyEnumerable(Of Long))
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Single})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Single})
  id: Sum(NMF.Expressions.INotifyEnumerable{System.Single})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Sum(INotifyEnumerable<float>)
  nameWithType: ObservableExtensions.Sum(INotifyEnumerable<float>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable<float>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1563
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumFloat", false)]

      public static float Sum(this INotifyEnumerable<float> source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{System.Single}
      description: The collection of numbers
    return:
      type: System.Single
      description: The sum of the numbers contained in this collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumFloat", False)>

      Public Shared Function Sum(source As INotifyEnumerable(Of Single)) As Single
  overload: NMF.Expressions.Linq.ObservableExtensions.Sum*
  nameWithType.vb: ObservableExtensions.Sum(INotifyEnumerable(Of Single))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable(Of Single))
  name.vb: Sum(INotifyEnumerable(Of Single))
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Double})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Double})
  id: Sum(NMF.Expressions.INotifyEnumerable{System.Double})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Sum(INotifyEnumerable<double>)
  nameWithType: ObservableExtensions.Sum(INotifyEnumerable<double>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable<double>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1575
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumDouble", false)]

      public static double Sum(this INotifyEnumerable<double> source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{System.Double}
      description: The collection of numbers
    return:
      type: System.Double
      description: The sum of the numbers contained in this collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumDouble", False)>

      Public Shared Function Sum(source As INotifyEnumerable(Of Double)) As Double
  overload: NMF.Expressions.Linq.ObservableExtensions.Sum*
  nameWithType.vb: ObservableExtensions.Sum(INotifyEnumerable(Of Double))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable(Of Double))
  name.vb: Sum(INotifyEnumerable(Of Double))
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Decimal})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Decimal})
  id: Sum(NMF.Expressions.INotifyEnumerable{System.Decimal})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Sum(INotifyEnumerable<decimal>)
  nameWithType: ObservableExtensions.Sum(INotifyEnumerable<decimal>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable<decimal>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1587
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumDecimal", false)]

      public static decimal Sum(this INotifyEnumerable<decimal> source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{System.Decimal}
      description: The collection of numbers
    return:
      type: System.Decimal
      description: The sum of the numbers contained in this collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumDecimal", False)>

      Public Shared Function Sum(source As INotifyEnumerable(Of Decimal)) As Decimal
  overload: NMF.Expressions.Linq.ObservableExtensions.Sum*
  nameWithType.vb: ObservableExtensions.Sum(INotifyEnumerable(Of Decimal))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable(Of Decimal))
  name.vb: Sum(INotifyEnumerable(Of Decimal))
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Int32}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Int32}})
  id: Sum(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Sum(INotifyEnumerable<int?>)
  nameWithType: ObservableExtensions.Sum(INotifyEnumerable<int?>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable<int?>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1599
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumNullableInt", false)]

      public static int? Sum(this INotifyEnumerable<int?> source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{System.Nullable{System.Int32}}
      description: The collection of numbers
    return:
      type: System.Nullable{System.Int32}
      description: The sum of the numbers contained in this collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumNullableInt", False)>

      Public Shared Function Sum(source As INotifyEnumerable(Of Integer?)) As Integer?
  overload: NMF.Expressions.Linq.ObservableExtensions.Sum*
  nameWithType.vb: ObservableExtensions.Sum(INotifyEnumerable(Of Integer?))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable(Of Integer?))
  name.vb: Sum(INotifyEnumerable(Of Integer?))
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Int64}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Int64}})
  id: Sum(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Sum(INotifyEnumerable<long?>)
  nameWithType: ObservableExtensions.Sum(INotifyEnumerable<long?>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable<long?>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1611
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumNullableLong", false)]

      public static long? Sum(this INotifyEnumerable<long?> source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{System.Nullable{System.Int64}}
      description: The collection of numbers
    return:
      type: System.Nullable{System.Int64}
      description: The sum of the numbers contained in this collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumNullableLong", False)>

      Public Shared Function Sum(source As INotifyEnumerable(Of Long?)) As Long?
  overload: NMF.Expressions.Linq.ObservableExtensions.Sum*
  nameWithType.vb: ObservableExtensions.Sum(INotifyEnumerable(Of Long?))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable(Of Long?))
  name.vb: Sum(INotifyEnumerable(Of Long?))
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Single}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Single}})
  id: Sum(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Sum(INotifyEnumerable<float?>)
  nameWithType: ObservableExtensions.Sum(INotifyEnumerable<float?>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable<float?>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1623
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumNullableFloat", false)]

      public static float? Sum(this INotifyEnumerable<float?> source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{System.Nullable{System.Single}}
      description: The collection of numbers
    return:
      type: System.Nullable{System.Single}
      description: The sum of the numbers contained in this collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumNullableFloat", False)>

      Public Shared Function Sum(source As INotifyEnumerable(Of Single?)) As Single?
  overload: NMF.Expressions.Linq.ObservableExtensions.Sum*
  nameWithType.vb: ObservableExtensions.Sum(INotifyEnumerable(Of Single?))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable(Of Single?))
  name.vb: Sum(INotifyEnumerable(Of Single?))
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Double}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Double}})
  id: Sum(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Sum(INotifyEnumerable<double?>)
  nameWithType: ObservableExtensions.Sum(INotifyEnumerable<double?>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable<double?>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1635
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumNullableDouble", false)]

      public static double? Sum(this INotifyEnumerable<double?> source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{System.Nullable{System.Double}}
      description: The collection of numbers
    return:
      type: System.Nullable{System.Double}
      description: The sum of the numbers contained in this collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumNullableDouble", False)>

      Public Shared Function Sum(source As INotifyEnumerable(Of Double?)) As Double?
  overload: NMF.Expressions.Linq.ObservableExtensions.Sum*
  nameWithType.vb: ObservableExtensions.Sum(INotifyEnumerable(Of Double?))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable(Of Double?))
  name.vb: Sum(INotifyEnumerable(Of Double?))
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Decimal}})
  id: Sum(NMF.Expressions.INotifyEnumerable{System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Sum(INotifyEnumerable<decimal?>)
  nameWithType: ObservableExtensions.Sum(INotifyEnumerable<decimal?>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable<decimal?>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1647
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collection\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumNullableDecimal", false)]

      public static decimal? Sum(this INotifyEnumerable<decimal?> source)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{System.Nullable{System.Decimal}}
      description: The collection of numbers
    return:
      type: System.Nullable{System.Decimal}
      description: The sum of the numbers contained in this collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumNullableDecimal", False)>

      Public Shared Function Sum(source As INotifyEnumerable(Of Decimal?)) As Decimal?
  overload: NMF.Expressions.Linq.ObservableExtensions.Sum*
  nameWithType.vb: ObservableExtensions.Sum(INotifyEnumerable(Of Decimal?))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(NMF.Expressions.INotifyEnumerable(Of Decimal?))
  name.vb: Sum(INotifyEnumerable(Of Decimal?))
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  id: Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, int>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, int>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, int>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1660
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collections features\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumLambdaInt", false)]

      public static int Sum<TSource>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, int>> selector)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The collection of numbers
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32}}
      description: A lambda expression to represent the feature to be summed up
    typeParameters:
    - id: TSource
    return:
      type: System.Int32
      description: The sum of the numbers contained in this collection elements features
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumLambdaInt", False)>

      Public Shared Function Sum(Of TSource)(source As INotifyEnumerable(Of TSource), selector As Expression(Of Func(Of TSource, Integer))) As Integer
  overload: NMF.Expressions.Linq.ObservableExtensions.Sum*
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Integer)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Integer)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Integer)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  id: Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, long>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, long>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, long>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1674
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collections features\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumLambdaLong", false)]

      public static long Sum<TSource>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, long>> selector)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The collection of numbers
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int64}}
      description: A lambda expression to represent the feature to be summed up
    typeParameters:
    - id: TSource
    return:
      type: System.Int64
      description: The sum of the numbers contained in this collection elements features
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumLambdaLong", False)>

      Public Shared Function Sum(Of TSource)(source As INotifyEnumerable(Of TSource), selector As Expression(Of Func(Of TSource, Long))) As Long
  overload: NMF.Expressions.Linq.ObservableExtensions.Sum*
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Long)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Long)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Long)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  id: Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, float>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, float>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, float>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1688
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collections features\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumLambdaFloat", false)]

      public static float Sum<TSource>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, float>> selector)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The collection of numbers
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Single}}
      description: A lambda expression to represent the feature to be summed up
    typeParameters:
    - id: TSource
    return:
      type: System.Single
      description: The sum of the numbers contained in this collection elements features
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumLambdaFloat", False)>

      Public Shared Function Sum(Of TSource)(source As INotifyEnumerable(Of TSource), selector As Expression(Of Func(Of TSource, Single))) As Single
  overload: NMF.Expressions.Linq.ObservableExtensions.Sum*
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Single)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  id: Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, double>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, double>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, double>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1702
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collections features\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumLambdaDouble", false)]

      public static double Sum<TSource>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, double>> selector)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The collection of numbers
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Double}}
      description: A lambda expression to represent the feature to be summed up
    typeParameters:
    - id: TSource
    return:
      type: System.Double
      description: The sum of the numbers contained in this collection elements features
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumLambdaDouble", False)>

      Public Shared Function Sum(Of TSource)(source As INotifyEnumerable(Of TSource), selector As Expression(Of Func(Of TSource, Double))) As Double
  overload: NMF.Expressions.Linq.ObservableExtensions.Sum*
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Double)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  id: Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, decimal>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, decimal>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, decimal>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1716
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collections features\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumLambdaDecimal", false)]

      public static decimal Sum<TSource>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, decimal>> selector)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The collection of numbers
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Decimal}}
      description: A lambda expression to represent the feature to be summed up
    typeParameters:
    - id: TSource
    return:
      type: System.Decimal
      description: The sum of the numbers contained in this collection elements features
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumLambdaDecimal", False)>

      Public Shared Function Sum(Of TSource)(source As INotifyEnumerable(Of TSource), selector As Expression(Of Func(Of TSource, Decimal))) As Decimal
  overload: NMF.Expressions.Linq.ObservableExtensions.Sum*
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Decimal)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  id: Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, int?>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, int?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, int?>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1730
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collections features\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumLambdaNullableInt", false)]

      public static int? Sum<TSource>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, int?>> selector)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The collection of numbers
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int32}}}
      description: A lambda expression to represent the feature to be summed up
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Int32}
      description: The sum of the numbers contained in this collection elements features
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumLambdaNullableInt", False)>

      Public Shared Function Sum(Of TSource)(source As INotifyEnumerable(Of TSource), selector As Expression(Of Func(Of TSource, Integer?))) As Integer?
  overload: NMF.Expressions.Linq.ObservableExtensions.Sum*
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Integer?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Integer?)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Integer?)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  id: Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, long?>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, long?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, long?>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1744
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collections features\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumLambdaNullableLong", false)]

      public static long? Sum<TSource>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, long?>> selector)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The collection of numbers
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int64}}}
      description: A lambda expression to represent the feature to be summed up
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Int64}
      description: The sum of the numbers contained in this collection elements features
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumLambdaNullableLong", False)>

      Public Shared Function Sum(Of TSource)(source As INotifyEnumerable(Of TSource), selector As Expression(Of Func(Of TSource, Long?))) As Long?
  overload: NMF.Expressions.Linq.ObservableExtensions.Sum*
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Long?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Long?)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Long?)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  id: Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, float?>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, float?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, float?>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1758
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collections features\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumLambdaNullableFloat", false)]

      public static float? Sum<TSource>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, float?>> selector)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The collection of numbers
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Single}}}
      description: A lambda expression to represent the feature to be summed up
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Single}
      description: The sum of the numbers contained in this collection elements features
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumLambdaNullableFloat", False)>

      Public Shared Function Sum(Of TSource)(source As INotifyEnumerable(Of TSource), selector As Expression(Of Func(Of TSource, Single?))) As Single?
  overload: NMF.Expressions.Linq.ObservableExtensions.Sum*
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Single?)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single?)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  id: Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, double?>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, double?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, double?>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1772
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collections features\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumLambdaNullableDouble", false)]

      public static double? Sum<TSource>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, double?>> selector)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The collection of numbers
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Double}}}
      description: A lambda expression to represent the feature to be summed up
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Double}
      description: The sum of the numbers contained in this collection elements features
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumLambdaNullableDouble", False)>

      Public Shared Function Sum(Of TSource)(source As INotifyEnumerable(Of TSource), selector As Expression(Of Func(Of TSource, Double?))) As Double?
  overload: NMF.Expressions.Linq.ObservableExtensions.Sum*
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Double?)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double?)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  id: Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, decimal?>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, decimal?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, decimal?>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Sum
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1786
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the sum of the current collections features\n"
  remarks: This method has an observable proxy, i.e. it can be used in a observable expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableSum), "SumLambdaNullableDecimal", false)]

      public static decimal? Sum<TSource>(this INotifyEnumerable<TSource> source, Expression<Func<TSource, decimal?>> selector)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The collection of numbers
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Decimal}}}
      description: A lambda expression to represent the feature to be summed up
    typeParameters:
    - id: TSource
    return:
      type: System.Nullable{System.Decimal}
      description: The sum of the numbers contained in this collection elements features
    content.vb: >-
      <ObservableProxy(GetType(ObservableSum), "SumLambdaNullableDecimal", False)>

      Public Shared Function Sum(Of TSource)(source As INotifyEnumerable(Of TSource), selector As Expression(Of Func(Of TSource, Decimal?))) As Decimal?
  overload: NMF.Expressions.Linq.ObservableExtensions.Sum*
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Decimal?)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal?)))
- uid: NMF.Expressions.Linq.ObservableExtensions.ThenBy``2(NMF.Expressions.IOrderableNotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.ThenBy``2(NMF.Expressions.IOrderableNotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: ThenBy``2(NMF.Expressions.IOrderableNotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: ThenBy<TItem, TKey>(IOrderableNotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  nameWithType: ObservableExtensions.ThenBy<TItem, TKey>(IOrderableNotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.ThenBy<TItem, TKey>(NMF.Expressions.IOrderableNotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ThenBy
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1801
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nOrders the given orderable collection by the given predicate ascending\n"
  example: []
  syntax:
    content: public static IOrderableNotifyEnumerable<TItem> ThenBy<TItem, TKey>(this IOrderableNotifyEnumerable<TItem> source, Expression<Func<TItem, TKey>> keySelector)
    parameters:
    - id: source
      type: NMF.Expressions.IOrderableNotifyEnumerable{{TItem}}
      description: The current collection
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}}
      description: A lambda expression to select the features used for ordering
    typeParameters:
    - id: TItem
      description: The elements type
    - id: TKey
      description: The ordering key type
    return:
      type: NMF.Expressions.IOrderableNotifyEnumerable{{TItem}}
      description: A collection with the elements of the current collection but ordered in lower priority for the given predicate
    content.vb: Public Shared Function ThenBy(Of TItem, TKey)(source As IOrderableNotifyEnumerable(Of TItem), keySelector As Expression(Of Func(Of TItem, TKey))) As IOrderableNotifyEnumerable(Of TItem)
  overload: NMF.Expressions.Linq.ObservableExtensions.ThenBy*
  nameWithType.vb: ObservableExtensions.ThenBy(Of TItem, TKey)(IOrderableNotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.ThenBy(Of TItem, TKey)(NMF.Expressions.IOrderableNotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: ThenBy(Of TItem, TKey)(IOrderableNotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
- uid: NMF.Expressions.Linq.ObservableExtensions.ThenBy``2(NMF.Expressions.IOrderableNotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.ThenBy``2(NMF.Expressions.IOrderableNotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: ThenBy``2(NMF.Expressions.IOrderableNotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: ThenBy<TItem, TKey>(IOrderableNotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.ThenBy<TItem, TKey>(IOrderableNotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.ThenBy<TItem, TKey>(NMF.Expressions.IOrderableNotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ThenBy
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1815
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nOrders the given orderable collection by the given predicate ascending\n"
  example: []
  syntax:
    content: public static IOrderableNotifyEnumerable<TItem> ThenBy<TItem, TKey>(this IOrderableNotifyEnumerable<TItem> source, Expression<Func<TItem, TKey>> keySelector, IComparer<TKey> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.IOrderableNotifyEnumerable{{TItem}}
      description: The current collection
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}}
      description: A lambda expression to select the features used for ordering
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: A comparer to determine comparison
    typeParameters:
    - id: TItem
      description: The elements type
    - id: TKey
      description: The ordering key type
    return:
      type: NMF.Expressions.IOrderableNotifyEnumerable{{TItem}}
      description: A collection with the elements of the current collection but ordered in lower priority for the given predicate
    content.vb: Public Shared Function ThenBy(Of TItem, TKey)(source As IOrderableNotifyEnumerable(Of TItem), keySelector As Expression(Of Func(Of TItem, TKey)), comparer As IComparer(Of TKey)) As IOrderableNotifyEnumerable(Of TItem)
  overload: NMF.Expressions.Linq.ObservableExtensions.ThenBy*
  nameWithType.vb: ObservableExtensions.ThenBy(Of TItem, TKey)(IOrderableNotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.ThenBy(Of TItem, TKey)(NMF.Expressions.IOrderableNotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: ThenBy(Of TItem, TKey)(IOrderableNotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
- uid: NMF.Expressions.Linq.ObservableExtensions.ThenByDescending``2(NMF.Expressions.IOrderableNotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.ThenByDescending``2(NMF.Expressions.IOrderableNotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: ThenByDescending``2(NMF.Expressions.IOrderableNotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: ThenByDescending<TItem, TKey>(IOrderableNotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  nameWithType: ObservableExtensions.ThenByDescending<TItem, TKey>(IOrderableNotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.ThenByDescending<TItem, TKey>(NMF.Expressions.IOrderableNotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ThenByDescending
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1830
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nOrders the given orderable collection by the given predicate descending\n"
  example: []
  syntax:
    content: public static IOrderableNotifyEnumerable<TItem> ThenByDescending<TItem, TKey>(this IOrderableNotifyEnumerable<TItem> source, Expression<Func<TItem, TKey>> keySelector)
    parameters:
    - id: source
      type: NMF.Expressions.IOrderableNotifyEnumerable{{TItem}}
      description: The current collection
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}}
      description: A lambda expression to select the features used for ordering
    typeParameters:
    - id: TItem
      description: The elements type
    - id: TKey
      description: The ordering key type
    return:
      type: NMF.Expressions.IOrderableNotifyEnumerable{{TItem}}
      description: A collection with the elements of the current collection but ordered in lower priority for the given predicate
    content.vb: Public Shared Function ThenByDescending(Of TItem, TKey)(source As IOrderableNotifyEnumerable(Of TItem), keySelector As Expression(Of Func(Of TItem, TKey))) As IOrderableNotifyEnumerable(Of TItem)
  overload: NMF.Expressions.Linq.ObservableExtensions.ThenByDescending*
  nameWithType.vb: ObservableExtensions.ThenByDescending(Of TItem, TKey)(IOrderableNotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.ThenByDescending(Of TItem, TKey)(NMF.Expressions.IOrderableNotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: ThenByDescending(Of TItem, TKey)(IOrderableNotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
- uid: NMF.Expressions.Linq.ObservableExtensions.ThenByDescending``2(NMF.Expressions.IOrderableNotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.ThenByDescending``2(NMF.Expressions.IOrderableNotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: ThenByDescending``2(NMF.Expressions.IOrderableNotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: ThenByDescending<TItem, TKey>(IOrderableNotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.ThenByDescending<TItem, TKey>(IOrderableNotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.ThenByDescending<TItem, TKey>(NMF.Expressions.IOrderableNotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ThenByDescending
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1844
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nOrders the given orderable collection by the given predicate descending\n"
  example: []
  syntax:
    content: public static IOrderableNotifyEnumerable<TItem> ThenByDescending<TItem, TKey>(this IOrderableNotifyEnumerable<TItem> source, Expression<Func<TItem, TKey>> keySelector, IComparer<TKey> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.IOrderableNotifyEnumerable{{TItem}}
      description: The current collection
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}}
      description: A lambda expression to select the features used for ordering
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: A comparer to determine comparison
    typeParameters:
    - id: TItem
      description: The elements type
    - id: TKey
      description: The ordering key type
    return:
      type: NMF.Expressions.IOrderableNotifyEnumerable{{TItem}}
      description: A collection with the elements of the current collection but ordered in lower priority for the given predicate
    content.vb: Public Shared Function ThenByDescending(Of TItem, TKey)(source As IOrderableNotifyEnumerable(Of TItem), keySelector As Expression(Of Func(Of TItem, TKey)), comparer As IComparer(Of TKey)) As IOrderableNotifyEnumerable(Of TItem)
  overload: NMF.Expressions.Linq.ObservableExtensions.ThenByDescending*
  nameWithType.vb: ObservableExtensions.ThenByDescending(Of TItem, TKey)(IOrderableNotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.ThenByDescending(Of TItem, TKey)(NMF.Expressions.IOrderableNotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: ThenByDescending(Of TItem, TKey)(IOrderableNotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
- uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: TopX<TItem, TKey>(INotifyEnumerable<TItem>, int, Expression<Func<TItem, TKey>>)
  nameWithType: ObservableExtensions.TopX<TItem, TKey>(INotifyEnumerable<TItem>, int, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.TopX<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, int, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TopX
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1858
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the top x elements of the given collection, ordered by the given feature\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableTopX<,>), "CreateSelector", false)]

      public static KeyValuePair<TItem, TKey>[] TopX<TItem, TKey>(this INotifyEnumerable<TItem> source, int x, Expression<Func<TItem, TKey>> keySelector)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TItem}}
      description: The element source
    - id: x
      type: System.Int32
      description: A number indicating how many items should be selected
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}}
      description: An expression to denote the selection of key features
    typeParameters:
    - id: TItem
      description: The item type
    - id: TKey
      description: The key type
    return:
      type: System.Collections.Generic.KeyValuePair{{TItem},{TKey}}[]
      description: An array with the largest entries of the underlying collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableTopX(Of ,)), "CreateSelector", False)>

      Public Shared Function TopX(Of TItem, TKey)(source As INotifyEnumerable(Of TItem), x As Integer, keySelector As Expression(Of Func(Of TItem, TKey))) As KeyValuePair(Of TItem, TKey)()
  overload: NMF.Expressions.Linq.ObservableExtensions.TopX*
  nameWithType.vb: ObservableExtensions.TopX(Of TItem, TKey)(INotifyEnumerable(Of TItem), Integer, Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.TopX(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), Integer, System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: TopX(Of TItem, TKey)(INotifyEnumerable(Of TItem), Integer, Expression(Of Func(Of TItem, TKey)))
- uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: TopX<TItem, TKey>(INotifyEnumerable<TItem>, int, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.TopX<TItem, TKey>(INotifyEnumerable<TItem>, int, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.TopX<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, int, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TopX
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1874
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nGets the top x elements of the given collection, ordered by the given feature\n"
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservableTopX<,>), "CreateSelectorComparer", false)]

      public static KeyValuePair<TItem, TKey>[] TopX<TItem, TKey>(this INotifyEnumerable<TItem> source, int x, Expression<Func<TItem, TKey>> keySelector, IComparer<TKey> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TItem}}
      description: The element source
    - id: x
      type: System.Int32
      description: A number indicating how many items should be selected
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}}
      description: An expression to denote the selection of key features
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: A custom comparer
    typeParameters:
    - id: TItem
      description: The item type
    - id: TKey
      description: The key type
    return:
      type: System.Collections.Generic.KeyValuePair{{TItem},{TKey}}[]
      description: An array with the largest entries of the underlying collection
    content.vb: >-
      <ObservableProxy(GetType(ObservableTopX(Of ,)), "CreateSelectorComparer", False)>

      Public Shared Function TopX(Of TItem, TKey)(source As INotifyEnumerable(Of TItem), x As Integer, keySelector As Expression(Of Func(Of TItem, TKey)), comparer As IComparer(Of TKey)) As KeyValuePair(Of TItem, TKey)()
  overload: NMF.Expressions.Linq.ObservableExtensions.TopX*
  nameWithType.vb: ObservableExtensions.TopX(Of TItem, TKey)(INotifyEnumerable(Of TItem), Integer, Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.TopX(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), Integer, System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: TopX(Of TItem, TKey)(INotifyEnumerable(Of TItem), Integer, Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
- uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Union<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: ObservableExtensions.Union<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Union<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Union
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1913
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nUnions the current collection with the given other collection \n"
  example: []
  syntax:
    content: public static INotifyEnumerable<TSource> Union<TSource>(this INotifyEnumerable<TSource> source, IEnumerable<TSource> source2)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The current collection
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The given other collection
    typeParameters:
    - id: TSource
      description: The elements type
    return:
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: A collection containing the union of both collections
    content.vb: Public Shared Function Union(Of TSource)(source As INotifyEnumerable(Of TSource), source2 As IEnumerable(Of TSource)) As INotifyEnumerable(Of TSource)
  overload: NMF.Expressions.Linq.ObservableExtensions.Union*
  nameWithType.vb: ObservableExtensions.Union(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Union(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Union(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
- uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Union<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ObservableExtensions.Union<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Union<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Union
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1926
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nUnions the current collection with the given other collection \n"
  example: []
  syntax:
    content: public static INotifyEnumerable<TSource> Union<TSource>(this INotifyEnumerable<TSource> source, IEnumerable<TSource> source2, IEqualityComparer<TSource> comparer)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The current collection
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The given other collection
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: A comparer to determine equality
    typeParameters:
    - id: TSource
      description: The elements type
    return:
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: A collection containing the union of both collections
    content.vb: Public Shared Function Union(Of TSource)(source As INotifyEnumerable(Of TSource), source2 As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As INotifyEnumerable(Of TSource)
  overload: NMF.Expressions.Linq.ObservableExtensions.Union*
  nameWithType.vb: ObservableExtensions.Union(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Union(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Union(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
- uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Where<T>(INotifyEnumerable<T>, Expression<Func<T, bool>>)
  nameWithType: ObservableExtensions.Where<T>(INotifyEnumerable<T>, Expression<Func<T, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Where<T>(NMF.Expressions.INotifyEnumerable<T>, System.Linq.Expressions.Expression<System.Func<T, bool>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Where
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1938
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nFilters the given collection with the given predicate\n"
  example: []
  syntax:
    content: public static INotifyEnumerable<T> Where<T>(this INotifyEnumerable<T> source, Expression<Func<T, bool>> filter)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{T}}
      description: The current collection
    - id: filter
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: The predicate used for filtering
    typeParameters:
    - id: T
      description: The element type
    return:
      type: NMF.Expressions.INotifyEnumerable{{T}}
      description: A collection containing the elements that passed the filter
    content.vb: Public Shared Function Where(Of T)(source As INotifyEnumerable(Of T), filter As Expression(Of Func(Of T, Boolean))) As INotifyEnumerable(Of T)
  overload: NMF.Expressions.Linq.ObservableExtensions.Where*
  nameWithType.vb: ObservableExtensions.Where(Of T)(INotifyEnumerable(Of T), Expression(Of Func(Of T, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Where(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)))
  name.vb: Where(Of T)(INotifyEnumerable(Of T), Expression(Of Func(Of T, Boolean)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  id: Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Where<T>(INotifyEnumerable<T>, Expression<Func<T, bool>>, Func<T, bool>)
  nameWithType: ObservableExtensions.Where<T>(INotifyEnumerable<T>, Expression<Func<T, bool>>, Func<T, bool>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Where<T>(NMF.Expressions.INotifyEnumerable<T>, System.Linq.Expressions.Expression<System.Func<T, bool>>, System.Func<T, bool>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Where
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1951
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nFilters the given collection with the given predicate\n"
  example: []
  syntax:
    content: public static INotifyEnumerable<T> Where<T>(this INotifyEnumerable<T> source, Expression<Func<T, bool>> filter, Func<T, bool> filterCompiled)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{T}}
      description: The current collection
    - id: filter
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: The predicate used for filtering
    - id: filterCompiled
      type: System.Func{{T},System.Boolean}
      description: A compiled version of filter
    typeParameters:
    - id: T
      description: The element type
    return:
      type: NMF.Expressions.INotifyEnumerable{{T}}
      description: A collection containing the elements that passed the filter
    content.vb: Public Shared Function Where(Of T)(source As INotifyEnumerable(Of T), filter As Expression(Of Func(Of T, Boolean)), filterCompiled As Func(Of T, Boolean)) As INotifyEnumerable(Of T)
  overload: NMF.Expressions.Linq.ObservableExtensions.Where*
  nameWithType.vb: ObservableExtensions.Where(Of T)(INotifyEnumerable(Of T), Expression(Of Func(Of T, Boolean)), Func(Of T, Boolean))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Where(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)), System.Func(Of T, Boolean))
  name.vb: Where(Of T)(INotifyEnumerable(Of T), Expression(Of Func(Of T, Boolean)), Func(Of T, Boolean))
- uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Where``1(NMF.Expressions.INotifyCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Where<T>(INotifyCollection<T>, Expression<Func<T, bool>>)
  nameWithType: ObservableExtensions.Where<T>(INotifyCollection<T>, Expression<Func<T, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Where<T>(NMF.Expressions.INotifyCollection<T>, System.Linq.Expressions.Expression<System.Func<T, bool>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Where
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1965
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nFilters the given collection with the given predicate\n"
  example: []
  syntax:
    content: public static INotifyCollection<T> Where<T>(this INotifyCollection<T> source, Expression<Func<T, bool>> filter)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyCollection{{T}}
      description: The current collection
    - id: filter
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: The predicate used for filtering
    typeParameters:
    - id: T
      description: The element type
    return:
      type: NMF.Expressions.INotifyCollection{{T}}
      description: A collection containing the elements that passed the filter
    content.vb: Public Shared Function Where(Of T)(source As INotifyCollection(Of T), filter As Expression(Of Func(Of T, Boolean))) As INotifyCollection(Of T)
  overload: NMF.Expressions.Linq.ObservableExtensions.Where*
  nameWithType.vb: ObservableExtensions.Where(Of T)(INotifyCollection(Of T), Expression(Of Func(Of T, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Where(Of T)(NMF.Expressions.INotifyCollection(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)))
  name.vb: Where(Of T)(INotifyCollection(Of T), Expression(Of Func(Of T, Boolean)))
- uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  id: Where``1(NMF.Expressions.INotifyCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: Where<T>(INotifyCollection<T>, Expression<Func<T, bool>>, Func<T, bool>)
  nameWithType: ObservableExtensions.Where<T>(INotifyCollection<T>, Expression<Func<T, bool>>, Func<T, bool>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Where<T>(NMF.Expressions.INotifyCollection<T>, System.Linq.Expressions.Expression<System.Func<T, bool>>, System.Func<T, bool>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Where
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1978
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nFilters the given collection with the given predicate\n"
  example: []
  syntax:
    content: public static INotifyCollection<T> Where<T>(this INotifyCollection<T> source, Expression<Func<T, bool>> filter, Func<T, bool> filterCompiled)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyCollection{{T}}
      description: The current collection
    - id: filter
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: The predicate used for filtering
    - id: filterCompiled
      type: System.Func{{T},System.Boolean}
      description: A compiled version of filter
    typeParameters:
    - id: T
      description: The element type
    return:
      type: NMF.Expressions.INotifyCollection{{T}}
      description: A collection containing the elements that passed the filter
    content.vb: Public Shared Function Where(Of T)(source As INotifyCollection(Of T), filter As Expression(Of Func(Of T, Boolean)), filterCompiled As Func(Of T, Boolean)) As INotifyCollection(Of T)
  overload: NMF.Expressions.Linq.ObservableExtensions.Where*
  nameWithType.vb: ObservableExtensions.Where(Of T)(INotifyCollection(Of T), Expression(Of Func(Of T, Boolean)), Func(Of T, Boolean))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Where(Of T)(NMF.Expressions.INotifyCollection(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)), System.Func(Of T, Boolean))
  name.vb: Where(Of T)(INotifyCollection(Of T), Expression(Of Func(Of T, Boolean)), Func(Of T, Boolean))
- uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  id: WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: WithUpdates<T>(IEnumerable<T>)
  nameWithType: ObservableExtensions.WithUpdates<T>(IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: WithUpdates
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 1991
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nFetches updates of the given collection\n"
  example: []
  syntax:
    content: public static INotifyEnumerable<T> WithUpdates<T>(this IEnumerable<T> source)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The current collection
    typeParameters:
    - id: T
      description: The element type
    return:
      type: NMF.Expressions.INotifyEnumerable{{T}}
      description: The same collection as INotifyEnumerable
    content.vb: Public Shared Function WithUpdates(Of T)(source As IEnumerable(Of T)) As INotifyEnumerable(Of T)
  overload: NMF.Expressions.Linq.ObservableExtensions.WithUpdates*
  nameWithType.vb: ObservableExtensions.WithUpdates(Of T)(IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: WithUpdates(Of T)(IEnumerable(Of T))
- uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
  id: WithUpdates``1(System.Collections.Generic.ICollection{``0})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ObservableExtensions
  langs:
  - csharp
  - vb
  name: WithUpdates<T>(ICollection<T>)
  nameWithType: ObservableExtensions.WithUpdates<T>(ICollection<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>(System.Collections.Generic.ICollection<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: WithUpdates
    path: src/Expressions/Expressions.Linq/Facade/ObservableExtensions.cs
    startLine: 2014
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions.Linq
  summary: "\nFetches updates of the given collection\n"
  example: []
  syntax:
    content: public static INotifyCollection<T> WithUpdates<T>(this ICollection<T> source)
    parameters:
    - id: source
      type: System.Collections.Generic.ICollection{{T}}
      description: The current collection
    typeParameters:
    - id: T
      description: The element type
    return:
      type: NMF.Expressions.INotifyCollection{{T}}
      description: The same collection as INotifyEnumerable
    content.vb: Public Shared Function WithUpdates(Of T)(source As ICollection(Of T)) As INotifyCollection(Of T)
  overload: NMF.Expressions.Linq.ObservableExtensions.WithUpdates*
  nameWithType.vb: ObservableExtensions.WithUpdates(Of T)(ICollection(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)(System.Collections.Generic.ICollection(Of T))
  name.vb: WithUpdates(Of T)(ICollection(Of T))
references:
- uid: NMF.Expressions.INotifyValue`1
  commentId: T:NMF.Expressions.INotifyValue`1
  name: INotifyValue<T>
  nameWithType: INotifyValue<T>
  fullName: NMF.Expressions.INotifyValue<T>
  nameWithType.vb: INotifyValue(Of T)
  fullName.vb: NMF.Expressions.INotifyValue(Of T)
  name.vb: INotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.Linq.ObservableExtensions.KeepOrder*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.KeepOrder
  name: KeepOrder
  nameWithType: ObservableExtensions.KeepOrder
  fullName: NMF.Expressions.Linq.ObservableExtensions.KeepOrder
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: NMF.Expressions.Linq.ObservableExtensions.All*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.All
  name: All
  nameWithType: ObservableExtensions.All
  fullName: NMF.Expressions.Linq.ObservableExtensions.All
- uid: NMF.Expressions.INotifyEnumerable{{TSource}}
  commentId: T:NMF.Expressions.INotifyEnumerable{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<TSource>
  nameWithType: INotifyEnumerable<TSource>
  fullName: NMF.Expressions.INotifyEnumerable<TSource>
  nameWithType.vb: INotifyEnumerable(Of TSource)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of TSource)
  name.vb: INotifyEnumerable(Of TSource)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, bool>>
  nameWithType: Expression<Func<TSource, bool>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, bool>>
  nameWithType.vb: Expression(Of Func(Of TSource, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, Boolean))
  name.vb: Expression(Of Func(Of TSource, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable`1
  commentId: T:NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<T>
  nameWithType: INotifyEnumerable<T>
  fullName: NMF.Expressions.INotifyEnumerable<T>
  nameWithType.vb: INotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of T)
  name.vb: INotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - name: TDelegate
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
- uid: NMF.Expressions.Linq.ObservableExtensions.Any*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.Any
  name: Any
  nameWithType: ObservableExtensions.Any
  fullName: NMF.Expressions.Linq.ObservableExtensions.Any
- uid: NMF.Expressions.Linq.ObservableExtensions.Average*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.Average
  name: Average
  nameWithType: ObservableExtensions.Average
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average
- uid: NMF.Expressions.INotifyEnumerable{System.Int32}
  commentId: T:NMF.Expressions.INotifyEnumerable{System.Int32}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<int>
  nameWithType: INotifyEnumerable<int>
  fullName: NMF.Expressions.INotifyEnumerable<int>
  nameWithType.vb: INotifyEnumerable(Of Integer)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of Integer)
  name.vb: INotifyEnumerable(Of Integer)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: NMF.Expressions.INotifyEnumerable{System.Int64}
  commentId: T:NMF.Expressions.INotifyEnumerable{System.Int64}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<long>
  nameWithType: INotifyEnumerable<long>
  fullName: NMF.Expressions.INotifyEnumerable<long>
  nameWithType.vb: INotifyEnumerable(Of Long)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of Long)
  name.vb: INotifyEnumerable(Of Long)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{System.Single}
  commentId: T:NMF.Expressions.INotifyEnumerable{System.Single}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<float>
  nameWithType: INotifyEnumerable<float>
  fullName: NMF.Expressions.INotifyEnumerable<float>
  nameWithType.vb: INotifyEnumerable(Of Single)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of Single)
  name.vb: INotifyEnumerable(Of Single)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - uid: System.Single
    name: float
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: )
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: NMF.Expressions.INotifyEnumerable{System.Double}
  commentId: T:NMF.Expressions.INotifyEnumerable{System.Double}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<double>
  nameWithType: INotifyEnumerable<double>
  fullName: NMF.Expressions.INotifyEnumerable<double>
  nameWithType.vb: INotifyEnumerable(Of Double)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of Double)
  name.vb: INotifyEnumerable(Of Double)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - uid: System.Double
    name: double
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{System.Decimal}
  commentId: T:NMF.Expressions.INotifyEnumerable{System.Decimal}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<decimal>
  nameWithType: INotifyEnumerable<decimal>
  fullName: NMF.Expressions.INotifyEnumerable<decimal>
  nameWithType.vb: INotifyEnumerable(Of Decimal)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of Decimal)
  name.vb: INotifyEnumerable(Of Decimal)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: )
- uid: System.Decimal
  commentId: T:System.Decimal
  parent: System
  isExternal: true
  name: decimal
  nameWithType: decimal
  fullName: decimal
  nameWithType.vb: Decimal
  fullName.vb: Decimal
  name.vb: Decimal
- uid: NMF.Expressions.INotifyEnumerable{System.Nullable{System.Int32}}
  commentId: T:NMF.Expressions.INotifyEnumerable{System.Nullable{System.Int32}}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<int?>
  nameWithType: INotifyEnumerable<int?>
  fullName: NMF.Expressions.INotifyEnumerable<int?>
  nameWithType.vb: INotifyEnumerable(Of Integer?)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of Integer?)
  name.vb: INotifyEnumerable(Of Integer?)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: '?'
  - name: )
- uid: System.Nullable{System.Double}
  commentId: T:System.Nullable{System.Double}
  parent: System
  definition: System.Nullable`1
  name: double?
  nameWithType: double?
  fullName: double?
  nameWithType.vb: Double?
  fullName.vb: Double?
  name.vb: Double?
  spec.csharp:
  - uid: System.Double
    name: double
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: System.Double
    name: Double
    isExternal: true
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{System.Nullable{System.Int64}}
  commentId: T:NMF.Expressions.INotifyEnumerable{System.Nullable{System.Int64}}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<long?>
  nameWithType: INotifyEnumerable<long?>
  fullName: NMF.Expressions.INotifyEnumerable<long?>
  nameWithType.vb: INotifyEnumerable(Of Long?)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of Long?)
  name.vb: INotifyEnumerable(Of Long?)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: '?'
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{System.Nullable{System.Single}}
  commentId: T:NMF.Expressions.INotifyEnumerable{System.Nullable{System.Single}}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<float?>
  nameWithType: INotifyEnumerable<float?>
  fullName: NMF.Expressions.INotifyEnumerable<float?>
  nameWithType.vb: INotifyEnumerable(Of Single?)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of Single?)
  name.vb: INotifyEnumerable(Of Single?)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - uid: System.Single
    name: float
    isExternal: true
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: '?'
  - name: )
- uid: System.Nullable{System.Single}
  commentId: T:System.Nullable{System.Single}
  parent: System
  definition: System.Nullable`1
  name: float?
  nameWithType: float?
  fullName: float?
  nameWithType.vb: Single?
  fullName.vb: Single?
  name.vb: Single?
  spec.csharp:
  - uid: System.Single
    name: float
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: System.Single
    name: Single
    isExternal: true
  - name: '?'
- uid: NMF.Expressions.INotifyEnumerable{System.Nullable{System.Double}}
  commentId: T:NMF.Expressions.INotifyEnumerable{System.Nullable{System.Double}}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<double?>
  nameWithType: INotifyEnumerable<double?>
  fullName: NMF.Expressions.INotifyEnumerable<double?>
  nameWithType.vb: INotifyEnumerable(Of Double?)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of Double?)
  name.vb: INotifyEnumerable(Of Double?)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - uid: System.Double
    name: double
    isExternal: true
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: '?'
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{System.Nullable{System.Decimal}}
  commentId: T:NMF.Expressions.INotifyEnumerable{System.Nullable{System.Decimal}}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<decimal?>
  nameWithType: INotifyEnumerable<decimal?>
  fullName: NMF.Expressions.INotifyEnumerable<decimal?>
  nameWithType.vb: INotifyEnumerable(Of Decimal?)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of Decimal?)
  name.vb: INotifyEnumerable(Of Decimal?)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: '?'
  - name: )
- uid: System.Nullable{System.Decimal}
  commentId: T:System.Nullable{System.Decimal}
  parent: System
  definition: System.Nullable`1
  name: decimal?
  nameWithType: decimal?
  fullName: decimal?
  nameWithType.vb: Decimal?
  fullName.vb: Decimal?
  name.vb: Decimal?
  spec.csharp:
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: '?'
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Int32}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, int>>
  nameWithType: Expression<Func<TSource, int>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, int>>
  nameWithType.vb: Expression(Of Func(Of TSource, Integer))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, Integer))
  name.vb: Expression(Of Func(Of TSource, Integer))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int64}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Int64}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, long>>
  nameWithType: Expression<Func<TSource, long>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, long>>
  nameWithType.vb: Expression(Of Func(Of TSource, Long))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, Long))
  name.vb: Expression(Of Func(Of TSource, Long))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Single}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Single}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, float>>
  nameWithType: Expression<Func<TSource, float>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, float>>
  nameWithType.vb: Expression(Of Func(Of TSource, Single))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, Single))
  name.vb: Expression(Of Func(Of TSource, Single))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Double}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Double}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, double>>
  nameWithType: Expression<Func<TSource, double>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, double>>
  nameWithType.vb: Expression(Of Func(Of TSource, Double))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, Double))
  name.vb: Expression(Of Func(Of TSource, Double))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Decimal}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, decimal>>
  nameWithType: Expression<Func<TSource, decimal>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, decimal>>
  nameWithType.vb: Expression(Of Func(Of TSource, Decimal))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, Decimal))
  name.vb: Expression(Of Func(Of TSource, Decimal))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int32}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, int?>>
  nameWithType: Expression<Func<TSource, int?>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, int?>>
  nameWithType.vb: Expression(Of Func(Of TSource, Integer?))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, Integer?))
  name.vb: Expression(Of Func(Of TSource, Integer?))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: '?'
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int64}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, long?>>
  nameWithType: Expression<Func<TSource, long?>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, long?>>
  nameWithType.vb: Expression(Of Func(Of TSource, Long?))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, Long?))
  name.vb: Expression(Of Func(Of TSource, Long?))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: '?'
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Single}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, float?>>
  nameWithType: Expression<Func<TSource, float?>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, float?>>
  nameWithType.vb: Expression(Of Func(Of TSource, Single?))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, Single?))
  name.vb: Expression(Of Func(Of TSource, Single?))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: '?'
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Double}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, double?>>
  nameWithType: Expression<Func<TSource, double?>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, double?>>
  nameWithType.vb: Expression(Of Func(Of TSource, Double?))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, Double?))
  name.vb: Expression(Of Func(Of TSource, Double?))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: '?'
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Decimal}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, decimal?>>
  nameWithType: Expression<Func<TSource, decimal?>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, decimal?>>
  nameWithType.vb: Expression(Of Func(Of TSource, Decimal?))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, Decimal?))
  name.vb: Expression(Of Func(Of TSource, Decimal?))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: '?'
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
  name: OfType<TResult>(INotifyEnumerable)
  nameWithType: ObservableExtensions.OfType<TResult>(INotifyEnumerable)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OfType<TResult>(NMF.Expressions.INotifyEnumerable)
  nameWithType.vb: ObservableExtensions.OfType(Of TResult)(INotifyEnumerable)
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OfType(Of TResult)(NMF.Expressions.INotifyEnumerable)
  name.vb: OfType(Of TResult)(INotifyEnumerable)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
    name: OfType
  - name: <
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable
    name: INotifyEnumerable
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
    name: OfType
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable
    name: INotifyEnumerable
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Cast*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.Cast
  name: Cast
  nameWithType: ObservableExtensions.Cast
  fullName: NMF.Expressions.Linq.ObservableExtensions.Cast
- uid: NMF.Expressions.INotifyEnumerable
  commentId: T:NMF.Expressions.INotifyEnumerable
  parent: NMF.Expressions
  name: INotifyEnumerable
  nameWithType: INotifyEnumerable
  fullName: NMF.Expressions.INotifyEnumerable
- uid: NMF.Expressions.INotifyEnumerable{{TResult}}
  commentId: T:NMF.Expressions.INotifyEnumerable{``1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<TResult>
  nameWithType: INotifyEnumerable<TResult>
  fullName: NMF.Expressions.INotifyEnumerable<TResult>
  nameWithType.vb: INotifyEnumerable(Of TResult)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of TResult)
  name.vb: INotifyEnumerable(Of TResult)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Concat*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.Concat
  name: Concat
  nameWithType: ObservableExtensions.Concat
  fullName: NMF.Expressions.Linq.ObservableExtensions.Concat
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  nameWithType.vb: IEnumerable(Of TSource)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TSource)
  name.vb: IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: NMF.Expressions.Linq.ObservableExtensions.Contains*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.Contains
  name: Contains
  nameWithType: ObservableExtensions.Contains
  fullName: NMF.Expressions.Linq.ObservableExtensions.Contains
- uid: '{TSource}'
  commentId: '!:TSource'
  definition: TSource
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: TSource
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: System.Collections.Generic.IEqualityComparer{{TSource}}
  commentId: T:System.Collections.Generic.IEqualityComparer{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TSource>
  nameWithType: IEqualityComparer<TSource>
  fullName: System.Collections.Generic.IEqualityComparer<TSource>
  nameWithType.vb: IEqualityComparer(Of TSource)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TSource)
  name.vb: IEqualityComparer(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Count*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.Count
  name: Count
  nameWithType: ObservableExtensions.Count
  fullName: NMF.Expressions.Linq.ObservableExtensions.Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: NMF.Expressions.Linq.ObservableExtensions.Distinct*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.Distinct
  name: Distinct
  nameWithType: ObservableExtensions.Distinct
  fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct
- uid: System.Collections.Specialized.INotifyCollectionChanged
  commentId: T:System.Collections.Specialized.INotifyCollectionChanged
  parent: System.Collections.Specialized
  isExternal: true
  name: INotifyCollectionChanged
  nameWithType: INotifyCollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged
- uid: NMF.Expressions.Linq.ObservableExtensions.Except*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.Except
  name: Except
  nameWithType: ObservableExtensions.Except
  fullName: NMF.Expressions.Linq.ObservableExtensions.Except
- uid: System.Collections.Specialized
  commentId: N:System.Collections.Specialized
  isExternal: true
  name: System.Collections.Specialized
  nameWithType: System.Collections.Specialized
  fullName: System.Collections.Specialized
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Specialized
    name: Specialized
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Specialized
    name: Specialized
    isExternal: true
- uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault
  name: FirstOrDefault
  nameWithType: ObservableExtensions.FirstOrDefault
  fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.GroupBy
  name: GroupBy
  nameWithType: ObservableExtensions.GroupBy
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, TKey>>
  nameWithType: Expression<Func<TSource, TKey>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, TKey>>
  nameWithType.vb: Expression(Of Func(Of TSource, TKey))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey))
  name.vb: Expression(Of Func(Of TSource, TKey))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{NMF.Expressions.INotifyGrouping{{TKey},{TSource}}}
  commentId: T:NMF.Expressions.INotifyEnumerable{NMF.Expressions.INotifyGrouping{``1,``0}}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<INotifyGrouping<TKey, TSource>>
  nameWithType: INotifyEnumerable<INotifyGrouping<TKey, TSource>>
  fullName: NMF.Expressions.INotifyEnumerable<NMF.Expressions.INotifyGrouping<TKey, TSource>>
  nameWithType.vb: INotifyEnumerable(Of INotifyGrouping(Of TKey, TSource))
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of NMF.Expressions.INotifyGrouping(Of TKey, TSource))
  name.vb: INotifyEnumerable(Of INotifyGrouping(Of TKey, TSource))
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - uid: NMF.Expressions.INotifyGrouping`2
    name: INotifyGrouping
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TSource
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.INotifyGrouping`2
    name: INotifyGrouping
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: System.Func{{TSource},{TKey}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<TSource, TKey>
  nameWithType: Func<TSource, TKey>
  fullName: System.Func<TSource, TKey>
  nameWithType.vb: Func(Of TSource, TKey)
  fullName.vb: System.Func(Of TSource, TKey)
  name.vb: Func(Of TSource, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  commentId: T:System.Collections.Generic.IEqualityComparer{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TKey>
  nameWithType: IEqualityComparer<TKey>
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  nameWithType.vb: IEqualityComparer(Of TKey)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  name.vb: IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TKey, IEnumerable<TSource>, TResult>>
  nameWithType: Expression<Func<TKey, IEnumerable<TSource>, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>
  nameWithType.vb: Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult))
  name.vb: Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}
  commentId: T:System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}
  parent: System
  definition: System.Func`3
  name: Func<TKey, IEnumerable<TSource>, TResult>
  nameWithType: Func<TKey, IEnumerable<TSource>, TResult>
  fullName: System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>
  nameWithType.vb: Func(Of TKey, IEnumerable(Of TSource), TResult)
  fullName.vb: System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)
  name.vb: Func(Of TKey, IEnumerable(Of TSource), TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.GroupJoin
  name: GroupJoin
  nameWithType: ObservableExtensions.GroupJoin
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin
- uid: NMF.Expressions.INotifyEnumerable{{TOuter}}
  commentId: T:NMF.Expressions.INotifyEnumerable{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<TOuter>
  nameWithType: INotifyEnumerable<TOuter>
  fullName: NMF.Expressions.INotifyEnumerable<TOuter>
  nameWithType.vb: INotifyEnumerable(Of TOuter)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of TOuter)
  name.vb: INotifyEnumerable(Of TOuter)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TOuter
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: )
- uid: System.Collections.Generic.IEnumerable{{TInner}}
  commentId: T:System.Collections.Generic.IEnumerable{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TInner>
  nameWithType: IEnumerable<TInner>
  fullName: System.Collections.Generic.IEnumerable<TInner>
  nameWithType.vb: IEnumerable(Of TInner)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TInner)
  name.vb: IEnumerable(Of TInner)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TOuter},{TKey}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``2}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TOuter, TKey>>
  nameWithType: Expression<Func<TOuter, TKey>>
  fullName: System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>
  nameWithType.vb: Expression(Of Func(Of TOuter, TKey))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey))
  name.vb: Expression(Of Func(Of TOuter, TKey))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``1,``2}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TInner, TKey>>
  nameWithType: Expression<Func<TInner, TKey>>
  fullName: System.Linq.Expressions.Expression<System.Func<TInner, TKey>>
  nameWithType.vb: Expression(Of Func(Of TInner, TKey))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey))
  name.vb: Expression(Of Func(Of TInner, TKey))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TOuter, IEnumerable<TInner>, TResult>>
  nameWithType: Expression<Func<TOuter, IEnumerable<TInner>, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>
  nameWithType.vb: Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult))
  name.vb: Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Intersect*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.Intersect
  name: Intersect
  nameWithType: ObservableExtensions.Intersect
  fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect
- uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf
  name: IsProperSubsetOf
  nameWithType: ObservableExtensions.IsProperSubsetOf
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf
- uid: NMF.Expressions.INotifyEnumerable{{T}}
  commentId: T:NMF.Expressions.INotifyEnumerable{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<T>
  nameWithType: INotifyEnumerable<T>
  fullName: NMF.Expressions.INotifyEnumerable<T>
  nameWithType.vb: INotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of T)
  name.vb: INotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEqualityComparer{{T}}
  commentId: T:System.Collections.Generic.IEqualityComparer{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf
  name: IsProperSupersetOf
  nameWithType: ObservableExtensions.IsProperSupersetOf
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf
- uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf
  name: IsSubsetOf
  nameWithType: ObservableExtensions.IsSubsetOf
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf
- uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf
  name: IsSupersetOf
  nameWithType: ObservableExtensions.IsSupersetOf
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf
- uid: NMF.Expressions.Linq.ObservableExtensions.Join*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.Join
  name: Join
  nameWithType: ObservableExtensions.Join
  fullName: NMF.Expressions.Linq.ObservableExtensions.Join
- uid: System.Linq.Expressions.Expression{System.Func{{TOuter},{TInner},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1,``3}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TOuter, TInner, TResult>>
  nameWithType: Expression<Func<TOuter, TInner, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>
  nameWithType.vb: Expression(Of Func(Of TOuter, TInner, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult))
  name.vb: Expression(Of Func(Of TOuter, TInner, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Max*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.Max
  name: Max
  nameWithType: ObservableExtensions.Max
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max
- uid: System.Collections.Generic.IComparer{{TSource}}
  commentId: T:System.Collections.Generic.IComparer{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<TSource>
  nameWithType: IComparer<TSource>
  fullName: System.Collections.Generic.IComparer<TSource>
  nameWithType.vb: IComparer(Of TSource)
  fullName.vb: System.Collections.Generic.IComparer(Of TSource)
  name.vb: IComparer(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: true
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, TResult>>
  nameWithType: Expression<Func<TSource, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, TResult>>
  nameWithType.vb: Expression(Of Func(Of TSource, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult))
  name.vb: Expression(Of Func(Of TSource, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Collections.Generic.IComparer{{TResult}}
  commentId: T:System.Collections.Generic.IComparer{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<TResult>
  nameWithType: IComparer<TResult>
  fullName: System.Collections.Generic.IComparer<TResult>
  nameWithType.vb: IComparer(Of TResult)
  fullName.vb: System.Collections.Generic.IComparer(Of TResult)
  name.vb: IComparer(Of TResult)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{System.Nullable{{TSource}}}
  commentId: T:NMF.Expressions.INotifyEnumerable{System.Nullable{``0}}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<TSource?>
  nameWithType: INotifyEnumerable<TSource?>
  fullName: NMF.Expressions.INotifyEnumerable<TSource?>
  nameWithType.vb: INotifyEnumerable(Of TSource?)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of TSource?)
  name.vb: INotifyEnumerable(Of TSource?)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: '?'
  - name: )
- uid: System.Nullable{{TSource}}
  commentId: T:System.Nullable{``0}
  parent: System
  definition: System.Nullable`1
  name: TSource?
  nameWithType: TSource?
  fullName: TSource?
  spec.csharp:
  - name: TSource
  - name: '?'
  spec.vb:
  - name: TSource
  - name: '?'
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{{TResult}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, TResult?>>
  nameWithType: Expression<Func<TSource, TResult?>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, TResult?>>
  nameWithType.vb: Expression(Of Func(Of TSource, TResult?))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult?))
  name.vb: Expression(Of Func(Of TSource, TResult?))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: )
  - name: )
- uid: System.Nullable{{TResult}}
  commentId: T:System.Nullable{``1}
  parent: System
  definition: System.Nullable`1
  name: TResult?
  nameWithType: TResult?
  fullName: TResult?
  spec.csharp:
  - name: TResult
  - name: '?'
  spec.vb:
  - name: TResult
  - name: '?'
- uid: NMF.Expressions.Linq.ObservableExtensions.Min*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.Min
  name: Min
  nameWithType: ObservableExtensions.Min
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min
- uid: NMF.Expressions.Linq.ObservableExtensions.OfType*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.OfType
  name: OfType
  nameWithType: ObservableExtensions.OfType
  fullName: NMF.Expressions.Linq.ObservableExtensions.OfType
- uid: NMF.Expressions.INotifyCollection{{TSource}}
  commentId: T:NMF.Expressions.INotifyCollection{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyCollection`1
  name: INotifyCollection<TSource>
  nameWithType: INotifyCollection<TSource>
  fullName: NMF.Expressions.INotifyCollection<TSource>
  nameWithType.vb: INotifyCollection(Of TSource)
  fullName.vb: NMF.Expressions.INotifyCollection(Of TSource)
  name.vb: INotifyCollection(Of TSource)
  spec.csharp:
  - uid: NMF.Expressions.INotifyCollection`1
    name: INotifyCollection
  - name: <
  - name: TSource
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyCollection`1
    name: INotifyCollection
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
- uid: NMF.Expressions.INotifyCollection{{TResult}}
  commentId: T:NMF.Expressions.INotifyCollection{``1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyCollection`1
  name: INotifyCollection<TResult>
  nameWithType: INotifyCollection<TResult>
  fullName: NMF.Expressions.INotifyCollection<TResult>
  nameWithType.vb: INotifyCollection(Of TResult)
  fullName.vb: NMF.Expressions.INotifyCollection(Of TResult)
  name.vb: INotifyCollection(Of TResult)
  spec.csharp:
  - uid: NMF.Expressions.INotifyCollection`1
    name: INotifyCollection
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyCollection`1
    name: INotifyCollection
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.INotifyCollection`1
  commentId: T:NMF.Expressions.INotifyCollection`1
  name: INotifyCollection<T>
  nameWithType: INotifyCollection<T>
  fullName: NMF.Expressions.INotifyCollection<T>
  nameWithType.vb: INotifyCollection(Of T)
  fullName.vb: NMF.Expressions.INotifyCollection(Of T)
  name.vb: INotifyCollection(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyCollection`1
    name: INotifyCollection
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyCollection`1
    name: INotifyCollection
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.OrderBy
  name: OrderBy
  nameWithType: ObservableExtensions.OrderBy
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy
- uid: NMF.Expressions.INotifyEnumerable{{TItem}}
  commentId: T:NMF.Expressions.INotifyEnumerable{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<TItem>
  nameWithType: INotifyEnumerable<TItem>
  fullName: NMF.Expressions.INotifyEnumerable<TItem>
  nameWithType.vb: INotifyEnumerable(Of TItem)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of TItem)
  name.vb: INotifyEnumerable(Of TItem)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TItem},{TKey}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TItem, TKey>>
  nameWithType: Expression<Func<TItem, TKey>>
  fullName: System.Linq.Expressions.Expression<System.Func<TItem, TKey>>
  nameWithType.vb: Expression(Of Func(Of TItem, TKey))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey))
  name.vb: Expression(Of Func(Of TItem, TKey))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.IOrderableNotifyEnumerable{{TItem}}
  commentId: T:NMF.Expressions.IOrderableNotifyEnumerable{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.IOrderableNotifyEnumerable`1
  name: IOrderableNotifyEnumerable<TItem>
  nameWithType: IOrderableNotifyEnumerable<TItem>
  fullName: NMF.Expressions.IOrderableNotifyEnumerable<TItem>
  nameWithType.vb: IOrderableNotifyEnumerable(Of TItem)
  fullName.vb: NMF.Expressions.IOrderableNotifyEnumerable(Of TItem)
  name.vb: IOrderableNotifyEnumerable(Of TItem)
  spec.csharp:
  - uid: NMF.Expressions.IOrderableNotifyEnumerable`1
    name: IOrderableNotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IOrderableNotifyEnumerable`1
    name: IOrderableNotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
- uid: NMF.Expressions.IOrderableNotifyEnumerable`1
  commentId: T:NMF.Expressions.IOrderableNotifyEnumerable`1
  name: IOrderableNotifyEnumerable<T>
  nameWithType: IOrderableNotifyEnumerable<T>
  fullName: NMF.Expressions.IOrderableNotifyEnumerable<T>
  nameWithType.vb: IOrderableNotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.IOrderableNotifyEnumerable(Of T)
  name.vb: IOrderableNotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IOrderableNotifyEnumerable`1
    name: IOrderableNotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IOrderableNotifyEnumerable`1
    name: IOrderableNotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IComparer{{TKey}}
  commentId: T:System.Collections.Generic.IComparer{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<TKey>
  nameWithType: IComparer<TKey>
  fullName: System.Collections.Generic.IComparer<TKey>
  nameWithType.vb: IComparer(Of TKey)
  fullName.vb: System.Collections.Generic.IComparer(Of TKey)
  name.vb: IComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.OrderByDescending
  name: OrderByDescending
  nameWithType: ObservableExtensions.OrderByDescending
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending
- uid: NMF.Expressions.Linq.ObservableExtensions.Select*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.Select
  name: Select
  nameWithType: ObservableExtensions.Select
  fullName: NMF.Expressions.Linq.ObservableExtensions.Select
- uid: System.Func{{TSource},{TResult}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<TSource, TResult>
  nameWithType: Func<TSource, TResult>
  fullName: System.Func<TSource, TResult>
  nameWithType.vb: Func(Of TSource, TResult)
  fullName.vb: System.Func(Of TSource, TResult)
  name.vb: Func(Of TSource, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.SelectMany
  name: SelectMany
  nameWithType: ObservableExtensions.SelectMany
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Collections.Generic.IEnumerable{{TIntermediate}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, IEnumerable<TIntermediate>>>
  nameWithType: Expression<Func<TSource, IEnumerable<TIntermediate>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TIntermediate>>>
  nameWithType.vb: Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TIntermediate)))
  name.vb: Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIntermediate
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIntermediate
  - name: )
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},{TIntermediate},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1,``2}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, TIntermediate, TResult>>
  nameWithType: Expression<Func<TSource, TIntermediate, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, TIntermediate, TResult>>
  nameWithType.vb: Expression(Of Func(Of TSource, TIntermediate, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, TIntermediate, TResult))
  name.vb: Expression(Of Func(Of TSource, TIntermediate, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TIntermediate}}}
  commentId: T:System.Func{``0,System.Collections.Generic.IEnumerable{``1}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, IEnumerable<TIntermediate>>
  nameWithType: Func<TSource, IEnumerable<TIntermediate>>
  fullName: System.Func<TSource, System.Collections.Generic.IEnumerable<TIntermediate>>
  nameWithType.vb: Func(Of TSource, IEnumerable(Of TIntermediate))
  fullName.vb: System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TIntermediate))
  name.vb: Func(Of TSource, IEnumerable(Of TIntermediate))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIntermediate
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIntermediate
  - name: )
  - name: )
- uid: System.Func{{TSource},{TIntermediate},{TResult}}
  commentId: T:System.Func{``0,``1,``2}
  parent: System
  definition: System.Func`3
  name: Func<TSource, TIntermediate, TResult>
  nameWithType: Func<TSource, TIntermediate, TResult>
  fullName: System.Func<TSource, TIntermediate, TResult>
  nameWithType.vb: Func(Of TSource, TIntermediate, TResult)
  fullName.vb: System.Func(Of TSource, TIntermediate, TResult)
  name.vb: Func(Of TSource, TIntermediate, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, IEnumerable<TResult>>>
  nameWithType: Expression<Func<TSource, IEnumerable<TResult>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>>
  nameWithType.vb: Expression(Of Func(Of TSource, IEnumerable(Of TResult)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult)))
  name.vb: Expression(Of Func(Of TSource, IEnumerable(Of TResult)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}
  commentId: T:System.Func{``0,System.Collections.Generic.IEnumerable{``1}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, IEnumerable<TResult>>
  nameWithType: Func<TSource, IEnumerable<TResult>>
  fullName: System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>
  nameWithType.vb: Func(Of TSource, IEnumerable(Of TResult))
  fullName.vb: System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult))
  name.vb: Func(Of TSource, IEnumerable(Of TResult))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.SetEquals
  name: SetEquals
  nameWithType: ObservableExtensions.SetEquals
  fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals
- uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault
  name: SingleOrDefault
  nameWithType: ObservableExtensions.SingleOrDefault
  fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.Sum
  name: Sum
  nameWithType: ObservableExtensions.Sum
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: int?
  nameWithType: int?
  fullName: int?
  nameWithType.vb: Integer?
  fullName.vb: Integer?
  name.vb: Integer?
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: '?'
- uid: System.Nullable{System.Int64}
  commentId: T:System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: long?
  nameWithType: long?
  fullName: long?
  nameWithType.vb: Long?
  fullName.vb: Long?
  name.vb: Long?
  spec.csharp:
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: '?'
- uid: NMF.Expressions.Linq.ObservableExtensions.ThenBy*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.ThenBy
  name: ThenBy
  nameWithType: ObservableExtensions.ThenBy
  fullName: NMF.Expressions.Linq.ObservableExtensions.ThenBy
- uid: NMF.Expressions.Linq.ObservableExtensions.ThenByDescending*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.ThenByDescending
  name: ThenByDescending
  nameWithType: ObservableExtensions.ThenByDescending
  fullName: NMF.Expressions.Linq.ObservableExtensions.ThenByDescending
- uid: NMF.Expressions.Linq.ObservableExtensions.TopX*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.TopX
  name: TopX
  nameWithType: ObservableExtensions.TopX
  fullName: NMF.Expressions.Linq.ObservableExtensions.TopX
- uid: System.Collections.Generic.KeyValuePair{{TItem},{TKey}}[]
  isExternal: true
  name: KeyValuePair<TItem, TKey>[]
  nameWithType: KeyValuePair<TItem, TKey>[]
  fullName: System.Collections.Generic.KeyValuePair<TItem, TKey>[]
  nameWithType.vb: KeyValuePair(Of TItem, TKey)()
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TItem, TKey)()
  name.vb: KeyValuePair(Of TItem, TKey)()
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Union*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.Union
  name: Union
  nameWithType: ObservableExtensions.Union
  fullName: NMF.Expressions.Linq.ObservableExtensions.Union
- uid: NMF.Expressions.Linq.ObservableExtensions.Where*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.Where
  name: Where
  nameWithType: ObservableExtensions.Where
  fullName: NMF.Expressions.Linq.ObservableExtensions.Where
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, bool>>
  nameWithType: Expression<Func<T, bool>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, bool>>
  nameWithType.vb: Expression(Of Func(Of T, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean))
  name.vb: Expression(Of Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: System.Func{{T},System.Boolean}
  commentId: T:System.Func{``0,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<T, bool>
  nameWithType: Func<T, bool>
  fullName: System.Func<T, bool>
  nameWithType.vb: Func(Of T, Boolean)
  fullName.vb: System.Func(Of T, Boolean)
  name.vb: Func(Of T, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Expressions.INotifyCollection{{T}}
  commentId: T:NMF.Expressions.INotifyCollection{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyCollection`1
  name: INotifyCollection<T>
  nameWithType: INotifyCollection<T>
  fullName: NMF.Expressions.INotifyCollection<T>
  nameWithType.vb: INotifyCollection(Of T)
  fullName.vb: NMF.Expressions.INotifyCollection(Of T)
  name.vb: INotifyCollection(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyCollection`1
    name: INotifyCollection
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyCollection`1
    name: INotifyCollection
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates*
  commentId: Overload:NMF.Expressions.Linq.ObservableExtensions.WithUpdates
  name: WithUpdates
  nameWithType: ObservableExtensions.WithUpdates
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates
- uid: System.Collections.Generic.ICollection{{T}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
