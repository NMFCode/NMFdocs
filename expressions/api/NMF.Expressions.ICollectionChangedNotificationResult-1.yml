### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.ICollectionChangedNotificationResult`1
  commentId: T:NMF.Expressions.ICollectionChangedNotificationResult`1
  id: ICollectionChangedNotificationResult`1
  parent: NMF.Expressions
  children:
  - NMF.Expressions.ICollectionChangedNotificationResult`1.AddedItems
  - NMF.Expressions.ICollectionChangedNotificationResult`1.MovedItems
  - NMF.Expressions.ICollectionChangedNotificationResult`1.RemovedItems
  langs:
  - csharp
  - vb
  name: ICollectionChangedNotificationResult<T>
  nameWithType: ICollectionChangedNotificationResult<T>
  fullName: NMF.Expressions.ICollectionChangedNotificationResult<T>
  type: Interface
  source:
    remote:
      path: Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ICollectionChangedNotificationResult
    path: src/Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
    startLine: 24
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: 'public interface ICollectionChangedNotificationResult<T> : ICollectionChangedNotificationResult, INotificationResult'
    typeParameters:
    - id: T
    content.vb: >-
      Public Interface ICollectionChangedNotificationResult(Of T)

          Inherits ICollectionChangedNotificationResult
  inheritedMembers:
  - NMF.Expressions.ICollectionChangedNotificationResult.IsReset
  - NMF.Expressions.ICollectionChangedNotificationResult.OldItemsStartIndex
  - NMF.Expressions.ICollectionChangedNotificationResult.NewItemsStartIndex
  - NMF.Expressions.INotificationResult.Source
  - NMF.Expressions.INotificationResult.Changed
  - NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
  - NMF.Expressions.INotificationResult.FreeReference
  nameWithType.vb: ICollectionChangedNotificationResult(Of T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: NMF.Expressions.ICollectionChangedNotificationResult(Of T)
  name.vb: ICollectionChangedNotificationResult(Of T)
- uid: NMF.Expressions.ICollectionChangedNotificationResult`1.AddedItems
  commentId: P:NMF.Expressions.ICollectionChangedNotificationResult`1.AddedItems
  id: AddedItems
  parent: NMF.Expressions.ICollectionChangedNotificationResult`1
  langs:
  - csharp
  - vb
  name: AddedItems
  nameWithType: ICollectionChangedNotificationResult<T>.AddedItems
  fullName: NMF.Expressions.ICollectionChangedNotificationResult<T>.AddedItems
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AddedItems
    path: src/Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
    startLine: 26
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: List<T> AddedItems { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{{T}}
    content.vb: ReadOnly Property AddedItems As List(Of T)
  overload: NMF.Expressions.ICollectionChangedNotificationResult`1.AddedItems*
  nameWithType.vb: ICollectionChangedNotificationResult(Of T).AddedItems
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NMF.Expressions.ICollectionChangedNotificationResult(Of T).AddedItems
- uid: NMF.Expressions.ICollectionChangedNotificationResult`1.MovedItems
  commentId: P:NMF.Expressions.ICollectionChangedNotificationResult`1.MovedItems
  id: MovedItems
  parent: NMF.Expressions.ICollectionChangedNotificationResult`1
  langs:
  - csharp
  - vb
  name: MovedItems
  nameWithType: ICollectionChangedNotificationResult<T>.MovedItems
  fullName: NMF.Expressions.ICollectionChangedNotificationResult<T>.MovedItems
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: MovedItems
    path: src/Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
    startLine: 28
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: List<T> MovedItems { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{{T}}
    content.vb: ReadOnly Property MovedItems As List(Of T)
  overload: NMF.Expressions.ICollectionChangedNotificationResult`1.MovedItems*
  nameWithType.vb: ICollectionChangedNotificationResult(Of T).MovedItems
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NMF.Expressions.ICollectionChangedNotificationResult(Of T).MovedItems
- uid: NMF.Expressions.ICollectionChangedNotificationResult`1.RemovedItems
  commentId: P:NMF.Expressions.ICollectionChangedNotificationResult`1.RemovedItems
  id: RemovedItems
  parent: NMF.Expressions.ICollectionChangedNotificationResult`1
  langs:
  - csharp
  - vb
  name: RemovedItems
  nameWithType: ICollectionChangedNotificationResult<T>.RemovedItems
  fullName: NMF.Expressions.ICollectionChangedNotificationResult<T>.RemovedItems
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RemovedItems
    path: src/Expressions/Expressions/Execution/CollectionChangedNotificationResult.cs
    startLine: 30
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: List<T> RemovedItems { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{{T}}
    content.vb: ReadOnly Property RemovedItems As List(Of T)
  overload: NMF.Expressions.ICollectionChangedNotificationResult`1.RemovedItems*
  nameWithType.vb: ICollectionChangedNotificationResult(Of T).RemovedItems
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NMF.Expressions.ICollectionChangedNotificationResult(Of T).RemovedItems
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: NMF.Expressions.ICollectionChangedNotificationResult.IsReset
  commentId: P:NMF.Expressions.ICollectionChangedNotificationResult.IsReset
  parent: NMF.Expressions.ICollectionChangedNotificationResult
  name: IsReset
  nameWithType: ICollectionChangedNotificationResult.IsReset
  fullName: NMF.Expressions.ICollectionChangedNotificationResult.IsReset
- uid: NMF.Expressions.ICollectionChangedNotificationResult.OldItemsStartIndex
  commentId: P:NMF.Expressions.ICollectionChangedNotificationResult.OldItemsStartIndex
  parent: NMF.Expressions.ICollectionChangedNotificationResult
  name: OldItemsStartIndex
  nameWithType: ICollectionChangedNotificationResult.OldItemsStartIndex
  fullName: NMF.Expressions.ICollectionChangedNotificationResult.OldItemsStartIndex
- uid: NMF.Expressions.ICollectionChangedNotificationResult.NewItemsStartIndex
  commentId: P:NMF.Expressions.ICollectionChangedNotificationResult.NewItemsStartIndex
  parent: NMF.Expressions.ICollectionChangedNotificationResult
  name: NewItemsStartIndex
  nameWithType: ICollectionChangedNotificationResult.NewItemsStartIndex
  fullName: NMF.Expressions.ICollectionChangedNotificationResult.NewItemsStartIndex
- uid: NMF.Expressions.INotificationResult.Source
  commentId: P:NMF.Expressions.INotificationResult.Source
  parent: NMF.Expressions.INotificationResult
  name: Source
  nameWithType: INotificationResult.Source
  fullName: NMF.Expressions.INotificationResult.Source
- uid: NMF.Expressions.INotificationResult.Changed
  commentId: P:NMF.Expressions.INotificationResult.Changed
  parent: NMF.Expressions.INotificationResult
  name: Changed
  nameWithType: INotificationResult.Changed
  fullName: NMF.Expressions.INotificationResult.Changed
- uid: NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
  commentId: M:NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
  parent: NMF.Expressions.INotificationResult
  isExternal: true
  name: IncreaseReferences(Int32)
  nameWithType: INotificationResult.IncreaseReferences(Int32)
  fullName: NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
  spec.csharp:
  - uid: NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
    name: IncreaseReferences
    nameWithType: INotificationResult.IncreaseReferences
    fullName: NMF.Expressions.INotificationResult.IncreaseReferences
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.INotificationResult.IncreaseReferences(System.Int32)
    name: IncreaseReferences
    nameWithType: INotificationResult.IncreaseReferences
    fullName: NMF.Expressions.INotificationResult.IncreaseReferences
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotificationResult.FreeReference
  commentId: M:NMF.Expressions.INotificationResult.FreeReference
  parent: NMF.Expressions.INotificationResult
  name: FreeReference()
  nameWithType: INotificationResult.FreeReference()
  fullName: NMF.Expressions.INotificationResult.FreeReference()
  spec.csharp:
  - uid: NMF.Expressions.INotificationResult.FreeReference
    name: FreeReference
    nameWithType: INotificationResult.FreeReference
    fullName: NMF.Expressions.INotificationResult.FreeReference
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.INotificationResult.FreeReference
    name: FreeReference
    nameWithType: INotificationResult.FreeReference
    fullName: NMF.Expressions.INotificationResult.FreeReference
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ICollectionChangedNotificationResult
  commentId: T:NMF.Expressions.ICollectionChangedNotificationResult
  parent: NMF.Expressions
  name: ICollectionChangedNotificationResult
  nameWithType: ICollectionChangedNotificationResult
  fullName: NMF.Expressions.ICollectionChangedNotificationResult
- uid: NMF.Expressions.INotificationResult
  commentId: T:NMF.Expressions.INotificationResult
  parent: NMF.Expressions
  name: INotificationResult
  nameWithType: INotificationResult
  fullName: NMF.Expressions.INotificationResult
- uid: NMF.Expressions.ICollectionChangedNotificationResult`1.AddedItems*
  commentId: Overload:NMF.Expressions.ICollectionChangedNotificationResult`1.AddedItems
  name: AddedItems
  nameWithType: ICollectionChangedNotificationResult<T>.AddedItems
  fullName: NMF.Expressions.ICollectionChangedNotificationResult<T>.AddedItems
  nameWithType.vb: ICollectionChangedNotificationResult(Of T).AddedItems
  fullName.vb: NMF.Expressions.ICollectionChangedNotificationResult(Of T).AddedItems
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.Expressions.ICollectionChangedNotificationResult`1.MovedItems*
  commentId: Overload:NMF.Expressions.ICollectionChangedNotificationResult`1.MovedItems
  name: MovedItems
  nameWithType: ICollectionChangedNotificationResult<T>.MovedItems
  fullName: NMF.Expressions.ICollectionChangedNotificationResult<T>.MovedItems
  nameWithType.vb: ICollectionChangedNotificationResult(Of T).MovedItems
  fullName.vb: NMF.Expressions.ICollectionChangedNotificationResult(Of T).MovedItems
- uid: NMF.Expressions.ICollectionChangedNotificationResult`1.RemovedItems*
  commentId: Overload:NMF.Expressions.ICollectionChangedNotificationResult`1.RemovedItems
  name: RemovedItems
  nameWithType: ICollectionChangedNotificationResult<T>.RemovedItems
  fullName: NMF.Expressions.ICollectionChangedNotificationResult<T>.RemovedItems
  nameWithType.vb: ICollectionChangedNotificationResult(Of T).RemovedItems
  fullName.vb: NMF.Expressions.ICollectionChangedNotificationResult(Of T).RemovedItems
