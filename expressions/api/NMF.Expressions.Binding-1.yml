### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.Binding`1
  commentId: T:NMF.Expressions.Binding`1
  id: Binding`1
  parent: NMF.Expressions
  children:
  - NMF.Expressions.Binding`1.Create``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0})
  - NMF.Expressions.Binding`1.Create``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  langs:
  - csharp
  - vb
  name: Binding<T>
  nameWithType: Binding<T>
  fullName: NMF.Expressions.Binding<T>
  type: Class
  source:
    remote:
      path: Expressions/Expressions.Utilities/Binding.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Binding
    path: src/Expressions/Expressions.Utilities/Binding.cs
    startLine: 11
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nHelper class to create bindings\n"
  example: []
  syntax:
    content: public static class Binding<T>
    typeParameters:
    - id: T
      description: The type of bindings
    content.vb: Public Module Binding(Of T)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: Binding(Of T)
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
  fullName.vb: NMF.Expressions.Binding(Of T)
  name.vb: Binding(Of T)
- uid: NMF.Expressions.Binding`1.Create``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:NMF.Expressions.Binding`1.Create``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  id: Create``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: NMF.Expressions.Binding`1
  langs:
  - csharp
  - vb
  name: Create<TMember>(Expression<Func<T, TMember>>, Expression<Func<T, TMember>>)
  nameWithType: Binding<T>.Create<TMember>(Expression<Func<T, TMember>>, Expression<Func<T, TMember>>)
  fullName: NMF.Expressions.Binding<T>.Create<TMember>(System.Linq.Expressions.Expression<System.Func<T, TMember>>, System.Linq.Expressions.Expression<System.Func<T, TMember>>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/Binding.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Create
    path: src/Expressions/Expressions.Utilities/Binding.cs
    startLine: 20
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nCreates a new binding for the type T\n"
  example: []
  syntax:
    content: public static Binding<T, TMember> Create<TMember>(Expression<Func<T, TMember>> func, Expression<Func<T, TMember>> member)
    parameters:
    - id: func
      type: System.Linq.Expressions.Expression{System.Func{{T},{TMember}}}
      description: The function the member should be bound to
    - id: member
      type: System.Linq.Expressions.Expression{System.Func{{T},{TMember}}}
      description: The member that should be bound
    typeParameters:
    - id: TMember
      description: The type of the member that should be bound
    return:
      type: NMF.Expressions.Binding{{T},{TMember}}
      description: A binding
    content.vb: Public Shared Function Create(Of TMember)(func As Expression(Of Func(Of T, TMember)), member As Expression(Of Func(Of T, TMember))) As Binding(Of T, TMember)
  overload: NMF.Expressions.Binding`1.Create*
  nameWithType.vb: Binding(Of T).Create(Of TMember)(Expression(Of Func(Of T, TMember)), Expression(Of Func(Of T, TMember)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Binding(Of T).Create(Of TMember)(System.Linq.Expressions.Expression(Of System.Func(Of T, TMember)), System.Linq.Expressions.Expression(Of System.Func(Of T, TMember)))
  name.vb: Create(Of TMember)(Expression(Of Func(Of T, TMember)), Expression(Of Func(Of T, TMember)))
- uid: NMF.Expressions.Binding`1.Create``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0})
  commentId: M:NMF.Expressions.Binding`1.Create``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0})
  id: Create``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Action{`0,``0})
  parent: NMF.Expressions.Binding`1
  langs:
  - csharp
  - vb
  name: Create<TMember>(Expression<Func<T, TMember>>, Action<T, TMember>)
  nameWithType: Binding<T>.Create<TMember>(Expression<Func<T, TMember>>, Action<T, TMember>)
  fullName: NMF.Expressions.Binding<T>.Create<TMember>(System.Linq.Expressions.Expression<System.Func<T, TMember>>, System.Action<T, TMember>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/Binding.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Create
    path: src/Expressions/Expressions.Utilities/Binding.cs
    startLine: 33
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nCreates a new binding for the type T\n"
  example: []
  syntax:
    content: public static Binding<T, TMember> Create<TMember>(Expression<Func<T, TMember>> func, Action<T, TMember> setter)
    parameters:
    - id: func
      type: System.Linq.Expressions.Expression{System.Func{{T},{TMember}}}
      description: The function the member should be bound to
    - id: setter
      type: System.Action{{T},{TMember}}
      description: The setter function for the member
    typeParameters:
    - id: TMember
      description: The type of the member that should be bound
    return:
      type: NMF.Expressions.Binding{{T},{TMember}}
      description: A binding
    content.vb: Public Shared Function Create(Of TMember)(func As Expression(Of Func(Of T, TMember)), setter As Action(Of T, TMember)) As Binding(Of T, TMember)
  overload: NMF.Expressions.Binding`1.Create*
  nameWithType.vb: Binding(Of T).Create(Of TMember)(Expression(Of Func(Of T, TMember)), Action(Of T, TMember))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Binding(Of T).Create(Of TMember)(System.Linq.Expressions.Expression(Of System.Func(Of T, TMember)), System.Action(Of T, TMember))
  name.vb: Create(Of TMember)(Expression(Of Func(Of T, TMember)), Action(Of T, TMember))
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.Binding`1.Create*
  commentId: Overload:NMF.Expressions.Binding`1.Create
  name: Create
  nameWithType: Binding<T>.Create
  fullName: NMF.Expressions.Binding<T>.Create
  nameWithType.vb: Binding(Of T).Create
  fullName.vb: NMF.Expressions.Binding(Of T).Create
- uid: System.Linq.Expressions.Expression{System.Func{{T},{TMember}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,``0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, TMember>>
  nameWithType: Expression<Func<T, TMember>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, TMember>>
  nameWithType.vb: Expression(Of Func(Of T, TMember))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, TMember))
  name.vb: Expression(Of Func(Of T, TMember))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TMember
    nameWithType: TMember
    fullName: TMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TMember
    nameWithType: TMember
    fullName: TMember
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Binding{{T},{TMember}}
  commentId: T:NMF.Expressions.Binding{`0,``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.Binding`2
  name: Binding<T, TMember>
  nameWithType: Binding<T, TMember>
  fullName: NMF.Expressions.Binding<T, TMember>
  nameWithType.vb: Binding(Of T, TMember)
  fullName.vb: NMF.Expressions.Binding(Of T, TMember)
  name.vb: Binding(Of T, TMember)
  spec.csharp:
  - uid: NMF.Expressions.Binding`2
    name: Binding
    nameWithType: Binding
    fullName: NMF.Expressions.Binding
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TMember
    nameWithType: TMember
    fullName: TMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Binding`2
    name: Binding
    nameWithType: Binding
    fullName: NMF.Expressions.Binding
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TMember
    nameWithType: TMember
    fullName: TMember
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: NMF.Expressions.Binding`2
  commentId: T:NMF.Expressions.Binding`2
  name: Binding<T, TMember>
  nameWithType: Binding<T, TMember>
  fullName: NMF.Expressions.Binding<T, TMember>
  nameWithType.vb: Binding(Of T, TMember)
  fullName.vb: NMF.Expressions.Binding(Of T, TMember)
  name.vb: Binding(Of T, TMember)
  spec.csharp:
  - uid: NMF.Expressions.Binding`2
    name: Binding
    nameWithType: Binding
    fullName: NMF.Expressions.Binding
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TMember
    nameWithType: TMember
    fullName: TMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Binding`2
    name: Binding
    nameWithType: Binding
    fullName: NMF.Expressions.Binding
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TMember
    nameWithType: TMember
    fullName: TMember
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{T},{TMember}}
  commentId: T:System.Action{`0,``0}
  parent: System
  definition: System.Action`2
  name: Action<T, TMember>
  nameWithType: Action<T, TMember>
  fullName: System.Action<T, TMember>
  nameWithType.vb: Action(Of T, TMember)
  fullName.vb: System.Action(Of T, TMember)
  name.vb: Action(Of T, TMember)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TMember
    nameWithType: TMember
    fullName: TMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TMember
    nameWithType: TMember
    fullName: TMember
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
