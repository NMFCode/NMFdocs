### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.ExpressionVisitorBase
  commentId: T:NMF.Expressions.ExpressionVisitorBase
  id: ExpressionVisitorBase
  parent: NMF.Expressions
  children:
  - NMF.Expressions.ExpressionVisitorBase.VisitBinary(System.Linq.Expressions.BinaryExpression)
  - NMF.Expressions.ExpressionVisitorBase.VisitBlock(System.Linq.Expressions.BlockExpression)
  - NMF.Expressions.ExpressionVisitorBase.VisitCatchBlock(System.Linq.Expressions.CatchBlock)
  - NMF.Expressions.ExpressionVisitorBase.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  - NMF.Expressions.ExpressionVisitorBase.VisitConstant(System.Linq.Expressions.ConstantExpression)
  - NMF.Expressions.ExpressionVisitorBase.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  - NMF.Expressions.ExpressionVisitorBase.VisitDefault(System.Linq.Expressions.DefaultExpression)
  - NMF.Expressions.ExpressionVisitorBase.VisitElementInit(System.Linq.Expressions.ElementInit)
  - NMF.Expressions.ExpressionVisitorBase.VisitExtension(System.Linq.Expressions.Expression)
  - NMF.Expressions.ExpressionVisitorBase.VisitGoto(System.Linq.Expressions.GotoExpression)
  - NMF.Expressions.ExpressionVisitorBase.VisitIndex(System.Linq.Expressions.IndexExpression)
  - NMF.Expressions.ExpressionVisitorBase.VisitInvocation(System.Linq.Expressions.InvocationExpression)
  - NMF.Expressions.ExpressionVisitorBase.VisitLabel(System.Linq.Expressions.LabelExpression)
  - NMF.Expressions.ExpressionVisitorBase.VisitLabelTarget(System.Linq.Expressions.LabelTarget)
  - NMF.Expressions.ExpressionVisitorBase.VisitLambda``1(System.Linq.Expressions.Expression{``0})
  - NMF.Expressions.ExpressionVisitorBase.VisitListInit(System.Linq.Expressions.ListInitExpression)
  - NMF.Expressions.ExpressionVisitorBase.VisitLoop(System.Linq.Expressions.LoopExpression)
  - NMF.Expressions.ExpressionVisitorBase.VisitMember(System.Linq.Expressions.MemberExpression)
  - NMF.Expressions.ExpressionVisitorBase.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  - NMF.Expressions.ExpressionVisitorBase.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  - NMF.Expressions.ExpressionVisitorBase.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  - NMF.Expressions.ExpressionVisitorBase.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  - NMF.Expressions.ExpressionVisitorBase.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  - NMF.Expressions.ExpressionVisitorBase.VisitNew(System.Linq.Expressions.NewExpression)
  - NMF.Expressions.ExpressionVisitorBase.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
  - NMF.Expressions.ExpressionVisitorBase.VisitParameter(System.Linq.Expressions.ParameterExpression)
  - NMF.Expressions.ExpressionVisitorBase.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  - NMF.Expressions.ExpressionVisitorBase.VisitSwitch(System.Linq.Expressions.SwitchExpression)
  - NMF.Expressions.ExpressionVisitorBase.VisitSwitchCase(System.Linq.Expressions.SwitchCase)
  - NMF.Expressions.ExpressionVisitorBase.VisitTry(System.Linq.Expressions.TryExpression)
  - NMF.Expressions.ExpressionVisitorBase.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  - NMF.Expressions.ExpressionVisitorBase.VisitUnary(System.Linq.Expressions.UnaryExpression)
  langs:
  - csharp
  - vb
  name: ExpressionVisitorBase
  nameWithType: ExpressionVisitorBase
  fullName: NMF.Expressions.ExpressionVisitorBase
  type: Class
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ExpressionVisitorBase
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 8
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: 'public class ExpressionVisitorBase : ExpressionVisitor'
    content.vb: Public Class ExpressionVisitorBase Inherits ExpressionVisitor
  inheritance:
  - System.Object
  - System.Linq.Expressions.ExpressionVisitor
  derivedClasses:
  - NMF.Expressions.ApplyParametersVisitor
  - NMF.Expressions.ExpressionAnalyzer
  inheritedMembers:
  - System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{{T}},System.Func{{T},{T}})
  - System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1({T},System.String)
  - System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{{T}},System.String)
  - System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)
  - System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - NMF.Expressions.ExpressionVisitorBase.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
- uid: NMF.Expressions.ExpressionVisitorBase.VisitBinary(System.Linq.Expressions.BinaryExpression)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitBinary(System.Linq.Expressions.BinaryExpression)
  id: VisitBinary(System.Linq.Expressions.BinaryExpression)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitBinary(BinaryExpression)
  nameWithType: ExpressionVisitorBase.VisitBinary(BinaryExpression)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitBinary(System.Linq.Expressions.BinaryExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitBinary
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 11
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override Expression VisitBinary(BinaryExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.BinaryExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitBinary(node As BinaryExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitBinary*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitBlock(System.Linq.Expressions.BlockExpression)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitBlock(System.Linq.Expressions.BlockExpression)
  id: VisitBlock(System.Linq.Expressions.BlockExpression)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitBlock(BlockExpression)
  nameWithType: ExpressionVisitorBase.VisitBlock(BlockExpression)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitBlock(System.Linq.Expressions.BlockExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitBlock
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 23
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override Expression VisitBlock(BlockExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.BlockExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitBlock(node As BlockExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitBlock*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitCatchBlock(System.Linq.Expressions.CatchBlock)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitCatchBlock(System.Linq.Expressions.CatchBlock)
  id: VisitCatchBlock(System.Linq.Expressions.CatchBlock)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitCatchBlock(CatchBlock)
  nameWithType: ExpressionVisitorBase.VisitCatchBlock(CatchBlock)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitCatchBlock(System.Linq.Expressions.CatchBlock)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitCatchBlock
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 28
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override CatchBlock VisitCatchBlock(CatchBlock node)
    parameters:
    - id: node
      type: System.Linq.Expressions.CatchBlock
    return:
      type: System.Linq.Expressions.CatchBlock
    content.vb: Protected Overrides Function VisitCatchBlock(node As CatchBlock) As CatchBlock
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitCatchBlock*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  id: VisitConditional(System.Linq.Expressions.ConditionalExpression)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitConditional(ConditionalExpression)
  nameWithType: ExpressionVisitorBase.VisitConditional(ConditionalExpression)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitConditional
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 33
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override Expression VisitConditional(ConditionalExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.ConditionalExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitConditional(node As ConditionalExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitConditional*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitConstant(System.Linq.Expressions.ConstantExpression)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitConstant(System.Linq.Expressions.ConstantExpression)
  id: VisitConstant(System.Linq.Expressions.ConstantExpression)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitConstant(ConstantExpression)
  nameWithType: ExpressionVisitorBase.VisitConstant(ConstantExpression)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitConstant(System.Linq.Expressions.ConstantExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitConstant
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 45
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override Expression VisitConstant(ConstantExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.ConstantExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitConstant(node As ConstantExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitConstant*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  id: VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitDebugInfo(DebugInfoExpression)
  nameWithType: ExpressionVisitorBase.VisitDebugInfo(DebugInfoExpression)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitDebugInfo
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 50
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override Expression VisitDebugInfo(DebugInfoExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.DebugInfoExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitDebugInfo(node As DebugInfoExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitDebugInfo*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitDefault(System.Linq.Expressions.DefaultExpression)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitDefault(System.Linq.Expressions.DefaultExpression)
  id: VisitDefault(System.Linq.Expressions.DefaultExpression)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitDefault(DefaultExpression)
  nameWithType: ExpressionVisitorBase.VisitDefault(DefaultExpression)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitDefault(System.Linq.Expressions.DefaultExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitDefault
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 55
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override Expression VisitDefault(DefaultExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.DefaultExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitDefault(node As DefaultExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitDefault*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitElementInit(System.Linq.Expressions.ElementInit)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitElementInit(System.Linq.Expressions.ElementInit)
  id: VisitElementInit(System.Linq.Expressions.ElementInit)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitElementInit(ElementInit)
  nameWithType: ExpressionVisitorBase.VisitElementInit(ElementInit)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitElementInit(System.Linq.Expressions.ElementInit)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitElementInit
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 60
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override ElementInit VisitElementInit(ElementInit node)
    parameters:
    - id: node
      type: System.Linq.Expressions.ElementInit
    return:
      type: System.Linq.Expressions.ElementInit
    content.vb: Protected Overrides Function VisitElementInit(node As ElementInit) As ElementInit
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitElementInit*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitGoto(System.Linq.Expressions.GotoExpression)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitGoto(System.Linq.Expressions.GotoExpression)
  id: VisitGoto(System.Linq.Expressions.GotoExpression)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitGoto(GotoExpression)
  nameWithType: ExpressionVisitorBase.VisitGoto(GotoExpression)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitGoto(System.Linq.Expressions.GotoExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitGoto
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 65
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override Expression VisitGoto(GotoExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.GotoExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitGoto(node As GotoExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitGoto*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitIndex(System.Linq.Expressions.IndexExpression)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitIndex(System.Linq.Expressions.IndexExpression)
  id: VisitIndex(System.Linq.Expressions.IndexExpression)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitIndex(IndexExpression)
  nameWithType: ExpressionVisitorBase.VisitIndex(IndexExpression)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitIndex(System.Linq.Expressions.IndexExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitIndex
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 70
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override Expression VisitIndex(IndexExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.IndexExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitIndex(node As IndexExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitIndex*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitExtension(System.Linq.Expressions.Expression)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitExtension(System.Linq.Expressions.Expression)
  id: VisitExtension(System.Linq.Expressions.Expression)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitExtension(Expression)
  nameWithType: ExpressionVisitorBase.VisitExtension(Expression)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitExtension(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitExtension
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 90
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override Expression VisitExtension(Expression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitExtension(node As Expression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitExtension*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitInvocation(System.Linq.Expressions.InvocationExpression)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitInvocation(System.Linq.Expressions.InvocationExpression)
  id: VisitInvocation(System.Linq.Expressions.InvocationExpression)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitInvocation(InvocationExpression)
  nameWithType: ExpressionVisitorBase.VisitInvocation(InvocationExpression)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitInvocation(System.Linq.Expressions.InvocationExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitInvocation
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 95
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override Expression VisitInvocation(InvocationExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.InvocationExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitInvocation(node As InvocationExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitInvocation*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitLabel(System.Linq.Expressions.LabelExpression)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitLabel(System.Linq.Expressions.LabelExpression)
  id: VisitLabel(System.Linq.Expressions.LabelExpression)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitLabel(LabelExpression)
  nameWithType: ExpressionVisitorBase.VisitLabel(LabelExpression)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitLabel(System.Linq.Expressions.LabelExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitLabel
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 116
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override Expression VisitLabel(LabelExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.LabelExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitLabel(node As LabelExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitLabel*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitLabelTarget(System.Linq.Expressions.LabelTarget)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitLabelTarget(System.Linq.Expressions.LabelTarget)
  id: VisitLabelTarget(System.Linq.Expressions.LabelTarget)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitLabelTarget(LabelTarget)
  nameWithType: ExpressionVisitorBase.VisitLabelTarget(LabelTarget)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitLabelTarget(System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitLabelTarget
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 121
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override LabelTarget VisitLabelTarget(LabelTarget node)
    parameters:
    - id: node
      type: System.Linq.Expressions.LabelTarget
    return:
      type: System.Linq.Expressions.LabelTarget
    content.vb: Protected Overrides Function VisitLabelTarget(node As LabelTarget) As LabelTarget
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitLabelTarget*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitLambda``1(System.Linq.Expressions.Expression{``0})
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitLambda``1(System.Linq.Expressions.Expression{``0})
  id: VisitLambda``1(System.Linq.Expressions.Expression{``0})
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitLambda<T>(Expression<T>)
  nameWithType: ExpressionVisitorBase.VisitLambda<T>(Expression<T>)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitLambda<T>(System.Linq.Expressions.Expression<T>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitLambda
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 126
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override Expression VisitLambda<T>(Expression<T> node)
    parameters:
    - id: node
      type: System.Linq.Expressions.Expression{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitLambda(Of T)(node As Expression(Of T)) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{{T}})
  overload: NMF.Expressions.ExpressionVisitorBase.VisitLambda*
  nameWithType.vb: ExpressionVisitorBase.VisitLambda(Of T)(Expression(Of T))
  fullName.vb: NMF.Expressions.ExpressionVisitorBase.VisitLambda(Of T)(System.Linq.Expressions.Expression(Of T))
  name.vb: VisitLambda(Of T)(Expression(Of T))
- uid: NMF.Expressions.ExpressionVisitorBase.VisitListInit(System.Linq.Expressions.ListInitExpression)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitListInit(System.Linq.Expressions.ListInitExpression)
  id: VisitListInit(System.Linq.Expressions.ListInitExpression)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitListInit(ListInitExpression)
  nameWithType: ExpressionVisitorBase.VisitListInit(ListInitExpression)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitListInit(System.Linq.Expressions.ListInitExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitListInit
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 136
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override Expression VisitListInit(ListInitExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.ListInitExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitListInit(node As ListInitExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitListInit*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitLoop(System.Linq.Expressions.LoopExpression)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitLoop(System.Linq.Expressions.LoopExpression)
  id: VisitLoop(System.Linq.Expressions.LoopExpression)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitLoop(LoopExpression)
  nameWithType: ExpressionVisitorBase.VisitLoop(LoopExpression)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitLoop(System.Linq.Expressions.LoopExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitLoop
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 153
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override Expression VisitLoop(LoopExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.LoopExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitLoop(node As LoopExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitLoop*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitMember(System.Linq.Expressions.MemberExpression)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitMember(System.Linq.Expressions.MemberExpression)
  id: VisitMember(System.Linq.Expressions.MemberExpression)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitMember(MemberExpression)
  nameWithType: ExpressionVisitorBase.VisitMember(MemberExpression)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitMember(System.Linq.Expressions.MemberExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitMember
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 158
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override Expression VisitMember(MemberExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.MemberExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitMember(node As MemberExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitMember*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  id: VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitMemberAssignment(MemberAssignment)
  nameWithType: ExpressionVisitorBase.VisitMemberAssignment(MemberAssignment)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitMemberAssignment
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 168
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override MemberAssignment VisitMemberAssignment(MemberAssignment node)
    parameters:
    - id: node
      type: System.Linq.Expressions.MemberAssignment
    return:
      type: System.Linq.Expressions.MemberAssignment
    content.vb: Protected Overrides Function VisitMemberAssignment(node As MemberAssignment) As MemberAssignment
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitMemberAssignment*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  id: VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitMemberInit(MemberInitExpression)
  nameWithType: ExpressionVisitorBase.VisitMemberInit(MemberInitExpression)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitMemberInit
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 179
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override Expression VisitMemberInit(MemberInitExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.MemberInitExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitMemberInit(node As MemberInitExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitMemberInit*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  id: VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitMemberListBinding(MemberListBinding)
  nameWithType: ExpressionVisitorBase.VisitMemberListBinding(MemberListBinding)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitMemberListBinding
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 196
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override MemberListBinding VisitMemberListBinding(MemberListBinding node)
    parameters:
    - id: node
      type: System.Linq.Expressions.MemberListBinding
    return:
      type: System.Linq.Expressions.MemberListBinding
    content.vb: Protected Overrides Function VisitMemberListBinding(node As MemberListBinding) As MemberListBinding
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitMemberListBinding*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  id: VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitMemberMemberBinding(MemberMemberBinding)
  nameWithType: ExpressionVisitorBase.VisitMemberMemberBinding(MemberMemberBinding)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitMemberMemberBinding
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 212
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding node)
    parameters:
    - id: node
      type: System.Linq.Expressions.MemberMemberBinding
    return:
      type: System.Linq.Expressions.MemberMemberBinding
    content.vb: Protected Overrides Function VisitMemberMemberBinding(node As MemberMemberBinding) As MemberMemberBinding
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitMemberMemberBinding*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  id: VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitMethodCall(MethodCallExpression)
  nameWithType: ExpressionVisitorBase.VisitMethodCall(MethodCallExpression)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitMethodCall
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 228
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override Expression VisitMethodCall(MethodCallExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.MethodCallExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitMethodCall(node As MethodCallExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitMethodCall*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitNew(System.Linq.Expressions.NewExpression)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitNew(System.Linq.Expressions.NewExpression)
  id: VisitNew(System.Linq.Expressions.NewExpression)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitNew(NewExpression)
  nameWithType: ExpressionVisitorBase.VisitNew(NewExpression)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitNew(System.Linq.Expressions.NewExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitNew
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 249
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override Expression VisitNew(NewExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.NewExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitNew(node As NewExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitNew*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
  id: VisitNewArray(System.Linq.Expressions.NewArrayExpression)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitNewArray(NewArrayExpression)
  nameWithType: ExpressionVisitorBase.VisitNewArray(NewArrayExpression)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitNewArray
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 268
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override Expression VisitNewArray(NewArrayExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.NewArrayExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitNewArray(node As NewArrayExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitNewArray*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitParameter(System.Linq.Expressions.ParameterExpression)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitParameter(System.Linq.Expressions.ParameterExpression)
  id: VisitParameter(System.Linq.Expressions.ParameterExpression)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitParameter(ParameterExpression)
  nameWithType: ExpressionVisitorBase.VisitParameter(ParameterExpression)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitParameter(System.Linq.Expressions.ParameterExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitParameter
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 286
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override Expression VisitParameter(ParameterExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.ParameterExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitParameter(node As ParameterExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitParameter*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  id: VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitRuntimeVariables(RuntimeVariablesExpression)
  nameWithType: ExpressionVisitorBase.VisitRuntimeVariables(RuntimeVariablesExpression)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitRuntimeVariables
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 291
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override Expression VisitRuntimeVariables(RuntimeVariablesExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.RuntimeVariablesExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitRuntimeVariables(node As RuntimeVariablesExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitRuntimeVariables*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitSwitch(System.Linq.Expressions.SwitchExpression)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitSwitch(System.Linq.Expressions.SwitchExpression)
  id: VisitSwitch(System.Linq.Expressions.SwitchExpression)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitSwitch(SwitchExpression)
  nameWithType: ExpressionVisitorBase.VisitSwitch(SwitchExpression)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitSwitch(System.Linq.Expressions.SwitchExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitSwitch
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 296
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override Expression VisitSwitch(SwitchExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.SwitchExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitSwitch(node As SwitchExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitSwitch*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitSwitchCase(System.Linq.Expressions.SwitchCase)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitSwitchCase(System.Linq.Expressions.SwitchCase)
  id: VisitSwitchCase(System.Linq.Expressions.SwitchCase)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitSwitchCase(SwitchCase)
  nameWithType: ExpressionVisitorBase.VisitSwitchCase(SwitchCase)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitSwitchCase(System.Linq.Expressions.SwitchCase)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitSwitchCase
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 301
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override SwitchCase VisitSwitchCase(SwitchCase node)
    parameters:
    - id: node
      type: System.Linq.Expressions.SwitchCase
    return:
      type: System.Linq.Expressions.SwitchCase
    content.vb: Protected Overrides Function VisitSwitchCase(node As SwitchCase) As SwitchCase
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitSwitchCase*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitTry(System.Linq.Expressions.TryExpression)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitTry(System.Linq.Expressions.TryExpression)
  id: VisitTry(System.Linq.Expressions.TryExpression)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitTry(TryExpression)
  nameWithType: ExpressionVisitorBase.VisitTry(TryExpression)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitTry(System.Linq.Expressions.TryExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitTry
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 306
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override Expression VisitTry(TryExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.TryExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitTry(node As TryExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitTry*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  id: VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitTypeBinary(TypeBinaryExpression)
  nameWithType: ExpressionVisitorBase.VisitTypeBinary(TypeBinaryExpression)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitTypeBinary
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 311
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override Expression VisitTypeBinary(TypeBinaryExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.TypeBinaryExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitTypeBinary(node As TypeBinaryExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitTypeBinary*
- uid: NMF.Expressions.ExpressionVisitorBase.VisitUnary(System.Linq.Expressions.UnaryExpression)
  commentId: M:NMF.Expressions.ExpressionVisitorBase.VisitUnary(System.Linq.Expressions.UnaryExpression)
  id: VisitUnary(System.Linq.Expressions.UnaryExpression)
  parent: NMF.Expressions.ExpressionVisitorBase
  langs:
  - csharp
  - vb
  name: VisitUnary(UnaryExpression)
  nameWithType: ExpressionVisitorBase.VisitUnary(UnaryExpression)
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitUnary(System.Linq.Expressions.UnaryExpression)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/ExpressionVisitorBase.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: VisitUnary
    path: src/Expressions/Expressions/ExpressionVisitorBase.cs
    startLine: 321
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  syntax:
    content: protected override Expression VisitUnary(UnaryExpression node)
    parameters:
    - id: node
      type: System.Linq.Expressions.UnaryExpression
    return:
      type: System.Linq.Expressions.Expression
    content.vb: Protected Overrides Function VisitUnary(node As UnaryExpression) As Expression
  overridden: System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)
  overload: NMF.Expressions.ExpressionVisitorBase.VisitUnary*
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Linq.Expressions.ExpressionVisitor
  commentId: T:System.Linq.Expressions.ExpressionVisitor
  parent: System.Linq.Expressions
  isExternal: true
  name: ExpressionVisitor
  nameWithType: ExpressionVisitor
  fullName: System.Linq.Expressions.ExpressionVisitor
- uid: System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: Visit(ReadOnlyCollection<Expression>)
  nameWithType: ExpressionVisitor.Visit(ReadOnlyCollection<Expression>)
  fullName: System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>)
  nameWithType.vb: ExpressionVisitor.Visit(ReadOnlyCollection(Of Expression))
  fullName.vb: System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection(Of System.Linq.Expressions.Expression))
  name.vb: Visit(ReadOnlyCollection(Of Expression))
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})
    name: Visit
    isExternal: true
  - name: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
  - name: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})
    name: Visit
    isExternal: true
  - name: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Linq.Expressions.Expression
    name: Expression
    isExternal: true
  - name: )
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: Visit(Expression)
  nameWithType: ExpressionVisitor.Visit(Expression)
  fullName: System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)
    name: Visit
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)
    name: Visit
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{{T}},System.Func{{T},{T}})
  commentId: M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
  parent: System.Linq.Expressions.ExpressionVisitor
  definition: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
  name: Visit<T>(ReadOnlyCollection<T>, Func<T, T>)
  nameWithType: ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>)
  fullName: System.Linq.Expressions.ExpressionVisitor.Visit<T>(System.Collections.ObjectModel.ReadOnlyCollection<T>, System.Func<T, T>)
  nameWithType.vb: ExpressionVisitor.Visit(Of T)(ReadOnlyCollection(Of T), Func(Of T, T))
  fullName.vb: System.Linq.Expressions.ExpressionVisitor.Visit(Of T)(System.Collections.ObjectModel.ReadOnlyCollection(Of T), System.Func(Of T, T))
  name.vb: Visit(Of T)(ReadOnlyCollection(Of T), Func(Of T, T))
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
    name: Visit
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
    name: Visit
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1({T},System.String)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
  parent: System.Linq.Expressions.ExpressionVisitor
  definition: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
  name: VisitAndConvert<T>(T, string)
  nameWithType: ExpressionVisitor.VisitAndConvert<T>(T, string)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>(T, string)
  nameWithType.vb: ExpressionVisitor.VisitAndConvert(Of T)(T, String)
  fullName.vb: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert(Of T)(T, String)
  name.vb: VisitAndConvert(Of T)(T, String)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
    name: VisitAndConvert
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
    name: VisitAndConvert
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{{T}},System.String)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
  parent: System.Linq.Expressions.ExpressionVisitor
  definition: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
  name: VisitAndConvert<T>(ReadOnlyCollection<T>, string)
  nameWithType: ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, string)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>(System.Collections.ObjectModel.ReadOnlyCollection<T>, string)
  nameWithType.vb: ExpressionVisitor.VisitAndConvert(Of T)(ReadOnlyCollection(Of T), String)
  fullName.vb: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert(Of T)(System.Collections.ObjectModel.ReadOnlyCollection(Of T), String)
  name.vb: VisitAndConvert(Of T)(ReadOnlyCollection(Of T), String)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
    name: VisitAndConvert
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
    name: VisitAndConvert
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitDynamic(DynamicExpression)
  nameWithType: ExpressionVisitor.VisitDynamic(DynamicExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)
    name: VisitDynamic
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.DynamicExpression
    name: DynamicExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)
    name: VisitDynamic
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.DynamicExpression
    name: DynamicExpression
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitMemberBinding(MemberBinding)
  nameWithType: ExpressionVisitor.VisitMemberBinding(MemberBinding)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)
    name: VisitMemberBinding
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)
    name: VisitMemberBinding
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<ExpressionVisitorBase>(ExpressionVisitorBase)
  nameWithType: ExpressionExtensions.AsOne<ExpressionVisitorBase>(ExpressionVisitorBase)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<NMF.Expressions.ExpressionVisitorBase>(NMF.Expressions.ExpressionVisitorBase)
  nameWithType.vb: ExpressionExtensions.AsOne(Of ExpressionVisitorBase)(ExpressionVisitorBase)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of NMF.Expressions.ExpressionVisitorBase)(NMF.Expressions.ExpressionVisitorBase)
  name.vb: AsOne(Of ExpressionVisitorBase)(ExpressionVisitorBase)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.ExpressionVisitorBase)
    name: AsOne
  - name: <
  - uid: NMF.Expressions.ExpressionVisitorBase
    name: ExpressionVisitorBase
  - name: '>'
  - name: (
  - uid: NMF.Expressions.ExpressionVisitorBase
    name: ExpressionVisitorBase
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.ExpressionVisitorBase)
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.ExpressionVisitorBase
    name: ExpressionVisitorBase
  - name: )
  - name: (
  - uid: NMF.Expressions.ExpressionVisitorBase
    name: ExpressionVisitorBase
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
- uid: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
  commentId: M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
  isExternal: true
  name: Visit<T>(ReadOnlyCollection<T>, Func<T, T>)
  nameWithType: ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>)
  fullName: System.Linq.Expressions.ExpressionVisitor.Visit<T>(System.Collections.ObjectModel.ReadOnlyCollection<T>, System.Func<T, T>)
  nameWithType.vb: ExpressionVisitor.Visit(Of T)(ReadOnlyCollection(Of T), Func(Of T, T))
  fullName.vb: System.Linq.Expressions.ExpressionVisitor.Visit(Of T)(System.Collections.ObjectModel.ReadOnlyCollection(Of T), System.Func(Of T, T))
  name.vb: Visit(Of T)(ReadOnlyCollection(Of T), Func(Of T, T))
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
    name: Visit
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
    name: Visit
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
  isExternal: true
  name: VisitAndConvert<T>(T, string)
  nameWithType: ExpressionVisitor.VisitAndConvert<T>(T, string)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>(T, string)
  nameWithType.vb: ExpressionVisitor.VisitAndConvert(Of T)(T, String)
  fullName.vb: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert(Of T)(T, String)
  name.vb: VisitAndConvert(Of T)(T, String)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
    name: VisitAndConvert
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
    name: VisitAndConvert
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
  isExternal: true
  name: VisitAndConvert<T>(ReadOnlyCollection<T>, string)
  nameWithType: ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, string)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>(System.Collections.ObjectModel.ReadOnlyCollection<T>, string)
  nameWithType.vb: ExpressionVisitor.VisitAndConvert(Of T)(ReadOnlyCollection(Of T), String)
  fullName.vb: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert(Of T)(System.Collections.ObjectModel.ReadOnlyCollection(Of T), String)
  name.vb: VisitAndConvert(Of T)(ReadOnlyCollection(Of T), String)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
    name: VisitAndConvert
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
    name: VisitAndConvert
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<T>(T)
  nameWithType: ExpressionExtensions.AsOne<T>(T)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<T>(T)
  nameWithType.vb: ExpressionExtensions.AsOne(Of T)(T)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of T)(T)
  name.vb: AsOne(Of T)(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  parent: NMF.Expressions.Linq
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
- uid: System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitBinary(BinaryExpression)
  nameWithType: ExpressionVisitor.VisitBinary(BinaryExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
    name: VisitBinary
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.BinaryExpression
    name: BinaryExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
    name: VisitBinary
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.BinaryExpression
    name: BinaryExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitBinary*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitBinary
  name: VisitBinary
  nameWithType: ExpressionVisitorBase.VisitBinary
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitBinary
- uid: System.Linq.Expressions.BinaryExpression
  commentId: T:System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitBlock(BlockExpression)
  nameWithType: ExpressionVisitor.VisitBlock(BlockExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)
    name: VisitBlock
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.BlockExpression
    name: BlockExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)
    name: VisitBlock
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.BlockExpression
    name: BlockExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitBlock*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitBlock
  name: VisitBlock
  nameWithType: ExpressionVisitorBase.VisitBlock
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitBlock
- uid: System.Linq.Expressions.BlockExpression
  commentId: T:System.Linq.Expressions.BlockExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: BlockExpression
  nameWithType: BlockExpression
  fullName: System.Linq.Expressions.BlockExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitCatchBlock(CatchBlock)
  nameWithType: ExpressionVisitor.VisitCatchBlock(CatchBlock)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)
    name: VisitCatchBlock
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)
    name: VisitCatchBlock
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitCatchBlock*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitCatchBlock
  name: VisitCatchBlock
  nameWithType: ExpressionVisitorBase.VisitCatchBlock
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitCatchBlock
- uid: System.Linq.Expressions.CatchBlock
  commentId: T:System.Linq.Expressions.CatchBlock
  parent: System.Linq.Expressions
  isExternal: true
  name: CatchBlock
  nameWithType: CatchBlock
  fullName: System.Linq.Expressions.CatchBlock
- uid: System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitConditional(ConditionalExpression)
  nameWithType: ExpressionVisitor.VisitConditional(ConditionalExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)
    name: VisitConditional
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.ConditionalExpression
    name: ConditionalExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)
    name: VisitConditional
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.ConditionalExpression
    name: ConditionalExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitConditional*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitConditional
  name: VisitConditional
  nameWithType: ExpressionVisitorBase.VisitConditional
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitConditional
- uid: System.Linq.Expressions.ConditionalExpression
  commentId: T:System.Linq.Expressions.ConditionalExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: ConditionalExpression
  nameWithType: ConditionalExpression
  fullName: System.Linq.Expressions.ConditionalExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitConstant(ConstantExpression)
  nameWithType: ExpressionVisitor.VisitConstant(ConstantExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
    name: VisitConstant
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.ConstantExpression
    name: ConstantExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
    name: VisitConstant
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.ConstantExpression
    name: ConstantExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitConstant*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitConstant
  name: VisitConstant
  nameWithType: ExpressionVisitorBase.VisitConstant
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitConstant
- uid: System.Linq.Expressions.ConstantExpression
  commentId: T:System.Linq.Expressions.ConstantExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: ConstantExpression
  nameWithType: ConstantExpression
  fullName: System.Linq.Expressions.ConstantExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitDebugInfo(DebugInfoExpression)
  nameWithType: ExpressionVisitor.VisitDebugInfo(DebugInfoExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
    name: VisitDebugInfo
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.DebugInfoExpression
    name: DebugInfoExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
    name: VisitDebugInfo
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.DebugInfoExpression
    name: DebugInfoExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitDebugInfo*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitDebugInfo
  name: VisitDebugInfo
  nameWithType: ExpressionVisitorBase.VisitDebugInfo
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitDebugInfo
- uid: System.Linq.Expressions.DebugInfoExpression
  commentId: T:System.Linq.Expressions.DebugInfoExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: DebugInfoExpression
  nameWithType: DebugInfoExpression
  fullName: System.Linq.Expressions.DebugInfoExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitDefault(DefaultExpression)
  nameWithType: ExpressionVisitor.VisitDefault(DefaultExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)
    name: VisitDefault
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.DefaultExpression
    name: DefaultExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)
    name: VisitDefault
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.DefaultExpression
    name: DefaultExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitDefault*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitDefault
  name: VisitDefault
  nameWithType: ExpressionVisitorBase.VisitDefault
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitDefault
- uid: System.Linq.Expressions.DefaultExpression
  commentId: T:System.Linq.Expressions.DefaultExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: DefaultExpression
  nameWithType: DefaultExpression
  fullName: System.Linq.Expressions.DefaultExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitElementInit(ElementInit)
  nameWithType: ExpressionVisitor.VisitElementInit(ElementInit)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)
    name: VisitElementInit
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)
    name: VisitElementInit
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitElementInit*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitElementInit
  name: VisitElementInit
  nameWithType: ExpressionVisitorBase.VisitElementInit
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitElementInit
- uid: System.Linq.Expressions.ElementInit
  commentId: T:System.Linq.Expressions.ElementInit
  parent: System.Linq.Expressions
  isExternal: true
  name: ElementInit
  nameWithType: ElementInit
  fullName: System.Linq.Expressions.ElementInit
- uid: System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitGoto(GotoExpression)
  nameWithType: ExpressionVisitor.VisitGoto(GotoExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)
    name: VisitGoto
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.GotoExpression
    name: GotoExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)
    name: VisitGoto
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.GotoExpression
    name: GotoExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitGoto*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitGoto
  name: VisitGoto
  nameWithType: ExpressionVisitorBase.VisitGoto
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitGoto
- uid: System.Linq.Expressions.GotoExpression
  commentId: T:System.Linq.Expressions.GotoExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: GotoExpression
  nameWithType: GotoExpression
  fullName: System.Linq.Expressions.GotoExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitIndex(IndexExpression)
  nameWithType: ExpressionVisitor.VisitIndex(IndexExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)
    name: VisitIndex
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.IndexExpression
    name: IndexExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)
    name: VisitIndex
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.IndexExpression
    name: IndexExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitIndex*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitIndex
  name: VisitIndex
  nameWithType: ExpressionVisitorBase.VisitIndex
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitIndex
- uid: System.Linq.Expressions.IndexExpression
  commentId: T:System.Linq.Expressions.IndexExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: IndexExpression
  nameWithType: IndexExpression
  fullName: System.Linq.Expressions.IndexExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitExtension(Expression)
  nameWithType: ExpressionVisitor.VisitExtension(Expression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)
    name: VisitExtension
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)
    name: VisitExtension
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitExtension*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitExtension
  name: VisitExtension
  nameWithType: ExpressionVisitorBase.VisitExtension
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitExtension
- uid: System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitInvocation(InvocationExpression)
  nameWithType: ExpressionVisitor.VisitInvocation(InvocationExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)
    name: VisitInvocation
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.InvocationExpression
    name: InvocationExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)
    name: VisitInvocation
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.InvocationExpression
    name: InvocationExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitInvocation*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitInvocation
  name: VisitInvocation
  nameWithType: ExpressionVisitorBase.VisitInvocation
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitInvocation
- uid: System.Linq.Expressions.InvocationExpression
  commentId: T:System.Linq.Expressions.InvocationExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: InvocationExpression
  nameWithType: InvocationExpression
  fullName: System.Linq.Expressions.InvocationExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitLabel(LabelExpression)
  nameWithType: ExpressionVisitor.VisitLabel(LabelExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)
    name: VisitLabel
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.LabelExpression
    name: LabelExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)
    name: VisitLabel
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.LabelExpression
    name: LabelExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitLabel*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitLabel
  name: VisitLabel
  nameWithType: ExpressionVisitorBase.VisitLabel
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitLabel
- uid: System.Linq.Expressions.LabelExpression
  commentId: T:System.Linq.Expressions.LabelExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: LabelExpression
  nameWithType: LabelExpression
  fullName: System.Linq.Expressions.LabelExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitLabelTarget(LabelTarget)
  nameWithType: ExpressionVisitor.VisitLabelTarget(LabelTarget)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)
    name: VisitLabelTarget
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.LabelTarget
    name: LabelTarget
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)
    name: VisitLabelTarget
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.LabelTarget
    name: LabelTarget
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitLabelTarget*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitLabelTarget
  name: VisitLabelTarget
  nameWithType: ExpressionVisitorBase.VisitLabelTarget
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitLabelTarget
- uid: System.Linq.Expressions.LabelTarget
  commentId: T:System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: true
  name: LabelTarget
  nameWithType: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{{T}})
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
  parent: System.Linq.Expressions.ExpressionVisitor
  definition: System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
  name: VisitLambda<T>(Expression<T>)
  nameWithType: ExpressionVisitor.VisitLambda<T>(Expression<T>)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitLambda<T>(System.Linq.Expressions.Expression<T>)
  nameWithType.vb: ExpressionVisitor.VisitLambda(Of T)(Expression(Of T))
  fullName.vb: System.Linq.Expressions.ExpressionVisitor.VisitLambda(Of T)(System.Linq.Expressions.Expression(Of T))
  name.vb: VisitLambda(Of T)(Expression(Of T))
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
    name: VisitLambda
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
    name: VisitLambda
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitLambda*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitLambda
  name: VisitLambda
  nameWithType: ExpressionVisitorBase.VisitLambda
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitLambda
- uid: System.Linq.Expressions.Expression{{T}}
  commentId: T:System.Linq.Expressions.Expression{``0}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<T>
  nameWithType: Expression<T>
  fullName: System.Linq.Expressions.Expression<T>
  nameWithType.vb: Expression(Of T)
  fullName.vb: System.Linq.Expressions.Expression(Of T)
  name.vb: Expression(Of T)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
  isExternal: true
  name: VisitLambda<T>(Expression<T>)
  nameWithType: ExpressionVisitor.VisitLambda<T>(Expression<T>)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitLambda<T>(System.Linq.Expressions.Expression<T>)
  nameWithType.vb: ExpressionVisitor.VisitLambda(Of T)(Expression(Of T))
  fullName.vb: System.Linq.Expressions.ExpressionVisitor.VisitLambda(Of T)(System.Linq.Expressions.Expression(Of T))
  name.vb: VisitLambda(Of T)(Expression(Of T))
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
    name: VisitLambda
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
    name: VisitLambda
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - name: TDelegate
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitListInit(ListInitExpression)
  nameWithType: ExpressionVisitor.VisitListInit(ListInitExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)
    name: VisitListInit
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.ListInitExpression
    name: ListInitExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)
    name: VisitListInit
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.ListInitExpression
    name: ListInitExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitListInit*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitListInit
  name: VisitListInit
  nameWithType: ExpressionVisitorBase.VisitListInit
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitListInit
- uid: System.Linq.Expressions.ListInitExpression
  commentId: T:System.Linq.Expressions.ListInitExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: ListInitExpression
  nameWithType: ListInitExpression
  fullName: System.Linq.Expressions.ListInitExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitLoop(LoopExpression)
  nameWithType: ExpressionVisitor.VisitLoop(LoopExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)
    name: VisitLoop
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.LoopExpression
    name: LoopExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)
    name: VisitLoop
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.LoopExpression
    name: LoopExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitLoop*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitLoop
  name: VisitLoop
  nameWithType: ExpressionVisitorBase.VisitLoop
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitLoop
- uid: System.Linq.Expressions.LoopExpression
  commentId: T:System.Linq.Expressions.LoopExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: LoopExpression
  nameWithType: LoopExpression
  fullName: System.Linq.Expressions.LoopExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitMember(MemberExpression)
  nameWithType: ExpressionVisitor.VisitMember(MemberExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
    name: VisitMember
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.MemberExpression
    name: MemberExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
    name: VisitMember
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.MemberExpression
    name: MemberExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitMember*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitMember
  name: VisitMember
  nameWithType: ExpressionVisitorBase.VisitMember
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitMember
- uid: System.Linq.Expressions.MemberExpression
  commentId: T:System.Linq.Expressions.MemberExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: MemberExpression
  nameWithType: MemberExpression
  fullName: System.Linq.Expressions.MemberExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitMemberAssignment(MemberAssignment)
  nameWithType: ExpressionVisitor.VisitMemberAssignment(MemberAssignment)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
    name: VisitMemberAssignment
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.MemberAssignment
    name: MemberAssignment
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
    name: VisitMemberAssignment
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.MemberAssignment
    name: MemberAssignment
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitMemberAssignment*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitMemberAssignment
  name: VisitMemberAssignment
  nameWithType: ExpressionVisitorBase.VisitMemberAssignment
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitMemberAssignment
- uid: System.Linq.Expressions.MemberAssignment
  commentId: T:System.Linq.Expressions.MemberAssignment
  parent: System.Linq.Expressions
  isExternal: true
  name: MemberAssignment
  nameWithType: MemberAssignment
  fullName: System.Linq.Expressions.MemberAssignment
- uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitMemberInit(MemberInitExpression)
  nameWithType: ExpressionVisitor.VisitMemberInit(MemberInitExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
    name: VisitMemberInit
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.MemberInitExpression
    name: MemberInitExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
    name: VisitMemberInit
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.MemberInitExpression
    name: MemberInitExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitMemberInit*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitMemberInit
  name: VisitMemberInit
  nameWithType: ExpressionVisitorBase.VisitMemberInit
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitMemberInit
- uid: System.Linq.Expressions.MemberInitExpression
  commentId: T:System.Linq.Expressions.MemberInitExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: MemberInitExpression
  nameWithType: MemberInitExpression
  fullName: System.Linq.Expressions.MemberInitExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitMemberListBinding(MemberListBinding)
  nameWithType: ExpressionVisitor.VisitMemberListBinding(MemberListBinding)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
    name: VisitMemberListBinding
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.MemberListBinding
    name: MemberListBinding
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
    name: VisitMemberListBinding
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.MemberListBinding
    name: MemberListBinding
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitMemberListBinding*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitMemberListBinding
  name: VisitMemberListBinding
  nameWithType: ExpressionVisitorBase.VisitMemberListBinding
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitMemberListBinding
- uid: System.Linq.Expressions.MemberListBinding
  commentId: T:System.Linq.Expressions.MemberListBinding
  parent: System.Linq.Expressions
  isExternal: true
  name: MemberListBinding
  nameWithType: MemberListBinding
  fullName: System.Linq.Expressions.MemberListBinding
- uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitMemberMemberBinding(MemberMemberBinding)
  nameWithType: ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
    name: VisitMemberMemberBinding
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.MemberMemberBinding
    name: MemberMemberBinding
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
    name: VisitMemberMemberBinding
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.MemberMemberBinding
    name: MemberMemberBinding
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitMemberMemberBinding*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitMemberMemberBinding
  name: VisitMemberMemberBinding
  nameWithType: ExpressionVisitorBase.VisitMemberMemberBinding
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitMemberMemberBinding
- uid: System.Linq.Expressions.MemberMemberBinding
  commentId: T:System.Linq.Expressions.MemberMemberBinding
  parent: System.Linq.Expressions
  isExternal: true
  name: MemberMemberBinding
  nameWithType: MemberMemberBinding
  fullName: System.Linq.Expressions.MemberMemberBinding
- uid: System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitMethodCall(MethodCallExpression)
  nameWithType: ExpressionVisitor.VisitMethodCall(MethodCallExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
    name: VisitMethodCall
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.MethodCallExpression
    name: MethodCallExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
    name: VisitMethodCall
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.MethodCallExpression
    name: MethodCallExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitMethodCall*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitMethodCall
  name: VisitMethodCall
  nameWithType: ExpressionVisitorBase.VisitMethodCall
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitMethodCall
- uid: System.Linq.Expressions.MethodCallExpression
  commentId: T:System.Linq.Expressions.MethodCallExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: MethodCallExpression
  nameWithType: MethodCallExpression
  fullName: System.Linq.Expressions.MethodCallExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitNew(NewExpression)
  nameWithType: ExpressionVisitor.VisitNew(NewExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)
    name: VisitNew
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.NewExpression
    name: NewExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)
    name: VisitNew
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.NewExpression
    name: NewExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitNew*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitNew
  name: VisitNew
  nameWithType: ExpressionVisitorBase.VisitNew
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitNew
- uid: System.Linq.Expressions.NewExpression
  commentId: T:System.Linq.Expressions.NewExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: NewExpression
  nameWithType: NewExpression
  fullName: System.Linq.Expressions.NewExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitNewArray(NewArrayExpression)
  nameWithType: ExpressionVisitor.VisitNewArray(NewArrayExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
    name: VisitNewArray
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.NewArrayExpression
    name: NewArrayExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
    name: VisitNewArray
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.NewArrayExpression
    name: NewArrayExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitNewArray*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitNewArray
  name: VisitNewArray
  nameWithType: ExpressionVisitorBase.VisitNewArray
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitNewArray
- uid: System.Linq.Expressions.NewArrayExpression
  commentId: T:System.Linq.Expressions.NewArrayExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: NewArrayExpression
  nameWithType: NewArrayExpression
  fullName: System.Linq.Expressions.NewArrayExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitParameter(ParameterExpression)
  nameWithType: ExpressionVisitor.VisitParameter(ParameterExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)
    name: VisitParameter
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)
    name: VisitParameter
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitParameter*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitParameter
  name: VisitParameter
  nameWithType: ExpressionVisitorBase.VisitParameter
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitParameter
- uid: System.Linq.Expressions.ParameterExpression
  commentId: T:System.Linq.Expressions.ParameterExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: ParameterExpression
  nameWithType: ParameterExpression
  fullName: System.Linq.Expressions.ParameterExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitRuntimeVariables(RuntimeVariablesExpression)
  nameWithType: ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
    name: VisitRuntimeVariables
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.RuntimeVariablesExpression
    name: RuntimeVariablesExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
    name: VisitRuntimeVariables
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.RuntimeVariablesExpression
    name: RuntimeVariablesExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitRuntimeVariables*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitRuntimeVariables
  name: VisitRuntimeVariables
  nameWithType: ExpressionVisitorBase.VisitRuntimeVariables
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitRuntimeVariables
- uid: System.Linq.Expressions.RuntimeVariablesExpression
  commentId: T:System.Linq.Expressions.RuntimeVariablesExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: RuntimeVariablesExpression
  nameWithType: RuntimeVariablesExpression
  fullName: System.Linq.Expressions.RuntimeVariablesExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitSwitch(SwitchExpression)
  nameWithType: ExpressionVisitor.VisitSwitch(SwitchExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)
    name: VisitSwitch
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.SwitchExpression
    name: SwitchExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)
    name: VisitSwitch
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.SwitchExpression
    name: SwitchExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitSwitch*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitSwitch
  name: VisitSwitch
  nameWithType: ExpressionVisitorBase.VisitSwitch
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitSwitch
- uid: System.Linq.Expressions.SwitchExpression
  commentId: T:System.Linq.Expressions.SwitchExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: SwitchExpression
  nameWithType: SwitchExpression
  fullName: System.Linq.Expressions.SwitchExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitSwitchCase(SwitchCase)
  nameWithType: ExpressionVisitor.VisitSwitchCase(SwitchCase)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)
    name: VisitSwitchCase
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)
    name: VisitSwitchCase
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitSwitchCase*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitSwitchCase
  name: VisitSwitchCase
  nameWithType: ExpressionVisitorBase.VisitSwitchCase
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitSwitchCase
- uid: System.Linq.Expressions.SwitchCase
  commentId: T:System.Linq.Expressions.SwitchCase
  parent: System.Linq.Expressions
  isExternal: true
  name: SwitchCase
  nameWithType: SwitchCase
  fullName: System.Linq.Expressions.SwitchCase
- uid: System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitTry(TryExpression)
  nameWithType: ExpressionVisitor.VisitTry(TryExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)
    name: VisitTry
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.TryExpression
    name: TryExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)
    name: VisitTry
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.TryExpression
    name: TryExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitTry*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitTry
  name: VisitTry
  nameWithType: ExpressionVisitorBase.VisitTry
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitTry
- uid: System.Linq.Expressions.TryExpression
  commentId: T:System.Linq.Expressions.TryExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: TryExpression
  nameWithType: TryExpression
  fullName: System.Linq.Expressions.TryExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitTypeBinary(TypeBinaryExpression)
  nameWithType: ExpressionVisitor.VisitTypeBinary(TypeBinaryExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
    name: VisitTypeBinary
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.TypeBinaryExpression
    name: TypeBinaryExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
    name: VisitTypeBinary
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.TypeBinaryExpression
    name: TypeBinaryExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitTypeBinary*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitTypeBinary
  name: VisitTypeBinary
  nameWithType: ExpressionVisitorBase.VisitTypeBinary
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitTypeBinary
- uid: System.Linq.Expressions.TypeBinaryExpression
  commentId: T:System.Linq.Expressions.TypeBinaryExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: TypeBinaryExpression
  nameWithType: TypeBinaryExpression
  fullName: System.Linq.Expressions.TypeBinaryExpression
- uid: System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitUnary(UnaryExpression)
  nameWithType: ExpressionVisitor.VisitUnary(UnaryExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)
    name: VisitUnary
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.UnaryExpression
    name: UnaryExpression
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)
    name: VisitUnary
    isExternal: true
  - name: (
  - uid: System.Linq.Expressions.UnaryExpression
    name: UnaryExpression
    isExternal: true
  - name: )
- uid: NMF.Expressions.ExpressionVisitorBase.VisitUnary*
  commentId: Overload:NMF.Expressions.ExpressionVisitorBase.VisitUnary
  name: VisitUnary
  nameWithType: ExpressionVisitorBase.VisitUnary
  fullName: NMF.Expressions.ExpressionVisitorBase.VisitUnary
- uid: System.Linq.Expressions.UnaryExpression
  commentId: T:System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
