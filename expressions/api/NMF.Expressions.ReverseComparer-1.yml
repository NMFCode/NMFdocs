### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.ReverseComparer`1
  commentId: T:NMF.Expressions.ReverseComparer`1
  id: ReverseComparer`1
  parent: NMF.Expressions
  children:
  - NMF.Expressions.ReverseComparer`1.#ctor(System.Collections.Generic.IComparer{`0})
  - NMF.Expressions.ReverseComparer`1.Compare(`0,`0)
  langs:
  - csharp
  - vb
  name: ReverseComparer<T>
  nameWithType: ReverseComparer<T>
  fullName: NMF.Expressions.ReverseComparer<T>
  type: Class
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ReverseComparer.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ReverseComparer
    path: src/Expressions/Expressions.Linq/Linq/ReverseComparer.cs
    startLine: 7
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions
  syntax:
    content: 'public sealed class ReverseComparer<T> : IComparer<T>'
    typeParameters:
    - id: T
    content.vb: Public NotInheritable Class ReverseComparer(Of T) Implements IComparer(Of T)
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IComparer{{T}}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - NMF.Expressions.ReverseComparer`1.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  nameWithType.vb: ReverseComparer(Of T)
  fullName.vb: NMF.Expressions.ReverseComparer(Of T)
  name.vb: ReverseComparer(Of T)
- uid: NMF.Expressions.ReverseComparer`1.#ctor(System.Collections.Generic.IComparer{`0})
  commentId: M:NMF.Expressions.ReverseComparer`1.#ctor(System.Collections.Generic.IComparer{`0})
  id: '#ctor(System.Collections.Generic.IComparer{`0})'
  parent: NMF.Expressions.ReverseComparer`1
  langs:
  - csharp
  - vb
  name: ReverseComparer(IComparer<T>)
  nameWithType: ReverseComparer<T>.ReverseComparer(IComparer<T>)
  fullName: NMF.Expressions.ReverseComparer<T>.ReverseComparer(System.Collections.Generic.IComparer<T>)
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ReverseComparer.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions.Linq/Linq/ReverseComparer.cs
    startLine: 11
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions
  syntax:
    content: public ReverseComparer(IComparer<T> baseComparer)
    parameters:
    - id: baseComparer
      type: System.Collections.Generic.IComparer{{T}}
    content.vb: Public Sub New(baseComparer As IComparer(Of T))
  overload: NMF.Expressions.ReverseComparer`1.#ctor*
  nameWithType.vb: ReverseComparer(Of T).New(IComparer(Of T))
  fullName.vb: NMF.Expressions.ReverseComparer(Of T).New(System.Collections.Generic.IComparer(Of T))
  name.vb: New(IComparer(Of T))
- uid: NMF.Expressions.ReverseComparer`1.Compare(`0,`0)
  commentId: M:NMF.Expressions.ReverseComparer`1.Compare(`0,`0)
  id: Compare(`0,`0)
  parent: NMF.Expressions.ReverseComparer`1
  langs:
  - csharp
  - vb
  name: Compare(T, T)
  nameWithType: ReverseComparer<T>.Compare(T, T)
  fullName: NMF.Expressions.ReverseComparer<T>.Compare(T, T)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Linq/Linq/ReverseComparer.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Compare
    path: src/Expressions/Expressions.Linq/Linq/ReverseComparer.cs
    startLine: 16
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions
  syntax:
    content: public int Compare(T x, T y)
    parameters:
    - id: x
      type: '{T}'
    - id: y
      type: '{T}'
    return:
      type: System.Int32
    content.vb: Public Function Compare(x As T, y As T) As Integer
  overload: NMF.Expressions.ReverseComparer`1.Compare*
  implements:
  - System.Collections.Generic.IComparer{{T}}.Compare({T},{T})
  nameWithType.vb: ReverseComparer(Of T).Compare(T, T)
  fullName.vb: NMF.Expressions.ReverseComparer(Of T).Compare(T, T)
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Collections.Generic.IComparer{{T}}
  commentId: T:System.Collections.Generic.IComparer{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: NMF.Expressions.ReverseComparer`1.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<ReverseComparer<T>>(ReverseComparer<T>)
  nameWithType: ExpressionExtensions.AsOne<ReverseComparer<T>>(ReverseComparer<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<NMF.Expressions.ReverseComparer<T>>(NMF.Expressions.ReverseComparer<T>)
  nameWithType.vb: ExpressionExtensions.AsOne(Of ReverseComparer(Of T))(ReverseComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of NMF.Expressions.ReverseComparer(Of T))(NMF.Expressions.ReverseComparer(Of T))
  name.vb: AsOne(Of ReverseComparer(Of T))(ReverseComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.ReverseComparer{`0})
    name: AsOne
  - name: <
  - uid: NMF.Expressions.ReverseComparer`1
    name: ReverseComparer
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  - name: (
  - uid: NMF.Expressions.ReverseComparer`1
    name: ReverseComparer
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.ReverseComparer{`0})
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.ReverseComparer`1
    name: ReverseComparer
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
  - name: (
  - uid: NMF.Expressions.ReverseComparer`1
    name: ReverseComparer
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: true
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullName.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<T>(T)
  nameWithType: ExpressionExtensions.AsOne<T>(T)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<T>(T)
  nameWithType.vb: ExpressionExtensions.AsOne(Of T)(T)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of T)(T)
  name.vb: AsOne(Of T)(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  parent: NMF.Expressions.Linq
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
- uid: NMF.Expressions.ReverseComparer`1.#ctor*
  commentId: Overload:NMF.Expressions.ReverseComparer`1.#ctor
  name: ReverseComparer
  nameWithType: ReverseComparer<T>.ReverseComparer
  fullName: NMF.Expressions.ReverseComparer<T>.ReverseComparer
  nameWithType.vb: ReverseComparer(Of T).New
  fullName.vb: NMF.Expressions.ReverseComparer(Of T).New
  name.vb: New
- uid: NMF.Expressions.ReverseComparer`1.Compare*
  commentId: Overload:NMF.Expressions.ReverseComparer`1.Compare
  name: Compare
  nameWithType: ReverseComparer<T>.Compare
  fullName: NMF.Expressions.ReverseComparer<T>.Compare
  nameWithType.vb: ReverseComparer(Of T).Compare
  fullName.vb: NMF.Expressions.ReverseComparer(Of T).Compare
- uid: System.Collections.Generic.IComparer{{T}}.Compare({T},{T})
  commentId: M:System.Collections.Generic.IComparer{`0}.Compare(`0,`0)
  parent: System.Collections.Generic.IComparer{{T}}
  definition: System.Collections.Generic.IComparer`1.Compare(`0,`0)
  name: Compare(T, T)
  nameWithType: IComparer<T>.Compare(T, T)
  fullName: System.Collections.Generic.IComparer<T>.Compare(T, T)
  nameWithType.vb: IComparer(Of T).Compare(T, T)
  fullName.vb: System.Collections.Generic.IComparer(Of T).Compare(T, T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer{`0}.Compare(`0,`0)
    name: Compare
    isExternal: true
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IComparer{`0}.Compare(`0,`0)
    name: Compare
    isExternal: true
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
  commentId: M:System.Collections.Generic.IComparer`1.Compare(`0,`0)
  isExternal: true
  name: Compare(T, T)
  nameWithType: IComparer<T>.Compare(T, T)
  fullName: System.Collections.Generic.IComparer<T>.Compare(T, T)
  nameWithType.vb: IComparer(Of T).Compare(T, T)
  fullName.vb: System.Collections.Generic.IComparer(Of T).Compare(T, T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    isExternal: true
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    isExternal: true
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
