### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.Linq.Lookup`2.LookupSlave
  commentId: T:NMF.Expressions.Linq.Lookup`2.LookupSlave
  id: Lookup`2.LookupSlave
  parent: NMF.Expressions.Linq
  children:
  - NMF.Expressions.Linq.Lookup`2.LookupSlave.#ctor(NMF.Expressions.Linq.Lookup{`0,`1},`1)
  - NMF.Expressions.Linq.Lookup`2.LookupSlave.AsNotifiable
  - NMF.Expressions.Linq.Lookup`2.LookupSlave.GetEnumerator
  - NMF.Expressions.Linq.Lookup`2.LookupSlave.Items
  - NMF.Expressions.Linq.Lookup`2.LookupSlave.NMF#Expressions#IEnumerableExpression#AsNotifiable
  - NMF.Expressions.Linq.Lookup`2.LookupSlave.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: Lookup<TSource, TKey>.LookupSlave
  nameWithType: Lookup<TSource, TKey>.LookupSlave
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.LookupSlave
  type: Class
  source:
    remote:
      path: Expressions/Expressions.Utilities/Lookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: LookupSlave
    path: src/Expressions/Expressions.Utilities/Lookup.cs
    startLine: 59
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: 'protected class LookupSlave : IEnumerableExpression<TSource>, IEnumerable<TSource>, IEnumerableExpression, IEnumerable'
    content.vb: >-
      Protected Class LookupSlave

          Implements IEnumerableExpression(Of TSource), IEnumerable(Of TSource), IEnumerableExpression, IEnumerable
  inheritance:
  - System.Object
  implements:
  - NMF.Expressions.IEnumerableExpression{{TSource}}
  - System.Collections.Generic.IEnumerable{{TSource}}
  - NMF.Expressions.IEnumerableExpression
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - NMF.Expressions.IEnumerableExpression{`0}.NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}})
  - System.Collections.Generic.IEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  nameWithType.vb: Lookup(Of TSource, TKey).LookupSlave
  modifiers.csharp:
  - protected
  - class
  modifiers.vb:
  - Protected
  - Class
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).LookupSlave
  name.vb: Lookup(Of TSource, TKey).LookupSlave
- uid: NMF.Expressions.Linq.Lookup`2.LookupSlave.Items
  commentId: P:NMF.Expressions.Linq.Lookup`2.LookupSlave.Items
  id: Items
  parent: NMF.Expressions.Linq.Lookup`2.LookupSlave
  langs:
  - csharp
  - vb
  name: Items
  nameWithType: Lookup<TSource, TKey>.LookupSlave.Items
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.LookupSlave.Items
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/Lookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Items
    path: src/Expressions/Expressions.Utilities/Lookup.cs
    startLine: 65
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: public ICollection<TSource> Items { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{{TSource}}
    content.vb: Public ReadOnly Property Items As ICollection(Of TSource)
  overload: NMF.Expressions.Linq.Lookup`2.LookupSlave.Items*
  nameWithType.vb: Lookup(Of TSource, TKey).LookupSlave.Items
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).LookupSlave.Items
- uid: NMF.Expressions.Linq.Lookup`2.LookupSlave.#ctor(NMF.Expressions.Linq.Lookup{`0,`1},`1)
  commentId: M:NMF.Expressions.Linq.Lookup`2.LookupSlave.#ctor(NMF.Expressions.Linq.Lookup{`0,`1},`1)
  id: '#ctor(NMF.Expressions.Linq.Lookup{`0,`1},`1)'
  parent: NMF.Expressions.Linq.Lookup`2.LookupSlave
  langs:
  - csharp
  - vb
  name: LookupSlave(Lookup<TSource, TKey>, TKey)
  nameWithType: Lookup<TSource, TKey>.LookupSlave.LookupSlave(Lookup<TSource, TKey>, TKey)
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.LookupSlave.LookupSlave(NMF.Expressions.Linq.Lookup<TSource, TKey>, TKey)
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions.Utilities/Lookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions.Utilities/Lookup.cs
    startLine: 79
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: public LookupSlave(Lookup<TSource, TKey> parent, TKey key)
    parameters:
    - id: parent
      type: NMF.Expressions.Linq.Lookup`2
    - id: key
      type: '{TKey}'
    content.vb: Public Sub New(parent As Lookup(Of TSource, TKey), key As TKey)
  overload: NMF.Expressions.Linq.Lookup`2.LookupSlave.#ctor*
  nameWithType.vb: Lookup(Of TSource, TKey).LookupSlave.LookupSlave(Lookup(Of TSource, TKey), TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).LookupSlave.LookupSlave(NMF.Expressions.Linq.Lookup(Of TSource, TKey), TKey)
  name.vb: LookupSlave(Lookup(Of TSource, TKey), TKey)
- uid: NMF.Expressions.Linq.Lookup`2.LookupSlave.AsNotifiable
  commentId: M:NMF.Expressions.Linq.Lookup`2.LookupSlave.AsNotifiable
  id: AsNotifiable
  parent: NMF.Expressions.Linq.Lookup`2.LookupSlave
  langs:
  - csharp
  - vb
  name: AsNotifiable()
  nameWithType: Lookup<TSource, TKey>.LookupSlave.AsNotifiable()
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.LookupSlave.AsNotifiable()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/Lookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AsNotifiable
    path: src/Expressions/Expressions.Utilities/Lookup.cs
    startLine: 85
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: public INotifyEnumerable<TSource> AsNotifiable()
    return:
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
    content.vb: Public Function AsNotifiable As INotifyEnumerable(Of TSource)
  overload: NMF.Expressions.Linq.Lookup`2.LookupSlave.AsNotifiable*
  implements:
  - NMF.Expressions.IEnumerableExpression{{TSource}}.AsNotifiable
  nameWithType.vb: Lookup(Of TSource, TKey).LookupSlave.AsNotifiable()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).LookupSlave.AsNotifiable()
- uid: NMF.Expressions.Linq.Lookup`2.LookupSlave.GetEnumerator
  commentId: M:NMF.Expressions.Linq.Lookup`2.LookupSlave.GetEnumerator
  id: GetEnumerator
  parent: NMF.Expressions.Linq.Lookup`2.LookupSlave
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: Lookup<TSource, TKey>.LookupSlave.GetEnumerator()
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.LookupSlave.GetEnumerator()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/Lookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetEnumerator
    path: src/Expressions/Expressions.Utilities/Lookup.cs
    startLine: 95
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: public IEnumerator<TSource> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{TSource}}
    content.vb: Public Function GetEnumerator As IEnumerator(Of TSource)
  overload: NMF.Expressions.Linq.Lookup`2.LookupSlave.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{TSource}}.GetEnumerator
  nameWithType.vb: Lookup(Of TSource, TKey).LookupSlave.GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).LookupSlave.GetEnumerator()
- uid: NMF.Expressions.Linq.Lookup`2.LookupSlave.NMF#Expressions#IEnumerableExpression#AsNotifiable
  commentId: M:NMF.Expressions.Linq.Lookup`2.LookupSlave.NMF#Expressions#IEnumerableExpression#AsNotifiable
  id: NMF#Expressions#IEnumerableExpression#AsNotifiable
  isEii: true
  parent: NMF.Expressions.Linq.Lookup`2.LookupSlave
  langs:
  - csharp
  - vb
  name: IEnumerableExpression.AsNotifiable()
  nameWithType: Lookup<TSource, TKey>.LookupSlave.IEnumerableExpression.AsNotifiable()
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.LookupSlave.NMF.Expressions.IEnumerableExpression.AsNotifiable()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/Lookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NMF.Expressions.IEnumerableExpression.AsNotifiable
    path: src/Expressions/Expressions.Utilities/Lookup.cs
    startLine: 101
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: INotifyEnumerable IEnumerableExpression.AsNotifiable()
    return:
      type: NMF.Expressions.INotifyEnumerable
    content.vb: Function NMF.Expressions.IEnumerableExpression.AsNotifiable As INotifyEnumerable Implements IEnumerableExpression.AsNotifiable
  overload: NMF.Expressions.Linq.Lookup`2.LookupSlave.NMF#Expressions#IEnumerableExpression#AsNotifiable*
  implements:
  - NMF.Expressions.IEnumerableExpression.AsNotifiable
  nameWithType.vb: Lookup(Of TSource, TKey).LookupSlave.NMF.Expressions.IEnumerableExpression.AsNotifiable()
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).LookupSlave.NMF.Expressions.IEnumerableExpression.AsNotifiable()
  name.vb: NMF.Expressions.IEnumerableExpression.AsNotifiable()
- uid: NMF.Expressions.Linq.Lookup`2.LookupSlave.System#Collections#IEnumerable#GetEnumerator
  commentId: M:NMF.Expressions.Linq.Lookup`2.LookupSlave.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: NMF.Expressions.Linq.Lookup`2.LookupSlave
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: Lookup<TSource, TKey>.LookupSlave.IEnumerable.GetEnumerator()
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.LookupSlave.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/Lookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/Expressions/Expressions.Utilities/Lookup.cs
    startLine: 106
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: NMF.Expressions.Linq.Lookup`2.LookupSlave.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: Lookup(Of TSource, TKey).LookupSlave.System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).LookupSlave.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Expressions.IEnumerableExpression{{TSource}}
  commentId: T:NMF.Expressions.IEnumerableExpression{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<TSource>
  nameWithType: IEnumerableExpression<TSource>
  fullName: NMF.Expressions.IEnumerableExpression<TSource>
  nameWithType.vb: IEnumerableExpression(Of TSource)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of TSource)
  name.vb: IEnumerableExpression(Of TSource)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  nameWithType.vb: IEnumerable(Of TSource)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TSource)
  name.vb: IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression
  commentId: T:NMF.Expressions.IEnumerableExpression
  parent: NMF.Expressions
  name: IEnumerableExpression
  nameWithType: IEnumerableExpression
  fullName: NMF.Expressions.IEnumerableExpression
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{`0}.NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}})
  commentId: M:NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.LookupExtensions
  definition: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: ToLookup<TSource, TKey>(Expression<Func<TSource, TKey>>)
  nameWithType: LookupExtensions.ToLookup<TSource, TKey>(Expression<Func<TSource, TKey>>)
  fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TSource, TKey>(System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  nameWithType.vb: LookupExtensions.ToLookup(Of TSource, TKey)(Expression(Of Func(Of TSource, TKey)))
  fullName.vb: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TSource, TKey)(System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: ToLookup(Of TSource, TKey)(Expression(Of Func(Of TSource, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup<TSource, TKey>
    nameWithType: LookupExtensions.ToLookup<TSource, TKey>
    fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TSource, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup(Of TSource, TKey)
    nameWithType: LookupExtensions.ToLookup(Of TSource, TKey)
    fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TSource, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`0}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  name: WithUpdates<T>()
  nameWithType: ObservableExtensions.WithUpdates<T>()
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>()
  nameWithType.vb: ObservableExtensions.WithUpdates(Of T)()
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)()
  name.vb: WithUpdates(Of T)()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
    name: WithUpdates<T>
    nameWithType: ObservableExtensions.WithUpdates<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
    name: WithUpdates(Of T)
    nameWithType: ObservableExtensions.WithUpdates(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.IEnumerableExpression`1
  commentId: T:NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<T>
  nameWithType: IEnumerableExpression<T>
  fullName: NMF.Expressions.IEnumerableExpression<T>
  nameWithType.vb: IEnumerableExpression(Of T)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T)
  name.vb: IEnumerableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: ToLookup<TSource, TKey>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>)
  nameWithType: LookupExtensions.ToLookup<TSource, TKey>(IEnumerableExpression<TSource>, Expression<Func<TSource, TKey>>)
  fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TSource, TKey>(NMF.Expressions.IEnumerableExpression<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  nameWithType.vb: LookupExtensions.ToLookup(Of TSource, TKey)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)))
  fullName.vb: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TSource, TKey)(NMF.Expressions.IEnumerableExpression(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: ToLookup(Of TSource, TKey)(IEnumerableExpression(Of TSource), Expression(Of Func(Of TSource, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup<TSource, TKey>
    nameWithType: LookupExtensions.ToLookup<TSource, TKey>
    fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TSource, TKey>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.IEnumerableExpression{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup(Of TSource, TKey)
    nameWithType: LookupExtensions.ToLookup(Of TSource, TKey)
    fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TSource, TKey)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.LookupExtensions
  commentId: T:NMF.Expressions.Linq.LookupExtensions
  parent: NMF.Expressions.Linq
  name: LookupExtensions
  nameWithType: LookupExtensions
  fullName: NMF.Expressions.Linq.LookupExtensions
- uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: WithUpdates<T>(IEnumerable<T>)
  nameWithType: ObservableExtensions.WithUpdates<T>(IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.WithUpdates(Of T)(IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: WithUpdates(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
    name: WithUpdates<T>
    nameWithType: ObservableExtensions.WithUpdates<T>
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
    name: WithUpdates(Of T)
    nameWithType: ObservableExtensions.WithUpdates(Of T)
    fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.ObservableExtensions
  commentId: T:NMF.Expressions.Linq.ObservableExtensions
  parent: NMF.Expressions.Linq
  name: ObservableExtensions
  nameWithType: ObservableExtensions
  fullName: NMF.Expressions.Linq.ObservableExtensions
- uid: NMF.Expressions.Linq.Lookup`2.LookupSlave.Items*
  commentId: Overload:NMF.Expressions.Linq.Lookup`2.LookupSlave.Items
  name: Items
  nameWithType: Lookup<TSource, TKey>.LookupSlave.Items
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.LookupSlave.Items
  nameWithType.vb: Lookup(Of TSource, TKey).LookupSlave.Items
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).LookupSlave.Items
- uid: System.Collections.Generic.ICollection{{TSource}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TSource>
  nameWithType: ICollection<TSource>
  fullName: System.Collections.Generic.ICollection<TSource>
  nameWithType.vb: ICollection(Of TSource)
  fullName.vb: System.Collections.Generic.ICollection(Of TSource)
  name.vb: ICollection(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.Lookup`2.LookupSlave.#ctor*
  commentId: Overload:NMF.Expressions.Linq.Lookup`2.LookupSlave.#ctor
  name: LookupSlave
  nameWithType: Lookup<TSource, TKey>.LookupSlave.LookupSlave
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.LookupSlave.LookupSlave
  nameWithType.vb: Lookup(Of TSource, TKey).LookupSlave.LookupSlave
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).LookupSlave.LookupSlave
- uid: NMF.Expressions.Linq.Lookup`2
  commentId: T:NMF.Expressions.Linq.Lookup`2
  parent: NMF.Expressions.Linq
  name: Lookup<TSource, TKey>
  nameWithType: Lookup<TSource, TKey>
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>
  nameWithType.vb: Lookup(Of TSource, TKey)
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey)
  name.vb: Lookup(Of TSource, TKey)
  spec.csharp:
  - uid: NMF.Expressions.Linq.Lookup`2
    name: Lookup
    nameWithType: Lookup
    fullName: NMF.Expressions.Linq.Lookup
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.Lookup`2
    name: Lookup
    nameWithType: Lookup
    fullName: NMF.Expressions.Linq.Lookup
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: NMF.Expressions.Linq.Lookup`2.LookupSlave.AsNotifiable*
  commentId: Overload:NMF.Expressions.Linq.Lookup`2.LookupSlave.AsNotifiable
  name: AsNotifiable
  nameWithType: Lookup<TSource, TKey>.LookupSlave.AsNotifiable
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.LookupSlave.AsNotifiable
  nameWithType.vb: Lookup(Of TSource, TKey).LookupSlave.AsNotifiable
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).LookupSlave.AsNotifiable
- uid: NMF.Expressions.IEnumerableExpression{{TSource}}.AsNotifiable
  commentId: M:NMF.Expressions.IEnumerableExpression{`0}.AsNotifiable
  parent: NMF.Expressions.IEnumerableExpression{{TSource}}
  definition: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
  name: AsNotifiable()
  nameWithType: IEnumerableExpression<TSource>.AsNotifiable()
  fullName: NMF.Expressions.IEnumerableExpression<TSource>.AsNotifiable()
  nameWithType.vb: IEnumerableExpression(Of TSource).AsNotifiable()
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of TSource).AsNotifiable()
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression<TSource>.AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression<TSource>.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression(Of TSource).AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression(Of TSource).AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{{TSource}}
  commentId: T:NMF.Expressions.INotifyEnumerable{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<TSource>
  nameWithType: INotifyEnumerable<TSource>
  fullName: NMF.Expressions.INotifyEnumerable<TSource>
  nameWithType.vb: INotifyEnumerable(Of TSource)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of TSource)
  name.vb: INotifyEnumerable(Of TSource)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
  commentId: M:NMF.Expressions.IEnumerableExpression`1.AsNotifiable
  name: AsNotifiable()
  nameWithType: IEnumerableExpression<T>.AsNotifiable()
  fullName: NMF.Expressions.IEnumerableExpression<T>.AsNotifiable()
  nameWithType.vb: IEnumerableExpression(Of T).AsNotifiable()
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T).AsNotifiable()
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression<T>.AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression<T>.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression(Of T).AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression(Of T).AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable`1
  commentId: T:NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<T>
  nameWithType: INotifyEnumerable<T>
  fullName: NMF.Expressions.INotifyEnumerable<T>
  nameWithType.vb: INotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of T)
  name.vb: INotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.Lookup`2.LookupSlave.GetEnumerator*
  commentId: Overload:NMF.Expressions.Linq.Lookup`2.LookupSlave.GetEnumerator
  name: GetEnumerator
  nameWithType: Lookup<TSource, TKey>.LookupSlave.GetEnumerator
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.LookupSlave.GetEnumerator
  nameWithType.vb: Lookup(Of TSource, TKey).LookupSlave.GetEnumerator
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).LookupSlave.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{TSource}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{TSource}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<TSource>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<TSource>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of TSource).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of TSource).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<TSource>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<TSource>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of TSource).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of TSource).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{TSource}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<TSource>
  nameWithType: IEnumerator<TSource>
  fullName: System.Collections.Generic.IEnumerator<TSource>
  nameWithType.vb: IEnumerator(Of TSource)
  fullName.vb: System.Collections.Generic.IEnumerator(Of TSource)
  name.vb: IEnumerator(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.Lookup`2.LookupSlave.NMF#Expressions#IEnumerableExpression#AsNotifiable*
  commentId: Overload:NMF.Expressions.Linq.Lookup`2.LookupSlave.NMF#Expressions#IEnumerableExpression#AsNotifiable
  name: IEnumerableExpression.AsNotifiable
  nameWithType: Lookup<TSource, TKey>.LookupSlave.IEnumerableExpression.AsNotifiable
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.LookupSlave.NMF.Expressions.IEnumerableExpression.AsNotifiable
  nameWithType.vb: Lookup(Of TSource, TKey).LookupSlave.NMF.Expressions.IEnumerableExpression.AsNotifiable
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).LookupSlave.NMF.Expressions.IEnumerableExpression.AsNotifiable
  name.vb: NMF.Expressions.IEnumerableExpression.AsNotifiable
- uid: NMF.Expressions.IEnumerableExpression.AsNotifiable
  commentId: M:NMF.Expressions.IEnumerableExpression.AsNotifiable
  parent: NMF.Expressions.IEnumerableExpression
  name: AsNotifiable()
  nameWithType: IEnumerableExpression.AsNotifiable()
  fullName: NMF.Expressions.IEnumerableExpression.AsNotifiable()
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression.AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression.AsNotifiable
    name: AsNotifiable
    nameWithType: IEnumerableExpression.AsNotifiable
    fullName: NMF.Expressions.IEnumerableExpression.AsNotifiable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable
  commentId: T:NMF.Expressions.INotifyEnumerable
  parent: NMF.Expressions
  name: INotifyEnumerable
  nameWithType: INotifyEnumerable
  fullName: NMF.Expressions.INotifyEnumerable
- uid: NMF.Expressions.Linq.Lookup`2.LookupSlave.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:NMF.Expressions.Linq.Lookup`2.LookupSlave.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: Lookup<TSource, TKey>.LookupSlave.IEnumerable.GetEnumerator
  fullName: NMF.Expressions.Linq.Lookup<TSource, TKey>.LookupSlave.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: Lookup(Of TSource, TKey).LookupSlave.System.Collections.IEnumerable.GetEnumerator
  fullName.vb: NMF.Expressions.Linq.Lookup(Of TSource, TKey).LookupSlave.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
