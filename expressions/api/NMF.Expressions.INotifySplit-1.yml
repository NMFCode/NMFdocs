### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.INotifySplit`1
  commentId: T:NMF.Expressions.INotifySplit`1
  id: INotifySplit`1
  parent: NMF.Expressions
  children:
  - NMF.Expressions.INotifySplit`1.Empty
  - NMF.Expressions.INotifySplit`1.Head
  - NMF.Expressions.INotifySplit`1.Tail
  langs:
  - csharp
  - vb
  name: INotifySplit<T>
  nameWithType: INotifySplit<T>
  fullName: NMF.Expressions.INotifySplit<T>
  type: Interface
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/INotifyEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: INotifySplit
    path: src/Expressions/Expressions.Linq/Facade/INotifyEnumerable.cs
    startLine: 24
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions
  syntax:
    content: public interface INotifySplit<T>
    typeParameters:
    - id: T
    content.vb: Public Interface INotifySplit(Of T)
  nameWithType.vb: INotifySplit(Of T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: NMF.Expressions.INotifySplit(Of T)
  name.vb: INotifySplit(Of T)
- uid: NMF.Expressions.INotifySplit`1.Head
  commentId: P:NMF.Expressions.INotifySplit`1.Head
  id: Head
  parent: NMF.Expressions.INotifySplit`1
  langs:
  - csharp
  - vb
  name: Head
  nameWithType: INotifySplit<T>.Head
  fullName: NMF.Expressions.INotifySplit<T>.Head
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/INotifyEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Head
    path: src/Expressions/Expressions.Linq/Facade/INotifyEnumerable.cs
    startLine: 26
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions
  syntax:
    content: INotifyValue<T> Head { get; }
    parameters: []
    return:
      type: NMF.Expressions.INotifyValue{{T}}
    content.vb: ReadOnly Property Head As INotifyValue(Of T)
  overload: NMF.Expressions.INotifySplit`1.Head*
  nameWithType.vb: INotifySplit(Of T).Head
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NMF.Expressions.INotifySplit(Of T).Head
- uid: NMF.Expressions.INotifySplit`1.Empty
  commentId: P:NMF.Expressions.INotifySplit`1.Empty
  id: Empty
  parent: NMF.Expressions.INotifySplit`1
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: INotifySplit<T>.Empty
  fullName: NMF.Expressions.INotifySplit<T>.Empty
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/INotifyEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Empty
    path: src/Expressions/Expressions.Linq/Facade/INotifyEnumerable.cs
    startLine: 27
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions
  syntax:
    content: INotifyValue<bool> Empty { get; }
    parameters: []
    return:
      type: NMF.Expressions.INotifyValue{System.Boolean}
    content.vb: ReadOnly Property Empty As INotifyValue(Of Boolean)
  overload: NMF.Expressions.INotifySplit`1.Empty*
  nameWithType.vb: INotifySplit(Of T).Empty
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NMF.Expressions.INotifySplit(Of T).Empty
- uid: NMF.Expressions.INotifySplit`1.Tail
  commentId: P:NMF.Expressions.INotifySplit`1.Tail
  id: Tail
  parent: NMF.Expressions.INotifySplit`1
  langs:
  - csharp
  - vb
  name: Tail
  nameWithType: INotifySplit<T>.Tail
  fullName: NMF.Expressions.INotifySplit<T>.Tail
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Linq/Facade/INotifyEnumerable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Tail
    path: src/Expressions/Expressions.Linq/Facade/INotifyEnumerable.cs
    startLine: 28
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions
  syntax:
    content: INotifyEnumerable<T> Tail { get; }
    parameters: []
    return:
      type: NMF.Expressions.INotifyEnumerable{{T}}
    content.vb: ReadOnly Property Tail As INotifyEnumerable(Of T)
  overload: NMF.Expressions.INotifySplit`1.Tail*
  nameWithType.vb: INotifySplit(Of T).Tail
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NMF.Expressions.INotifySplit(Of T).Tail
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: NMF.Expressions.INotifySplit`1.Head*
  commentId: Overload:NMF.Expressions.INotifySplit`1.Head
  name: Head
  nameWithType: INotifySplit<T>.Head
  fullName: NMF.Expressions.INotifySplit<T>.Head
  nameWithType.vb: INotifySplit(Of T).Head
  fullName.vb: NMF.Expressions.INotifySplit(Of T).Head
- uid: NMF.Expressions.INotifyValue{{T}}
  commentId: T:NMF.Expressions.INotifyValue{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<T>
  nameWithType: INotifyValue<T>
  fullName: NMF.Expressions.INotifyValue<T>
  nameWithType.vb: INotifyValue(Of T)
  fullName.vb: NMF.Expressions.INotifyValue(Of T)
  name.vb: INotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue`1
  commentId: T:NMF.Expressions.INotifyValue`1
  name: INotifyValue<T>
  nameWithType: INotifyValue<T>
  fullName: NMF.Expressions.INotifyValue<T>
  nameWithType.vb: INotifyValue(Of T)
  fullName.vb: NMF.Expressions.INotifyValue(Of T)
  name.vb: INotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifySplit`1.Empty*
  commentId: Overload:NMF.Expressions.INotifySplit`1.Empty
  name: Empty
  nameWithType: INotifySplit<T>.Empty
  fullName: NMF.Expressions.INotifySplit<T>.Empty
  nameWithType.vb: INotifySplit(Of T).Empty
  fullName.vb: NMF.Expressions.INotifySplit(Of T).Empty
- uid: NMF.Expressions.INotifyValue{System.Boolean}
  commentId: T:NMF.Expressions.INotifyValue{System.Boolean}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<Boolean>
  nameWithType: INotifyValue<Boolean>
  fullName: NMF.Expressions.INotifyValue<System.Boolean>
  nameWithType.vb: INotifyValue(Of Boolean)
  fullName.vb: NMF.Expressions.INotifyValue(Of System.Boolean)
  name.vb: INotifyValue(Of Boolean)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifySplit`1.Tail*
  commentId: Overload:NMF.Expressions.INotifySplit`1.Tail
  name: Tail
  nameWithType: INotifySplit<T>.Tail
  fullName: NMF.Expressions.INotifySplit<T>.Tail
  nameWithType.vb: INotifySplit(Of T).Tail
  fullName.vb: NMF.Expressions.INotifySplit(Of T).Tail
- uid: NMF.Expressions.INotifyEnumerable{{T}}
  commentId: T:NMF.Expressions.INotifyEnumerable{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<T>
  nameWithType: INotifyEnumerable<T>
  fullName: NMF.Expressions.INotifyEnumerable<T>
  nameWithType.vb: INotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of T)
  name.vb: INotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable`1
  commentId: T:NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<T>
  nameWithType: INotifyEnumerable<T>
  fullName: NMF.Expressions.INotifyEnumerable<T>
  nameWithType.vb: INotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of T)
  name.vb: INotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
