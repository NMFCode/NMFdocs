### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.INotifySplit`1
  commentId: T:NMF.Expressions.INotifySplit`1
  id: INotifySplit`1
  parent: NMF.Expressions
  children:
  - NMF.Expressions.INotifySplit`1.Empty
  - NMF.Expressions.INotifySplit`1.Head
  - NMF.Expressions.INotifySplit`1.Tail
  langs:
  - csharp
  - vb
  name: INotifySplit<T>
  nameWithType: INotifySplit<T>
  fullName: NMF.Expressions.INotifySplit<T>
  type: Interface
  source:
    remote:
      path: src/Expressions/Expressions.Linq/Facade/INotifyEnumerable.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: INotifySplit
    path: src/Expressions/Expressions.Linq/Facade/INotifyEnumerable.cs
    startLine: 24
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions
  syntax:
    content: public interface INotifySplit<T>
    typeParameters:
    - id: T
    content.vb: Public Interface INotifySplit(Of T)
  extensionMethods:
  - NMF.Expressions.INotifySplit`1.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  nameWithType.vb: INotifySplit(Of T)
  fullName.vb: NMF.Expressions.INotifySplit(Of T)
  name.vb: INotifySplit(Of T)
- uid: NMF.Expressions.INotifySplit`1.Head
  commentId: P:NMF.Expressions.INotifySplit`1.Head
  id: Head
  parent: NMF.Expressions.INotifySplit`1
  langs:
  - csharp
  - vb
  name: Head
  nameWithType: INotifySplit<T>.Head
  fullName: NMF.Expressions.INotifySplit<T>.Head
  type: Property
  source:
    remote:
      path: src/Expressions/Expressions.Linq/Facade/INotifyEnumerable.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Head
    path: src/Expressions/Expressions.Linq/Facade/INotifyEnumerable.cs
    startLine: 26
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions
  syntax:
    content: INotifyValue<T> Head { get; }
    parameters: []
    return:
      type: NMF.Expressions.INotifyValue{{T}}
    content.vb: ReadOnly Property Head As INotifyValue(Of T)
  overload: NMF.Expressions.INotifySplit`1.Head*
  nameWithType.vb: INotifySplit(Of T).Head
  fullName.vb: NMF.Expressions.INotifySplit(Of T).Head
- uid: NMF.Expressions.INotifySplit`1.Empty
  commentId: P:NMF.Expressions.INotifySplit`1.Empty
  id: Empty
  parent: NMF.Expressions.INotifySplit`1
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: INotifySplit<T>.Empty
  fullName: NMF.Expressions.INotifySplit<T>.Empty
  type: Property
  source:
    remote:
      path: src/Expressions/Expressions.Linq/Facade/INotifyEnumerable.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Empty
    path: src/Expressions/Expressions.Linq/Facade/INotifyEnumerable.cs
    startLine: 27
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions
  syntax:
    content: INotifyValue<bool> Empty { get; }
    parameters: []
    return:
      type: NMF.Expressions.INotifyValue{System.Boolean}
    content.vb: ReadOnly Property Empty As INotifyValue(Of Boolean)
  overload: NMF.Expressions.INotifySplit`1.Empty*
  nameWithType.vb: INotifySplit(Of T).Empty
  fullName.vb: NMF.Expressions.INotifySplit(Of T).Empty
- uid: NMF.Expressions.INotifySplit`1.Tail
  commentId: P:NMF.Expressions.INotifySplit`1.Tail
  id: Tail
  parent: NMF.Expressions.INotifySplit`1
  langs:
  - csharp
  - vb
  name: Tail
  nameWithType: INotifySplit<T>.Tail
  fullName: NMF.Expressions.INotifySplit<T>.Tail
  type: Property
  source:
    remote:
      path: src/Expressions/Expressions.Linq/Facade/INotifyEnumerable.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Tail
    path: src/Expressions/Expressions.Linq/Facade/INotifyEnumerable.cs
    startLine: 28
  assemblies:
  - NMF.Expressions.Linq
  namespace: NMF.Expressions
  syntax:
    content: INotifyEnumerable<T> Tail { get; }
    parameters: []
    return:
      type: NMF.Expressions.INotifyEnumerable{{T}}
    content.vb: ReadOnly Property Tail As INotifyEnumerable(Of T)
  overload: NMF.Expressions.INotifySplit`1.Tail*
  nameWithType.vb: INotifySplit(Of T).Tail
  fullName.vb: NMF.Expressions.INotifySplit(Of T).Tail
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  href: NMF.html
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
- uid: NMF.Expressions.INotifySplit`1.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  name: AsOne<INotifySplit<T>>(INotifySplit<T>)
  nameWithType: ExpressionExtensions.AsOne<INotifySplit<T>>(INotifySplit<T>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<NMF.Expressions.INotifySplit<T>>(NMF.Expressions.INotifySplit<T>)
  nameWithType.vb: ExpressionExtensions.AsOne(Of INotifySplit(Of T))(INotifySplit(Of T))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of NMF.Expressions.INotifySplit(Of T))(NMF.Expressions.INotifySplit(Of T))
  name.vb: AsOne(Of INotifySplit(Of T))(INotifySplit(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.INotifySplit{`0})
    name: AsOne
    href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  - name: <
  - uid: NMF.Expressions.INotifySplit`1
    name: INotifySplit
    href: NMF.Expressions.INotifySplit-1.html
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifySplit`1
    name: INotifySplit
    href: NMF.Expressions.INotifySplit-1.html
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.INotifySplit{`0})
    name: AsOne
    href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.INotifySplit`1
    name: INotifySplit
    href: NMF.Expressions.INotifySplit-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifySplit`1
    name: INotifySplit
    href: NMF.Expressions.INotifySplit-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  name: AsOne<T>(T)
  nameWithType: ExpressionExtensions.AsOne<T>(T)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<T>(T)
  nameWithType.vb: ExpressionExtensions.AsOne(Of T)(T)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of T)(T)
  name.vb: AsOne(Of T)(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
    href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
    href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  parent: NMF.Expressions.Linq
  href: NMF.Expressions.Linq.ExpressionExtensions.html
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  href: NMF.html
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
    href: NMF.Expressions.Linq.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
    href: NMF.Expressions.Linq.html
- uid: NMF.Expressions.INotifySplit`1.Head*
  commentId: Overload:NMF.Expressions.INotifySplit`1.Head
  href: NMF.Expressions.INotifySplit-1.html#NMF_Expressions_INotifySplit_1_Head
  name: Head
  nameWithType: INotifySplit<T>.Head
  fullName: NMF.Expressions.INotifySplit<T>.Head
  nameWithType.vb: INotifySplit(Of T).Head
  fullName.vb: NMF.Expressions.INotifySplit(Of T).Head
- uid: NMF.Expressions.INotifyValue{{T}}
  commentId: T:NMF.Expressions.INotifyValue{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<T>
  nameWithType: INotifyValue<T>
  fullName: NMF.Expressions.INotifyValue<T>
  nameWithType.vb: INotifyValue(Of T)
  fullName.vb: NMF.Expressions.INotifyValue(Of T)
  name.vb: INotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifyValue`1
  commentId: T:NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<T>
  nameWithType: INotifyValue<T>
  fullName: NMF.Expressions.INotifyValue<T>
  nameWithType.vb: INotifyValue(Of T)
  fullName.vb: NMF.Expressions.INotifyValue(Of T)
  name.vb: INotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifySplit`1.Empty*
  commentId: Overload:NMF.Expressions.INotifySplit`1.Empty
  href: NMF.Expressions.INotifySplit-1.html#NMF_Expressions_INotifySplit_1_Empty
  name: Empty
  nameWithType: INotifySplit<T>.Empty
  fullName: NMF.Expressions.INotifySplit<T>.Empty
  nameWithType.vb: INotifySplit(Of T).Empty
  fullName.vb: NMF.Expressions.INotifySplit(Of T).Empty
- uid: NMF.Expressions.INotifyValue{System.Boolean}
  commentId: T:NMF.Expressions.INotifyValue{System.Boolean}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<bool>
  nameWithType: INotifyValue<bool>
  fullName: NMF.Expressions.INotifyValue<bool>
  nameWithType.vb: INotifyValue(Of Boolean)
  fullName.vb: NMF.Expressions.INotifyValue(Of Boolean)
  name.vb: INotifyValue(Of Boolean)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: NMF.Expressions.INotifySplit`1.Tail*
  commentId: Overload:NMF.Expressions.INotifySplit`1.Tail
  href: NMF.Expressions.INotifySplit-1.html#NMF_Expressions_INotifySplit_1_Tail
  name: Tail
  nameWithType: INotifySplit<T>.Tail
  fullName: NMF.Expressions.INotifySplit<T>.Tail
  nameWithType.vb: INotifySplit(Of T).Tail
  fullName.vb: NMF.Expressions.INotifySplit(Of T).Tail
- uid: NMF.Expressions.INotifyEnumerable{{T}}
  commentId: T:NMF.Expressions.INotifyEnumerable{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  href: NMF.Expressions.INotifyEnumerable-1.html
  name: INotifyEnumerable<T>
  nameWithType: INotifyEnumerable<T>
  fullName: NMF.Expressions.INotifyEnumerable<T>
  nameWithType.vb: INotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of T)
  name.vb: INotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    href: NMF.Expressions.INotifyEnumerable-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    href: NMF.Expressions.INotifyEnumerable-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifyEnumerable`1
  commentId: T:NMF.Expressions.INotifyEnumerable`1
  href: NMF.Expressions.INotifyEnumerable-1.html
  name: INotifyEnumerable<T>
  nameWithType: INotifyEnumerable<T>
  fullName: NMF.Expressions.INotifyEnumerable<T>
  nameWithType.vb: INotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of T)
  name.vb: INotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    href: NMF.Expressions.INotifyEnumerable-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    href: NMF.Expressions.INotifyEnumerable-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
