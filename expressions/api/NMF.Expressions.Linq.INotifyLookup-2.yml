### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.Linq.INotifyLookup`2
  commentId: T:NMF.Expressions.Linq.INotifyLookup`2
  id: INotifyLookup`2
  parent: NMF.Expressions.Linq
  children:
  - NMF.Expressions.Linq.INotifyLookup`2.Item(`1)
  - NMF.Expressions.Linq.INotifyLookup`2.Keys
  langs:
  - csharp
  - vb
  name: INotifyLookup<TSource, TKey>
  nameWithType: INotifyLookup<TSource, TKey>
  fullName: NMF.Expressions.Linq.INotifyLookup<TSource, TKey>
  type: Interface
  source:
    remote:
      path: Expressions/Expressions.Utilities/ILookupExpression.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: INotifyLookup
    path: src/Expressions/Expressions.Utilities/ILookupExpression.cs
    startLine: 37
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  summary: "\nDenotes an incremental lookup\n"
  example: []
  syntax:
    content: public interface INotifyLookup<TSource, TKey>
    typeParameters:
    - id: TSource
      description: The source type of the lookup
    - id: TKey
      description: The key type for which the elements should be looked up
    content.vb: Public Interface INotifyLookup(Of TSource, TKey)
  nameWithType.vb: INotifyLookup(Of TSource, TKey)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: NMF.Expressions.Linq.INotifyLookup(Of TSource, TKey)
  name.vb: INotifyLookup(Of TSource, TKey)
- uid: NMF.Expressions.Linq.INotifyLookup`2.Item(`1)
  commentId: P:NMF.Expressions.Linq.INotifyLookup`2.Item(`1)
  id: Item(`1)
  parent: NMF.Expressions.Linq.INotifyLookup`2
  langs:
  - csharp
  - vb
  name: Item[TKey]
  nameWithType: INotifyLookup<TSource, TKey>.Item[TKey]
  fullName: NMF.Expressions.Linq.INotifyLookup<TSource, TKey>.Item[TKey]
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/ILookupExpression.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: this[]
    path: src/Expressions/Expressions.Utilities/ILookupExpression.cs
    startLine: 44
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  summary: "\nGets the collection of elements for the given key\n"
  example: []
  syntax:
    content: INotifyEnumerable<TSource> this[TKey key] { get; }
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
    return:
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: A collection of associated elements
    content.vb: ReadOnly Property Item(key As TKey) As INotifyEnumerable(Of TSource)
  overload: NMF.Expressions.Linq.INotifyLookup`2.Item*
  nameWithType.vb: INotifyLookup(Of TSource, TKey).Item(TKey)
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.INotifyLookup(Of TSource, TKey).Item(TKey)
  name.vb: Item(TKey)
- uid: NMF.Expressions.Linq.INotifyLookup`2.Keys
  commentId: P:NMF.Expressions.Linq.INotifyLookup`2.Keys
  id: Keys
  parent: NMF.Expressions.Linq.INotifyLookup`2
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: INotifyLookup<TSource, TKey>.Keys
  fullName: NMF.Expressions.Linq.INotifyLookup<TSource, TKey>.Keys
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/ILookupExpression.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Keys
    path: src/Expressions/Expressions.Utilities/ILookupExpression.cs
    startLine: 49
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  summary: "\nGets a collection of keys\n"
  example: []
  syntax:
    content: INotifyEnumerable<TKey> Keys { get; }
    parameters: []
    return:
      type: NMF.Expressions.INotifyEnumerable{{TKey}}
    content.vb: ReadOnly Property Keys As INotifyEnumerable(Of TKey)
  overload: NMF.Expressions.Linq.INotifyLookup`2.Keys*
  nameWithType.vb: INotifyLookup(Of TSource, TKey).Keys
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.INotifyLookup(Of TSource, TKey).Keys
references:
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
- uid: NMF.Expressions.Linq.INotifyLookup`2.Item*
  commentId: Overload:NMF.Expressions.Linq.INotifyLookup`2.Item
  name: Item
  nameWithType: INotifyLookup<TSource, TKey>.Item
  fullName: NMF.Expressions.Linq.INotifyLookup<TSource, TKey>.Item
  nameWithType.vb: INotifyLookup(Of TSource, TKey).Item
  fullName.vb: NMF.Expressions.Linq.INotifyLookup(Of TSource, TKey).Item
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: NMF.Expressions.INotifyEnumerable{{TSource}}
  commentId: T:NMF.Expressions.INotifyEnumerable{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<TSource>
  nameWithType: INotifyEnumerable<TSource>
  fullName: NMF.Expressions.INotifyEnumerable<TSource>
  nameWithType.vb: INotifyEnumerable(Of TSource)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of TSource)
  name.vb: INotifyEnumerable(Of TSource)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: NMF.Expressions.INotifyEnumerable`1
  commentId: T:NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<T>
  nameWithType: INotifyEnumerable<T>
  fullName: NMF.Expressions.INotifyEnumerable<T>
  nameWithType.vb: INotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of T)
  name.vb: INotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: NMF.Expressions.Linq.INotifyLookup`2.Keys*
  commentId: Overload:NMF.Expressions.Linq.INotifyLookup`2.Keys
  name: Keys
  nameWithType: INotifyLookup<TSource, TKey>.Keys
  fullName: NMF.Expressions.Linq.INotifyLookup<TSource, TKey>.Keys
  nameWithType.vb: INotifyLookup(Of TSource, TKey).Keys
  fullName.vb: NMF.Expressions.Linq.INotifyLookup(Of TSource, TKey).Keys
- uid: NMF.Expressions.INotifyEnumerable{{TKey}}
  commentId: T:NMF.Expressions.INotifyEnumerable{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<TKey>
  nameWithType: INotifyEnumerable<TKey>
  fullName: NMF.Expressions.INotifyEnumerable<TKey>
  nameWithType.vb: INotifyEnumerable(Of TKey)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of TKey)
  name.vb: INotifyEnumerable(Of TKey)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
