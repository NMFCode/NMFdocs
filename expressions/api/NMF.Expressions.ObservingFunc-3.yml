### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.ObservingFunc`3
  commentId: T:NMF.Expressions.ObservingFunc`3
  id: ObservingFunc`3
  parent: NMF.Expressions
  children:
  - NMF.Expressions.ObservingFunc`3.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2}})
  - NMF.Expressions.ObservingFunc`3.Evaluate(`0,`1)
  - NMF.Expressions.ObservingFunc`3.EvaluatePartial(NMF.Expressions.INotifyValue{`0})
  - NMF.Expressions.ObservingFunc`3.EvaluatePartial(`0)
  - NMF.Expressions.ObservingFunc`3.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2}})
  - NMF.Expressions.ObservingFunc`3.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  - NMF.Expressions.ObservingFunc`3.InvokeReversable(`0,`1)
  - NMF.Expressions.ObservingFunc`3.IsReversable
  - NMF.Expressions.ObservingFunc`3.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  - NMF.Expressions.ObservingFunc`3.Observe(`0,`1)
  - NMF.Expressions.ObservingFunc`3.ObservePartial(NMF.Expressions.INotifyValue{`0})
  - NMF.Expressions.ObservingFunc`3.ToString
  - NMF.Expressions.ObservingFunc`3.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1,`2}})~NMF.Expressions.ObservingFunc{`0,`1,`2}
  langs:
  - csharp
  - vb
  name: ObservingFunc<T1, T2, TResult>
  nameWithType: ObservingFunc<T1, T2, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>
  type: Class
  source:
    id: ObservingFunc
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.Manual.cs
    startLine: 30
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Represents an observable expression with 2 input parameters
  example: []
  syntax:
    content: public class ObservingFunc<T1, T2, TResult>
    typeParameters:
    - id: T1
      description: The type of the input parameter 1
    - id: T2
      description: The type of the input parameter 2
    - id: TResult
      description: The result type of the observing func
    content.vb: Public Class ObservingFunc(Of T1, T2, TResult)
  inheritance:
  - System.Object
  derivedClasses:
  - NMF.Expressions.ReversableObservingFunc`3
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - NMF.Expressions.ObservingFunc`3.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult)
  name.vb: ObservingFunc(Of T1, T2, TResult)
- uid: NMF.Expressions.ObservingFunc`3.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2}})
  commentId: M:NMF.Expressions.ObservingFunc`3.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2}})
  id: '#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2}})'
  parent: NMF.Expressions.ObservingFunc`3
  langs:
  - csharp
  - vb
  name: ObservingFunc(Expression<Func<T1, T2, TResult>>)
  nameWithType: ObservingFunc<T1, T2, TResult>.ObservingFunc(Expression<Func<T1, T2, TResult>>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>.ObservingFunc(System.Linq.Expressions.Expression<System.Func<T1, T2, TResult>>)
  type: Constructor
  source:
    id: .ctor
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 199
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates a new observable expression for the given expression
  example: []
  syntax:
    content: public ObservingFunc(Expression<Func<T1, T2, TResult>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{TResult}}}
      description: The expression that is to be observed
    content.vb: Public Sub New(expression As Expression(Of Func(Of T1, T2, TResult)))
  overload: NMF.Expressions.ObservingFunc`3.#ctor*
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult).New(Expression(Of Func(Of T1, T2, TResult)))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult).New(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, TResult)))
  name.vb: New(Expression(Of Func(Of T1, T2, TResult)))
- uid: NMF.Expressions.ObservingFunc`3.Evaluate(`0,`1)
  commentId: M:NMF.Expressions.ObservingFunc`3.Evaluate(`0,`1)
  id: Evaluate(`0,`1)
  parent: NMF.Expressions.ObservingFunc`3
  langs:
  - csharp
  - vb
  name: Evaluate(T1, T2)
  nameWithType: ObservingFunc<T1, T2, TResult>.Evaluate(T1, T2)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>.Evaluate(T1, T2)
  type: Method
  source:
    id: Evaluate
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 254
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,>), "Observe", false)]

      public TResult Evaluate(T1 in1, T2 in2)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    return:
      type: '{TResult}'
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,)), "Observe", False)>

      Public Function Evaluate(in1 As T1, in2 As T2) As TResult
  overload: NMF.Expressions.ObservingFunc`3.Evaluate*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,TResult}
    - type: System.String
      value: Observe
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult).Evaluate(T1, T2)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult).Evaluate(T1, T2)
- uid: NMF.Expressions.ObservingFunc`3.Observe(`0,`1)
  commentId: M:NMF.Expressions.ObservingFunc`3.Observe(`0,`1)
  id: Observe(`0,`1)
  parent: NMF.Expressions.ObservingFunc`3
  langs:
  - csharp
  - vb
  name: Observe(T1, T2)
  nameWithType: ObservingFunc<T1, T2, TResult>.Observe(T1, T2)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>.Observe(T1, T2)
  type: Method
  source:
    id: Observe
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 266
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression
  example: []
  syntax:
    content: public INotifyValue<TResult> Observe(T1 in1, T2 in2)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    return:
      type: NMF.Expressions.INotifyValue{{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function Observe(in1 As T1, in2 As T2) As INotifyValue(Of TResult)
  overload: NMF.Expressions.ObservingFunc`3.Observe*
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult).Observe(T1, T2)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult).Observe(T1, T2)
- uid: NMF.Expressions.ObservingFunc`3.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  commentId: M:NMF.Expressions.ObservingFunc`3.Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  id: Observe(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  parent: NMF.Expressions.ObservingFunc`3
  langs:
  - csharp
  - vb
  name: Observe(INotifyValue<T1>, INotifyValue<T2>)
  nameWithType: ObservingFunc<T1, T2, TResult>.Observe(INotifyValue<T1>, INotifyValue<T2>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>.Observe(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>)
  type: Method
  source:
    id: Observe
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 283
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression
  example: []
  syntax:
    content: public INotifyValue<TResult> Observe(INotifyValue<T1> in1, INotifyValue<T2> in2)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    return:
      type: NMF.Expressions.INotifyValue{{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function Observe(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2)) As INotifyValue(Of TResult)
  overload: NMF.Expressions.ObservingFunc`3.Observe*
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult).Observe(INotifyValue(Of T1), INotifyValue(Of T2))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult).Observe(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2))
  name.vb: Observe(INotifyValue(Of T1), INotifyValue(Of T2))
- uid: NMF.Expressions.ObservingFunc`3.EvaluatePartial(`0)
  commentId: M:NMF.Expressions.ObservingFunc`3.EvaluatePartial(`0)
  id: EvaluatePartial(`0)
  parent: NMF.Expressions.ObservingFunc`3
  langs:
  - csharp
  - vb
  name: EvaluatePartial(T1)
  nameWithType: ObservingFunc<T1, T2, TResult>.EvaluatePartial(T1)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>.EvaluatePartial(T1)
  type: Method
  source:
    id: EvaluatePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 299
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,>), "ObservePartial", false)]

      public Func<T2, TResult> EvaluatePartial(T1 in1)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    return:
      type: System.Func{{T2},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,)), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As T1) As Func(Of T2, TResult)
  overload: NMF.Expressions.ObservingFunc`3.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult).EvaluatePartial(T1)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult).EvaluatePartial(T1)
- uid: NMF.Expressions.ObservingFunc`3.EvaluatePartial(NMF.Expressions.INotifyValue{`0})
  commentId: M:NMF.Expressions.ObservingFunc`3.EvaluatePartial(NMF.Expressions.INotifyValue{`0})
  id: EvaluatePartial(NMF.Expressions.INotifyValue{`0})
  parent: NMF.Expressions.ObservingFunc`3
  langs:
  - csharp
  - vb
  name: EvaluatePartial(INotifyValue<T1>)
  nameWithType: ObservingFunc<T1, T2, TResult>.EvaluatePartial(INotifyValue<T1>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>.EvaluatePartial(NMF.Expressions.INotifyValue<T1>)
  type: Method
  source:
    id: EvaluatePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 310
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: >-
      [ObservableProxy(typeof(ObservingFunc<,,>), "ObservePartial", false)]

      public Func<T2, TResult> EvaluatePartial(INotifyValue<T1> in1)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    return:
      type: System.Func{{T2},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: >-
      <ObservableProxy(GetType(ObservingFunc(Of ,,)), "ObservePartial", False)>

      Public Function EvaluatePartial(in1 As INotifyValue(Of T1)) As Func(Of T2, TResult)
  overload: NMF.Expressions.ObservingFunc`3.EvaluatePartial*
  attributes:
  - type: NMF.Expressions.ObservableProxyAttribute
    ctor: NMF.Expressions.ObservableProxyAttribute.#ctor(System.Type,System.String,System.Boolean)
    arguments:
    - type: System.Type
      value: NMF.Expressions.ObservingFunc{T1,T2,TResult}
    - type: System.String
      value: ObservePartial
    - type: System.Boolean
      value: false
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult).EvaluatePartial(INotifyValue(Of T1))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult).EvaluatePartial(NMF.Expressions.INotifyValue(Of T1))
  name.vb: EvaluatePartial(INotifyValue(Of T1))
- uid: NMF.Expressions.ObservingFunc`3.ObservePartial(NMF.Expressions.INotifyValue{`0})
  commentId: M:NMF.Expressions.ObservingFunc`3.ObservePartial(NMF.Expressions.INotifyValue{`0})
  id: ObservePartial(NMF.Expressions.INotifyValue{`0})
  parent: NMF.Expressions.ObservingFunc`3
  langs:
  - csharp
  - vb
  name: ObservePartial(INotifyValue<T1>)
  nameWithType: ObservingFunc<T1, T2, TResult>.ObservePartial(INotifyValue<T1>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>.ObservePartial(NMF.Expressions.INotifyValue<T1>)
  type: Method
  source:
    id: ObservePartial
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 321
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression partially
  example: []
  syntax:
    content: public ObservingFunc<T2, TResult> ObservePartial(INotifyValue<T1> in1)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    return:
      type: NMF.Expressions.ObservingFunc{{T2},{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Function ObservePartial(in1 As INotifyValue(Of T1)) As ObservingFunc(Of T2, TResult)
  overload: NMF.Expressions.ObservingFunc`3.ObservePartial*
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult).ObservePartial(INotifyValue(Of T1))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult).ObservePartial(NMF.Expressions.INotifyValue(Of T1))
  name.vb: ObservePartial(INotifyValue(Of T1))
- uid: NMF.Expressions.ObservingFunc`3.InvokeReversable(`0,`1)
  commentId: M:NMF.Expressions.ObservingFunc`3.InvokeReversable(`0,`1)
  id: InvokeReversable(`0,`1)
  parent: NMF.Expressions.ObservingFunc`3
  langs:
  - csharp
  - vb
  name: InvokeReversable(T1, T2)
  nameWithType: ObservingFunc<T1, T2, TResult>.InvokeReversable(T1, T2)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>.InvokeReversable(T1, T2)
  type: Method
  source:
    id: InvokeReversable
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 336
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression
  example: []
  syntax:
    content: public virtual INotifyReversableValue<TResult> InvokeReversable(T1 in1, T2 in2)
    parameters:
    - id: in1
      type: '{T1}'
      description: The input parameter 1
    - id: in2
      type: '{T2}'
      description: The input parameter 2
    return:
      type: NMF.Expressions.INotifyReversableValue{{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Overridable Function InvokeReversable(in1 As T1, in2 As T2) As INotifyReversableValue(Of TResult)
  overload: NMF.Expressions.ObservingFunc`3.InvokeReversable*
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult).InvokeReversable(T1, T2)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult).InvokeReversable(T1, T2)
- uid: NMF.Expressions.ObservingFunc`3.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  commentId: M:NMF.Expressions.ObservingFunc`3.InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  id: InvokeReversable(NMF.Expressions.INotifyValue{`0},NMF.Expressions.INotifyValue{`1})
  parent: NMF.Expressions.ObservingFunc`3
  langs:
  - csharp
  - vb
  name: InvokeReversable(INotifyValue<T1>, INotifyValue<T2>)
  nameWithType: ObservingFunc<T1, T2, TResult>.InvokeReversable(INotifyValue<T1>, INotifyValue<T2>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>.InvokeReversable(NMF.Expressions.INotifyValue<T1>, NMF.Expressions.INotifyValue<T2>)
  type: Method
  source:
    id: InvokeReversable
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 354
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Invokes the expression
  example: []
  syntax:
    content: public virtual INotifyReversableValue<TResult> InvokeReversable(INotifyValue<T1> in1, INotifyValue<T2> in2)
    parameters:
    - id: in1
      type: NMF.Expressions.INotifyValue{{T1}}
      description: The input parameter 1
    - id: in2
      type: NMF.Expressions.INotifyValue{{T2}}
      description: The input parameter 2
    return:
      type: NMF.Expressions.INotifyReversableValue{{TResult}}
      description: An observable value that keeps track of any changes
    content.vb: Public Overridable Function InvokeReversable(in1 As INotifyValue(Of T1), in2 As INotifyValue(Of T2)) As INotifyReversableValue(Of TResult)
  overload: NMF.Expressions.ObservingFunc`3.InvokeReversable*
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult).InvokeReversable(INotifyValue(Of T1), INotifyValue(Of T2))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult).InvokeReversable(NMF.Expressions.INotifyValue(Of T1), NMF.Expressions.INotifyValue(Of T2))
  name.vb: InvokeReversable(INotifyValue(Of T1), INotifyValue(Of T2))
- uid: NMF.Expressions.ObservingFunc`3.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1,`2}})~NMF.Expressions.ObservingFunc{`0,`1,`2}
  commentId: M:NMF.Expressions.ObservingFunc`3.op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1,`2}})~NMF.Expressions.ObservingFunc{`0,`1,`2}
  id: op_Implicit(System.Linq.Expressions.Expression{System.Func{`0,`1,`2}})~NMF.Expressions.ObservingFunc{`0,`1,`2}
  parent: NMF.Expressions.ObservingFunc`3
  langs:
  - csharp
  - vb
  name: implicit operator ObservingFunc<T1, T2, TResult>(Expression<Func<T1, T2, TResult>>)
  nameWithType: ObservingFunc<T1, T2, TResult>.implicit operator ObservingFunc<T1, T2, TResult>(Expression<Func<T1, T2, TResult>>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>.implicit operator NMF.Expressions.ObservingFunc<T1, T2, TResult>(System.Linq.Expressions.Expression<System.Func<T1, T2, TResult>>)
  type: Operator
  source:
    id: op_Implicit
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 372
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates a new observable expression
  example: []
  syntax:
    content: public static implicit operator ObservingFunc<T1, T2, TResult>(Expression<Func<T1, T2, TResult>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{TResult}}}
      description: The expression that is to be observed
    return:
      type: NMF.Expressions.ObservingFunc`3
      description: An observable function
    content.vb: Public Shared Widening Operator CType(expression As Expression(Of Func(Of T1, T2, TResult))) As ObservingFunc(Of T1, T2, TResult)
  overload: NMF.Expressions.ObservingFunc`3.op_Implicit*
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult).CType(Expression(Of Func(Of T1, T2, TResult)))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult).CType(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, TResult)))
  name.vb: CType(Expression(Of Func(Of T1, T2, TResult)))
- uid: NMF.Expressions.ObservingFunc`3.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2}})
  commentId: M:NMF.Expressions.ObservingFunc`3.FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2}})
  id: FromExpression(System.Linq.Expressions.Expression{System.Func{`0,`1,`2}})
  parent: NMF.Expressions.ObservingFunc`3
  langs:
  - csharp
  - vb
  name: FromExpression(Expression<Func<T1, T2, TResult>>)
  nameWithType: ObservingFunc<T1, T2, TResult>.FromExpression(Expression<Func<T1, T2, TResult>>)
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>.FromExpression(System.Linq.Expressions.Expression<System.Func<T1, T2, TResult>>)
  type: Method
  source:
    id: FromExpression
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 383
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Creates a new observable expression from the given expression
  example: []
  syntax:
    content: public static ObservingFunc<T1, T2, TResult> FromExpression(Expression<Func<T1, T2, TResult>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{TResult}}}
      description: The expression that is to be observed
    return:
      type: NMF.Expressions.ObservingFunc`3
      description: An observable function
    content.vb: Public Shared Function FromExpression(expression As Expression(Of Func(Of T1, T2, TResult))) As ObservingFunc(Of T1, T2, TResult)
  overload: NMF.Expressions.ObservingFunc`3.FromExpression*
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult).FromExpression(Expression(Of Func(Of T1, T2, TResult)))
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult).FromExpression(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, TResult)))
  name.vb: FromExpression(Expression(Of Func(Of T1, T2, TResult)))
- uid: NMF.Expressions.ObservingFunc`3.IsReversable
  commentId: P:NMF.Expressions.ObservingFunc`3.IsReversable
  id: IsReversable
  parent: NMF.Expressions.ObservingFunc`3
  langs:
  - csharp
  - vb
  name: IsReversable
  nameWithType: ObservingFunc<T1, T2, TResult>.IsReversable
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>.IsReversable
  type: Property
  source:
    id: IsReversable
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 392
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: Gets a value indicating whether this function can be reversed
  example: []
  syntax:
    content: public virtual bool IsReversable { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property IsReversable As Boolean
  overload: NMF.Expressions.ObservingFunc`3.IsReversable*
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult).IsReversable
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult).IsReversable
- uid: NMF.Expressions.ObservingFunc`3.ToString
  commentId: M:NMF.Expressions.ObservingFunc`3.ToString
  id: ToString
  parent: NMF.Expressions.ObservingFunc`3
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: ObservingFunc<T1, T2, TResult>.ToString()
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>.ToString()
  type: Method
  source:
    id: ToString
    path: C:\Users\hinkel\source\repos\NMFdocs\src\Expressions\Expressions\Public\FunctionTypes.cs
    startLine: 401
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString() As String
  overridden: System.Object.ToString
  overload: NMF.Expressions.ObservingFunc`3.ToString*
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult).ToString()
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult).ToString()
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  href: NMF.html
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: NMF.Expressions.ObservingFunc`3.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  name: AsOne<ObservingFunc<T1, T2, TResult>>(ObservingFunc<T1, T2, TResult>)
  nameWithType: ExpressionExtensions.AsOne<ObservingFunc<T1, T2, TResult>>(ObservingFunc<T1, T2, TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<NMF.Expressions.ObservingFunc<T1, T2, TResult>>(NMF.Expressions.ObservingFunc<T1, T2, TResult>)
  nameWithType.vb: ExpressionExtensions.AsOne(Of ObservingFunc(Of T1, T2, TResult))(ObservingFunc(Of T1, T2, TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of NMF.Expressions.ObservingFunc(Of T1, T2, TResult))(NMF.Expressions.ObservingFunc(Of T1, T2, TResult))
  name.vb: AsOne(Of ObservingFunc(Of T1, T2, TResult))(ObservingFunc(Of T1, T2, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.ObservingFunc{`0,`1,`2})
    name: AsOne
    href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  - name: <
  - uid: NMF.Expressions.ObservingFunc`3
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-3.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: (
  - uid: NMF.Expressions.ObservingFunc`3
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-3.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.ObservingFunc{`0,`1,`2})
    name: AsOne
    href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.ObservingFunc`3
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-3.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: (
  - uid: NMF.Expressions.ObservingFunc`3
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-3.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  name: AsOne<T>(T)
  nameWithType: ExpressionExtensions.AsOne<T>(T)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<T>(T)
  nameWithType.vb: ExpressionExtensions.AsOne(Of T)(T)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of T)(T)
  name.vb: AsOne(Of T)(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
    href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
    href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  parent: NMF.Expressions.Linq
  href: NMF.Expressions.Linq.ExpressionExtensions.html
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  href: NMF.html
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
    href: NMF.Expressions.Linq.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
    href: NMF.Expressions.Linq.html
- uid: NMF.Expressions.ObservingFunc`3.#ctor*
  commentId: Overload:NMF.Expressions.ObservingFunc`3.#ctor
  href: NMF.Expressions.ObservingFunc-3.html#NMF_Expressions_ObservingFunc_3__ctor_System_Linq_Expressions_Expression_System_Func__0__1__2___
  name: ObservingFunc
  nameWithType: ObservingFunc<T1, T2, TResult>.ObservingFunc
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>.ObservingFunc
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult).New
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult).New
  name.vb: New
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1,`2}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T1, T2, TResult>>
  nameWithType: Expression<Func<T1, T2, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, T2, TResult>>
  nameWithType.vb: Expression(Of Func(Of T1, T2, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, TResult))
  name.vb: Expression(Of Func(Of T1, T2, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - name: TDelegate
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
- uid: NMF.Expressions.ObservingFunc`3.Evaluate*
  commentId: Overload:NMF.Expressions.ObservingFunc`3.Evaluate
  href: NMF.Expressions.ObservingFunc-3.html#NMF_Expressions_ObservingFunc_3_Evaluate__0__1_
  name: Evaluate
  nameWithType: ObservingFunc<T1, T2, TResult>.Evaluate
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>.Evaluate
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult).Evaluate
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult).Evaluate
- uid: '{T1}'
  commentId: '!:T1'
  definition: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: '{T2}'
  commentId: '!:T2'
  definition: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: NMF.Expressions.ObservingFunc`3.Observe*
  commentId: Overload:NMF.Expressions.ObservingFunc`3.Observe
  href: NMF.Expressions.ObservingFunc-3.html#NMF_Expressions_ObservingFunc_3_Observe__0__1_
  name: Observe
  nameWithType: ObservingFunc<T1, T2, TResult>.Observe
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>.Observe
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult).Observe
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult).Observe
- uid: NMF.Expressions.INotifyValue{{TResult}}
  commentId: T:NMF.Expressions.INotifyValue{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<TResult>
  nameWithType: INotifyValue<TResult>
  fullName: NMF.Expressions.INotifyValue<TResult>
  nameWithType.vb: INotifyValue(Of TResult)
  fullName.vb: NMF.Expressions.INotifyValue(Of TResult)
  name.vb: INotifyValue(Of TResult)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.INotifyValue`1
  commentId: T:NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<T>
  nameWithType: INotifyValue<T>
  fullName: NMF.Expressions.INotifyValue<T>
  nameWithType.vb: INotifyValue(Of T)
  fullName.vb: NMF.Expressions.INotifyValue(Of T)
  name.vb: INotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifyValue{{T1}}
  commentId: T:NMF.Expressions.INotifyValue{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<T1>
  nameWithType: INotifyValue<T1>
  fullName: NMF.Expressions.INotifyValue<T1>
  nameWithType.vb: INotifyValue(Of T1)
  fullName.vb: NMF.Expressions.INotifyValue(Of T1)
  name.vb: INotifyValue(Of T1)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T1
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: )
- uid: NMF.Expressions.INotifyValue{{T2}}
  commentId: T:NMF.Expressions.INotifyValue{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<T2>
  nameWithType: INotifyValue<T2>
  fullName: NMF.Expressions.INotifyValue<T2>
  nameWithType.vb: INotifyValue(Of T2)
  fullName.vb: NMF.Expressions.INotifyValue(Of T2)
  name.vb: INotifyValue(Of T2)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T2
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T2
  - name: )
- uid: NMF.Expressions.ObservingFunc`3.EvaluatePartial*
  commentId: Overload:NMF.Expressions.ObservingFunc`3.EvaluatePartial
  href: NMF.Expressions.ObservingFunc-3.html#NMF_Expressions_ObservingFunc_3_EvaluatePartial__0_
  name: EvaluatePartial
  nameWithType: ObservingFunc<T1, T2, TResult>.EvaluatePartial
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>.EvaluatePartial
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult).EvaluatePartial
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult).EvaluatePartial
- uid: System.Func{{T2},{TResult}}
  commentId: T:System.Func{`1,`2}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T2, TResult>
  nameWithType: Func<T2, TResult>
  fullName: System.Func<T2, TResult>
  nameWithType.vb: Func(Of T2, TResult)
  fullName.vb: System.Func(Of T2, TResult)
  name.vb: Func(Of T2, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`3.ObservePartial*
  commentId: Overload:NMF.Expressions.ObservingFunc`3.ObservePartial
  href: NMF.Expressions.ObservingFunc-3.html#NMF_Expressions_ObservingFunc_3_ObservePartial_NMF_Expressions_INotifyValue__0__
  name: ObservePartial
  nameWithType: ObservingFunc<T1, T2, TResult>.ObservePartial
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>.ObservePartial
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult).ObservePartial
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult).ObservePartial
- uid: NMF.Expressions.ObservingFunc{{T2},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{`1,`2}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`2
  href: NMF.Expressions.ObservingFunc-2.html
  name: ObservingFunc<T2, TResult>
  nameWithType: ObservingFunc<T2, TResult>
  fullName: NMF.Expressions.ObservingFunc<T2, TResult>
  nameWithType.vb: ObservingFunc(Of T2, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T2, TResult)
  name.vb: ObservingFunc(Of T2, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-2.html
  - name: <
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`2
  commentId: T:NMF.Expressions.ObservingFunc`2
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-2.html
  name: ObservingFunc<T1, TResult>
  nameWithType: ObservingFunc<T1, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>
  nameWithType.vb: ObservingFunc(Of T1, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult)
  name.vb: ObservingFunc(Of T1, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-2.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`3.InvokeReversable*
  commentId: Overload:NMF.Expressions.ObservingFunc`3.InvokeReversable
  href: NMF.Expressions.ObservingFunc-3.html#NMF_Expressions_ObservingFunc_3_InvokeReversable__0__1_
  name: InvokeReversable
  nameWithType: ObservingFunc<T1, T2, TResult>.InvokeReversable
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>.InvokeReversable
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult).InvokeReversable
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult).InvokeReversable
- uid: NMF.Expressions.INotifyReversableValue{{TResult}}
  commentId: T:NMF.Expressions.INotifyReversableValue{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyReversableValue`1
  href: NMF.Expressions.INotifyReversableValue-1.html
  name: INotifyReversableValue<TResult>
  nameWithType: INotifyReversableValue<TResult>
  fullName: NMF.Expressions.INotifyReversableValue<TResult>
  nameWithType.vb: INotifyReversableValue(Of TResult)
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of TResult)
  name.vb: INotifyReversableValue(Of TResult)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    href: NMF.Expressions.INotifyReversableValue-1.html
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    href: NMF.Expressions.INotifyReversableValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.INotifyReversableValue`1
  commentId: T:NMF.Expressions.INotifyReversableValue`1
  href: NMF.Expressions.INotifyReversableValue-1.html
  name: INotifyReversableValue<T>
  nameWithType: INotifyReversableValue<T>
  fullName: NMF.Expressions.INotifyReversableValue<T>
  nameWithType.vb: INotifyReversableValue(Of T)
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of T)
  name.vb: INotifyReversableValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    href: NMF.Expressions.INotifyReversableValue-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    href: NMF.Expressions.INotifyReversableValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.ObservingFunc`3.op_Implicit*
  commentId: Overload:NMF.Expressions.ObservingFunc`3.op_Implicit
  name: implicit operator
  nameWithType: ObservingFunc<T1, T2, TResult>.implicit operator
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>.implicit operator
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult).CType
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult).CType
  name.vb: CType
  spec.csharp:
  - name: implicit
  - name: " "
  - name: operator
- uid: NMF.Expressions.ObservingFunc`3
  commentId: T:NMF.Expressions.ObservingFunc`3
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-3.html
  name: ObservingFunc<T1, T2, TResult>
  nameWithType: ObservingFunc<T1, T2, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult)
  name.vb: ObservingFunc(Of T1, T2, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`3
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-3.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`3
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-3.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`3.FromExpression*
  commentId: Overload:NMF.Expressions.ObservingFunc`3.FromExpression
  href: NMF.Expressions.ObservingFunc-3.html#NMF_Expressions_ObservingFunc_3_FromExpression_System_Linq_Expressions_Expression_System_Func__0__1__2___
  name: FromExpression
  nameWithType: ObservingFunc<T1, T2, TResult>.FromExpression
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>.FromExpression
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult).FromExpression
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult).FromExpression
- uid: NMF.Expressions.ObservingFunc`3.IsReversable*
  commentId: Overload:NMF.Expressions.ObservingFunc`3.IsReversable
  href: NMF.Expressions.ObservingFunc-3.html#NMF_Expressions_ObservingFunc_3_IsReversable
  name: IsReversable
  nameWithType: ObservingFunc<T1, T2, TResult>.IsReversable
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>.IsReversable
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult).IsReversable
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult).IsReversable
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: NMF.Expressions.ObservingFunc`3.ToString*
  commentId: Overload:NMF.Expressions.ObservingFunc`3.ToString
  href: NMF.Expressions.ObservingFunc-3.html#NMF_Expressions_ObservingFunc_3_ToString
  name: ToString
  nameWithType: ObservingFunc<T1, T2, TResult>.ToString
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>.ToString
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult).ToString
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult).ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
