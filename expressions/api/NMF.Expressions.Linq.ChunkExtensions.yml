### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.Linq.ChunkExtensions
  commentId: T:NMF.Expressions.Linq.ChunkExtensions
  id: ChunkExtensions
  parent: NMF.Expressions.Linq
  children:
  - NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  - NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  - NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  - NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  - NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  - NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  - NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  - NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  - NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  - NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  - NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  - NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  - NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  - NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  langs:
  - csharp
  - vb
  name: ChunkExtensions
  nameWithType: ChunkExtensions
  fullName: NMF.Expressions.Linq.ChunkExtensions
  type: Class
  source:
    remote:
      path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ChunkExtensions
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 9
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: Denotes chunking extensions
  example: []
  syntax:
    content: public static class ChunkExtensions
    content.vb: Public Module ChunkExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  id: ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ChunkExtensions
  langs:
  - csharp
  - vb
  name: ChunkIndexed<T, TResult>(IEnumerable<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(IEnumerable<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<(T, int)>, int, TResult>)
  type: Method
  source:
    remote:
      path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ChunkIndexed
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 20
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: Chunks the given collection and keeps the index of the elements in the original collection
  example: []
  syntax:
    content: public static IEnumerable<TResult> ChunkIndexed<T, TResult>(this IEnumerable<T> source, int chunkSize, Func<IEnumerableExpression<(T, int)>, int, TResult> resultSelector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The source collection
    - id: chunkSize
      type: System.Int32
      description: The size of the chunks
    - id: resultSelector
      type: System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{T},System.Int32}},System.Int32,{TResult}}
      description: A function that converts a collection of elements and the index of the chunk into a new chunk
    typeParameters:
    - id: T
      description: The type of elements
    - id: TResult
      description: The type of chunks
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: A collection of chunks
    content.vb: Public Shared Function ChunkIndexed(Of T, TResult)(source As IEnumerable(Of T), chunkSize As Integer, resultSelector As Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult)) As IEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed*
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(IEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(System.Collections.Generic.IEnumerable(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  name.vb: ChunkIndexed(Of T, TResult)(IEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult))
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  id: ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ChunkExtensions
  langs:
  - csharp
  - vb
  name: ChunkIndexed<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<(T, int)>, int, TResult>)
  type: Method
  source:
    remote:
      path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ChunkIndexed
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 70
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: Chunks the given collection and keeps the index of the elements in the original collection
  example: []
  syntax:
    content: public static IEnumerableExpression<TResult> ChunkIndexed<T, TResult>(this IEnumerableExpression<T> source, int chunkSize, Func<IEnumerableExpression<(T, int)>, int, TResult> resultSelector)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{T}}
      description: The source collection
    - id: chunkSize
      type: System.Int32
      description: The size of the chunks
    - id: resultSelector
      type: System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{T},System.Int32}},System.Int32,{TResult}}
      description: A function that converts a collection of elements and the index of the chunk into a new chunk
    typeParameters:
    - id: T
      description: The type of elements
    - id: TResult
      description: The type of chunks
    return:
      type: NMF.Expressions.IEnumerableExpression{{TResult}}
      description: A collection of chunks
    content.vb: Public Shared Function ChunkIndexed(Of T, TResult)(source As IEnumerableExpression(Of T), chunkSize As Integer, resultSelector As Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult)) As IEnumerableExpression(Of TResult)
  overload: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed*
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  name.vb: ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult))
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  id: ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ChunkExtensions
  langs:
  - csharp
  - vb
  name: ChunkIndexed<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.INotifyEnumerable<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<(T, int)>, int, TResult>)
  type: Method
  source:
    remote:
      path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ChunkIndexed
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 84
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: Chunks the given collection and keeps the index of the elements in the original collection
  example: []
  syntax:
    content: public static INotifyEnumerable<TResult> ChunkIndexed<T, TResult>(this INotifyEnumerable<T> source, int chunkSize, Func<IEnumerableExpression<(T, int)>, int, TResult> resultSelector)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{T}}
      description: The source collection
    - id: chunkSize
      type: System.Int32
      description: The size of the chunks
    - id: resultSelector
      type: System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{T},System.Int32}},System.Int32,{TResult}}
      description: A function that converts a collection of elements and the index of the chunk into a new chunk
    typeParameters:
    - id: T
      description: The type of elements
    - id: TResult
      description: The type of chunks
    return:
      type: NMF.Expressions.INotifyEnumerable{{TResult}}
      description: A collection of chunks
    content.vb: Public Shared Function ChunkIndexed(Of T, TResult)(source As INotifyEnumerable(Of T), chunkSize As Integer, resultSelector As Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult)) As INotifyEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed*
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.INotifyEnumerable(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  name.vb: ChunkIndexed(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult))
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  id: ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ChunkExtensions
  langs:
  - csharp
  - vb
  name: ChunkIndexed<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>, IChunkBalancingStrategyProvider<(T, int), TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>, IChunkBalancingStrategyProvider<(T, int), TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<(T, int)>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider<(T, int), TResult>)
  type: Method
  source:
    remote:
      path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ChunkIndexed
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 99
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: Chunks the given collection and keeps the index of the elements in the original collection
  example: []
  syntax:
    content: public static IEnumerableExpression<TResult> ChunkIndexed<T, TResult>(this IEnumerableExpression<T> source, int chunkSize, Func<IEnumerableExpression<(T, int)>, int, TResult> resultSelector, IChunkBalancingStrategyProvider<(T, int), TResult> balancingStrategyProvider)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{T}}
      description: The source collection
    - id: chunkSize
      type: System.Int32
      description: The size of the chunks
    - id: resultSelector
      type: System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{T},System.Int32}},System.Int32,{TResult}}
      description: A function that converts a collection of elements and the index of the chunk into a new chunk
    - id: balancingStrategyProvider
      type: NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{{T},System.Int32},{TResult}}
      description: A component that defines how to balance the chunk collection when items are added or deleted in the source collection
    typeParameters:
    - id: T
      description: The type of elements
    - id: TResult
      description: The type of chunks
    return:
      type: NMF.Expressions.IEnumerableExpression{{TResult}}
      description: A collection of chunks
    content.vb: Public Shared Function ChunkIndexed(Of T, TResult)(source As IEnumerableExpression(Of T), chunkSize As Integer, resultSelector As Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult), balancingStrategyProvider As IChunkBalancingStrategyProvider(Of (T, Integer), TResult)) As IEnumerableExpression(Of TResult)
  overload: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed*
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult), IChunkBalancingStrategyProvider(Of (T, Integer), TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (T, Integer)), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of (T, Integer), TResult))
  name.vb: ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult), IChunkBalancingStrategyProvider(Of (T, Integer), TResult))
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  id: ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ChunkExtensions
  langs:
  - csharp
  - vb
  name: ChunkIndexed<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>, IChunkBalancingStrategyProvider<(T, int), TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>, IChunkBalancingStrategyProvider<(T, int), TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.INotifyEnumerable<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<(T, int)>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider<(T, int), TResult>)
  type: Method
  source:
    remote:
      path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ChunkIndexed
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 114
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: Chunks the given collection and keeps the index of the elements in the original collection
  example: []
  syntax:
    content: public static INotifyEnumerable<TResult> ChunkIndexed<T, TResult>(this INotifyEnumerable<T> source, int chunkSize, Func<IEnumerableExpression<(T, int)>, int, TResult> resultSelector, IChunkBalancingStrategyProvider<(T, int), TResult> balancingStrategyProvider)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{T}}
      description: The source collection
    - id: chunkSize
      type: System.Int32
      description: The size of the chunks
    - id: resultSelector
      type: System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{T},System.Int32}},System.Int32,{TResult}}
      description: A function that converts a collection of elements and the index of the chunk into a new chunk
    - id: balancingStrategyProvider
      type: NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{{T},System.Int32},{TResult}}
      description: A component that defines how to balance the chunk collection when items are added or deleted in the source collection
    typeParameters:
    - id: T
      description: The type of elements
    - id: TResult
      description: The type of chunks
    return:
      type: NMF.Expressions.INotifyEnumerable{{TResult}}
      description: A collection of chunks
    content.vb: Public Shared Function ChunkIndexed(Of T, TResult)(source As INotifyEnumerable(Of T), chunkSize As Integer, resultSelector As Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult), balancingStrategyProvider As IChunkBalancingStrategyProvider(Of (T, Integer), TResult)) As INotifyEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed*
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult), IChunkBalancingStrategyProvider(Of (T, Integer), TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.INotifyEnumerable(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (T, Integer)), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of (T, Integer), TResult))
  name.vb: ChunkIndexed(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult), IChunkBalancingStrategyProvider(Of (T, Integer), TResult))
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  id: ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ChunkExtensions
  langs:
  - csharp
  - vb
  name: ChunkIndexed<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>, IChunkBalancingStrategyProvider)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>, IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<(T, int)>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  type: Method
  source:
    remote:
      path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ChunkIndexed
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 129
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: Chunks the given collection and keeps the index of the elements in the original collection
  example: []
  syntax:
    content: public static IEnumerableExpression<TResult> ChunkIndexed<T, TResult>(this IEnumerableExpression<T> source, int chunkSize, Func<IEnumerableExpression<(T, int)>, int, TResult> resultSelector, IChunkBalancingStrategyProvider balancingStrategyProvider)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{T}}
      description: The source collection
    - id: chunkSize
      type: System.Int32
      description: The size of the chunks
    - id: resultSelector
      type: System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{T},System.Int32}},System.Int32,{TResult}}
      description: A function that converts a collection of elements and the index of the chunk into a new chunk
    - id: balancingStrategyProvider
      type: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
      description: A component that defines how to balance the chunk collection when items are added or deleted in the source collection
    typeParameters:
    - id: T
      description: The type of elements
    - id: TResult
      description: The type of chunks
    return:
      type: NMF.Expressions.IEnumerableExpression{{TResult}}
      description: A collection of chunks
    content.vb: Public Shared Function ChunkIndexed(Of T, TResult)(source As IEnumerableExpression(Of T), chunkSize As Integer, resultSelector As Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult), balancingStrategyProvider As IChunkBalancingStrategyProvider) As IEnumerableExpression(Of TResult)
  overload: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed*
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult), IChunkBalancingStrategyProvider)
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (T, Integer)), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult), IChunkBalancingStrategyProvider)
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  id: ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ChunkExtensions
  langs:
  - csharp
  - vb
  name: ChunkIndexed<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>, IChunkBalancingStrategyProvider)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>, IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.INotifyEnumerable<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<(T, int)>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  type: Method
  source:
    remote:
      path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: ChunkIndexed
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 144
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: Chunks the given collection and keeps the index of the elements in the original collection
  example: []
  syntax:
    content: public static INotifyEnumerable<TResult> ChunkIndexed<T, TResult>(this INotifyEnumerable<T> source, int chunkSize, Func<IEnumerableExpression<(T, int)>, int, TResult> resultSelector, IChunkBalancingStrategyProvider balancingStrategyProvider)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{T}}
      description: The source collection
    - id: chunkSize
      type: System.Int32
      description: The size of the chunks
    - id: resultSelector
      type: System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{T},System.Int32}},System.Int32,{TResult}}
      description: A function that converts a collection of elements and the index of the chunk into a new chunk
    - id: balancingStrategyProvider
      type: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
      description: A component that defines how to balance the chunk collection when items are added or deleted in the source collection
    typeParameters:
    - id: T
      description: The type of elements
    - id: TResult
      description: The type of chunks
    return:
      type: NMF.Expressions.INotifyEnumerable{{TResult}}
      description: A collection of chunks
    content.vb: Public Shared Function ChunkIndexed(Of T, TResult)(source As INotifyEnumerable(Of T), chunkSize As Integer, resultSelector As Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult), balancingStrategyProvider As IChunkBalancingStrategyProvider) As INotifyEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed*
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult), IChunkBalancingStrategyProvider)
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.INotifyEnumerable(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (T, Integer)), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: ChunkIndexed(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult), IChunkBalancingStrategyProvider)
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  id: Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ChunkExtensions
  langs:
  - csharp
  - vb
  name: Chunk<T, TResult>(IEnumerable<T>, int, Func<IEnumerableExpression<T>, int, TResult>)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(IEnumerable<T>, int, Func<IEnumerableExpression<T>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<T>, int, TResult>)
  type: Method
  source:
    remote:
      path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Chunk
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 158
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: Chunks the given collection
  example: []
  syntax:
    content: public static IEnumerable<TResult> Chunk<T, TResult>(this IEnumerable<T> source, int chunkSize, Func<IEnumerableExpression<T>, int, TResult> resultSelector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The source collection
    - id: chunkSize
      type: System.Int32
      description: The size of the chunks
    - id: resultSelector
      type: System.Func{NMF.Expressions.IEnumerableExpression{{T}},System.Int32,{TResult}}
      description: A function that converts a collection of elements and the index of the chunk into a new chunk
    typeParameters:
    - id: T
      description: The type of elements
    - id: TResult
      description: The type of chunks
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: A collection of chunks
    content.vb: Public Shared Function Chunk(Of T, TResult)(source As IEnumerable(Of T), chunkSize As Integer, resultSelector As Func(Of IEnumerableExpression(Of T), Integer, TResult)) As IEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ChunkExtensions.Chunk*
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(IEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(System.Collections.Generic.IEnumerable(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), Integer, TResult))
  name.vb: Chunk(Of T, TResult)(IEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult))
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  id: Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ChunkExtensions
  langs:
  - csharp
  - vb
  name: Chunk<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<T>, int, TResult>)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<T>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<T>, int, TResult>)
  type: Method
  source:
    remote:
      path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Chunk
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 208
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: Chunks the given collection
  example: []
  syntax:
    content: public static IEnumerableExpression<TResult> Chunk<T, TResult>(this IEnumerableExpression<T> source, int chunkSize, Func<IEnumerableExpression<T>, int, TResult> resultSelector)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{T}}
      description: The source collection
    - id: chunkSize
      type: System.Int32
      description: The size of the chunks
    - id: resultSelector
      type: System.Func{NMF.Expressions.IEnumerableExpression{{T}},System.Int32,{TResult}}
      description: A function that converts a collection of elements and the index of the chunk into a new chunk
    typeParameters:
    - id: T
      description: The type of elements
    - id: TResult
      description: The type of chunks
    return:
      type: NMF.Expressions.IEnumerableExpression{{TResult}}
      description: A collection of chunks
    content.vb: Public Shared Function Chunk(Of T, TResult)(source As IEnumerableExpression(Of T), chunkSize As Integer, resultSelector As Func(Of IEnumerableExpression(Of T), Integer, TResult)) As IEnumerableExpression(Of TResult)
  overload: NMF.Expressions.Linq.ChunkExtensions.Chunk*
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), Integer, TResult))
  name.vb: Chunk(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult))
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  id: Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ChunkExtensions
  langs:
  - csharp
  - vb
  name: Chunk<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<T>, int, TResult>)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<T>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.INotifyEnumerable<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<T>, int, TResult>)
  type: Method
  source:
    remote:
      path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Chunk
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 222
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: Chunks the given collection
  example: []
  syntax:
    content: public static INotifyEnumerable<TResult> Chunk<T, TResult>(this INotifyEnumerable<T> source, int chunkSize, Func<IEnumerableExpression<T>, int, TResult> resultSelector)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{T}}
      description: The source collection
    - id: chunkSize
      type: System.Int32
      description: The size of the chunks
    - id: resultSelector
      type: System.Func{NMF.Expressions.IEnumerableExpression{{T}},System.Int32,{TResult}}
      description: A function that converts a collection of elements and the index of the chunk into a new chunk
    typeParameters:
    - id: T
      description: The type of elements
    - id: TResult
      description: The type of chunks
    return:
      type: NMF.Expressions.INotifyEnumerable{{TResult}}
      description: A collection of chunks
    content.vb: Public Shared Function Chunk(Of T, TResult)(source As INotifyEnumerable(Of T), chunkSize As Integer, resultSelector As Func(Of IEnumerableExpression(Of T), Integer, TResult)) As INotifyEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ChunkExtensions.Chunk*
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.INotifyEnumerable(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), Integer, TResult))
  name.vb: Chunk(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult))
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  id: Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ChunkExtensions
  langs:
  - csharp
  - vb
  name: Chunk<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<T>, int, TResult>, IChunkBalancingStrategyProvider<T, TResult>)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<T>, int, TResult>, IChunkBalancingStrategyProvider<T, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<T>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider<T, TResult>)
  type: Method
  source:
    remote:
      path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Chunk
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 237
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: Chunks the given collection
  example: []
  syntax:
    content: public static IEnumerableExpression<TResult> Chunk<T, TResult>(this IEnumerableExpression<T> source, int chunkSize, Func<IEnumerableExpression<T>, int, TResult> resultSelector, IChunkBalancingStrategyProvider<T, TResult> balancingStrategyProvider)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{T}}
      description: The source collection
    - id: chunkSize
      type: System.Int32
      description: The size of the chunks
    - id: resultSelector
      type: System.Func{NMF.Expressions.IEnumerableExpression{{T}},System.Int32,{TResult}}
      description: A function that converts a collection of elements and the index of the chunk into a new chunk
    - id: balancingStrategyProvider
      type: NMF.Expressions.Linq.IChunkBalancingStrategyProvider{{T},{TResult}}
      description: A component that defines how to balance the chunk collection when items are added or deleted in the source collection
    typeParameters:
    - id: T
      description: The type of elements
    - id: TResult
      description: The type of chunks
    return:
      type: NMF.Expressions.IEnumerableExpression{{TResult}}
      description: A collection of chunks
    content.vb: Public Shared Function Chunk(Of T, TResult)(source As IEnumerableExpression(Of T), chunkSize As Integer, resultSelector As Func(Of IEnumerableExpression(Of T), Integer, TResult), balancingStrategyProvider As IChunkBalancingStrategyProvider(Of T, TResult)) As IEnumerableExpression(Of TResult)
  overload: NMF.Expressions.Linq.ChunkExtensions.Chunk*
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult), IChunkBalancingStrategyProvider(Of T, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of T, TResult))
  name.vb: Chunk(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult), IChunkBalancingStrategyProvider(Of T, TResult))
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  id: Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ChunkExtensions
  langs:
  - csharp
  - vb
  name: Chunk<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<T>, int, TResult>, IChunkBalancingStrategyProvider<T, TResult>)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<T>, int, TResult>, IChunkBalancingStrategyProvider<T, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.INotifyEnumerable<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<T>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider<T, TResult>)
  type: Method
  source:
    remote:
      path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Chunk
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 252
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: Chunks the given collection
  example: []
  syntax:
    content: public static INotifyEnumerable<TResult> Chunk<T, TResult>(this INotifyEnumerable<T> source, int chunkSize, Func<IEnumerableExpression<T>, int, TResult> resultSelector, IChunkBalancingStrategyProvider<T, TResult> balancingStrategyProvider)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{T}}
      description: The source collection
    - id: chunkSize
      type: System.Int32
      description: The size of the chunks
    - id: resultSelector
      type: System.Func{NMF.Expressions.IEnumerableExpression{{T}},System.Int32,{TResult}}
      description: A function that converts a collection of elements and the index of the chunk into a new chunk
    - id: balancingStrategyProvider
      type: NMF.Expressions.Linq.IChunkBalancingStrategyProvider{{T},{TResult}}
      description: A component that defines how to balance the chunk collection when items are added or deleted in the source collection
    typeParameters:
    - id: T
      description: The type of elements
    - id: TResult
      description: The type of chunks
    return:
      type: NMF.Expressions.INotifyEnumerable{{TResult}}
      description: A collection of chunks
    content.vb: Public Shared Function Chunk(Of T, TResult)(source As INotifyEnumerable(Of T), chunkSize As Integer, resultSelector As Func(Of IEnumerableExpression(Of T), Integer, TResult), balancingStrategyProvider As IChunkBalancingStrategyProvider(Of T, TResult)) As INotifyEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ChunkExtensions.Chunk*
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult), IChunkBalancingStrategyProvider(Of T, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.INotifyEnumerable(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of T, TResult))
  name.vb: Chunk(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult), IChunkBalancingStrategyProvider(Of T, TResult))
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  id: Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ChunkExtensions
  langs:
  - csharp
  - vb
  name: Chunk<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<T>, int, TResult>, IChunkBalancingStrategyProvider)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(IEnumerableExpression<T>, int, Func<IEnumerableExpression<T>, int, TResult>, IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<T>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  type: Method
  source:
    remote:
      path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Chunk
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 267
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: Chunks the given collection
  example: []
  syntax:
    content: public static IEnumerableExpression<TResult> Chunk<T, TResult>(this IEnumerableExpression<T> source, int chunkSize, Func<IEnumerableExpression<T>, int, TResult> resultSelector, IChunkBalancingStrategyProvider balancingStrategyProvider)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{T}}
      description: The source collection
    - id: chunkSize
      type: System.Int32
      description: The size of the chunks
    - id: resultSelector
      type: System.Func{NMF.Expressions.IEnumerableExpression{{T}},System.Int32,{TResult}}
      description: A function that converts a collection of elements and the index of the chunk into a new chunk
    - id: balancingStrategyProvider
      type: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
      description: A component that defines how to balance the chunk collection when items are added or deleted in the source collection
    typeParameters:
    - id: T
      description: The type of elements
    - id: TResult
      description: The type of chunks
    return:
      type: NMF.Expressions.IEnumerableExpression{{TResult}}
      description: A collection of chunks
    content.vb: Public Shared Function Chunk(Of T, TResult)(source As IEnumerableExpression(Of T), chunkSize As Integer, resultSelector As Func(Of IEnumerableExpression(Of T), Integer, TResult), balancingStrategyProvider As IChunkBalancingStrategyProvider) As IEnumerableExpression(Of TResult)
  overload: NMF.Expressions.Linq.ChunkExtensions.Chunk*
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult), IChunkBalancingStrategyProvider)
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: Chunk(Of T, TResult)(IEnumerableExpression(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult), IChunkBalancingStrategyProvider)
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  id: Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ChunkExtensions
  langs:
  - csharp
  - vb
  name: Chunk<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<T>, int, TResult>, IChunkBalancingStrategyProvider)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<T>, int, TResult>, IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.INotifyEnumerable<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<T>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  type: Method
  source:
    remote:
      path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: git@github.com:NMFCode/NMFdocs.git
    id: Chunk
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 282
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: Chunks the given collection
  example: []
  syntax:
    content: public static INotifyEnumerable<TResult> Chunk<T, TResult>(this INotifyEnumerable<T> source, int chunkSize, Func<IEnumerableExpression<T>, int, TResult> resultSelector, IChunkBalancingStrategyProvider balancingStrategyProvider)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{T}}
      description: The source collection
    - id: chunkSize
      type: System.Int32
      description: The size of the chunks
    - id: resultSelector
      type: System.Func{NMF.Expressions.IEnumerableExpression{{T}},System.Int32,{TResult}}
      description: A function that converts a collection of elements and the index of the chunk into a new chunk
    - id: balancingStrategyProvider
      type: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
      description: A component that defines how to balance the chunk collection when items are added or deleted in the source collection
    typeParameters:
    - id: T
      description: The type of elements
    - id: TResult
      description: The type of chunks
    return:
      type: NMF.Expressions.INotifyEnumerable{{TResult}}
      description: A collection of chunks
    content.vb: Public Shared Function Chunk(Of T, TResult)(source As INotifyEnumerable(Of T), chunkSize As Integer, resultSelector As Func(Of IEnumerableExpression(Of T), Integer, TResult), balancingStrategyProvider As IChunkBalancingStrategyProvider) As INotifyEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ChunkExtensions.Chunk*
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult), IChunkBalancingStrategyProvider)
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.INotifyEnumerable(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: Chunk(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult), IChunkBalancingStrategyProvider)
references:
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  href: NMF.html
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
    href: NMF.Expressions.Linq.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
    href: NMF.Expressions.Linq.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed*
  commentId: Overload:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed
  href: NMF.Expressions.Linq.ChunkExtensions.html#NMF_Expressions_Linq_ChunkExtensions_ChunkIndexed__2_System_Collections_Generic_IEnumerable___0__System_Int32_System_Func_NMF_Expressions_IEnumerableExpression_System_ValueTuple___0_System_Int32___System_Int32___1__
  name: ChunkIndexed
  nameWithType: ChunkExtensions.ChunkIndexed
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{T},System.Int32}},System.Int32,{TResult}}
  commentId: T:System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<IEnumerableExpression<(T, int)>, int, TResult>
  nameWithType: Func<IEnumerableExpression<(T, int)>, int, TResult>
  fullName: System.Func<NMF.Expressions.IEnumerableExpression<(T, int)>, int, TResult>
  nameWithType.vb: Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult)
  fullName.vb: System.Func(Of NMF.Expressions.IEnumerableExpression(Of (T, Integer)), Integer, TResult)
  name.vb: Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    href: NMF.Expressions.IEnumerableExpression-1.html
  - name: <
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    href: NMF.Expressions.IEnumerableExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Collections.Generic.IEnumerable{{TResult}}
  commentId: T:System.Collections.Generic.IEnumerable{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<TResult>
  nameWithType: IEnumerable<TResult>
  fullName: System.Collections.Generic.IEnumerable<TResult>
  nameWithType.vb: IEnumerable(Of TResult)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TResult)
  name.vb: IEnumerable(Of TResult)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.IEnumerableExpression{{T}}
  commentId: T:NMF.Expressions.IEnumerableExpression{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  href: NMF.Expressions.IEnumerableExpression-1.html
  name: IEnumerableExpression<T>
  nameWithType: IEnumerableExpression<T>
  fullName: NMF.Expressions.IEnumerableExpression<T>
  nameWithType.vb: IEnumerableExpression(Of T)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T)
  name.vb: IEnumerableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    href: NMF.Expressions.IEnumerableExpression-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    href: NMF.Expressions.IEnumerableExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.IEnumerableExpression{{TResult}}
  commentId: T:NMF.Expressions.IEnumerableExpression{``1}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  href: NMF.Expressions.IEnumerableExpression-1.html
  name: IEnumerableExpression<TResult>
  nameWithType: IEnumerableExpression<TResult>
  fullName: NMF.Expressions.IEnumerableExpression<TResult>
  nameWithType.vb: IEnumerableExpression(Of TResult)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of TResult)
  name.vb: IEnumerableExpression(Of TResult)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    href: NMF.Expressions.IEnumerableExpression-1.html
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    href: NMF.Expressions.IEnumerableExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.IEnumerableExpression`1
  commentId: T:NMF.Expressions.IEnumerableExpression`1
  href: NMF.Expressions.IEnumerableExpression-1.html
  name: IEnumerableExpression<T>
  nameWithType: IEnumerableExpression<T>
  fullName: NMF.Expressions.IEnumerableExpression<T>
  nameWithType.vb: IEnumerableExpression(Of T)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T)
  name.vb: IEnumerableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    href: NMF.Expressions.IEnumerableExpression-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    href: NMF.Expressions.IEnumerableExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  href: NMF.html
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
- uid: NMF.Expressions.INotifyEnumerable{{T}}
  commentId: T:NMF.Expressions.INotifyEnumerable{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  href: NMF.Expressions.INotifyEnumerable-1.html
  name: INotifyEnumerable<T>
  nameWithType: INotifyEnumerable<T>
  fullName: NMF.Expressions.INotifyEnumerable<T>
  nameWithType.vb: INotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of T)
  name.vb: INotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    href: NMF.Expressions.INotifyEnumerable-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    href: NMF.Expressions.INotifyEnumerable-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{{TResult}}
  commentId: T:NMF.Expressions.INotifyEnumerable{``1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  href: NMF.Expressions.INotifyEnumerable-1.html
  name: INotifyEnumerable<TResult>
  nameWithType: INotifyEnumerable<TResult>
  fullName: NMF.Expressions.INotifyEnumerable<TResult>
  nameWithType.vb: INotifyEnumerable(Of TResult)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of TResult)
  name.vb: INotifyEnumerable(Of TResult)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    href: NMF.Expressions.INotifyEnumerable-1.html
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    href: NMF.Expressions.INotifyEnumerable-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.INotifyEnumerable`1
  commentId: T:NMF.Expressions.INotifyEnumerable`1
  href: NMF.Expressions.INotifyEnumerable-1.html
  name: INotifyEnumerable<T>
  nameWithType: INotifyEnumerable<T>
  fullName: NMF.Expressions.INotifyEnumerable<T>
  nameWithType.vb: INotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of T)
  name.vb: INotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    href: NMF.Expressions.INotifyEnumerable-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    href: NMF.Expressions.INotifyEnumerable-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{{T},System.Int32},{TResult}}
  commentId: T:NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1}
  parent: NMF.Expressions.Linq
  definition: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
  href: NMF.Expressions.Linq.IChunkBalancingStrategyProvider-2.html
  name: IChunkBalancingStrategyProvider<(T, int), TResult>
  nameWithType: IChunkBalancingStrategyProvider<(T, int), TResult>
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider<(T, int), TResult>
  nameWithType.vb: IChunkBalancingStrategyProvider(Of (T, Integer), TResult)
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of (T, Integer), TResult)
  name.vb: IChunkBalancingStrategyProvider(Of (T, Integer), TResult)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    href: NMF.Expressions.Linq.IChunkBalancingStrategyProvider-2.html
  - name: <
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    href: NMF.Expressions.Linq.IChunkBalancingStrategyProvider-2.html
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
  commentId: T:NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
  href: NMF.Expressions.Linq.IChunkBalancingStrategyProvider-2.html
  name: IChunkBalancingStrategyProvider<T, TChunk>
  nameWithType: IChunkBalancingStrategyProvider<T, TChunk>
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider<T, TChunk>
  nameWithType.vb: IChunkBalancingStrategyProvider(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of T, TChunk)
  name.vb: IChunkBalancingStrategyProvider(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    href: NMF.Expressions.Linq.IChunkBalancingStrategyProvider-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TChunk
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    href: NMF.Expressions.Linq.IChunkBalancingStrategyProvider-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TChunk
  - name: )
- uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  commentId: T:NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  parent: NMF.Expressions.Linq
  href: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.html
  name: IChunkBalancingStrategyProvider
  nameWithType: IChunkBalancingStrategyProvider
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk*
  commentId: Overload:NMF.Expressions.Linq.ChunkExtensions.Chunk
  href: NMF.Expressions.Linq.ChunkExtensions.html#NMF_Expressions_Linq_ChunkExtensions_Chunk__2_System_Collections_Generic_IEnumerable___0__System_Int32_System_Func_NMF_Expressions_IEnumerableExpression___0__System_Int32___1__
  name: Chunk
  nameWithType: ChunkExtensions.Chunk
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk
- uid: System.Func{NMF.Expressions.IEnumerableExpression{{T}},System.Int32,{TResult}}
  commentId: T:System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1}
  parent: System
  definition: System.Func`3
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: Func<IEnumerableExpression<T>, int, TResult>
  nameWithType: Func<IEnumerableExpression<T>, int, TResult>
  fullName: System.Func<NMF.Expressions.IEnumerableExpression<T>, int, TResult>
  nameWithType.vb: Func(Of IEnumerableExpression(Of T), Integer, TResult)
  fullName.vb: System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), Integer, TResult)
  name.vb: Func(Of IEnumerableExpression(Of T), Integer, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    href: NMF.Expressions.IEnumerableExpression-1.html
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    href: NMF.Expressions.IEnumerableExpression-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider{{T},{TResult}}
  commentId: T:NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1}
  parent: NMF.Expressions.Linq
  definition: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
  href: NMF.Expressions.Linq.IChunkBalancingStrategyProvider-2.html
  name: IChunkBalancingStrategyProvider<T, TResult>
  nameWithType: IChunkBalancingStrategyProvider<T, TResult>
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider<T, TResult>
  nameWithType.vb: IChunkBalancingStrategyProvider(Of T, TResult)
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of T, TResult)
  name.vb: IChunkBalancingStrategyProvider(Of T, TResult)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    href: NMF.Expressions.Linq.IChunkBalancingStrategyProvider-2.html
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    href: NMF.Expressions.Linq.IChunkBalancingStrategyProvider-2.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
