### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.Linq.ChunkExtensions
  commentId: T:NMF.Expressions.Linq.ChunkExtensions
  id: ChunkExtensions
  parent: NMF.Expressions.Linq
  children:
  - NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  - NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  - NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  - NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  - NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  - NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  - NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  - NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  - NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  - NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  - NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  - NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  - NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  - NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  langs:
  - csharp
  - vb
  name: ChunkExtensions
  nameWithType: ChunkExtensions
  fullName: NMF.Expressions.Linq.ChunkExtensions
  type: Class
  source:
    remote:
      path: Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ChunkExtensions
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 9
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nDenotes chunking extensions\n"
  example: []
  syntax:
    content: public static class ChunkExtensions
    content.vb: Public Module ChunkExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  id: ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ChunkExtensions
  langs:
  - csharp
  - vb
  name: ChunkIndexed<T, TResult>(IEnumerable<T>, Int32, Func<IEnumerableExpression<(T, Int32)>, Int32, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(IEnumerable<T>, Int32, Func<IEnumerableExpression<(T, Int32)>, Int32, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<System.ValueTuple<T, System.Int32>>, System.Int32, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ChunkIndexed
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 20
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nChunks the given collection and keeps the index of the elements in the original collection\n"
  example: []
  syntax:
    content: public static IEnumerable<TResult> ChunkIndexed<T, TResult>(this IEnumerable<T> source, int chunkSize, Func<IEnumerableExpression<(T, int)>, int, TResult> resultSelector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The source collection
    - id: chunkSize
      type: System.Int32
      description: The size of the chunks
    - id: resultSelector
      type: System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{T},System.Int32}},System.Int32,{TResult}}
      description: A function that converts a collection of elements and the index of the chunk into a new chunk
    typeParameters:
    - id: T
      description: The type of elements
    - id: TResult
      description: The type of chunks
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: A collection of chunks
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ChunkIndexed(Of T, TResult)(source As IEnumerable(Of T), chunkSize As Integer, resultSelector As Func(Of IEnumerableExpression(Of(T, Integer)), Integer, TResult)) As IEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed*
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(IEnumerable(Of T), Int32, Func(Of IEnumerableExpression(Of (T, Int32)), Int32, TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(System.Collections.Generic.IEnumerable(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of System.ValueTuple(Of T, System.Int32)), System.Int32, TResult))
  name.vb: ChunkIndexed(Of T, TResult)(IEnumerable(Of T), Int32, Func(Of IEnumerableExpression(Of (T, Int32)), Int32, TResult))
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  id: ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ChunkExtensions
  langs:
  - csharp
  - vb
  name: ChunkIndexed<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<(T, Int32)>, Int32, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<(T, Int32)>, Int32, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<System.ValueTuple<T, System.Int32>>, System.Int32, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ChunkIndexed
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 70
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nChunks the given collection and keeps the index of the elements in the original collection\n"
  example: []
  syntax:
    content: public static IEnumerableExpression<TResult> ChunkIndexed<T, TResult>(this IEnumerableExpression<T> source, int chunkSize, Func<IEnumerableExpression<(T, int)>, int, TResult> resultSelector)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{T}}
      description: The source collection
    - id: chunkSize
      type: System.Int32
      description: The size of the chunks
    - id: resultSelector
      type: System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{T},System.Int32}},System.Int32,{TResult}}
      description: A function that converts a collection of elements and the index of the chunk into a new chunk
    typeParameters:
    - id: T
      description: The type of elements
    - id: TResult
      description: The type of chunks
    return:
      type: NMF.Expressions.IEnumerableExpression{{TResult}}
      description: A collection of chunks
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ChunkIndexed(Of T, TResult)(source As IEnumerableExpression(Of T), chunkSize As Integer, resultSelector As Func(Of IEnumerableExpression(Of(T, Integer)), Integer, TResult)) As IEnumerableExpression(Of TResult)
  overload: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed*
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of (T, Int32)), Int32, TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of System.ValueTuple(Of T, System.Int32)), System.Int32, TResult))
  name.vb: ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of (T, Int32)), Int32, TResult))
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  id: ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ChunkExtensions
  langs:
  - csharp
  - vb
  name: ChunkIndexed<T, TResult>(INotifyEnumerable<T>, Int32, Func<IEnumerableExpression<(T, Int32)>, Int32, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(INotifyEnumerable<T>, Int32, Func<IEnumerableExpression<(T, Int32)>, Int32, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.INotifyEnumerable<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<System.ValueTuple<T, System.Int32>>, System.Int32, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ChunkIndexed
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 84
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nChunks the given collection and keeps the index of the elements in the original collection\n"
  example: []
  syntax:
    content: public static INotifyEnumerable<TResult> ChunkIndexed<T, TResult>(this INotifyEnumerable<T> source, int chunkSize, Func<IEnumerableExpression<(T, int)>, int, TResult> resultSelector)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{T}}
      description: The source collection
    - id: chunkSize
      type: System.Int32
      description: The size of the chunks
    - id: resultSelector
      type: System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{T},System.Int32}},System.Int32,{TResult}}
      description: A function that converts a collection of elements and the index of the chunk into a new chunk
    typeParameters:
    - id: T
      description: The type of elements
    - id: TResult
      description: The type of chunks
    return:
      type: NMF.Expressions.INotifyEnumerable{{TResult}}
      description: A collection of chunks
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ChunkIndexed(Of T, TResult)(source As INotifyEnumerable(Of T), chunkSize As Integer, resultSelector As Func(Of IEnumerableExpression(Of(T, Integer)), Integer, TResult)) As INotifyEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed*
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(INotifyEnumerable(Of T), Int32, Func(Of IEnumerableExpression(Of (T, Int32)), Int32, TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.INotifyEnumerable(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of System.ValueTuple(Of T, System.Int32)), System.Int32, TResult))
  name.vb: ChunkIndexed(Of T, TResult)(INotifyEnumerable(Of T), Int32, Func(Of IEnumerableExpression(Of (T, Int32)), Int32, TResult))
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  id: ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ChunkExtensions
  langs:
  - csharp
  - vb
  name: ChunkIndexed<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<(T, Int32)>, Int32, TResult>, IChunkBalancingStrategyProvider<(T, Int32), TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<(T, Int32)>, Int32, TResult>, IChunkBalancingStrategyProvider<(T, Int32), TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<System.ValueTuple<T, System.Int32>>, System.Int32, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider<System.ValueTuple<T, System.Int32>, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ChunkIndexed
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 99
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nChunks the given collection and keeps the index of the elements in the original collection\n"
  example: []
  syntax:
    content: public static IEnumerableExpression<TResult> ChunkIndexed<T, TResult>(this IEnumerableExpression<T> source, int chunkSize, Func<IEnumerableExpression<(T, int)>, int, TResult> resultSelector, IChunkBalancingStrategyProvider<(T, int), TResult> balancingStrategyProvider)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{T}}
      description: The source collection
    - id: chunkSize
      type: System.Int32
      description: The size of the chunks
    - id: resultSelector
      type: System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{T},System.Int32}},System.Int32,{TResult}}
      description: A function that converts a collection of elements and the index of the chunk into a new chunk
    - id: balancingStrategyProvider
      type: NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{{T},System.Int32},{TResult}}
      description: A component that defines how to balance the chunk collection when items are added or deleted in the source collection
    typeParameters:
    - id: T
      description: The type of elements
    - id: TResult
      description: The type of chunks
    return:
      type: NMF.Expressions.IEnumerableExpression{{TResult}}
      description: A collection of chunks
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ChunkIndexed(Of T, TResult)(source As IEnumerableExpression(Of T), chunkSize As Integer, resultSelector As Func(Of IEnumerableExpression(Of(T, Integer)), Integer, TResult), balancingStrategyProvider As IChunkBalancingStrategyProvider(Of(T, Integer), TResult)) As IEnumerableExpression(Of TResult)
  overload: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed*
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of (T, Int32)), Int32, TResult), IChunkBalancingStrategyProvider(Of (T, Int32), TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of System.ValueTuple(Of T, System.Int32)), System.Int32, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of System.ValueTuple(Of T, System.Int32), TResult))
  name.vb: ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of (T, Int32)), Int32, TResult), IChunkBalancingStrategyProvider(Of (T, Int32), TResult))
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  id: ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ChunkExtensions
  langs:
  - csharp
  - vb
  name: ChunkIndexed<T, TResult>(INotifyEnumerable<T>, Int32, Func<IEnumerableExpression<(T, Int32)>, Int32, TResult>, IChunkBalancingStrategyProvider<(T, Int32), TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(INotifyEnumerable<T>, Int32, Func<IEnumerableExpression<(T, Int32)>, Int32, TResult>, IChunkBalancingStrategyProvider<(T, Int32), TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.INotifyEnumerable<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<System.ValueTuple<T, System.Int32>>, System.Int32, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider<System.ValueTuple<T, System.Int32>, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ChunkIndexed
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 114
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nChunks the given collection and keeps the index of the elements in the original collection\n"
  example: []
  syntax:
    content: public static INotifyEnumerable<TResult> ChunkIndexed<T, TResult>(this INotifyEnumerable<T> source, int chunkSize, Func<IEnumerableExpression<(T, int)>, int, TResult> resultSelector, IChunkBalancingStrategyProvider<(T, int), TResult> balancingStrategyProvider)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{T}}
      description: The source collection
    - id: chunkSize
      type: System.Int32
      description: The size of the chunks
    - id: resultSelector
      type: System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{T},System.Int32}},System.Int32,{TResult}}
      description: A function that converts a collection of elements and the index of the chunk into a new chunk
    - id: balancingStrategyProvider
      type: NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{{T},System.Int32},{TResult}}
      description: A component that defines how to balance the chunk collection when items are added or deleted in the source collection
    typeParameters:
    - id: T
      description: The type of elements
    - id: TResult
      description: The type of chunks
    return:
      type: NMF.Expressions.INotifyEnumerable{{TResult}}
      description: A collection of chunks
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ChunkIndexed(Of T, TResult)(source As INotifyEnumerable(Of T), chunkSize As Integer, resultSelector As Func(Of IEnumerableExpression(Of(T, Integer)), Integer, TResult), balancingStrategyProvider As IChunkBalancingStrategyProvider(Of(T, Integer), TResult)) As INotifyEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed*
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(INotifyEnumerable(Of T), Int32, Func(Of IEnumerableExpression(Of (T, Int32)), Int32, TResult), IChunkBalancingStrategyProvider(Of (T, Int32), TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.INotifyEnumerable(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of System.ValueTuple(Of T, System.Int32)), System.Int32, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of System.ValueTuple(Of T, System.Int32), TResult))
  name.vb: ChunkIndexed(Of T, TResult)(INotifyEnumerable(Of T), Int32, Func(Of IEnumerableExpression(Of (T, Int32)), Int32, TResult), IChunkBalancingStrategyProvider(Of (T, Int32), TResult))
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  id: ChunkIndexed``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ChunkExtensions
  langs:
  - csharp
  - vb
  name: ChunkIndexed<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<(T, Int32)>, Int32, TResult>, IChunkBalancingStrategyProvider)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<(T, Int32)>, Int32, TResult>, IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<System.ValueTuple<T, System.Int32>>, System.Int32, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ChunkIndexed
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 129
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nChunks the given collection and keeps the index of the elements in the original collection\n"
  example: []
  syntax:
    content: public static IEnumerableExpression<TResult> ChunkIndexed<T, TResult>(this IEnumerableExpression<T> source, int chunkSize, Func<IEnumerableExpression<(T, int)>, int, TResult> resultSelector, IChunkBalancingStrategyProvider balancingStrategyProvider)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{T}}
      description: The source collection
    - id: chunkSize
      type: System.Int32
      description: The size of the chunks
    - id: resultSelector
      type: System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{T},System.Int32}},System.Int32,{TResult}}
      description: A function that converts a collection of elements and the index of the chunk into a new chunk
    - id: balancingStrategyProvider
      type: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
      description: A component that defines how to balance the chunk collection when items are added or deleted in the source collection
    typeParameters:
    - id: T
      description: The type of elements
    - id: TResult
      description: The type of chunks
    return:
      type: NMF.Expressions.IEnumerableExpression{{TResult}}
      description: A collection of chunks
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ChunkIndexed(Of T, TResult)(source As IEnumerableExpression(Of T), chunkSize As Integer, resultSelector As Func(Of IEnumerableExpression(Of(T, Integer)), Integer, TResult), balancingStrategyProvider As IChunkBalancingStrategyProvider) As IEnumerableExpression(Of TResult)
  overload: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed*
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of (T, Int32)), Int32, TResult), IChunkBalancingStrategyProvider)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of System.ValueTuple(Of T, System.Int32)), System.Int32, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: ChunkIndexed(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of (T, Int32)), Int32, TResult), IChunkBalancingStrategyProvider)
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  id: ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ChunkExtensions
  langs:
  - csharp
  - vb
  name: ChunkIndexed<T, TResult>(INotifyEnumerable<T>, Int32, Func<IEnumerableExpression<(T, Int32)>, Int32, TResult>, IChunkBalancingStrategyProvider)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(INotifyEnumerable<T>, Int32, Func<IEnumerableExpression<(T, Int32)>, Int32, TResult>, IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.INotifyEnumerable<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<System.ValueTuple<T, System.Int32>>, System.Int32, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ChunkIndexed
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 144
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nChunks the given collection and keeps the index of the elements in the original collection\n"
  example: []
  syntax:
    content: public static INotifyEnumerable<TResult> ChunkIndexed<T, TResult>(this INotifyEnumerable<T> source, int chunkSize, Func<IEnumerableExpression<(T, int)>, int, TResult> resultSelector, IChunkBalancingStrategyProvider balancingStrategyProvider)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{T}}
      description: The source collection
    - id: chunkSize
      type: System.Int32
      description: The size of the chunks
    - id: resultSelector
      type: System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{T},System.Int32}},System.Int32,{TResult}}
      description: A function that converts a collection of elements and the index of the chunk into a new chunk
    - id: balancingStrategyProvider
      type: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
      description: A component that defines how to balance the chunk collection when items are added or deleted in the source collection
    typeParameters:
    - id: T
      description: The type of elements
    - id: TResult
      description: The type of chunks
    return:
      type: NMF.Expressions.INotifyEnumerable{{TResult}}
      description: A collection of chunks
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ChunkIndexed(Of T, TResult)(source As INotifyEnumerable(Of T), chunkSize As Integer, resultSelector As Func(Of IEnumerableExpression(Of(T, Integer)), Integer, TResult), balancingStrategyProvider As IChunkBalancingStrategyProvider) As INotifyEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed*
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(INotifyEnumerable(Of T), Int32, Func(Of IEnumerableExpression(Of (T, Int32)), Int32, TResult), IChunkBalancingStrategyProvider)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.INotifyEnumerable(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of System.ValueTuple(Of T, System.Int32)), System.Int32, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: ChunkIndexed(Of T, TResult)(INotifyEnumerable(Of T), Int32, Func(Of IEnumerableExpression(Of (T, Int32)), Int32, TResult), IChunkBalancingStrategyProvider)
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  id: Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ChunkExtensions
  langs:
  - csharp
  - vb
  name: Chunk<T, TResult>(IEnumerable<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(IEnumerable<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(System.Collections.Generic.IEnumerable<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<T>, System.Int32, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Chunk
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 158
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nChunks the given collection\n"
  example: []
  syntax:
    content: public static IEnumerable<TResult> Chunk<T, TResult>(this IEnumerable<T> source, int chunkSize, Func<IEnumerableExpression<T>, int, TResult> resultSelector)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The source collection
    - id: chunkSize
      type: System.Int32
      description: The size of the chunks
    - id: resultSelector
      type: System.Func{NMF.Expressions.IEnumerableExpression{{T}},System.Int32,{TResult}}
      description: A function that converts a collection of elements and the index of the chunk into a new chunk
    typeParameters:
    - id: T
      description: The type of elements
    - id: TResult
      description: The type of chunks
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: A collection of chunks
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Chunk(Of T, TResult)(source As IEnumerable(Of T), chunkSize As Integer, resultSelector As Func(Of IEnumerableExpression(Of T), Integer, TResult)) As IEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ChunkExtensions.Chunk*
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(IEnumerable(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(System.Collections.Generic.IEnumerable(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), System.Int32, TResult))
  name.vb: Chunk(Of T, TResult)(IEnumerable(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult))
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  id: Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ChunkExtensions
  langs:
  - csharp
  - vb
  name: Chunk<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<T>, System.Int32, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Chunk
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 208
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nChunks the given collection\n"
  example: []
  syntax:
    content: public static IEnumerableExpression<TResult> Chunk<T, TResult>(this IEnumerableExpression<T> source, int chunkSize, Func<IEnumerableExpression<T>, int, TResult> resultSelector)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{T}}
      description: The source collection
    - id: chunkSize
      type: System.Int32
      description: The size of the chunks
    - id: resultSelector
      type: System.Func{NMF.Expressions.IEnumerableExpression{{T}},System.Int32,{TResult}}
      description: A function that converts a collection of elements and the index of the chunk into a new chunk
    typeParameters:
    - id: T
      description: The type of elements
    - id: TResult
      description: The type of chunks
    return:
      type: NMF.Expressions.IEnumerableExpression{{TResult}}
      description: A collection of chunks
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Chunk(Of T, TResult)(source As IEnumerableExpression(Of T), chunkSize As Integer, resultSelector As Func(Of IEnumerableExpression(Of T), Integer, TResult)) As IEnumerableExpression(Of TResult)
  overload: NMF.Expressions.Linq.ChunkExtensions.Chunk*
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), System.Int32, TResult))
  name.vb: Chunk(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult))
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  id: Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ChunkExtensions
  langs:
  - csharp
  - vb
  name: Chunk<T, TResult>(INotifyEnumerable<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(INotifyEnumerable<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.INotifyEnumerable<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<T>, System.Int32, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Chunk
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 222
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nChunks the given collection\n"
  example: []
  syntax:
    content: public static INotifyEnumerable<TResult> Chunk<T, TResult>(this INotifyEnumerable<T> source, int chunkSize, Func<IEnumerableExpression<T>, int, TResult> resultSelector)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{T}}
      description: The source collection
    - id: chunkSize
      type: System.Int32
      description: The size of the chunks
    - id: resultSelector
      type: System.Func{NMF.Expressions.IEnumerableExpression{{T}},System.Int32,{TResult}}
      description: A function that converts a collection of elements and the index of the chunk into a new chunk
    typeParameters:
    - id: T
      description: The type of elements
    - id: TResult
      description: The type of chunks
    return:
      type: NMF.Expressions.INotifyEnumerable{{TResult}}
      description: A collection of chunks
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Chunk(Of T, TResult)(source As INotifyEnumerable(Of T), chunkSize As Integer, resultSelector As Func(Of IEnumerableExpression(Of T), Integer, TResult)) As INotifyEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ChunkExtensions.Chunk*
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(INotifyEnumerable(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.INotifyEnumerable(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), System.Int32, TResult))
  name.vb: Chunk(Of T, TResult)(INotifyEnumerable(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult))
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  id: Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ChunkExtensions
  langs:
  - csharp
  - vb
  name: Chunk<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>, IChunkBalancingStrategyProvider<T, TResult>)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>, IChunkBalancingStrategyProvider<T, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<T>, System.Int32, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider<T, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Chunk
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 237
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nChunks the given collection\n"
  example: []
  syntax:
    content: public static IEnumerableExpression<TResult> Chunk<T, TResult>(this IEnumerableExpression<T> source, int chunkSize, Func<IEnumerableExpression<T>, int, TResult> resultSelector, IChunkBalancingStrategyProvider<T, TResult> balancingStrategyProvider)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{T}}
      description: The source collection
    - id: chunkSize
      type: System.Int32
      description: The size of the chunks
    - id: resultSelector
      type: System.Func{NMF.Expressions.IEnumerableExpression{{T}},System.Int32,{TResult}}
      description: A function that converts a collection of elements and the index of the chunk into a new chunk
    - id: balancingStrategyProvider
      type: NMF.Expressions.Linq.IChunkBalancingStrategyProvider{{T},{TResult}}
      description: A component that defines how to balance the chunk collection when items are added or deleted in the source collection
    typeParameters:
    - id: T
      description: The type of elements
    - id: TResult
      description: The type of chunks
    return:
      type: NMF.Expressions.IEnumerableExpression{{TResult}}
      description: A collection of chunks
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Chunk(Of T, TResult)(source As IEnumerableExpression(Of T), chunkSize As Integer, resultSelector As Func(Of IEnumerableExpression(Of T), Integer, TResult), balancingStrategyProvider As IChunkBalancingStrategyProvider(Of T, TResult)) As IEnumerableExpression(Of TResult)
  overload: NMF.Expressions.Linq.ChunkExtensions.Chunk*
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult), IChunkBalancingStrategyProvider(Of T, TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), System.Int32, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of T, TResult))
  name.vb: Chunk(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult), IChunkBalancingStrategyProvider(Of T, TResult))
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  id: Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ChunkExtensions
  langs:
  - csharp
  - vb
  name: Chunk<T, TResult>(INotifyEnumerable<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>, IChunkBalancingStrategyProvider<T, TResult>)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(INotifyEnumerable<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>, IChunkBalancingStrategyProvider<T, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.INotifyEnumerable<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<T>, System.Int32, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider<T, TResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Chunk
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 252
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nChunks the given collection\n"
  example: []
  syntax:
    content: public static INotifyEnumerable<TResult> Chunk<T, TResult>(this INotifyEnumerable<T> source, int chunkSize, Func<IEnumerableExpression<T>, int, TResult> resultSelector, IChunkBalancingStrategyProvider<T, TResult> balancingStrategyProvider)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{T}}
      description: The source collection
    - id: chunkSize
      type: System.Int32
      description: The size of the chunks
    - id: resultSelector
      type: System.Func{NMF.Expressions.IEnumerableExpression{{T}},System.Int32,{TResult}}
      description: A function that converts a collection of elements and the index of the chunk into a new chunk
    - id: balancingStrategyProvider
      type: NMF.Expressions.Linq.IChunkBalancingStrategyProvider{{T},{TResult}}
      description: A component that defines how to balance the chunk collection when items are added or deleted in the source collection
    typeParameters:
    - id: T
      description: The type of elements
    - id: TResult
      description: The type of chunks
    return:
      type: NMF.Expressions.INotifyEnumerable{{TResult}}
      description: A collection of chunks
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Chunk(Of T, TResult)(source As INotifyEnumerable(Of T), chunkSize As Integer, resultSelector As Func(Of IEnumerableExpression(Of T), Integer, TResult), balancingStrategyProvider As IChunkBalancingStrategyProvider(Of T, TResult)) As INotifyEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ChunkExtensions.Chunk*
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(INotifyEnumerable(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult), IChunkBalancingStrategyProvider(Of T, TResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.INotifyEnumerable(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), System.Int32, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of T, TResult))
  name.vb: Chunk(Of T, TResult)(INotifyEnumerable(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult), IChunkBalancingStrategyProvider(Of T, TResult))
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  id: Chunk``2(NMF.Expressions.IEnumerableExpression{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ChunkExtensions
  langs:
  - csharp
  - vb
  name: Chunk<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>, IChunkBalancingStrategyProvider)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(IEnumerableExpression<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>, IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.IEnumerableExpression<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<T>, System.Int32, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Chunk
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 267
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nChunks the given collection\n"
  example: []
  syntax:
    content: public static IEnumerableExpression<TResult> Chunk<T, TResult>(this IEnumerableExpression<T> source, int chunkSize, Func<IEnumerableExpression<T>, int, TResult> resultSelector, IChunkBalancingStrategyProvider balancingStrategyProvider)
    parameters:
    - id: source
      type: NMF.Expressions.IEnumerableExpression{{T}}
      description: The source collection
    - id: chunkSize
      type: System.Int32
      description: The size of the chunks
    - id: resultSelector
      type: System.Func{NMF.Expressions.IEnumerableExpression{{T}},System.Int32,{TResult}}
      description: A function that converts a collection of elements and the index of the chunk into a new chunk
    - id: balancingStrategyProvider
      type: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
      description: A component that defines how to balance the chunk collection when items are added or deleted in the source collection
    typeParameters:
    - id: T
      description: The type of elements
    - id: TResult
      description: The type of chunks
    return:
      type: NMF.Expressions.IEnumerableExpression{{TResult}}
      description: A collection of chunks
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Chunk(Of T, TResult)(source As IEnumerableExpression(Of T), chunkSize As Integer, resultSelector As Func(Of IEnumerableExpression(Of T), Integer, TResult), balancingStrategyProvider As IChunkBalancingStrategyProvider) As IEnumerableExpression(Of TResult)
  overload: NMF.Expressions.Linq.ChunkExtensions.Chunk*
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult), IChunkBalancingStrategyProvider)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.IEnumerableExpression(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), System.Int32, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: Chunk(Of T, TResult)(IEnumerableExpression(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult), IChunkBalancingStrategyProvider)
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  id: Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  isExtensionMethod: true
  parent: NMF.Expressions.Linq.ChunkExtensions
  langs:
  - csharp
  - vb
  name: Chunk<T, TResult>(INotifyEnumerable<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>, IChunkBalancingStrategyProvider)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(INotifyEnumerable<T>, Int32, Func<IEnumerableExpression<T>, Int32, TResult>, IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.INotifyEnumerable<T>, System.Int32, System.Func<NMF.Expressions.IEnumerableExpression<T>, System.Int32, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Chunk/ChunkExtensions.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Chunk
    path: src/Expressions/Expressions.Chunk/ChunkExtensions.cs
    startLine: 282
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nChunks the given collection\n"
  example: []
  syntax:
    content: public static INotifyEnumerable<TResult> Chunk<T, TResult>(this INotifyEnumerable<T> source, int chunkSize, Func<IEnumerableExpression<T>, int, TResult> resultSelector, IChunkBalancingStrategyProvider balancingStrategyProvider)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{T}}
      description: The source collection
    - id: chunkSize
      type: System.Int32
      description: The size of the chunks
    - id: resultSelector
      type: System.Func{NMF.Expressions.IEnumerableExpression{{T}},System.Int32,{TResult}}
      description: A function that converts a collection of elements and the index of the chunk into a new chunk
    - id: balancingStrategyProvider
      type: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
      description: A component that defines how to balance the chunk collection when items are added or deleted in the source collection
    typeParameters:
    - id: T
      description: The type of elements
    - id: TResult
      description: The type of chunks
    return:
      type: NMF.Expressions.INotifyEnumerable{{TResult}}
      description: A collection of chunks
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Chunk(Of T, TResult)(source As INotifyEnumerable(Of T), chunkSize As Integer, resultSelector As Func(Of IEnumerableExpression(Of T), Integer, TResult), balancingStrategyProvider As IChunkBalancingStrategyProvider) As INotifyEnumerable(Of TResult)
  overload: NMF.Expressions.Linq.ChunkExtensions.Chunk*
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(INotifyEnumerable(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult), IChunkBalancingStrategyProvider)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.INotifyEnumerable(Of T), System.Int32, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), System.Int32, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: Chunk(Of T, TResult)(INotifyEnumerable(Of T), Int32, Func(Of IEnumerableExpression(Of T), Int32, TResult), IChunkBalancingStrategyProvider)
references:
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed*
  commentId: Overload:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed
  name: ChunkIndexed
  nameWithType: ChunkExtensions.ChunkIndexed
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{T},System.Int32}},System.Int32,{TResult}}
  commentId: T:System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1}
  parent: System
  definition: System.Func`3
  name: Func<IEnumerableExpression<ValueTuple<T, Int32>>, Int32, TResult>
  nameWithType: Func<IEnumerableExpression<ValueTuple<T, Int32>>, Int32, TResult>
  fullName: System.Func<NMF.Expressions.IEnumerableExpression<System.ValueTuple<T, System.Int32>>, System.Int32, TResult>
  nameWithType.vb: Func(Of IEnumerableExpression(Of ValueTuple(Of T, Int32)), Int32, TResult)
  fullName.vb: System.Func(Of NMF.Expressions.IEnumerableExpression(Of System.ValueTuple(Of T, System.Int32)), System.Int32, TResult)
  name.vb: Func(Of IEnumerableExpression(Of ValueTuple(Of T, Int32)), Int32, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TResult}}
  commentId: T:System.Collections.Generic.IEnumerable{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TResult>
  nameWithType: IEnumerable<TResult>
  fullName: System.Collections.Generic.IEnumerable<TResult>
  nameWithType.vb: IEnumerable(Of TResult)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TResult)
  name.vb: IEnumerable(Of TResult)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullName.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{{T}}
  commentId: T:NMF.Expressions.IEnumerableExpression{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<T>
  nameWithType: IEnumerableExpression<T>
  fullName: NMF.Expressions.IEnumerableExpression<T>
  nameWithType.vb: IEnumerableExpression(Of T)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T)
  name.vb: IEnumerableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression{{TResult}}
  commentId: T:NMF.Expressions.IEnumerableExpression{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<TResult>
  nameWithType: IEnumerableExpression<TResult>
  fullName: NMF.Expressions.IEnumerableExpression<TResult>
  nameWithType.vb: IEnumerableExpression(Of TResult)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of TResult)
  name.vb: IEnumerableExpression(Of TResult)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IEnumerableExpression`1
  commentId: T:NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<T>
  nameWithType: IEnumerableExpression<T>
  fullName: NMF.Expressions.IEnumerableExpression<T>
  nameWithType.vb: IEnumerableExpression(Of T)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T)
  name.vb: IEnumerableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: NMF.Expressions.INotifyEnumerable{{T}}
  commentId: T:NMF.Expressions.INotifyEnumerable{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<T>
  nameWithType: INotifyEnumerable<T>
  fullName: NMF.Expressions.INotifyEnumerable<T>
  nameWithType.vb: INotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of T)
  name.vb: INotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable{{TResult}}
  commentId: T:NMF.Expressions.INotifyEnumerable{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<TResult>
  nameWithType: INotifyEnumerable<TResult>
  fullName: NMF.Expressions.INotifyEnumerable<TResult>
  nameWithType.vb: INotifyEnumerable(Of TResult)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of TResult)
  name.vb: INotifyEnumerable(Of TResult)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyEnumerable`1
  commentId: T:NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<T>
  nameWithType: INotifyEnumerable<T>
  fullName: NMF.Expressions.INotifyEnumerable<T>
  nameWithType.vb: INotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of T)
  name.vb: INotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
    nameWithType: INotifyEnumerable
    fullName: NMF.Expressions.INotifyEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{{T},System.Int32},{TResult}}
  commentId: T:NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1}
  parent: NMF.Expressions.Linq
  definition: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
  name: IChunkBalancingStrategyProvider<ValueTuple<T, Int32>, TResult>
  nameWithType: IChunkBalancingStrategyProvider<ValueTuple<T, Int32>, TResult>
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider<System.ValueTuple<T, System.Int32>, TResult>
  nameWithType.vb: IChunkBalancingStrategyProvider(Of ValueTuple(Of T, Int32), TResult)
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of System.ValueTuple(Of T, System.Int32), TResult)
  name.vb: IChunkBalancingStrategyProvider(Of ValueTuple(Of T, Int32), TResult)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
  commentId: T:NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
  name: IChunkBalancingStrategyProvider<T, TChunk>
  nameWithType: IChunkBalancingStrategyProvider<T, TChunk>
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider<T, TChunk>
  nameWithType.vb: IChunkBalancingStrategyProvider(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of T, TChunk)
  name.vb: IChunkBalancingStrategyProvider(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  commentId: T:NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  parent: NMF.Expressions.Linq
  name: IChunkBalancingStrategyProvider
  nameWithType: IChunkBalancingStrategyProvider
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk*
  commentId: Overload:NMF.Expressions.Linq.ChunkExtensions.Chunk
  name: Chunk
  nameWithType: ChunkExtensions.Chunk
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk
- uid: System.Func{NMF.Expressions.IEnumerableExpression{{T}},System.Int32,{TResult}}
  commentId: T:System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1}
  parent: System
  definition: System.Func`3
  name: Func<IEnumerableExpression<T>, Int32, TResult>
  nameWithType: Func<IEnumerableExpression<T>, Int32, TResult>
  fullName: System.Func<NMF.Expressions.IEnumerableExpression<T>, System.Int32, TResult>
  nameWithType.vb: Func(Of IEnumerableExpression(Of T), Int32, TResult)
  fullName.vb: System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), System.Int32, TResult)
  name.vb: Func(Of IEnumerableExpression(Of T), Int32, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
    nameWithType: IEnumerableExpression
    fullName: NMF.Expressions.IEnumerableExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider{{T},{TResult}}
  commentId: T:NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1}
  parent: NMF.Expressions.Linq
  definition: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
  name: IChunkBalancingStrategyProvider<T, TResult>
  nameWithType: IChunkBalancingStrategyProvider<T, TResult>
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider<T, TResult>
  nameWithType.vb: IChunkBalancingStrategyProvider(Of T, TResult)
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of T, TResult)
  name.vb: IChunkBalancingStrategyProvider(Of T, TResult)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
