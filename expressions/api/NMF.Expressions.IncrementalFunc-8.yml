### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.IncrementalFunc`8
  commentId: T:NMF.Expressions.IncrementalFunc`8
  id: IncrementalFunc`8
  parent: NMF.Expressions
  children:
  - NMF.Expressions.IncrementalFunc`8.#ctor(NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5,`6,`7})
  - NMF.Expressions.IncrementalFunc`8.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7}})
  - NMF.Expressions.IncrementalFunc`8.GetNotifyValue(`0,`1,`2,`3,`4,`5,`6)
  - NMF.Expressions.IncrementalFunc`8.Item(`0,`1,`2,`3,`4,`5,`6)
  langs:
  - csharp
  - vb
  name: IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType: IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  type: Class
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalFunc.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IncrementalFunc
    path: src/Expressions/Expressions.Utilities/IncrementalFunc.cs
    startLine: 689
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nRepresents a function class which tracks any calls\n"
  example: []
  syntax:
    content: public class IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
    typeParameters:
    - id: T1
      description: The type of argument 1
    - id: T2
      description: The type of argument 2
    - id: T3
      description: The type of argument 3
    - id: T4
      description: The type of argument 4
    - id: T5
      description: The type of argument 5
    - id: T6
      description: The type of argument 6
    - id: T7
      description: The type of argument 7
    - id: TResult
      description: The result type
    content.vb: Public Class IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  name.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
- uid: NMF.Expressions.IncrementalFunc`8.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7}})
  commentId: M:NMF.Expressions.IncrementalFunc`8.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7}})
  id: '#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7}})'
  parent: NMF.Expressions.IncrementalFunc`8
  langs:
  - csharp
  - vb
  name: IncrementalFunc(Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>>)
  nameWithType: IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>.IncrementalFunc(Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>>)
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>.IncrementalFunc(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, TResult>>)
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalFunc.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions.Utilities/IncrementalFunc.cs
    startLine: 750
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nCreate an incremental func for the given expression\n"
  example: []
  syntax:
    content: public IncrementalFunc(Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>> func)
    parameters:
    - id: func
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{TResult}}}
      description: The expression that should be observed
    content.vb: Public Sub New(func As Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)))
  overload: NMF.Expressions.IncrementalFunc`8.#ctor*
  nameWithType.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult).IncrementalFunc(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult).IncrementalFunc(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)))
  name.vb: IncrementalFunc(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)))
- uid: NMF.Expressions.IncrementalFunc`8.#ctor(NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5,`6,`7})
  commentId: M:NMF.Expressions.IncrementalFunc`8.#ctor(NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5,`6,`7})
  id: '#ctor(NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5,`6,`7})'
  parent: NMF.Expressions.IncrementalFunc`8
  langs:
  - csharp
  - vb
  name: IncrementalFunc(ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>)
  nameWithType: IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>.IncrementalFunc(ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>)
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>.IncrementalFunc(NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>)
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalFunc.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions.Utilities/IncrementalFunc.cs
    startLine: 756
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nCreate an incremental func for the given expression\n"
  example: []
  syntax:
    content: public IncrementalFunc(ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult> func)
    parameters:
    - id: func
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{TResult}}
      description: The expression that should be observed
    content.vb: Public Sub New(func As ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult))
  overload: NMF.Expressions.IncrementalFunc`8.#ctor*
  nameWithType.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult).IncrementalFunc(ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult).IncrementalFunc(NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult))
  name.vb: IncrementalFunc(ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult))
- uid: NMF.Expressions.IncrementalFunc`8.Item(`0,`1,`2,`3,`4,`5,`6)
  commentId: P:NMF.Expressions.IncrementalFunc`8.Item(`0,`1,`2,`3,`4,`5,`6)
  id: Item(`0,`1,`2,`3,`4,`5,`6)
  parent: NMF.Expressions.IncrementalFunc`8
  langs:
  - csharp
  - vb
  name: Item[T1, T2, T3, T4, T5, T6, T7]
  nameWithType: IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>.Item[T1, T2, T3, T4, T5, T6, T7]
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>.Item[T1, T2, T3, T4, T5, T6, T7]
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalFunc.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: this[]
    path: src/Expressions/Expressions.Utilities/IncrementalFunc.cs
    startLine: 772
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nGets the function value for the given arguments\n"
  example: []
  syntax:
    content: >-
      public TResult this[T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7]

      {
          [ObservableProxy(typeof(IncrementalFunc<, >), "GetNotifyValue", false)]
          get;
      }
    parameters:
    - id: arg1
      type: '{T1}'
      description: Input argument 1
    - id: arg2
      type: '{T2}'
      description: Input argument 2
    - id: arg3
      type: '{T3}'
      description: Input argument 3
    - id: arg4
      type: '{T4}'
      description: Input argument 4
    - id: arg5
      type: '{T5}'
      description: Input argument 5
    - id: arg6
      type: '{T6}'
      description: Input argument 6
    - id: arg7
      type: '{T7}'
      description: Input argument 7
    return:
      type: '{TResult}'
      description: The current function valur for the provided argument
    content.vb: Public ReadOnly Property Item(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5, arg6 As T6, arg7 As T7) As TResult
  overload: NMF.Expressions.IncrementalFunc`8.Item*
  nameWithType.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult).Item(T1, T2, T3, T4, T5, T6, T7)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult).Item(T1, T2, T3, T4, T5, T6, T7)
  name.vb: Item(T1, T2, T3, T4, T5, T6, T7)
- uid: NMF.Expressions.IncrementalFunc`8.GetNotifyValue(`0,`1,`2,`3,`4,`5,`6)
  commentId: M:NMF.Expressions.IncrementalFunc`8.GetNotifyValue(`0,`1,`2,`3,`4,`5,`6)
  id: GetNotifyValue(`0,`1,`2,`3,`4,`5,`6)
  parent: NMF.Expressions.IncrementalFunc`8
  langs:
  - csharp
  - vb
  name: GetNotifyValue(T1, T2, T3, T4, T5, T6, T7)
  nameWithType: IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>.GetNotifyValue(T1, T2, T3, T4, T5, T6, T7)
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>.GetNotifyValue(T1, T2, T3, T4, T5, T6, T7)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalFunc.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetNotifyValue
    path: src/Expressions/Expressions.Utilities/IncrementalFunc.cs
    startLine: 799
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nGets the changable value for the given arguments\n"
  example: []
  syntax:
    content: public INotifyValue<TResult> GetNotifyValue(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
    parameters:
    - id: arg1
      type: '{T1}'
      description: Argument 1
    - id: arg2
      type: '{T2}'
      description: Argument 2
    - id: arg3
      type: '{T3}'
      description: Argument 3
    - id: arg4
      type: '{T4}'
      description: Argument 4
    - id: arg5
      type: '{T5}'
      description: Argument 5
    - id: arg6
      type: '{T6}'
      description: Argument 6
    - id: arg7
      type: '{T7}'
      description: Argument 7
    return:
      type: NMF.Expressions.INotifyValue{{TResult}}
      description: A changable function value
    content.vb: Public Function GetNotifyValue(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5, arg6 As T6, arg7 As T7) As INotifyValue(Of TResult)
  overload: NMF.Expressions.IncrementalFunc`8.GetNotifyValue*
  nameWithType.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult).GetNotifyValue(T1, T2, T3, T4, T5, T6, T7)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult).GetNotifyValue(T1, T2, T3, T4, T5, T6, T7)
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.IncrementalFunc`8.#ctor*
  commentId: Overload:NMF.Expressions.IncrementalFunc`8.#ctor
  name: IncrementalFunc
  nameWithType: IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>.IncrementalFunc
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>.IncrementalFunc
  nameWithType.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult).IncrementalFunc
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult).IncrementalFunc
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>>
  nameWithType: Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, TResult>>
  nameWithType.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, TResult))
  name.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`8
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`8
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{``0,``1,``2,``3,``4,``5,``6,``7}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`8
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`8
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`8
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`8
  commentId: T:NMF.Expressions.ObservingFunc`8
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`8
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`8
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T6
    nameWithType: T6
    fullName: T6
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T7
    nameWithType: T7
    fullName: T7
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.IncrementalFunc`8.Item*
  commentId: Overload:NMF.Expressions.IncrementalFunc`8.Item
  name: Item
  nameWithType: IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>.Item
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>.Item
  nameWithType.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult).Item
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult).Item
- uid: '{T1}'
  commentId: '!:T1'
  definition: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: '{T2}'
  commentId: '!:T2'
  definition: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: '{T3}'
  commentId: '!:T3'
  definition: T3
  name: T3
  nameWithType: T3
  fullName: T3
- uid: '{T4}'
  commentId: '!:T4'
  definition: T4
  name: T4
  nameWithType: T4
  fullName: T4
- uid: '{T5}'
  commentId: '!:T5'
  definition: T5
  name: T5
  nameWithType: T5
  fullName: T5
- uid: '{T6}'
  commentId: '!:T6'
  definition: T6
  name: T6
  nameWithType: T6
  fullName: T6
- uid: '{T7}'
  commentId: '!:T7'
  definition: T7
  name: T7
  nameWithType: T7
  fullName: T7
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: T3
  name: T3
  nameWithType: T3
  fullName: T3
- uid: T4
  name: T4
  nameWithType: T4
  fullName: T4
- uid: T5
  name: T5
  nameWithType: T5
  fullName: T5
- uid: T6
  name: T6
  nameWithType: T6
  fullName: T6
- uid: T7
  name: T7
  nameWithType: T7
  fullName: T7
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: NMF.Expressions.IncrementalFunc`8.GetNotifyValue*
  commentId: Overload:NMF.Expressions.IncrementalFunc`8.GetNotifyValue
  name: GetNotifyValue
  nameWithType: IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>.GetNotifyValue
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>.GetNotifyValue
  nameWithType.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult).GetNotifyValue
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult).GetNotifyValue
- uid: NMF.Expressions.INotifyValue{{TResult}}
  commentId: T:NMF.Expressions.INotifyValue{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<TResult>
  nameWithType: INotifyValue<TResult>
  fullName: NMF.Expressions.INotifyValue<TResult>
  nameWithType.vb: INotifyValue(Of TResult)
  fullName.vb: NMF.Expressions.INotifyValue(Of TResult)
  name.vb: INotifyValue(Of TResult)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue`1
  commentId: T:NMF.Expressions.INotifyValue`1
  name: INotifyValue<T>
  nameWithType: INotifyValue<T>
  fullName: NMF.Expressions.INotifyValue<T>
  nameWithType.vb: INotifyValue(Of T)
  fullName.vb: NMF.Expressions.INotifyValue(Of T)
  name.vb: INotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
