### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.IncrementalFunc`8
  commentId: T:NMF.Expressions.IncrementalFunc`8
  id: IncrementalFunc`8
  parent: NMF.Expressions
  children:
  - NMF.Expressions.IncrementalFunc`8.#ctor(NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5,`6,`7})
  - NMF.Expressions.IncrementalFunc`8.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7}})
  - NMF.Expressions.IncrementalFunc`8.GetNotifyValue(`0,`1,`2,`3,`4,`5,`6)
  - NMF.Expressions.IncrementalFunc`8.Item(`0,`1,`2,`3,`4,`5,`6)
  langs:
  - csharp
  - vb
  name: IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType: IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  type: Class
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalFunc.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IncrementalFunc
    path: src/Expressions/Expressions.Utilities/IncrementalFunc.cs
    startLine: 689
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: Represents a function class which tracks any calls
  example: []
  syntax:
    content: public class IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
    typeParameters:
    - id: T1
      description: The type of argument 1
    - id: T2
      description: The type of argument 2
    - id: T3
      description: The type of argument 3
    - id: T4
      description: The type of argument 4
    - id: T5
      description: The type of argument 5
    - id: T6
      description: The type of argument 6
    - id: T7
      description: The type of argument 7
    - id: TResult
      description: The result type
    content.vb: Public Class IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - NMF.Expressions.IncrementalFunc`8.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  nameWithType.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  name.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
- uid: NMF.Expressions.IncrementalFunc`8.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7}})
  commentId: M:NMF.Expressions.IncrementalFunc`8.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7}})
  id: '#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7}})'
  parent: NMF.Expressions.IncrementalFunc`8
  langs:
  - csharp
  - vb
  name: IncrementalFunc(Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>>)
  nameWithType: IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>.IncrementalFunc(Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>>)
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>.IncrementalFunc(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, TResult>>)
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalFunc.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions.Utilities/IncrementalFunc.cs
    startLine: 750
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: Create an incremental func for the given expression
  example: []
  syntax:
    content: public IncrementalFunc(Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>> func)
    parameters:
    - id: func
      type: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{TResult}}}
      description: The expression that should be observed
    content.vb: Public Sub New(func As Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)))
  overload: NMF.Expressions.IncrementalFunc`8.#ctor*
  nameWithType.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult).New(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)))
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult).New(System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)))
  name.vb: New(Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, TResult)))
- uid: NMF.Expressions.IncrementalFunc`8.#ctor(NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5,`6,`7})
  commentId: M:NMF.Expressions.IncrementalFunc`8.#ctor(NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5,`6,`7})
  id: '#ctor(NMF.Expressions.ObservingFunc{`0,`1,`2,`3,`4,`5,`6,`7})'
  parent: NMF.Expressions.IncrementalFunc`8
  langs:
  - csharp
  - vb
  name: IncrementalFunc(ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>)
  nameWithType: IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>.IncrementalFunc(ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>)
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>.IncrementalFunc(NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>)
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalFunc.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions.Utilities/IncrementalFunc.cs
    startLine: 756
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: Create an incremental func for the given expression
  example: []
  syntax:
    content: public IncrementalFunc(ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult> func)
    parameters:
    - id: func
      type: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{TResult}}
      description: The expression that should be observed
    content.vb: Public Sub New(func As ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult))
  overload: NMF.Expressions.IncrementalFunc`8.#ctor*
  nameWithType.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult).New(ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult))
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult).New(NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult))
  name.vb: New(ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult))
- uid: NMF.Expressions.IncrementalFunc`8.Item(`0,`1,`2,`3,`4,`5,`6)
  commentId: P:NMF.Expressions.IncrementalFunc`8.Item(`0,`1,`2,`3,`4,`5,`6)
  id: Item(`0,`1,`2,`3,`4,`5,`6)
  parent: NMF.Expressions.IncrementalFunc`8
  langs:
  - csharp
  - vb
  name: this[T1, T2, T3, T4, T5, T6, T7]
  nameWithType: IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>.this[T1, T2, T3, T4, T5, T6, T7]
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>.this[T1, T2, T3, T4, T5, T6, T7]
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalFunc.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: this[]
    path: src/Expressions/Expressions.Utilities/IncrementalFunc.cs
    startLine: 772
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: Gets the function value for the given arguments
  example: []
  syntax:
    content: public TResult this[T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7] { get; }
    parameters:
    - id: arg1
      type: '{T1}'
      description: Input argument 1
    - id: arg2
      type: '{T2}'
      description: Input argument 2
    - id: arg3
      type: '{T3}'
      description: Input argument 3
    - id: arg4
      type: '{T4}'
      description: Input argument 4
    - id: arg5
      type: '{T5}'
      description: Input argument 5
    - id: arg6
      type: '{T6}'
      description: Input argument 6
    - id: arg7
      type: '{T7}'
      description: Input argument 7
    return:
      type: '{TResult}'
      description: The current function valur for the provided argument
    content.vb: Public ReadOnly Default Property this[](arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5, arg6 As T6, arg7 As T7) As TResult
  overload: NMF.Expressions.IncrementalFunc`8.Item*
  nameWithType.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult).this[](T1, T2, T3, T4, T5, T6, T7)
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult).this[](T1, T2, T3, T4, T5, T6, T7)
  name.vb: this[](T1, T2, T3, T4, T5, T6, T7)
- uid: NMF.Expressions.IncrementalFunc`8.GetNotifyValue(`0,`1,`2,`3,`4,`5,`6)
  commentId: M:NMF.Expressions.IncrementalFunc`8.GetNotifyValue(`0,`1,`2,`3,`4,`5,`6)
  id: GetNotifyValue(`0,`1,`2,`3,`4,`5,`6)
  parent: NMF.Expressions.IncrementalFunc`8
  langs:
  - csharp
  - vb
  name: GetNotifyValue(T1, T2, T3, T4, T5, T6, T7)
  nameWithType: IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>.GetNotifyValue(T1, T2, T3, T4, T5, T6, T7)
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>.GetNotifyValue(T1, T2, T3, T4, T5, T6, T7)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalFunc.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetNotifyValue
    path: src/Expressions/Expressions.Utilities/IncrementalFunc.cs
    startLine: 799
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: Gets the changable value for the given arguments
  example: []
  syntax:
    content: public INotifyValue<TResult> GetNotifyValue(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
    parameters:
    - id: arg1
      type: '{T1}'
      description: Argument 1
    - id: arg2
      type: '{T2}'
      description: Argument 2
    - id: arg3
      type: '{T3}'
      description: Argument 3
    - id: arg4
      type: '{T4}'
      description: Argument 4
    - id: arg5
      type: '{T5}'
      description: Argument 5
    - id: arg6
      type: '{T6}'
      description: Argument 6
    - id: arg7
      type: '{T7}'
      description: Argument 7
    return:
      type: NMF.Expressions.INotifyValue{{TResult}}
      description: A changable function value
    content.vb: Public Function GetNotifyValue(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5, arg6 As T6, arg7 As T7) As INotifyValue(Of TResult)
  overload: NMF.Expressions.IncrementalFunc`8.GetNotifyValue*
  nameWithType.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult).GetNotifyValue(T1, T2, T3, T4, T5, T6, T7)
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult).GetNotifyValue(T1, T2, T3, T4, T5, T6, T7)
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  href: NMF.html
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: NMF.Expressions.IncrementalFunc`8.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  name: AsOne<IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>>(IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>)
  nameWithType: ExpressionExtensions.AsOne<IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>>(IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<NMF.Expressions.IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>>(NMF.Expressions.IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>)
  nameWithType.vb: ExpressionExtensions.AsOne(Of IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult))(IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of NMF.Expressions.IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult))(NMF.Expressions.IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult))
  name.vb: AsOne(Of IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult))(IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.IncrementalFunc{`0,`1,`2,`3,`4,`5,`6,`7})
    name: AsOne
    href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  - name: <
  - uid: NMF.Expressions.IncrementalFunc`8
    name: IncrementalFunc
    href: NMF.Expressions.IncrementalFunc-8.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: (
  - uid: NMF.Expressions.IncrementalFunc`8
    name: IncrementalFunc
    href: NMF.Expressions.IncrementalFunc-8.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.IncrementalFunc{`0,`1,`2,`3,`4,`5,`6,`7})
    name: AsOne
    href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IncrementalFunc`8
    name: IncrementalFunc
    href: NMF.Expressions.IncrementalFunc-8.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: (
  - uid: NMF.Expressions.IncrementalFunc`8
    name: IncrementalFunc
    href: NMF.Expressions.IncrementalFunc-8.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  name: AsOne<T>(T)
  nameWithType: ExpressionExtensions.AsOne<T>(T)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<T>(T)
  nameWithType.vb: ExpressionExtensions.AsOne(Of T)(T)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of T)(T)
  name.vb: AsOne(Of T)(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
    href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
    href: NMF.Expressions.Linq.ExpressionExtensions.html#NMF_Expressions_Linq_ExpressionExtensions_AsOne__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  parent: NMF.Expressions.Linq
  href: NMF.Expressions.Linq.ExpressionExtensions.html
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  href: NMF.html
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
    href: NMF.Expressions.Linq.html
  spec.vb:
  - uid: NMF
    name: NMF
    href: NMF.html
  - name: .
  - uid: NMF.Expressions
    name: Expressions
    href: NMF.Expressions.html
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
    href: NMF.Expressions.Linq.html
- uid: NMF.Expressions.IncrementalFunc`8.#ctor*
  commentId: Overload:NMF.Expressions.IncrementalFunc`8.#ctor
  href: NMF.Expressions.IncrementalFunc-8.html#NMF_Expressions_IncrementalFunc_8__ctor_System_Linq_Expressions_Expression_System_Func__0__1__2__3__4__5__6__7___
  name: IncrementalFunc
  nameWithType: IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>.IncrementalFunc
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>.IncrementalFunc
  nameWithType.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult).New
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult).New
  name.vb: New
- uid: System.Linq.Expressions.Expression{System.Func{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{TResult}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1,`2,`3,`4,`5,`6,`7}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>>
  nameWithType: Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, TResult>>
  nameWithType.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, TResult))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T1, T2, T3, T4, T5, T6, T7, TResult))
  name.vb: Expression(Of Func(Of T1, T2, T3, T4, T5, T6, T7, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - uid: System.Func`8
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-8
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`8
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-8
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: <
  - name: TDelegate
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions.expression-1
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.linq.expressions
- uid: NMF.Expressions.ObservingFunc{{T1},{T2},{T3},{T4},{T5},{T6},{T7},{TResult}}
  commentId: T:NMF.Expressions.ObservingFunc{``0,``1,``2,``3,``4,``5,``6,``7}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`8
  href: NMF.Expressions.ObservingFunc-8.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`8
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-8.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`8
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-8.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`8
  commentId: T:NMF.Expressions.ObservingFunc`8
  parent: NMF.Expressions
  href: NMF.Expressions.ObservingFunc-8.html
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`8
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-8.html
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`8
    name: ObservingFunc
    href: NMF.Expressions.ObservingFunc-8.html
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.IncrementalFunc`8.Item*
  commentId: Overload:NMF.Expressions.IncrementalFunc`8.Item
  href: NMF.Expressions.IncrementalFunc-8.html#NMF_Expressions_IncrementalFunc_8_Item__0__1__2__3__4__5__6_
  name: this
  nameWithType: IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>.this
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>.this
  nameWithType.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult).this[]
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult).this[]
  name.vb: this[]
- uid: '{T1}'
  commentId: '!:T1'
  definition: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: '{T2}'
  commentId: '!:T2'
  definition: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: '{T3}'
  commentId: '!:T3'
  definition: T3
  name: T3
  nameWithType: T3
  fullName: T3
- uid: '{T4}'
  commentId: '!:T4'
  definition: T4
  name: T4
  nameWithType: T4
  fullName: T4
- uid: '{T5}'
  commentId: '!:T5'
  definition: T5
  name: T5
  nameWithType: T5
  fullName: T5
- uid: '{T6}'
  commentId: '!:T6'
  definition: T6
  name: T6
  nameWithType: T6
  fullName: T6
- uid: '{T7}'
  commentId: '!:T7'
  definition: T7
  name: T7
  nameWithType: T7
  fullName: T7
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: T3
  name: T3
  nameWithType: T3
  fullName: T3
- uid: T4
  name: T4
  nameWithType: T4
  fullName: T4
- uid: T5
  name: T5
  nameWithType: T5
  fullName: T5
- uid: T6
  name: T6
  nameWithType: T6
  fullName: T6
- uid: T7
  name: T7
  nameWithType: T7
  fullName: T7
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: NMF.Expressions.IncrementalFunc`8.GetNotifyValue*
  commentId: Overload:NMF.Expressions.IncrementalFunc`8.GetNotifyValue
  href: NMF.Expressions.IncrementalFunc-8.html#NMF_Expressions_IncrementalFunc_8_GetNotifyValue__0__1__2__3__4__5__6_
  name: GetNotifyValue
  nameWithType: IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>.GetNotifyValue
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>.GetNotifyValue
  nameWithType.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult).GetNotifyValue
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult).GetNotifyValue
- uid: NMF.Expressions.INotifyValue{{TResult}}
  commentId: T:NMF.Expressions.INotifyValue{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<TResult>
  nameWithType: INotifyValue<TResult>
  fullName: NMF.Expressions.INotifyValue<TResult>
  nameWithType.vb: INotifyValue(Of TResult)
  fullName.vb: NMF.Expressions.INotifyValue(Of TResult)
  name.vb: INotifyValue(Of TResult)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.INotifyValue`1
  commentId: T:NMF.Expressions.INotifyValue`1
  href: NMF.Expressions.INotifyValue-1.html
  name: INotifyValue<T>
  nameWithType: INotifyValue<T>
  fullName: NMF.Expressions.INotifyValue<T>
  nameWithType.vb: INotifyValue(Of T)
  fullName.vb: NMF.Expressions.INotifyValue(Of T)
  name.vb: INotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    href: NMF.Expressions.INotifyValue-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
