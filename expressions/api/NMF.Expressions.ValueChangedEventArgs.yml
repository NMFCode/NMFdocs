### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.ValueChangedEventArgs
  commentId: T:NMF.Expressions.ValueChangedEventArgs
  id: ValueChangedEventArgs
  parent: NMF.Expressions
  children:
  - NMF.Expressions.ValueChangedEventArgs.#ctor(System.Object,System.Object)
  - NMF.Expressions.ValueChangedEventArgs.NewValue
  - NMF.Expressions.ValueChangedEventArgs.OldValue
  langs:
  - csharp
  - vb
  name: ValueChangedEventArgs
  nameWithType: ValueChangedEventArgs
  fullName: NMF.Expressions.ValueChangedEventArgs
  type: Class
  source:
    remote:
      path: Expressions/Expressions/Public/ValueChangedEventArgs.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ValueChangedEventArgs
    path: src/Expressions/Expressions/Public/ValueChangedEventArgs.cs
    startLine: 7
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nRepresents the event data when the value of an incremental expression has changed\n"
  example: []
  syntax:
    content: 'public class ValueChangedEventArgs : EventArgs'
    content.vb: Public Class ValueChangedEventArgs Inherits EventArgs
  inheritance:
  - System.Object
  - System.EventArgs
  inheritedMembers:
  - System.EventArgs.Empty
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - NMF.Expressions.ValueChangedEventArgs.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
- uid: NMF.Expressions.ValueChangedEventArgs.#ctor(System.Object,System.Object)
  commentId: M:NMF.Expressions.ValueChangedEventArgs.#ctor(System.Object,System.Object)
  id: '#ctor(System.Object,System.Object)'
  parent: NMF.Expressions.ValueChangedEventArgs
  langs:
  - csharp
  - vb
  name: ValueChangedEventArgs(object, object)
  nameWithType: ValueChangedEventArgs.ValueChangedEventArgs(object, object)
  fullName: NMF.Expressions.ValueChangedEventArgs.ValueChangedEventArgs(object, object)
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions/Public/ValueChangedEventArgs.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions/Public/ValueChangedEventArgs.cs
    startLine: 14
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nCreates a valuechanged event for the given old value and new value\n"
  example: []
  syntax:
    content: public ValueChangedEventArgs(object oldValue, object newValue)
    parameters:
    - id: oldValue
      type: System.Object
      description: The old value
    - id: newValue
      type: System.Object
      description: The new value
    content.vb: Public Sub New(oldValue As Object, newValue As Object)
  overload: NMF.Expressions.ValueChangedEventArgs.#ctor*
  nameWithType.vb: ValueChangedEventArgs.New(Object, Object)
  fullName.vb: NMF.Expressions.ValueChangedEventArgs.New(Object, Object)
  name.vb: New(Object, Object)
- uid: NMF.Expressions.ValueChangedEventArgs.OldValue
  commentId: P:NMF.Expressions.ValueChangedEventArgs.OldValue
  id: OldValue
  parent: NMF.Expressions.ValueChangedEventArgs
  langs:
  - csharp
  - vb
  name: OldValue
  nameWithType: ValueChangedEventArgs.OldValue
  fullName: NMF.Expressions.ValueChangedEventArgs.OldValue
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/ValueChangedEventArgs.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OldValue
    path: src/Expressions/Expressions/Public/ValueChangedEventArgs.cs
    startLine: 23
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nThe old value\n"
  example: []
  syntax:
    content: public object OldValue { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public Property OldValue As Object
  overload: NMF.Expressions.ValueChangedEventArgs.OldValue*
- uid: NMF.Expressions.ValueChangedEventArgs.NewValue
  commentId: P:NMF.Expressions.ValueChangedEventArgs.NewValue
  id: NewValue
  parent: NMF.Expressions.ValueChangedEventArgs
  langs:
  - csharp
  - vb
  name: NewValue
  nameWithType: ValueChangedEventArgs.NewValue
  fullName: NMF.Expressions.ValueChangedEventArgs.NewValue
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/ValueChangedEventArgs.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NewValue
    path: src/Expressions/Expressions/Public/ValueChangedEventArgs.cs
    startLine: 28
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nThe new value\n"
  example: []
  syntax:
    content: public object NewValue { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public Property NewValue As Object
  overload: NMF.Expressions.ValueChangedEventArgs.NewValue*
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.EventArgs
  commentId: T:System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.EventArgs.Empty
  commentId: F:System.EventArgs.Empty
  parent: System.EventArgs
  isExternal: true
  name: Empty
  nameWithType: EventArgs.Empty
  fullName: System.EventArgs.Empty
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: NMF.Expressions.ValueChangedEventArgs.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<ValueChangedEventArgs>(ValueChangedEventArgs)
  nameWithType: ExpressionExtensions.AsOne<ValueChangedEventArgs>(ValueChangedEventArgs)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<NMF.Expressions.ValueChangedEventArgs>(NMF.Expressions.ValueChangedEventArgs)
  nameWithType.vb: ExpressionExtensions.AsOne(Of ValueChangedEventArgs)(ValueChangedEventArgs)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of NMF.Expressions.ValueChangedEventArgs)(NMF.Expressions.ValueChangedEventArgs)
  name.vb: AsOne(Of ValueChangedEventArgs)(ValueChangedEventArgs)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.ValueChangedEventArgs)
    name: AsOne
  - name: <
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
  - name: '>'
  - name: (
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.ValueChangedEventArgs)
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
  - name: )
  - name: (
  - uid: NMF.Expressions.ValueChangedEventArgs
    name: ValueChangedEventArgs
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<T>(T)
  nameWithType: ExpressionExtensions.AsOne<T>(T)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<T>(T)
  nameWithType.vb: ExpressionExtensions.AsOne(Of T)(T)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of T)(T)
  name.vb: AsOne(Of T)(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  parent: NMF.Expressions.Linq
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
- uid: NMF.Expressions.ValueChangedEventArgs.#ctor*
  commentId: Overload:NMF.Expressions.ValueChangedEventArgs.#ctor
  name: ValueChangedEventArgs
  nameWithType: ValueChangedEventArgs.ValueChangedEventArgs
  fullName: NMF.Expressions.ValueChangedEventArgs.ValueChangedEventArgs
  nameWithType.vb: ValueChangedEventArgs.New
  fullName.vb: NMF.Expressions.ValueChangedEventArgs.New
  name.vb: New
- uid: NMF.Expressions.ValueChangedEventArgs.OldValue*
  commentId: Overload:NMF.Expressions.ValueChangedEventArgs.OldValue
  name: OldValue
  nameWithType: ValueChangedEventArgs.OldValue
  fullName: NMF.Expressions.ValueChangedEventArgs.OldValue
- uid: NMF.Expressions.ValueChangedEventArgs.NewValue*
  commentId: Overload:NMF.Expressions.ValueChangedEventArgs.NewValue
  name: NewValue
  nameWithType: ValueChangedEventArgs.NewValue
  fullName: NMF.Expressions.ValueChangedEventArgs.NewValue
