### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.ChangeAwareDictionary`2
  commentId: T:NMF.Expressions.ChangeAwareDictionary`2
  id: ChangeAwareDictionary`2
  parent: NMF.Expressions
  children:
  - NMF.Expressions.ChangeAwareDictionary`2.#ctor
  - NMF.Expressions.ChangeAwareDictionary`2.#ctor(NMF.Expressions.ChangeAwareDictionary{`0,`1})
  - NMF.Expressions.ChangeAwareDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  - NMF.Expressions.ChangeAwareDictionary`2.AsNotifiable(`0)
  - NMF.Expressions.ChangeAwareDictionary`2.Forget(`0)
  - NMF.Expressions.ChangeAwareDictionary`2.Item(`0)
  langs:
  - csharp
  - vb
  name: ChangeAwareDictionary<TKey, TValue>
  nameWithType: ChangeAwareDictionary<TKey, TValue>
  fullName: NMF.Expressions.ChangeAwareDictionary<TKey, TValue>
  type: Class
  source:
    remote:
      path: Expressions/Expressions.Utilities/ChangeAwareDictionary.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ChangeAwareDictionary
    path: src/Expressions/Expressions.Utilities/ChangeAwareDictionary.cs
    startLine: 14
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nProvides a notifiable associative memory\n"
  example: []
  syntax:
    content: public class ChangeAwareDictionary<TKey, TValue>
    typeParameters:
    - id: TKey
      description: The type of the keys
    - id: TValue
      description: The type of the values
    content.vb: Public Class ChangeAwareDictionary(Of TKey, TValue)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - NMF.Expressions.ChangeAwareDictionary`2.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  nameWithType.vb: ChangeAwareDictionary(Of TKey, TValue)
  fullName.vb: NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue)
  name.vb: ChangeAwareDictionary(Of TKey, TValue)
- uid: NMF.Expressions.ChangeAwareDictionary`2.#ctor
  commentId: M:NMF.Expressions.ChangeAwareDictionary`2.#ctor
  id: '#ctor'
  parent: NMF.Expressions.ChangeAwareDictionary`2
  langs:
  - csharp
  - vb
  name: ChangeAwareDictionary()
  nameWithType: ChangeAwareDictionary<TKey, TValue>.ChangeAwareDictionary()
  fullName: NMF.Expressions.ChangeAwareDictionary<TKey, TValue>.ChangeAwareDictionary()
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions.Utilities/ChangeAwareDictionary.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions.Utilities/ChangeAwareDictionary.cs
    startLine: 163
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nCreates a new change-aware dictionary\n"
  example: []
  syntax:
    content: public ChangeAwareDictionary()
    content.vb: Public Sub New()
  overload: NMF.Expressions.ChangeAwareDictionary`2.#ctor*
  nameWithType.vb: ChangeAwareDictionary(Of TKey, TValue).New()
  fullName.vb: NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue).New()
  name.vb: New()
- uid: NMF.Expressions.ChangeAwareDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:NMF.Expressions.ChangeAwareDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0})'
  parent: NMF.Expressions.ChangeAwareDictionary`2
  langs:
  - csharp
  - vb
  name: ChangeAwareDictionary(IEqualityComparer<TKey>)
  nameWithType: ChangeAwareDictionary<TKey, TValue>.ChangeAwareDictionary(IEqualityComparer<TKey>)
  fullName: NMF.Expressions.ChangeAwareDictionary<TKey, TValue>.ChangeAwareDictionary(System.Collections.Generic.IEqualityComparer<TKey>)
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions.Utilities/ChangeAwareDictionary.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions.Utilities/ChangeAwareDictionary.cs
    startLine: 169
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nCreates a new change-aware dictionary\n"
  example: []
  syntax:
    content: public ChangeAwareDictionary(IEqualityComparer<TKey> comparer)
    parameters:
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: The comparer that should be used to compare dictionary entries
    content.vb: Public Sub New(comparer As IEqualityComparer(Of TKey))
  overload: NMF.Expressions.ChangeAwareDictionary`2.#ctor*
  nameWithType.vb: ChangeAwareDictionary(Of TKey, TValue).New(IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue).New(System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: New(IEqualityComparer(Of TKey))
- uid: NMF.Expressions.ChangeAwareDictionary`2.#ctor(NMF.Expressions.ChangeAwareDictionary{`0,`1})
  commentId: M:NMF.Expressions.ChangeAwareDictionary`2.#ctor(NMF.Expressions.ChangeAwareDictionary{`0,`1})
  id: '#ctor(NMF.Expressions.ChangeAwareDictionary{`0,`1})'
  parent: NMF.Expressions.ChangeAwareDictionary`2
  langs:
  - csharp
  - vb
  name: ChangeAwareDictionary(ChangeAwareDictionary<TKey, TValue>)
  nameWithType: ChangeAwareDictionary<TKey, TValue>.ChangeAwareDictionary(ChangeAwareDictionary<TKey, TValue>)
  fullName: NMF.Expressions.ChangeAwareDictionary<TKey, TValue>.ChangeAwareDictionary(NMF.Expressions.ChangeAwareDictionary<TKey, TValue>)
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions.Utilities/ChangeAwareDictionary.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions.Utilities/ChangeAwareDictionary.cs
    startLine: 178
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nCreates a new change-aware dictionary based on a template\n"
  example: []
  syntax:
    content: public ChangeAwareDictionary(ChangeAwareDictionary<TKey, TValue> template)
    parameters:
    - id: template
      type: NMF.Expressions.ChangeAwareDictionary`2
      description: The template dictionary
    content.vb: Public Sub New(template As ChangeAwareDictionary(Of TKey, TValue))
  overload: NMF.Expressions.ChangeAwareDictionary`2.#ctor*
  nameWithType.vb: ChangeAwareDictionary(Of TKey, TValue).New(ChangeAwareDictionary(Of TKey, TValue))
  fullName.vb: NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue).New(NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue))
  name.vb: New(ChangeAwareDictionary(Of TKey, TValue))
- uid: NMF.Expressions.ChangeAwareDictionary`2.Item(`0)
  commentId: P:NMF.Expressions.ChangeAwareDictionary`2.Item(`0)
  id: Item(`0)
  parent: NMF.Expressions.ChangeAwareDictionary`2
  langs:
  - csharp
  - vb
  name: this[TKey]
  nameWithType: ChangeAwareDictionary<TKey, TValue>.this[TKey]
  fullName: NMF.Expressions.ChangeAwareDictionary<TKey, TValue>.this[TKey]
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/ChangeAwareDictionary.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: this[]
    path: src/Expressions/Expressions.Utilities/ChangeAwareDictionary.cs
    startLine: 195
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nGets or sets a value for the given key\n"
  example: []
  syntax:
    content: public TValue this[TKey key] { get; set; }
    parameters:
    - id: key
      type: '{TKey}'
      description: The key element
    return:
      type: '{TValue}'
      description: The current value for the given key
    content.vb: Public Default Property this[](key As TKey) As TValue
  overload: NMF.Expressions.ChangeAwareDictionary`2.Item*
  nameWithType.vb: ChangeAwareDictionary(Of TKey, TValue).this[](TKey)
  fullName.vb: NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue).this[](TKey)
  name.vb: this[](TKey)
- uid: NMF.Expressions.ChangeAwareDictionary`2.AsNotifiable(`0)
  commentId: M:NMF.Expressions.ChangeAwareDictionary`2.AsNotifiable(`0)
  id: AsNotifiable(`0)
  parent: NMF.Expressions.ChangeAwareDictionary`2
  langs:
  - csharp
  - vb
  name: AsNotifiable(TKey)
  nameWithType: ChangeAwareDictionary<TKey, TValue>.AsNotifiable(TKey)
  fullName: NMF.Expressions.ChangeAwareDictionary<TKey, TValue>.AsNotifiable(TKey)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/ChangeAwareDictionary.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AsNotifiable
    path: src/Expressions/Expressions.Utilities/ChangeAwareDictionary.cs
    startLine: 213
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nGets an object that tracks the current value for the given key\n"
  example: []
  syntax:
    content: public INotifyReversableValue<TValue> AsNotifiable(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The given key
    return:
      type: NMF.Expressions.INotifyReversableValue{{TValue}}
      description: An object that tracks the current value and notifies clients when this value changes
    content.vb: Public Function AsNotifiable(key As TKey) As INotifyReversableValue(Of TValue)
  overload: NMF.Expressions.ChangeAwareDictionary`2.AsNotifiable*
  nameWithType.vb: ChangeAwareDictionary(Of TKey, TValue).AsNotifiable(TKey)
  fullName.vb: NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue).AsNotifiable(TKey)
- uid: NMF.Expressions.ChangeAwareDictionary`2.Forget(`0)
  commentId: M:NMF.Expressions.ChangeAwareDictionary`2.Forget(`0)
  id: Forget(`0)
  parent: NMF.Expressions.ChangeAwareDictionary`2
  langs:
  - csharp
  - vb
  name: Forget(TKey)
  nameWithType: ChangeAwareDictionary<TKey, TValue>.Forget(TKey)
  fullName: NMF.Expressions.ChangeAwareDictionary<TKey, TValue>.Forget(TKey)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/ChangeAwareDictionary.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Forget
    path: src/Expressions/Expressions.Utilities/ChangeAwareDictionary.cs
    startLine: 230
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nForgets the notifiable value for the given key\n"
  example: []
  syntax:
    content: public bool Forget(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key object
    return:
      type: System.Boolean
      description: True, if there was an element for the given key, otherwise false
    content.vb: Public Function Forget(key As TKey) As Boolean
  overload: NMF.Expressions.ChangeAwareDictionary`2.Forget*
  nameWithType.vb: ChangeAwareDictionary(Of TKey, TValue).Forget(TKey)
  fullName.vb: NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue).Forget(TKey)
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: NMF.Expressions.ChangeAwareDictionary`2.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<ChangeAwareDictionary<TKey, TValue>>(ChangeAwareDictionary<TKey, TValue>)
  nameWithType: ExpressionExtensions.AsOne<ChangeAwareDictionary<TKey, TValue>>(ChangeAwareDictionary<TKey, TValue>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<NMF.Expressions.ChangeAwareDictionary<TKey, TValue>>(NMF.Expressions.ChangeAwareDictionary<TKey, TValue>)
  nameWithType.vb: ExpressionExtensions.AsOne(Of ChangeAwareDictionary(Of TKey, TValue))(ChangeAwareDictionary(Of TKey, TValue))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue))(NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue))
  name.vb: AsOne(Of ChangeAwareDictionary(Of TKey, TValue))(ChangeAwareDictionary(Of TKey, TValue))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.ChangeAwareDictionary{`0,`1})
    name: AsOne
  - name: <
  - uid: NMF.Expressions.ChangeAwareDictionary`2
    name: ChangeAwareDictionary
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  - name: (
  - uid: NMF.Expressions.ChangeAwareDictionary`2
    name: ChangeAwareDictionary
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.ChangeAwareDictionary{`0,`1})
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.ChangeAwareDictionary`2
    name: ChangeAwareDictionary
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: (
  - uid: NMF.Expressions.ChangeAwareDictionary`2
    name: ChangeAwareDictionary
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<T>(T)
  nameWithType: ExpressionExtensions.AsOne<T>(T)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<T>(T)
  nameWithType.vb: ExpressionExtensions.AsOne(Of T)(T)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of T)(T)
  name.vb: AsOne(Of T)(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  parent: NMF.Expressions.Linq
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
- uid: NMF.Expressions.ChangeAwareDictionary`2.#ctor*
  commentId: Overload:NMF.Expressions.ChangeAwareDictionary`2.#ctor
  name: ChangeAwareDictionary
  nameWithType: ChangeAwareDictionary<TKey, TValue>.ChangeAwareDictionary
  fullName: NMF.Expressions.ChangeAwareDictionary<TKey, TValue>.ChangeAwareDictionary
  nameWithType.vb: ChangeAwareDictionary(Of TKey, TValue).New
  fullName.vb: NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue).New
  name.vb: New
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  commentId: T:System.Collections.Generic.IEqualityComparer{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TKey>
  nameWithType: IEqualityComparer<TKey>
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  nameWithType.vb: IEqualityComparer(Of TKey)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  name.vb: IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: NMF.Expressions.ChangeAwareDictionary`2
  commentId: T:NMF.Expressions.ChangeAwareDictionary`2
  parent: NMF.Expressions
  name: ChangeAwareDictionary<TKey, TValue>
  nameWithType: ChangeAwareDictionary<TKey, TValue>
  fullName: NMF.Expressions.ChangeAwareDictionary<TKey, TValue>
  nameWithType.vb: ChangeAwareDictionary(Of TKey, TValue)
  fullName.vb: NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue)
  name.vb: ChangeAwareDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: NMF.Expressions.ChangeAwareDictionary`2
    name: ChangeAwareDictionary
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ChangeAwareDictionary`2
    name: ChangeAwareDictionary
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: NMF.Expressions.ChangeAwareDictionary`2.Item*
  commentId: Overload:NMF.Expressions.ChangeAwareDictionary`2.Item
  name: this
  nameWithType: ChangeAwareDictionary<TKey, TValue>.this
  fullName: NMF.Expressions.ChangeAwareDictionary<TKey, TValue>.this
  nameWithType.vb: ChangeAwareDictionary(Of TKey, TValue).this[]
  fullName.vb: NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue).this[]
  name.vb: this[]
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TValue
  commentId: '!:TValue'
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: NMF.Expressions.ChangeAwareDictionary`2.AsNotifiable*
  commentId: Overload:NMF.Expressions.ChangeAwareDictionary`2.AsNotifiable
  name: AsNotifiable
  nameWithType: ChangeAwareDictionary<TKey, TValue>.AsNotifiable
  fullName: NMF.Expressions.ChangeAwareDictionary<TKey, TValue>.AsNotifiable
  nameWithType.vb: ChangeAwareDictionary(Of TKey, TValue).AsNotifiable
  fullName.vb: NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue).AsNotifiable
- uid: NMF.Expressions.INotifyReversableValue{{TValue}}
  commentId: T:NMF.Expressions.INotifyReversableValue{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyReversableValue`1
  name: INotifyReversableValue<TValue>
  nameWithType: INotifyReversableValue<TValue>
  fullName: NMF.Expressions.INotifyReversableValue<TValue>
  nameWithType.vb: INotifyReversableValue(Of TValue)
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of TValue)
  name.vb: INotifyReversableValue(Of TValue)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
  - name: <
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
- uid: NMF.Expressions.INotifyReversableValue`1
  commentId: T:NMF.Expressions.INotifyReversableValue`1
  name: INotifyReversableValue<T>
  nameWithType: INotifyReversableValue<T>
  fullName: NMF.Expressions.INotifyReversableValue<T>
  nameWithType.vb: INotifyReversableValue(Of T)
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of T)
  name.vb: INotifyReversableValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.ChangeAwareDictionary`2.Forget*
  commentId: Overload:NMF.Expressions.ChangeAwareDictionary`2.Forget
  name: Forget
  nameWithType: ChangeAwareDictionary<TKey, TValue>.Forget
  fullName: NMF.Expressions.ChangeAwareDictionary<TKey, TValue>.Forget
  nameWithType.vb: ChangeAwareDictionary(Of TKey, TValue).Forget
  fullName.vb: NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue).Forget
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
