### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.ChangeAwareDictionary`2
  commentId: T:NMF.Expressions.ChangeAwareDictionary`2
  id: ChangeAwareDictionary`2
  parent: NMF.Expressions
  children:
  - NMF.Expressions.ChangeAwareDictionary`2.#ctor
  - NMF.Expressions.ChangeAwareDictionary`2.#ctor(NMF.Expressions.ChangeAwareDictionary{`0,`1})
  - NMF.Expressions.ChangeAwareDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  - NMF.Expressions.ChangeAwareDictionary`2.AsNotifiable(`0)
  - NMF.Expressions.ChangeAwareDictionary`2.Forget(`0)
  - NMF.Expressions.ChangeAwareDictionary`2.Item(`0)
  langs:
  - csharp
  - vb
  name: ChangeAwareDictionary<TKey, TValue>
  nameWithType: ChangeAwareDictionary<TKey, TValue>
  fullName: NMF.Expressions.ChangeAwareDictionary<TKey, TValue>
  type: Class
  source:
    remote:
      path: Expressions/Expressions.Utilities/ChangeAwareDictionary.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ChangeAwareDictionary
    path: src/Expressions/Expressions.Utilities/ChangeAwareDictionary.cs
    startLine: 14
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nProvides a notifiable associative memory\n"
  example: []
  syntax:
    content: public class ChangeAwareDictionary<TKey, TValue>
    typeParameters:
    - id: TKey
      description: The type of the keys
    - id: TValue
      description: The type of the values
    content.vb: Public Class ChangeAwareDictionary(Of TKey, TValue)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: ChangeAwareDictionary(Of TKey, TValue)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue)
  name.vb: ChangeAwareDictionary(Of TKey, TValue)
- uid: NMF.Expressions.ChangeAwareDictionary`2.#ctor
  commentId: M:NMF.Expressions.ChangeAwareDictionary`2.#ctor
  id: '#ctor'
  parent: NMF.Expressions.ChangeAwareDictionary`2
  langs:
  - csharp
  - vb
  name: ChangeAwareDictionary()
  nameWithType: ChangeAwareDictionary<TKey, TValue>.ChangeAwareDictionary()
  fullName: NMF.Expressions.ChangeAwareDictionary<TKey, TValue>.ChangeAwareDictionary()
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions.Utilities/ChangeAwareDictionary.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions.Utilities/ChangeAwareDictionary.cs
    startLine: 163
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nCreates a new change-aware dictionary\n"
  example: []
  syntax:
    content: public ChangeAwareDictionary()
    content.vb: Public Sub New
  overload: NMF.Expressions.ChangeAwareDictionary`2.#ctor*
  nameWithType.vb: ChangeAwareDictionary(Of TKey, TValue).ChangeAwareDictionary()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue).ChangeAwareDictionary()
- uid: NMF.Expressions.ChangeAwareDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:NMF.Expressions.ChangeAwareDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0})'
  parent: NMF.Expressions.ChangeAwareDictionary`2
  langs:
  - csharp
  - vb
  name: ChangeAwareDictionary(IEqualityComparer<TKey>)
  nameWithType: ChangeAwareDictionary<TKey, TValue>.ChangeAwareDictionary(IEqualityComparer<TKey>)
  fullName: NMF.Expressions.ChangeAwareDictionary<TKey, TValue>.ChangeAwareDictionary(System.Collections.Generic.IEqualityComparer<TKey>)
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions.Utilities/ChangeAwareDictionary.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions.Utilities/ChangeAwareDictionary.cs
    startLine: 169
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nCreates a new change-aware dictionary\n"
  example: []
  syntax:
    content: public ChangeAwareDictionary(IEqualityComparer<TKey> comparer)
    parameters:
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: The comparer that should be used to compare dictionary entries
    content.vb: Public Sub New(comparer As IEqualityComparer(Of TKey))
  overload: NMF.Expressions.ChangeAwareDictionary`2.#ctor*
  nameWithType.vb: ChangeAwareDictionary(Of TKey, TValue).ChangeAwareDictionary(IEqualityComparer(Of TKey))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue).ChangeAwareDictionary(System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ChangeAwareDictionary(IEqualityComparer(Of TKey))
- uid: NMF.Expressions.ChangeAwareDictionary`2.#ctor(NMF.Expressions.ChangeAwareDictionary{`0,`1})
  commentId: M:NMF.Expressions.ChangeAwareDictionary`2.#ctor(NMF.Expressions.ChangeAwareDictionary{`0,`1})
  id: '#ctor(NMF.Expressions.ChangeAwareDictionary{`0,`1})'
  parent: NMF.Expressions.ChangeAwareDictionary`2
  langs:
  - csharp
  - vb
  name: ChangeAwareDictionary(ChangeAwareDictionary<TKey, TValue>)
  nameWithType: ChangeAwareDictionary<TKey, TValue>.ChangeAwareDictionary(ChangeAwareDictionary<TKey, TValue>)
  fullName: NMF.Expressions.ChangeAwareDictionary<TKey, TValue>.ChangeAwareDictionary(NMF.Expressions.ChangeAwareDictionary<TKey, TValue>)
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions.Utilities/ChangeAwareDictionary.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions.Utilities/ChangeAwareDictionary.cs
    startLine: 178
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nCreates a new change-aware dictionary based on a template\n"
  example: []
  syntax:
    content: public ChangeAwareDictionary(ChangeAwareDictionary<TKey, TValue> template)
    parameters:
    - id: template
      type: NMF.Expressions.ChangeAwareDictionary`2
      description: The template dictionary
    content.vb: Public Sub New(template As ChangeAwareDictionary(Of TKey, TValue))
  overload: NMF.Expressions.ChangeAwareDictionary`2.#ctor*
  nameWithType.vb: ChangeAwareDictionary(Of TKey, TValue).ChangeAwareDictionary(ChangeAwareDictionary(Of TKey, TValue))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue).ChangeAwareDictionary(NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue))
  name.vb: ChangeAwareDictionary(ChangeAwareDictionary(Of TKey, TValue))
- uid: NMF.Expressions.ChangeAwareDictionary`2.Item(`0)
  commentId: P:NMF.Expressions.ChangeAwareDictionary`2.Item(`0)
  id: Item(`0)
  parent: NMF.Expressions.ChangeAwareDictionary`2
  langs:
  - csharp
  - vb
  name: Item[TKey]
  nameWithType: ChangeAwareDictionary<TKey, TValue>.Item[TKey]
  fullName: NMF.Expressions.ChangeAwareDictionary<TKey, TValue>.Item[TKey]
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/ChangeAwareDictionary.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: this[]
    path: src/Expressions/Expressions.Utilities/ChangeAwareDictionary.cs
    startLine: 195
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nGets or sets a value for the given key\n"
  example: []
  syntax:
    content: >-
      public TValue this[TKey key]

      {
          [ObservableProxy(typeof(ChangeAwareDictionary<, >), "AsNotifiable", false)]
          get;
          set;
      }
    parameters:
    - id: key
      type: '{TKey}'
      description: The key element
    return:
      type: '{TValue}'
      description: The current value for the given key
    content.vb: Public Property Item(key As TKey) As TValue
  overload: NMF.Expressions.ChangeAwareDictionary`2.Item*
  nameWithType.vb: ChangeAwareDictionary(Of TKey, TValue).Item(TKey)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
- uid: NMF.Expressions.ChangeAwareDictionary`2.AsNotifiable(`0)
  commentId: M:NMF.Expressions.ChangeAwareDictionary`2.AsNotifiable(`0)
  id: AsNotifiable(`0)
  parent: NMF.Expressions.ChangeAwareDictionary`2
  langs:
  - csharp
  - vb
  name: AsNotifiable(TKey)
  nameWithType: ChangeAwareDictionary<TKey, TValue>.AsNotifiable(TKey)
  fullName: NMF.Expressions.ChangeAwareDictionary<TKey, TValue>.AsNotifiable(TKey)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/ChangeAwareDictionary.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: AsNotifiable
    path: src/Expressions/Expressions.Utilities/ChangeAwareDictionary.cs
    startLine: 213
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nGets an object that tracks the current value for the given key\n"
  example: []
  syntax:
    content: public INotifyReversableValue<TValue> AsNotifiable(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The given key
    return:
      type: NMF.Expressions.INotifyReversableValue{{TValue}}
      description: An object that tracks the current value and notifies clients when this value changes
    content.vb: Public Function AsNotifiable(key As TKey) As INotifyReversableValue(Of TValue)
  overload: NMF.Expressions.ChangeAwareDictionary`2.AsNotifiable*
  nameWithType.vb: ChangeAwareDictionary(Of TKey, TValue).AsNotifiable(TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue).AsNotifiable(TKey)
- uid: NMF.Expressions.ChangeAwareDictionary`2.Forget(`0)
  commentId: M:NMF.Expressions.ChangeAwareDictionary`2.Forget(`0)
  id: Forget(`0)
  parent: NMF.Expressions.ChangeAwareDictionary`2
  langs:
  - csharp
  - vb
  name: Forget(TKey)
  nameWithType: ChangeAwareDictionary<TKey, TValue>.Forget(TKey)
  fullName: NMF.Expressions.ChangeAwareDictionary<TKey, TValue>.Forget(TKey)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/ChangeAwareDictionary.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Forget
    path: src/Expressions/Expressions.Utilities/ChangeAwareDictionary.cs
    startLine: 230
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nForgets the notifiable value for the given key\n"
  example: []
  syntax:
    content: public bool Forget(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key object
    return:
      type: System.Boolean
      description: True, if there was an element for the given key, otherwise false
    content.vb: Public Function Forget(key As TKey) As Boolean
  overload: NMF.Expressions.ChangeAwareDictionary`2.Forget*
  nameWithType.vb: ChangeAwareDictionary(Of TKey, TValue).Forget(TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue).Forget(TKey)
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.ChangeAwareDictionary`2.#ctor*
  commentId: Overload:NMF.Expressions.ChangeAwareDictionary`2.#ctor
  name: ChangeAwareDictionary
  nameWithType: ChangeAwareDictionary<TKey, TValue>.ChangeAwareDictionary
  fullName: NMF.Expressions.ChangeAwareDictionary<TKey, TValue>.ChangeAwareDictionary
  nameWithType.vb: ChangeAwareDictionary(Of TKey, TValue).ChangeAwareDictionary
  fullName.vb: NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue).ChangeAwareDictionary
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  commentId: T:System.Collections.Generic.IEqualityComparer{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TKey>
  nameWithType: IEqualityComparer<TKey>
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  nameWithType.vb: IEqualityComparer(Of TKey)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  name.vb: IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.Expressions.ChangeAwareDictionary`2
  commentId: T:NMF.Expressions.ChangeAwareDictionary`2
  parent: NMF.Expressions
  name: ChangeAwareDictionary<TKey, TValue>
  nameWithType: ChangeAwareDictionary<TKey, TValue>
  fullName: NMF.Expressions.ChangeAwareDictionary<TKey, TValue>
  nameWithType.vb: ChangeAwareDictionary(Of TKey, TValue)
  fullName.vb: NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue)
  name.vb: ChangeAwareDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: NMF.Expressions.ChangeAwareDictionary`2
    name: ChangeAwareDictionary
    nameWithType: ChangeAwareDictionary
    fullName: NMF.Expressions.ChangeAwareDictionary
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ChangeAwareDictionary`2
    name: ChangeAwareDictionary
    nameWithType: ChangeAwareDictionary
    fullName: NMF.Expressions.ChangeAwareDictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ChangeAwareDictionary`2.Item*
  commentId: Overload:NMF.Expressions.ChangeAwareDictionary`2.Item
  name: Item
  nameWithType: ChangeAwareDictionary<TKey, TValue>.Item
  fullName: NMF.Expressions.ChangeAwareDictionary<TKey, TValue>.Item
  nameWithType.vb: ChangeAwareDictionary(Of TKey, TValue).Item
  fullName.vb: NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue).Item
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TValue
  commentId: '!:TValue'
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: NMF.Expressions.ChangeAwareDictionary`2.AsNotifiable*
  commentId: Overload:NMF.Expressions.ChangeAwareDictionary`2.AsNotifiable
  name: AsNotifiable
  nameWithType: ChangeAwareDictionary<TKey, TValue>.AsNotifiable
  fullName: NMF.Expressions.ChangeAwareDictionary<TKey, TValue>.AsNotifiable
  nameWithType.vb: ChangeAwareDictionary(Of TKey, TValue).AsNotifiable
  fullName.vb: NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue).AsNotifiable
- uid: NMF.Expressions.INotifyReversableValue{{TValue}}
  commentId: T:NMF.Expressions.INotifyReversableValue{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyReversableValue`1
  name: INotifyReversableValue<TValue>
  nameWithType: INotifyReversableValue<TValue>
  fullName: NMF.Expressions.INotifyReversableValue<TValue>
  nameWithType.vb: INotifyReversableValue(Of TValue)
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of TValue)
  name.vb: INotifyReversableValue(Of TValue)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    nameWithType: INotifyReversableValue
    fullName: NMF.Expressions.INotifyReversableValue
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    nameWithType: INotifyReversableValue
    fullName: NMF.Expressions.INotifyReversableValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyReversableValue`1
  commentId: T:NMF.Expressions.INotifyReversableValue`1
  name: INotifyReversableValue<T>
  nameWithType: INotifyReversableValue<T>
  fullName: NMF.Expressions.INotifyReversableValue<T>
  nameWithType.vb: INotifyReversableValue(Of T)
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of T)
  name.vb: INotifyReversableValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    nameWithType: INotifyReversableValue
    fullName: NMF.Expressions.INotifyReversableValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    nameWithType: INotifyReversableValue
    fullName: NMF.Expressions.INotifyReversableValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ChangeAwareDictionary`2.Forget*
  commentId: Overload:NMF.Expressions.ChangeAwareDictionary`2.Forget
  name: Forget
  nameWithType: ChangeAwareDictionary<TKey, TValue>.Forget
  fullName: NMF.Expressions.ChangeAwareDictionary<TKey, TValue>.Forget
  nameWithType.vb: ChangeAwareDictionary(Of TKey, TValue).Forget
  fullName.vb: NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue).Forget
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
