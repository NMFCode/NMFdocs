### YamlMime:ManagedReference
items:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  id: NMF.Expressions
  children:
  - NMF.Expressions.ApplyParametersVisitor
  - NMF.Expressions.BinaryHeap`1
  - NMF.Expressions.Binding`1
  - NMF.Expressions.Binding`2
  - NMF.Expressions.Cell`1
  - NMF.Expressions.ChangeAwareDictionary`2
  - NMF.Expressions.CollectionBinding
  - NMF.Expressions.CollectionChangedNotificationResult`1
  - NMF.Expressions.CollectionChangeListener`1
  - NMF.Expressions.ConfiguredNotifySystem
  - NMF.Expressions.ConstantAttribute
  - NMF.Expressions.ConstantValue`1
  - NMF.Expressions.ExecutionEngine
  - NMF.Expressions.ExecutionMetaData
  - NMF.Expressions.ExpressionAnalyzer
  - NMF.Expressions.ExpressionCompileRewriter
  - NMF.Expressions.ExpressionCompileRewriterAttribute
  - NMF.Expressions.ExpressionVisitorBase
  - NMF.Expressions.IBinding`1
  - NMF.Expressions.IChangeListener
  - NMF.Expressions.ICollectionChangedNotificationResult
  - NMF.Expressions.ICollectionChangedNotificationResult`1
  - NMF.Expressions.ICollectionExpression
  - NMF.Expressions.ICollectionExpression`1
  - NMF.Expressions.IEnumerableExpression
  - NMF.Expressions.IEnumerableExpression`1
  - NMF.Expressions.IGroupingExpression`2
  - NMF.Expressions.IListExpression`1
  - NMF.Expressions.ImmutableMethodAttribute
  - NMF.Expressions.IncrementalFunc`10
  - NMF.Expressions.IncrementalFunc`11
  - NMF.Expressions.IncrementalFunc`2
  - NMF.Expressions.IncrementalFunc`3
  - NMF.Expressions.IncrementalFunc`4
  - NMF.Expressions.IncrementalFunc`5
  - NMF.Expressions.IncrementalFunc`6
  - NMF.Expressions.IncrementalFunc`7
  - NMF.Expressions.IncrementalFunc`8
  - NMF.Expressions.IncrementalFunc`9
  - NMF.Expressions.INotifiable
  - NMF.Expressions.INotificationResult
  - NMF.Expressions.INotifyCollection`1
  - NMF.Expressions.INotifyEnumerable
  - NMF.Expressions.INotifyEnumerable`1
  - NMF.Expressions.INotifyExpression
  - NMF.Expressions.INotifyExpression`1
  - NMF.Expressions.INotifyGrouping`2
  - NMF.Expressions.INotifyReversableExpression`1
  - NMF.Expressions.INotifyReversableValue`1
  - NMF.Expressions.INotifySplit`1
  - NMF.Expressions.INotifySystem
  - NMF.Expressions.INotifyValue`1
  - NMF.Expressions.InstructionLevelNotifySystem
  - NMF.Expressions.IOrderableEnumerableExpression`1
  - NMF.Expressions.IOrderableNotifyEnumerable`1
  - NMF.Expressions.ISetExpression`1
  - NMF.Expressions.ISuccessorList
  - NMF.Expressions.IValueChangedNotificationResult
  - NMF.Expressions.IValueChangedNotificationResult`1
  - NMF.Expressions.LensPutAttribute
  - NMF.Expressions.ModelNotifySystem
  - NMF.Expressions.MultiSuccessorList
  - NMF.Expressions.Notifiable
  - NMF.Expressions.NotificationResultCollection
  - NMF.Expressions.NotifyCollection`1
  - NMF.Expressions.NotifyExpression`1
  - NMF.Expressions.NotifyExpressionBase
  - NMF.Expressions.NotifyReversableValue`1
  - NMF.Expressions.NotifySystem
  - NMF.Expressions.NotifyValue`1
  - NMF.Expressions.Observable
  - NMF.Expressions.ObservableProxyAttribute
  - NMF.Expressions.ObservingFunc`10
  - NMF.Expressions.ObservingFunc`11
  - NMF.Expressions.ObservingFunc`12
  - NMF.Expressions.ObservingFunc`13
  - NMF.Expressions.ObservingFunc`14
  - NMF.Expressions.ObservingFunc`15
  - NMF.Expressions.ObservingFunc`16
  - NMF.Expressions.ObservingFunc`2
  - NMF.Expressions.ObservingFunc`3
  - NMF.Expressions.ObservingFunc`4
  - NMF.Expressions.ObservingFunc`5
  - NMF.Expressions.ObservingFunc`6
  - NMF.Expressions.ObservingFunc`7
  - NMF.Expressions.ObservingFunc`8
  - NMF.Expressions.ObservingFunc`9
  - NMF.Expressions.ParallelExecutionEngine
  - NMF.Expressions.ParameterDataflowAttribute
  - NMF.Expressions.ParameterDependencyAttribute
  - NMF.Expressions.PromotionNotifySystem
  - NMF.Expressions.PropertyChangeListener
  - NMF.Expressions.ProxyMethodAttribute
  - NMF.Expressions.RecordingNotifySystem
  - NMF.Expressions.RepositoryChangeNotificationSystem
  - NMF.Expressions.ReversableExtensions
  - NMF.Expressions.ReversableObservingFunc`10
  - NMF.Expressions.ReversableObservingFunc`11
  - NMF.Expressions.ReversableObservingFunc`12
  - NMF.Expressions.ReversableObservingFunc`13
  - NMF.Expressions.ReversableObservingFunc`14
  - NMF.Expressions.ReversableObservingFunc`15
  - NMF.Expressions.ReversableObservingFunc`16
  - NMF.Expressions.ReversableObservingFunc`2
  - NMF.Expressions.ReversableObservingFunc`3
  - NMF.Expressions.ReversableObservingFunc`4
  - NMF.Expressions.ReversableObservingFunc`5
  - NMF.Expressions.ReversableObservingFunc`6
  - NMF.Expressions.ReversableObservingFunc`7
  - NMF.Expressions.ReversableObservingFunc`8
  - NMF.Expressions.ReversableObservingFunc`9
  - NMF.Expressions.ReverseComparer`1
  - NMF.Expressions.SequentialExecutionEngine
  - NMF.Expressions.SetExpressionRewriter
  - NMF.Expressions.SetExpressionRewriterAttribute
  - NMF.Expressions.SingleSuccessorList
  - NMF.Expressions.SingletonSuccessorList
  - NMF.Expressions.TreeExtensionNotifySystem
  - NMF.Expressions.UnchangedNotificationResult
  - NMF.Expressions.ValueChangedEventArgs
  - NMF.Expressions.ValueChangedNotificationResult`1
  langs:
  - csharp
  - vb
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  type: Namespace
  assemblies:
  - NMF.Expressions
references:
- uid: NMF.Expressions.ApplyParametersVisitor
  commentId: T:NMF.Expressions.ApplyParametersVisitor
  name: ApplyParametersVisitor
  nameWithType: ApplyParametersVisitor
  fullName: NMF.Expressions.ApplyParametersVisitor
- uid: NMF.Expressions.BinaryHeap`1
  commentId: T:NMF.Expressions.BinaryHeap`1
  parent: NMF.Expressions
  name: BinaryHeap<T>
  nameWithType: BinaryHeap<T>
  fullName: NMF.Expressions.BinaryHeap<T>
  nameWithType.vb: BinaryHeap(Of T)
  fullName.vb: NMF.Expressions.BinaryHeap(Of T)
  name.vb: BinaryHeap(Of T)
  spec.csharp:
  - uid: NMF.Expressions.BinaryHeap`1
    name: BinaryHeap
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.BinaryHeap`1
    name: BinaryHeap
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.Cell`1
  commentId: T:NMF.Expressions.Cell`1
  name: Cell<T>
  nameWithType: Cell<T>
  fullName: NMF.Expressions.Cell<T>
  nameWithType.vb: Cell(Of T)
  fullName.vb: NMF.Expressions.Cell(Of T)
  name.vb: Cell(Of T)
  spec.csharp:
  - uid: NMF.Expressions.Cell`1
    name: Cell
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.Cell`1
    name: Cell
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.ConstantAttribute
  commentId: T:NMF.Expressions.ConstantAttribute
  name: ConstantAttribute
  nameWithType: ConstantAttribute
  fullName: NMF.Expressions.ConstantAttribute
- uid: NMF.Expressions.ICollectionChangedNotificationResult
  commentId: T:NMF.Expressions.ICollectionChangedNotificationResult
  parent: NMF.Expressions
  name: ICollectionChangedNotificationResult
  nameWithType: ICollectionChangedNotificationResult
  fullName: NMF.Expressions.ICollectionChangedNotificationResult
- uid: NMF.Expressions.ICollectionChangedNotificationResult`1
  commentId: T:NMF.Expressions.ICollectionChangedNotificationResult`1
  name: ICollectionChangedNotificationResult<T>
  nameWithType: ICollectionChangedNotificationResult<T>
  fullName: NMF.Expressions.ICollectionChangedNotificationResult<T>
  nameWithType.vb: ICollectionChangedNotificationResult(Of T)
  fullName.vb: NMF.Expressions.ICollectionChangedNotificationResult(Of T)
  name.vb: ICollectionChangedNotificationResult(Of T)
  spec.csharp:
  - uid: NMF.Expressions.ICollectionChangedNotificationResult`1
    name: ICollectionChangedNotificationResult
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ICollectionChangedNotificationResult`1
    name: ICollectionChangedNotificationResult
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.CollectionChangedNotificationResult`1
  commentId: T:NMF.Expressions.CollectionChangedNotificationResult`1
  parent: NMF.Expressions
  name: CollectionChangedNotificationResult<T>
  nameWithType: CollectionChangedNotificationResult<T>
  fullName: NMF.Expressions.CollectionChangedNotificationResult<T>
  nameWithType.vb: CollectionChangedNotificationResult(Of T)
  fullName.vb: NMF.Expressions.CollectionChangedNotificationResult(Of T)
  name.vb: CollectionChangedNotificationResult(Of T)
  spec.csharp:
  - uid: NMF.Expressions.CollectionChangedNotificationResult`1
    name: CollectionChangedNotificationResult
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.CollectionChangedNotificationResult`1
    name: CollectionChangedNotificationResult
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.CollectionChangeListener`1
  commentId: T:NMF.Expressions.CollectionChangeListener`1
  name: CollectionChangeListener<T>
  nameWithType: CollectionChangeListener<T>
  fullName: NMF.Expressions.CollectionChangeListener<T>
  nameWithType.vb: CollectionChangeListener(Of T)
  fullName.vb: NMF.Expressions.CollectionChangeListener(Of T)
  name.vb: CollectionChangeListener(Of T)
  spec.csharp:
  - uid: NMF.Expressions.CollectionChangeListener`1
    name: CollectionChangeListener
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.CollectionChangeListener`1
    name: CollectionChangeListener
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.ExecutionEngine
  commentId: T:NMF.Expressions.ExecutionEngine
  parent: NMF.Expressions
  name: ExecutionEngine
  nameWithType: ExecutionEngine
  fullName: NMF.Expressions.ExecutionEngine
- uid: NMF.Expressions.ExecutionMetaData
  commentId: T:NMF.Expressions.ExecutionMetaData
  parent: NMF.Expressions
  name: ExecutionMetaData
  nameWithType: ExecutionMetaData
  fullName: NMF.Expressions.ExecutionMetaData
- uid: NMF.Expressions.IChangeListener
  commentId: T:NMF.Expressions.IChangeListener
  parent: NMF.Expressions
  name: IChangeListener
  nameWithType: IChangeListener
  fullName: NMF.Expressions.IChangeListener
- uid: NMF.Expressions.INotificationResult
  commentId: T:NMF.Expressions.INotificationResult
  parent: NMF.Expressions
  name: INotificationResult
  nameWithType: INotificationResult
  fullName: NMF.Expressions.INotificationResult
- uid: NMF.Expressions.NotificationResultCollection
  commentId: T:NMF.Expressions.NotificationResultCollection
  parent: NMF.Expressions
  name: NotificationResultCollection
  nameWithType: NotificationResultCollection
  fullName: NMF.Expressions.NotificationResultCollection
- uid: NMF.Expressions.ParallelExecutionEngine
  commentId: T:NMF.Expressions.ParallelExecutionEngine
  name: ParallelExecutionEngine
  nameWithType: ParallelExecutionEngine
  fullName: NMF.Expressions.ParallelExecutionEngine
- uid: NMF.Expressions.PropertyChangeListener
  commentId: T:NMF.Expressions.PropertyChangeListener
  name: PropertyChangeListener
  nameWithType: PropertyChangeListener
  fullName: NMF.Expressions.PropertyChangeListener
- uid: NMF.Expressions.SequentialExecutionEngine
  commentId: T:NMF.Expressions.SequentialExecutionEngine
  name: SequentialExecutionEngine
  nameWithType: SequentialExecutionEngine
  fullName: NMF.Expressions.SequentialExecutionEngine
- uid: NMF.Expressions.UnchangedNotificationResult
  commentId: T:NMF.Expressions.UnchangedNotificationResult
  parent: NMF.Expressions
  name: UnchangedNotificationResult
  nameWithType: UnchangedNotificationResult
  fullName: NMF.Expressions.UnchangedNotificationResult
- uid: NMF.Expressions.IValueChangedNotificationResult
  commentId: T:NMF.Expressions.IValueChangedNotificationResult
  parent: NMF.Expressions
  name: IValueChangedNotificationResult
  nameWithType: IValueChangedNotificationResult
  fullName: NMF.Expressions.IValueChangedNotificationResult
- uid: NMF.Expressions.IValueChangedNotificationResult`1
  commentId: T:NMF.Expressions.IValueChangedNotificationResult`1
  name: IValueChangedNotificationResult<T>
  nameWithType: IValueChangedNotificationResult<T>
  fullName: NMF.Expressions.IValueChangedNotificationResult<T>
  nameWithType.vb: IValueChangedNotificationResult(Of T)
  fullName.vb: NMF.Expressions.IValueChangedNotificationResult(Of T)
  name.vb: IValueChangedNotificationResult(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IValueChangedNotificationResult`1
    name: IValueChangedNotificationResult
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IValueChangedNotificationResult`1
    name: IValueChangedNotificationResult
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.ValueChangedNotificationResult`1
  commentId: T:NMF.Expressions.ValueChangedNotificationResult`1
  name: ValueChangedNotificationResult<T>
  nameWithType: ValueChangedNotificationResult<T>
  fullName: NMF.Expressions.ValueChangedNotificationResult<T>
  nameWithType.vb: ValueChangedNotificationResult(Of T)
  fullName.vb: NMF.Expressions.ValueChangedNotificationResult(Of T)
  name.vb: ValueChangedNotificationResult(Of T)
  spec.csharp:
  - uid: NMF.Expressions.ValueChangedNotificationResult`1
    name: ValueChangedNotificationResult
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ValueChangedNotificationResult`1
    name: ValueChangedNotificationResult
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.ExpressionAnalyzer
  commentId: T:NMF.Expressions.ExpressionAnalyzer
  name: ExpressionAnalyzer
  nameWithType: ExpressionAnalyzer
  fullName: NMF.Expressions.ExpressionAnalyzer
- uid: NMF.Expressions.ExpressionCompileRewriter
  commentId: T:NMF.Expressions.ExpressionCompileRewriter
  name: ExpressionCompileRewriter
  nameWithType: ExpressionCompileRewriter
  fullName: NMF.Expressions.ExpressionCompileRewriter
- uid: NMF.Expressions.ExpressionCompileRewriterAttribute
  commentId: T:NMF.Expressions.ExpressionCompileRewriterAttribute
  parent: NMF.Expressions
  name: ExpressionCompileRewriterAttribute
  nameWithType: ExpressionCompileRewriterAttribute
  fullName: NMF.Expressions.ExpressionCompileRewriterAttribute
- uid: NMF.Expressions.ProxyMethodAttribute
  commentId: T:NMF.Expressions.ProxyMethodAttribute
  parent: NMF.Expressions
  name: ProxyMethodAttribute
  nameWithType: ProxyMethodAttribute
  fullName: NMF.Expressions.ProxyMethodAttribute
- uid: NMF.Expressions.SetExpressionRewriter
  commentId: T:NMF.Expressions.SetExpressionRewriter
  name: SetExpressionRewriter
  nameWithType: SetExpressionRewriter
  fullName: NMF.Expressions.SetExpressionRewriter
- uid: NMF.Expressions.SetExpressionRewriterAttribute
  commentId: T:NMF.Expressions.SetExpressionRewriterAttribute
  parent: NMF.Expressions
  name: SetExpressionRewriterAttribute
  nameWithType: SetExpressionRewriterAttribute
  fullName: NMF.Expressions.SetExpressionRewriterAttribute
- uid: NMF.Expressions.ExpressionVisitorBase
  commentId: T:NMF.Expressions.ExpressionVisitorBase
  parent: NMF.Expressions
  name: ExpressionVisitorBase
  nameWithType: ExpressionVisitorBase
  fullName: NMF.Expressions.ExpressionVisitorBase
- uid: NMF.Expressions.ConstantValue`1
  commentId: T:NMF.Expressions.ConstantValue`1
  name: ConstantValue<T>
  nameWithType: ConstantValue<T>
  fullName: NMF.Expressions.ConstantValue<T>
  nameWithType.vb: ConstantValue(Of T)
  fullName.vb: NMF.Expressions.ConstantValue(Of T)
  name.vb: ConstantValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.ConstantValue`1
    name: ConstantValue
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ConstantValue`1
    name: ConstantValue
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.ObservingFunc`2
  commentId: T:NMF.Expressions.ObservingFunc`2
  parent: NMF.Expressions
  name: ObservingFunc<T1, TResult>
  nameWithType: ObservingFunc<T1, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>
  nameWithType.vb: ObservingFunc(Of T1, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult)
  name.vb: ObservingFunc(Of T1, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`3
  commentId: T:NMF.Expressions.ObservingFunc`3
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, TResult>
  nameWithType: ObservingFunc<T1, T2, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, TResult)
  name.vb: ObservingFunc(Of T1, T2, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`3
    name: ObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`3
    name: ObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`4
  commentId: T:NMF.Expressions.ObservingFunc`4
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, T3, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`4
    name: ObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`4
    name: ObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`5
  commentId: T:NMF.Expressions.ObservingFunc`5
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, T3, T4, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`5
    name: ObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`5
    name: ObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`6
  commentId: T:NMF.Expressions.ObservingFunc`6
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, T3, T4, T5, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`6
    name: ObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`6
    name: ObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`7
  commentId: T:NMF.Expressions.ObservingFunc`7
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`7
    name: ObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`7
    name: ObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`8
  commentId: T:NMF.Expressions.ObservingFunc`8
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`8
    name: ObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`8
    name: ObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`9
  commentId: T:NMF.Expressions.ObservingFunc`9
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`9
    name: ObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`9
    name: ObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`10
  commentId: T:NMF.Expressions.ObservingFunc`10
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`10
    name: ObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`10
    name: ObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`11
  commentId: T:NMF.Expressions.ObservingFunc`11
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`11
    name: ObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`11
    name: ObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`12
  commentId: T:NMF.Expressions.ObservingFunc`12
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`12
    name: ObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`12
    name: ObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`13
  commentId: T:NMF.Expressions.ObservingFunc`13
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`13
    name: ObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`13
    name: ObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`14
  commentId: T:NMF.Expressions.ObservingFunc`14
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`14
    name: ObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`14
    name: ObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`15
  commentId: T:NMF.Expressions.ObservingFunc`15
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`15
    name: ObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`15
    name: ObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ObservingFunc`16
  commentId: T:NMF.Expressions.ObservingFunc`16
  parent: NMF.Expressions
  name: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>
  nameWithType: ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>
  nameWithType.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)
  name.vb: ObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`16
    name: ObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: T15
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`16
    name: ObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: T15
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ImmutableMethodAttribute
  commentId: T:NMF.Expressions.ImmutableMethodAttribute
  name: ImmutableMethodAttribute
  nameWithType: ImmutableMethodAttribute
  fullName: NMF.Expressions.ImmutableMethodAttribute
- uid: NMF.Expressions.INotifiable
  commentId: T:NMF.Expressions.INotifiable
  parent: NMF.Expressions
  name: INotifiable
  nameWithType: INotifiable
  fullName: NMF.Expressions.INotifiable
- uid: NMF.Expressions.Notifiable
  commentId: T:NMF.Expressions.Notifiable
  name: Notifiable
  nameWithType: Notifiable
  fullName: NMF.Expressions.Notifiable
- uid: NMF.Expressions.INotifyExpression
  commentId: T:NMF.Expressions.INotifyExpression
  parent: NMF.Expressions
  name: INotifyExpression
  nameWithType: INotifyExpression
  fullName: NMF.Expressions.INotifyExpression
- uid: NMF.Expressions.INotifyExpression`1
  commentId: T:NMF.Expressions.INotifyExpression`1
  parent: NMF.Expressions
  name: INotifyExpression<T>
  nameWithType: INotifyExpression<T>
  fullName: NMF.Expressions.INotifyExpression<T>
  nameWithType.vb: INotifyExpression(Of T)
  fullName.vb: NMF.Expressions.INotifyExpression(Of T)
  name.vb: INotifyExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifyReversableExpression`1
  commentId: T:NMF.Expressions.INotifyReversableExpression`1
  name: INotifyReversableExpression<T>
  nameWithType: INotifyReversableExpression<T>
  fullName: NMF.Expressions.INotifyReversableExpression<T>
  nameWithType.vb: INotifyReversableExpression(Of T)
  fullName.vb: NMF.Expressions.INotifyReversableExpression(Of T)
  name.vb: INotifyReversableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableExpression`1
    name: INotifyReversableExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableExpression`1
    name: INotifyReversableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifySystem
  commentId: T:NMF.Expressions.INotifySystem
  parent: NMF.Expressions
  name: INotifySystem
  nameWithType: INotifySystem
  fullName: NMF.Expressions.INotifySystem
- uid: NMF.Expressions.INotifyValue`1
  commentId: T:NMF.Expressions.INotifyValue`1
  name: INotifyValue<T>
  nameWithType: INotifyValue<T>
  fullName: NMF.Expressions.INotifyValue<T>
  nameWithType.vb: INotifyValue(Of T)
  fullName.vb: NMF.Expressions.INotifyValue(Of T)
  name.vb: INotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifyReversableValue`1
  commentId: T:NMF.Expressions.INotifyReversableValue`1
  name: INotifyReversableValue<T>
  nameWithType: INotifyReversableValue<T>
  fullName: NMF.Expressions.INotifyReversableValue<T>
  nameWithType.vb: INotifyReversableValue(Of T)
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of T)
  name.vb: INotifyReversableValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.InstructionLevelNotifySystem
  commentId: T:NMF.Expressions.InstructionLevelNotifySystem
  parent: NMF.Expressions
  name: InstructionLevelNotifySystem
  nameWithType: InstructionLevelNotifySystem
  fullName: NMF.Expressions.InstructionLevelNotifySystem
- uid: NMF.Expressions.ISuccessorList
  commentId: T:NMF.Expressions.ISuccessorList
  parent: NMF.Expressions
  name: ISuccessorList
  nameWithType: ISuccessorList
  fullName: NMF.Expressions.ISuccessorList
- uid: NMF.Expressions.LensPutAttribute
  commentId: T:NMF.Expressions.LensPutAttribute
  name: LensPutAttribute
  nameWithType: LensPutAttribute
  fullName: NMF.Expressions.LensPutAttribute
- uid: NMF.Expressions.MultiSuccessorList
  commentId: T:NMF.Expressions.MultiSuccessorList
  name: MultiSuccessorList
  nameWithType: MultiSuccessorList
  fullName: NMF.Expressions.MultiSuccessorList
- uid: NMF.Expressions.NotifyExpression`1
  commentId: T:NMF.Expressions.NotifyExpression`1
  name: NotifyExpression<T>
  nameWithType: NotifyExpression<T>
  fullName: NMF.Expressions.NotifyExpression<T>
  nameWithType.vb: NotifyExpression(Of T)
  fullName.vb: NMF.Expressions.NotifyExpression(Of T)
  name.vb: NotifyExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.NotifyExpression`1
    name: NotifyExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.NotifyExpression`1
    name: NotifyExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.NotifyExpressionBase
  commentId: T:NMF.Expressions.NotifyExpressionBase
  parent: NMF.Expressions
  name: NotifyExpressionBase
  nameWithType: NotifyExpressionBase
  fullName: NMF.Expressions.NotifyExpressionBase
- uid: NMF.Expressions.NotifySystem
  commentId: T:NMF.Expressions.NotifySystem
  name: NotifySystem
  nameWithType: NotifySystem
  fullName: NMF.Expressions.NotifySystem
- uid: NMF.Expressions.NotifyValue`1
  commentId: T:NMF.Expressions.NotifyValue`1
  name: NotifyValue<T>
  nameWithType: NotifyValue<T>
  fullName: NMF.Expressions.NotifyValue<T>
  nameWithType.vb: NotifyValue(Of T)
  fullName.vb: NMF.Expressions.NotifyValue(Of T)
  name.vb: NotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.NotifyValue`1
    name: NotifyValue
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.NotifyValue`1
    name: NotifyValue
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.NotifyReversableValue`1
  commentId: T:NMF.Expressions.NotifyReversableValue`1
  name: NotifyReversableValue<T>
  nameWithType: NotifyReversableValue<T>
  fullName: NMF.Expressions.NotifyReversableValue<T>
  nameWithType.vb: NotifyReversableValue(Of T)
  fullName.vb: NMF.Expressions.NotifyReversableValue(Of T)
  name.vb: NotifyReversableValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.NotifyReversableValue`1
    name: NotifyReversableValue
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.NotifyReversableValue`1
    name: NotifyReversableValue
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.Observable
  commentId: T:NMF.Expressions.Observable
  name: Observable
  nameWithType: Observable
  fullName: NMF.Expressions.Observable
- uid: NMF.Expressions.ObservableProxyAttribute
  commentId: T:NMF.Expressions.ObservableProxyAttribute
  parent: NMF.Expressions
  name: ObservableProxyAttribute
  nameWithType: ObservableProxyAttribute
  fullName: NMF.Expressions.ObservableProxyAttribute
- uid: NMF.Expressions.ParameterDataflowAttribute
  commentId: T:NMF.Expressions.ParameterDataflowAttribute
  parent: NMF.Expressions
  name: ParameterDataflowAttribute
  nameWithType: ParameterDataflowAttribute
  fullName: NMF.Expressions.ParameterDataflowAttribute
- uid: NMF.Expressions.ReversableExtensions
  commentId: T:NMF.Expressions.ReversableExtensions
  parent: NMF.Expressions
  name: ReversableExtensions
  nameWithType: ReversableExtensions
  fullName: NMF.Expressions.ReversableExtensions
- uid: NMF.Expressions.ReversableObservingFunc`2
  commentId: T:NMF.Expressions.ReversableObservingFunc`2
  name: ReversableObservingFunc<T1, TResult>
  nameWithType: ReversableObservingFunc<T1, TResult>
  fullName: NMF.Expressions.ReversableObservingFunc<T1, TResult>
  nameWithType.vb: ReversableObservingFunc(Of T1, TResult)
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, TResult)
  name.vb: ReversableObservingFunc(Of T1, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ReversableObservingFunc`2
    name: ReversableObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ReversableObservingFunc`2
    name: ReversableObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ReversableObservingFunc`3
  commentId: T:NMF.Expressions.ReversableObservingFunc`3
  name: ReversableObservingFunc<T1, T2, TResult>
  nameWithType: ReversableObservingFunc<T1, T2, TResult>
  fullName: NMF.Expressions.ReversableObservingFunc<T1, T2, TResult>
  nameWithType.vb: ReversableObservingFunc(Of T1, T2, TResult)
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, T2, TResult)
  name.vb: ReversableObservingFunc(Of T1, T2, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ReversableObservingFunc`3
    name: ReversableObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ReversableObservingFunc`3
    name: ReversableObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ReversableObservingFunc`4
  commentId: T:NMF.Expressions.ReversableObservingFunc`4
  name: ReversableObservingFunc<T1, T2, T3, TResult>
  nameWithType: ReversableObservingFunc<T1, T2, T3, TResult>
  fullName: NMF.Expressions.ReversableObservingFunc<T1, T2, T3, TResult>
  nameWithType.vb: ReversableObservingFunc(Of T1, T2, T3, TResult)
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, T2, T3, TResult)
  name.vb: ReversableObservingFunc(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ReversableObservingFunc`4
    name: ReversableObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ReversableObservingFunc`4
    name: ReversableObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ReversableObservingFunc`5
  commentId: T:NMF.Expressions.ReversableObservingFunc`5
  name: ReversableObservingFunc<T1, T2, T3, T4, TResult>
  nameWithType: ReversableObservingFunc<T1, T2, T3, T4, TResult>
  fullName: NMF.Expressions.ReversableObservingFunc<T1, T2, T3, T4, TResult>
  nameWithType.vb: ReversableObservingFunc(Of T1, T2, T3, T4, TResult)
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, T2, T3, T4, TResult)
  name.vb: ReversableObservingFunc(Of T1, T2, T3, T4, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ReversableObservingFunc`5
    name: ReversableObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ReversableObservingFunc`5
    name: ReversableObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ReversableObservingFunc`6
  commentId: T:NMF.Expressions.ReversableObservingFunc`6
  name: ReversableObservingFunc<T1, T2, T3, T4, T5, TResult>
  nameWithType: ReversableObservingFunc<T1, T2, T3, T4, T5, TResult>
  fullName: NMF.Expressions.ReversableObservingFunc<T1, T2, T3, T4, T5, TResult>
  nameWithType.vb: ReversableObservingFunc(Of T1, T2, T3, T4, T5, TResult)
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, T2, T3, T4, T5, TResult)
  name.vb: ReversableObservingFunc(Of T1, T2, T3, T4, T5, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ReversableObservingFunc`6
    name: ReversableObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ReversableObservingFunc`6
    name: ReversableObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ReversableObservingFunc`7
  commentId: T:NMF.Expressions.ReversableObservingFunc`7
  name: ReversableObservingFunc<T1, T2, T3, T4, T5, T6, TResult>
  nameWithType: ReversableObservingFunc<T1, T2, T3, T4, T5, T6, TResult>
  fullName: NMF.Expressions.ReversableObservingFunc<T1, T2, T3, T4, T5, T6, TResult>
  nameWithType.vb: ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, TResult)
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, TResult)
  name.vb: ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ReversableObservingFunc`7
    name: ReversableObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ReversableObservingFunc`7
    name: ReversableObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ReversableObservingFunc`8
  commentId: T:NMF.Expressions.ReversableObservingFunc`8
  name: ReversableObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType: ReversableObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  fullName: NMF.Expressions.ReversableObservingFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType.vb: ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  name.vb: ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ReversableObservingFunc`8
    name: ReversableObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ReversableObservingFunc`8
    name: ReversableObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ReversableObservingFunc`9
  commentId: T:NMF.Expressions.ReversableObservingFunc`9
  name: ReversableObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  nameWithType: ReversableObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  fullName: NMF.Expressions.ReversableObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  nameWithType.vb: ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  name.vb: ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ReversableObservingFunc`9
    name: ReversableObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ReversableObservingFunc`9
    name: ReversableObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ReversableObservingFunc`10
  commentId: T:NMF.Expressions.ReversableObservingFunc`10
  name: ReversableObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  nameWithType: ReversableObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  fullName: NMF.Expressions.ReversableObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  nameWithType.vb: ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  name.vb: ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ReversableObservingFunc`10
    name: ReversableObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ReversableObservingFunc`10
    name: ReversableObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ReversableObservingFunc`11
  commentId: T:NMF.Expressions.ReversableObservingFunc`11
  name: ReversableObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  nameWithType: ReversableObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  fullName: NMF.Expressions.ReversableObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  nameWithType.vb: ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  name.vb: ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ReversableObservingFunc`11
    name: ReversableObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ReversableObservingFunc`11
    name: ReversableObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ReversableObservingFunc`12
  commentId: T:NMF.Expressions.ReversableObservingFunc`12
  name: ReversableObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  nameWithType: ReversableObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  fullName: NMF.Expressions.ReversableObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>
  nameWithType.vb: ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  name.vb: ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ReversableObservingFunc`12
    name: ReversableObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ReversableObservingFunc`12
    name: ReversableObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ReversableObservingFunc`13
  commentId: T:NMF.Expressions.ReversableObservingFunc`13
  name: ReversableObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  nameWithType: ReversableObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  fullName: NMF.Expressions.ReversableObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>
  nameWithType.vb: ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  name.vb: ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ReversableObservingFunc`13
    name: ReversableObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ReversableObservingFunc`13
    name: ReversableObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ReversableObservingFunc`14
  commentId: T:NMF.Expressions.ReversableObservingFunc`14
  name: ReversableObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType: ReversableObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  fullName: NMF.Expressions.ReversableObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>
  nameWithType.vb: ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  name.vb: ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ReversableObservingFunc`14
    name: ReversableObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ReversableObservingFunc`14
    name: ReversableObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ReversableObservingFunc`15
  commentId: T:NMF.Expressions.ReversableObservingFunc`15
  name: ReversableObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType: ReversableObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  fullName: NMF.Expressions.ReversableObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>
  nameWithType.vb: ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  name.vb: ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ReversableObservingFunc`15
    name: ReversableObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ReversableObservingFunc`15
    name: ReversableObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ReversableObservingFunc`16
  commentId: T:NMF.Expressions.ReversableObservingFunc`16
  name: ReversableObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>
  nameWithType: ReversableObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>
  fullName: NMF.Expressions.ReversableObservingFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>
  nameWithType.vb: ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)
  fullName.vb: NMF.Expressions.ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)
  name.vb: ReversableObservingFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ReversableObservingFunc`16
    name: ReversableObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: T15
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ReversableObservingFunc`16
    name: ReversableObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: T11
  - name: ','
  - name: " "
  - name: T12
  - name: ','
  - name: " "
  - name: T13
  - name: ','
  - name: " "
  - name: T14
  - name: ','
  - name: " "
  - name: T15
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.SingleSuccessorList
  commentId: T:NMF.Expressions.SingleSuccessorList
  name: SingleSuccessorList
  nameWithType: SingleSuccessorList
  fullName: NMF.Expressions.SingleSuccessorList
- uid: NMF.Expressions.SingletonSuccessorList
  commentId: T:NMF.Expressions.SingletonSuccessorList
  parent: NMF.Expressions
  name: SingletonSuccessorList
  nameWithType: SingletonSuccessorList
  fullName: NMF.Expressions.SingletonSuccessorList
- uid: NMF.Expressions.ValueChangedEventArgs
  commentId: T:NMF.Expressions.ValueChangedEventArgs
  parent: NMF.Expressions
  name: ValueChangedEventArgs
  nameWithType: ValueChangedEventArgs
  fullName: NMF.Expressions.ValueChangedEventArgs
- uid: NMF.Expressions.ConfiguredNotifySystem
  commentId: T:NMF.Expressions.ConfiguredNotifySystem
  name: ConfiguredNotifySystem
  nameWithType: ConfiguredNotifySystem
  fullName: NMF.Expressions.ConfiguredNotifySystem
- uid: NMF.Expressions.RecordingNotifySystem
  commentId: T:NMF.Expressions.RecordingNotifySystem
  name: RecordingNotifySystem
  nameWithType: RecordingNotifySystem
  fullName: NMF.Expressions.RecordingNotifySystem
- uid: NMF.Expressions.RepositoryChangeNotificationSystem
  commentId: T:NMF.Expressions.RepositoryChangeNotificationSystem
  name: RepositoryChangeNotificationSystem
  nameWithType: RepositoryChangeNotificationSystem
  fullName: NMF.Expressions.RepositoryChangeNotificationSystem
- uid: NMF.Expressions.IEnumerableExpression`1
  commentId: T:NMF.Expressions.IEnumerableExpression`1
  name: IEnumerableExpression<T>
  nameWithType: IEnumerableExpression<T>
  fullName: NMF.Expressions.IEnumerableExpression<T>
  nameWithType.vb: IEnumerableExpression(Of T)
  fullName.vb: NMF.Expressions.IEnumerableExpression(Of T)
  name.vb: IEnumerableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.IEnumerableExpression
  commentId: T:NMF.Expressions.IEnumerableExpression
  parent: NMF.Expressions
  name: IEnumerableExpression
  nameWithType: IEnumerableExpression
  fullName: NMF.Expressions.IEnumerableExpression
- uid: NMF.Expressions.ICollectionExpression`1
  commentId: T:NMF.Expressions.ICollectionExpression`1
  name: ICollectionExpression<T>
  nameWithType: ICollectionExpression<T>
  fullName: NMF.Expressions.ICollectionExpression<T>
  nameWithType.vb: ICollectionExpression(Of T)
  fullName.vb: NMF.Expressions.ICollectionExpression(Of T)
  name.vb: ICollectionExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ICollectionExpression`1
    name: ICollectionExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.ICollectionExpression
  commentId: T:NMF.Expressions.ICollectionExpression
  parent: NMF.Expressions
  name: ICollectionExpression
  nameWithType: ICollectionExpression
  fullName: NMF.Expressions.ICollectionExpression
- uid: NMF.Expressions.IOrderableEnumerableExpression`1
  commentId: T:NMF.Expressions.IOrderableEnumerableExpression`1
  name: IOrderableEnumerableExpression<T>
  nameWithType: IOrderableEnumerableExpression<T>
  fullName: NMF.Expressions.IOrderableEnumerableExpression<T>
  nameWithType.vb: IOrderableEnumerableExpression(Of T)
  fullName.vb: NMF.Expressions.IOrderableEnumerableExpression(Of T)
  name.vb: IOrderableEnumerableExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IOrderableEnumerableExpression`1
    name: IOrderableEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IOrderableEnumerableExpression`1
    name: IOrderableEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.IListExpression`1
  commentId: T:NMF.Expressions.IListExpression`1
  name: IListExpression<T>
  nameWithType: IListExpression<T>
  fullName: NMF.Expressions.IListExpression<T>
  nameWithType.vb: IListExpression(Of T)
  fullName.vb: NMF.Expressions.IListExpression(Of T)
  name.vb: IListExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IListExpression`1
    name: IListExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IListExpression`1
    name: IListExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.ISetExpression`1
  commentId: T:NMF.Expressions.ISetExpression`1
  name: ISetExpression<T>
  nameWithType: ISetExpression<T>
  fullName: NMF.Expressions.ISetExpression<T>
  nameWithType.vb: ISetExpression(Of T)
  fullName.vb: NMF.Expressions.ISetExpression(Of T)
  name.vb: ISetExpression(Of T)
  spec.csharp:
  - uid: NMF.Expressions.ISetExpression`1
    name: ISetExpression
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ISetExpression`1
    name: ISetExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.IGroupingExpression`2
  commentId: T:NMF.Expressions.IGroupingExpression`2
  name: IGroupingExpression<TKey, TElement>
  nameWithType: IGroupingExpression<TKey, TElement>
  fullName: NMF.Expressions.IGroupingExpression<TKey, TElement>
  nameWithType.vb: IGroupingExpression(Of TKey, TElement)
  fullName.vb: NMF.Expressions.IGroupingExpression(Of TKey, TElement)
  name.vb: IGroupingExpression(Of TKey, TElement)
  spec.csharp:
  - uid: NMF.Expressions.IGroupingExpression`2
    name: IGroupingExpression
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TElement
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IGroupingExpression`2
    name: IGroupingExpression
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TElement
  - name: )
- uid: NMF.Expressions.INotifyEnumerable
  commentId: T:NMF.Expressions.INotifyEnumerable
  parent: NMF.Expressions
  name: INotifyEnumerable
  nameWithType: INotifyEnumerable
  fullName: NMF.Expressions.INotifyEnumerable
- uid: NMF.Expressions.INotifyEnumerable`1
  commentId: T:NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<T>
  nameWithType: INotifyEnumerable<T>
  fullName: NMF.Expressions.INotifyEnumerable<T>
  nameWithType.vb: INotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of T)
  name.vb: INotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.IOrderableNotifyEnumerable`1
  commentId: T:NMF.Expressions.IOrderableNotifyEnumerable`1
  name: IOrderableNotifyEnumerable<T>
  nameWithType: IOrderableNotifyEnumerable<T>
  fullName: NMF.Expressions.IOrderableNotifyEnumerable<T>
  nameWithType.vb: IOrderableNotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.IOrderableNotifyEnumerable(Of T)
  name.vb: IOrderableNotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IOrderableNotifyEnumerable`1
    name: IOrderableNotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IOrderableNotifyEnumerable`1
    name: IOrderableNotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifyCollection`1
  commentId: T:NMF.Expressions.INotifyCollection`1
  name: INotifyCollection<T>
  nameWithType: INotifyCollection<T>
  fullName: NMF.Expressions.INotifyCollection<T>
  nameWithType.vb: INotifyCollection(Of T)
  fullName.vb: NMF.Expressions.INotifyCollection(Of T)
  name.vb: INotifyCollection(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyCollection`1
    name: INotifyCollection
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyCollection`1
    name: INotifyCollection
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifyGrouping`2
  commentId: T:NMF.Expressions.INotifyGrouping`2
  name: INotifyGrouping<TKey, TItem>
  nameWithType: INotifyGrouping<TKey, TItem>
  fullName: NMF.Expressions.INotifyGrouping<TKey, TItem>
  nameWithType.vb: INotifyGrouping(Of TKey, TItem)
  fullName.vb: NMF.Expressions.INotifyGrouping(Of TKey, TItem)
  name.vb: INotifyGrouping(Of TKey, TItem)
  spec.csharp:
  - uid: NMF.Expressions.INotifyGrouping`2
    name: INotifyGrouping
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TItem
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyGrouping`2
    name: INotifyGrouping
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TItem
  - name: )
- uid: NMF.Expressions.INotifySplit`1
  commentId: T:NMF.Expressions.INotifySplit`1
  name: INotifySplit<T>
  nameWithType: INotifySplit<T>
  fullName: NMF.Expressions.INotifySplit<T>
  nameWithType.vb: INotifySplit(Of T)
  fullName.vb: NMF.Expressions.INotifySplit(Of T)
  name.vb: INotifySplit(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifySplit`1
    name: INotifySplit
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifySplit`1
    name: INotifySplit
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.NotifyCollection`1
  commentId: T:NMF.Expressions.NotifyCollection`1
  name: NotifyCollection<T>
  nameWithType: NotifyCollection<T>
  fullName: NMF.Expressions.NotifyCollection<T>
  nameWithType.vb: NotifyCollection(Of T)
  fullName.vb: NMF.Expressions.NotifyCollection(Of T)
  name.vb: NotifyCollection(Of T)
  spec.csharp:
  - uid: NMF.Expressions.NotifyCollection`1
    name: NotifyCollection
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.NotifyCollection`1
    name: NotifyCollection
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.ReverseComparer`1
  commentId: T:NMF.Expressions.ReverseComparer`1
  name: ReverseComparer<T>
  nameWithType: ReverseComparer<T>
  fullName: NMF.Expressions.ReverseComparer<T>
  nameWithType.vb: ReverseComparer(Of T)
  fullName.vb: NMF.Expressions.ReverseComparer(Of T)
  name.vb: ReverseComparer(Of T)
  spec.csharp:
  - uid: NMF.Expressions.ReverseComparer`1
    name: ReverseComparer
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ReverseComparer`1
    name: ReverseComparer
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.Binding`1
  commentId: T:NMF.Expressions.Binding`1
  name: Binding<T>
  nameWithType: Binding<T>
  fullName: NMF.Expressions.Binding<T>
  nameWithType.vb: Binding(Of T)
  fullName.vb: NMF.Expressions.Binding(Of T)
  name.vb: Binding(Of T)
  spec.csharp:
  - uid: NMF.Expressions.Binding`1
    name: Binding
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.Binding`1
    name: Binding
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.IBinding`1
  commentId: T:NMF.Expressions.IBinding`1
  name: IBinding<T>
  nameWithType: IBinding<T>
  fullName: NMF.Expressions.IBinding<T>
  nameWithType.vb: IBinding(Of T)
  fullName.vb: NMF.Expressions.IBinding(Of T)
  name.vb: IBinding(Of T)
  spec.csharp:
  - uid: NMF.Expressions.IBinding`1
    name: IBinding
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IBinding`1
    name: IBinding
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.Binding`2
  commentId: T:NMF.Expressions.Binding`2
  name: Binding<T, TMember>
  nameWithType: Binding<T, TMember>
  fullName: NMF.Expressions.Binding<T, TMember>
  nameWithType.vb: Binding(Of T, TMember)
  fullName.vb: NMF.Expressions.Binding(Of T, TMember)
  name.vb: Binding(Of T, TMember)
  spec.csharp:
  - uid: NMF.Expressions.Binding`2
    name: Binding
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TMember
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.Binding`2
    name: Binding
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TMember
  - name: )
- uid: NMF.Expressions.ChangeAwareDictionary`2
  commentId: T:NMF.Expressions.ChangeAwareDictionary`2
  parent: NMF.Expressions
  name: ChangeAwareDictionary<TKey, TValue>
  nameWithType: ChangeAwareDictionary<TKey, TValue>
  fullName: NMF.Expressions.ChangeAwareDictionary<TKey, TValue>
  nameWithType.vb: ChangeAwareDictionary(Of TKey, TValue)
  fullName.vb: NMF.Expressions.ChangeAwareDictionary(Of TKey, TValue)
  name.vb: ChangeAwareDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: NMF.Expressions.ChangeAwareDictionary`2
    name: ChangeAwareDictionary
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ChangeAwareDictionary`2
    name: ChangeAwareDictionary
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: NMF.Expressions.CollectionBinding
  commentId: T:NMF.Expressions.CollectionBinding
  name: CollectionBinding
  nameWithType: CollectionBinding
  fullName: NMF.Expressions.CollectionBinding
- uid: NMF.Expressions.IncrementalFunc`2
  commentId: T:NMF.Expressions.IncrementalFunc`2
  name: IncrementalFunc<T1, TResult>
  nameWithType: IncrementalFunc<T1, TResult>
  fullName: NMF.Expressions.IncrementalFunc<T1, TResult>
  nameWithType.vb: IncrementalFunc(Of T1, TResult)
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, TResult)
  name.vb: IncrementalFunc(Of T1, TResult)
  spec.csharp:
  - uid: NMF.Expressions.IncrementalFunc`2
    name: IncrementalFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IncrementalFunc`2
    name: IncrementalFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.IncrementalFunc`3
  commentId: T:NMF.Expressions.IncrementalFunc`3
  name: IncrementalFunc<T1, T2, TResult>
  nameWithType: IncrementalFunc<T1, T2, TResult>
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, TResult>
  nameWithType.vb: IncrementalFunc(Of T1, T2, TResult)
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, TResult)
  name.vb: IncrementalFunc(Of T1, T2, TResult)
  spec.csharp:
  - uid: NMF.Expressions.IncrementalFunc`3
    name: IncrementalFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IncrementalFunc`3
    name: IncrementalFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.IncrementalFunc`4
  commentId: T:NMF.Expressions.IncrementalFunc`4
  name: IncrementalFunc<T1, T2, T3, TResult>
  nameWithType: IncrementalFunc<T1, T2, T3, TResult>
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, T3, TResult>
  nameWithType.vb: IncrementalFunc(Of T1, T2, T3, TResult)
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, T3, TResult)
  name.vb: IncrementalFunc(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: NMF.Expressions.IncrementalFunc`4
    name: IncrementalFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IncrementalFunc`4
    name: IncrementalFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.IncrementalFunc`5
  commentId: T:NMF.Expressions.IncrementalFunc`5
  name: IncrementalFunc<T1, T2, T3, T4, TResult>
  nameWithType: IncrementalFunc<T1, T2, T3, T4, TResult>
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, T3, T4, TResult>
  nameWithType.vb: IncrementalFunc(Of T1, T2, T3, T4, TResult)
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, T3, T4, TResult)
  name.vb: IncrementalFunc(Of T1, T2, T3, T4, TResult)
  spec.csharp:
  - uid: NMF.Expressions.IncrementalFunc`5
    name: IncrementalFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IncrementalFunc`5
    name: IncrementalFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.IncrementalFunc`6
  commentId: T:NMF.Expressions.IncrementalFunc`6
  name: IncrementalFunc<T1, T2, T3, T4, T5, TResult>
  nameWithType: IncrementalFunc<T1, T2, T3, T4, T5, TResult>
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, T3, T4, T5, TResult>
  nameWithType.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, TResult)
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, T3, T4, T5, TResult)
  name.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, TResult)
  spec.csharp:
  - uid: NMF.Expressions.IncrementalFunc`6
    name: IncrementalFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IncrementalFunc`6
    name: IncrementalFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.IncrementalFunc`7
  commentId: T:NMF.Expressions.IncrementalFunc`7
  name: IncrementalFunc<T1, T2, T3, T4, T5, T6, TResult>
  nameWithType: IncrementalFunc<T1, T2, T3, T4, T5, T6, TResult>
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, T3, T4, T5, T6, TResult>
  nameWithType.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, T6, TResult)
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, T3, T4, T5, T6, TResult)
  name.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, T6, TResult)
  spec.csharp:
  - uid: NMF.Expressions.IncrementalFunc`7
    name: IncrementalFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IncrementalFunc`7
    name: IncrementalFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.IncrementalFunc`8
  commentId: T:NMF.Expressions.IncrementalFunc`8
  name: IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType: IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, TResult>
  nameWithType.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  name.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, TResult)
  spec.csharp:
  - uid: NMF.Expressions.IncrementalFunc`8
    name: IncrementalFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IncrementalFunc`8
    name: IncrementalFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.IncrementalFunc`9
  commentId: T:NMF.Expressions.IncrementalFunc`9
  name: IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  nameWithType: IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  nameWithType.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  name.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  spec.csharp:
  - uid: NMF.Expressions.IncrementalFunc`9
    name: IncrementalFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IncrementalFunc`9
    name: IncrementalFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.IncrementalFunc`10
  commentId: T:NMF.Expressions.IncrementalFunc`10
  name: IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  nameWithType: IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>
  nameWithType.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  name.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult)
  spec.csharp:
  - uid: NMF.Expressions.IncrementalFunc`10
    name: IncrementalFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IncrementalFunc`10
    name: IncrementalFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.IncrementalFunc`11
  commentId: T:NMF.Expressions.IncrementalFunc`11
  name: IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  nameWithType: IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  fullName: NMF.Expressions.IncrementalFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>
  nameWithType.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  fullName.vb: NMF.Expressions.IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  name.vb: IncrementalFunc(Of T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult)
  spec.csharp:
  - uid: NMF.Expressions.IncrementalFunc`11
    name: IncrementalFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.IncrementalFunc`11
    name: IncrementalFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: ','
  - name: " "
  - name: T4
  - name: ','
  - name: " "
  - name: T5
  - name: ','
  - name: " "
  - name: T6
  - name: ','
  - name: " "
  - name: T7
  - name: ','
  - name: " "
  - name: T8
  - name: ','
  - name: " "
  - name: T9
  - name: ','
  - name: " "
  - name: T10
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.ModelNotifySystem
  commentId: T:NMF.Expressions.ModelNotifySystem
  parent: NMF.Expressions
  name: ModelNotifySystem
  nameWithType: ModelNotifySystem
  fullName: NMF.Expressions.ModelNotifySystem
- uid: NMF.Expressions.ParameterDependencyAttribute
  commentId: T:NMF.Expressions.ParameterDependencyAttribute
  name: ParameterDependencyAttribute
  nameWithType: ParameterDependencyAttribute
  fullName: NMF.Expressions.ParameterDependencyAttribute
- uid: NMF.Expressions.PromotionNotifySystem
  commentId: T:NMF.Expressions.PromotionNotifySystem
  name: PromotionNotifySystem
  nameWithType: PromotionNotifySystem
  fullName: NMF.Expressions.PromotionNotifySystem
- uid: NMF.Expressions.TreeExtensionNotifySystem
  commentId: T:NMF.Expressions.TreeExtensionNotifySystem
  name: TreeExtensionNotifySystem
  nameWithType: TreeExtensionNotifySystem
  fullName: NMF.Expressions.TreeExtensionNotifySystem
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
