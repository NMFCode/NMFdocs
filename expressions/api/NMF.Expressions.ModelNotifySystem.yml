### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.ModelNotifySystem
  commentId: T:NMF.Expressions.ModelNotifySystem
  id: ModelNotifySystem
  parent: NMF.Expressions
  children:
  - NMF.Expressions.ModelNotifySystem.Instance
  langs:
  - csharp
  - vb
  name: ModelNotifySystem
  nameWithType: ModelNotifySystem
  fullName: NMF.Expressions.ModelNotifySystem
  type: Class
  source:
    remote:
      path: Expressions/Models.Expressions/ModelNotifySystem.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ModelNotifySystem
    path: src/Expressions/Models.Expressions/ModelNotifySystem.cs
    startLine: 7
  assemblies:
  - NMF.Expressions.Models
  namespace: NMF.Expressions
  syntax:
    content: 'public class ModelNotifySystem : InstructionLevelNotifySystem, INotifySystem'
    content.vb: >-
      Public Class ModelNotifySystem
          Inherits InstructionLevelNotifySystem
          Implements INotifySystem
  inheritance:
  - System.Object
  - NMF.Expressions.InstructionLevelNotifySystem
  implements:
  - NMF.Expressions.INotifySystem
  inheritedMembers:
  - NMF.Expressions.InstructionLevelNotifySystem.CreateLocal``2(NMF.Expressions.INotifyExpression{{T}},NMF.Expressions.INotifyExpression{{TVar}},System.String@)
  - NMF.Expressions.InstructionLevelNotifySystem.CreateExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  - NMF.Expressions.InstructionLevelNotifySystem.CreateReversableExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  - NMF.Expressions.InstructionLevelNotifySystem.CreateExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: NMF.Expressions.ModelNotifySystem.Instance
  commentId: F:NMF.Expressions.ModelNotifySystem.Instance
  id: Instance
  parent: NMF.Expressions.ModelNotifySystem
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: ModelNotifySystem.Instance
  fullName: NMF.Expressions.ModelNotifySystem.Instance
  type: Field
  source:
    remote:
      path: Expressions/Models.Expressions/ModelNotifySystem.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Instance
    path: src/Expressions/Models.Expressions/ModelNotifySystem.cs
    startLine: 9
  assemblies:
  - NMF.Expressions.Models
  namespace: NMF.Expressions
  syntax:
    content: public static readonly ModelNotifySystem Instance
    return:
      type: NMF.Expressions.ModelNotifySystem
    content.vb: Public Shared ReadOnly Instance As ModelNotifySystem
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Expressions.InstructionLevelNotifySystem
  commentId: T:NMF.Expressions.InstructionLevelNotifySystem
  parent: NMF.Expressions
  name: InstructionLevelNotifySystem
  nameWithType: InstructionLevelNotifySystem
  fullName: NMF.Expressions.InstructionLevelNotifySystem
- uid: NMF.Expressions.INotifySystem
  commentId: T:NMF.Expressions.INotifySystem
  parent: NMF.Expressions
  name: INotifySystem
  nameWithType: INotifySystem
  fullName: NMF.Expressions.INotifySystem
- uid: NMF.Expressions.InstructionLevelNotifySystem.CreateLocal``2(NMF.Expressions.INotifyExpression{{T}},NMF.Expressions.INotifyExpression{{TVar}},System.String@)
  commentId: M:NMF.Expressions.InstructionLevelNotifySystem.CreateLocal``2(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``1},System.String@)
  parent: NMF.Expressions.InstructionLevelNotifySystem
  definition: NMF.Expressions.InstructionLevelNotifySystem.CreateLocal``2(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``1},System.String@)
  name: CreateLocal<T, TVar>(INotifyExpression<T>, INotifyExpression<TVar>, String)
  nameWithType: InstructionLevelNotifySystem.CreateLocal<T, TVar>(INotifyExpression<T>, INotifyExpression<TVar>, String)
  fullName: NMF.Expressions.InstructionLevelNotifySystem.CreateLocal<T, TVar>(NMF.Expressions.INotifyExpression<T>, NMF.Expressions.INotifyExpression<TVar>, System.String)
  nameWithType.vb: InstructionLevelNotifySystem.CreateLocal(Of T, TVar)(INotifyExpression(Of T), INotifyExpression(Of TVar), String)
  fullName.vb: NMF.Expressions.InstructionLevelNotifySystem.CreateLocal(Of T, TVar)(NMF.Expressions.INotifyExpression(Of T), NMF.Expressions.INotifyExpression(Of TVar), System.String)
  name.vb: CreateLocal(Of T, TVar)(INotifyExpression(Of T), INotifyExpression(Of TVar), String)
  spec.csharp:
  - uid: NMF.Expressions.InstructionLevelNotifySystem.CreateLocal``2(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``1},System.String@)
    name: CreateLocal<T, TVar>
    nameWithType: InstructionLevelNotifySystem.CreateLocal<T, TVar>
    fullName: NMF.Expressions.InstructionLevelNotifySystem.CreateLocal<T, TVar>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    nameWithType: INotifyExpression
    fullName: NMF.Expressions.INotifyExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    nameWithType: INotifyExpression
    fullName: NMF.Expressions.INotifyExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TVar
    nameWithType: TVar
    fullName: TVar
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.InstructionLevelNotifySystem.CreateLocal``2(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``1},System.String@)
    name: CreateLocal(Of T, TVar)
    nameWithType: InstructionLevelNotifySystem.CreateLocal(Of T, TVar)
    fullName: NMF.Expressions.InstructionLevelNotifySystem.CreateLocal(Of T, TVar)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    nameWithType: INotifyExpression
    fullName: NMF.Expressions.INotifyExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    nameWithType: INotifyExpression
    fullName: NMF.Expressions.INotifyExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TVar
    nameWithType: TVar
    fullName: TVar
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.InstructionLevelNotifySystem.CreateExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:NMF.Expressions.InstructionLevelNotifySystem.CreateExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: NMF.Expressions.InstructionLevelNotifySystem
  isExternal: true
  name: CreateExpression<T>(Expression, IEnumerable<ParameterExpression>, IDictionary<String, Object>)
  nameWithType: InstructionLevelNotifySystem.CreateExpression<T>(Expression, IEnumerable<ParameterExpression>, IDictionary<String, Object>)
  fullName: NMF.Expressions.InstructionLevelNotifySystem.CreateExpression<T>(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IDictionary<System.String, System.Object>)
  nameWithType.vb: InstructionLevelNotifySystem.CreateExpression(Of T)(Expression, IEnumerable(Of ParameterExpression), IDictionary(Of String, Object))
  fullName.vb: NMF.Expressions.InstructionLevelNotifySystem.CreateExpression(Of T)(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: CreateExpression(Of T)(Expression, IEnumerable(Of ParameterExpression), IDictionary(Of String, Object))
  spec.csharp:
  - uid: NMF.Expressions.InstructionLevelNotifySystem.CreateExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
    name: CreateExpression<T>
    nameWithType: InstructionLevelNotifySystem.CreateExpression<T>
    fullName: NMF.Expressions.InstructionLevelNotifySystem.CreateExpression<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    nameWithType: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.InstructionLevelNotifySystem.CreateExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
    name: CreateExpression(Of T)
    nameWithType: InstructionLevelNotifySystem.CreateExpression(Of T)
    fullName: NMF.Expressions.InstructionLevelNotifySystem.CreateExpression(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    nameWithType: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.InstructionLevelNotifySystem.CreateReversableExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:NMF.Expressions.InstructionLevelNotifySystem.CreateReversableExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: NMF.Expressions.InstructionLevelNotifySystem
  isExternal: true
  name: CreateReversableExpression<T>(Expression, IEnumerable<ParameterExpression>, IDictionary<String, Object>)
  nameWithType: InstructionLevelNotifySystem.CreateReversableExpression<T>(Expression, IEnumerable<ParameterExpression>, IDictionary<String, Object>)
  fullName: NMF.Expressions.InstructionLevelNotifySystem.CreateReversableExpression<T>(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IDictionary<System.String, System.Object>)
  nameWithType.vb: InstructionLevelNotifySystem.CreateReversableExpression(Of T)(Expression, IEnumerable(Of ParameterExpression), IDictionary(Of String, Object))
  fullName.vb: NMF.Expressions.InstructionLevelNotifySystem.CreateReversableExpression(Of T)(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: CreateReversableExpression(Of T)(Expression, IEnumerable(Of ParameterExpression), IDictionary(Of String, Object))
  spec.csharp:
  - uid: NMF.Expressions.InstructionLevelNotifySystem.CreateReversableExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
    name: CreateReversableExpression<T>
    nameWithType: InstructionLevelNotifySystem.CreateReversableExpression<T>
    fullName: NMF.Expressions.InstructionLevelNotifySystem.CreateReversableExpression<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    nameWithType: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.InstructionLevelNotifySystem.CreateReversableExpression``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
    name: CreateReversableExpression(Of T)
    nameWithType: InstructionLevelNotifySystem.CreateReversableExpression(Of T)
    fullName: NMF.Expressions.InstructionLevelNotifySystem.CreateReversableExpression(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    nameWithType: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.InstructionLevelNotifySystem.CreateExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  commentId: M:NMF.Expressions.InstructionLevelNotifySystem.CreateExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: NMF.Expressions.InstructionLevelNotifySystem
  isExternal: true
  name: CreateExpression(Expression, IEnumerable<ParameterExpression>, IDictionary<String, Object>)
  nameWithType: InstructionLevelNotifySystem.CreateExpression(Expression, IEnumerable<ParameterExpression>, IDictionary<String, Object>)
  fullName: NMF.Expressions.InstructionLevelNotifySystem.CreateExpression(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IDictionary<System.String, System.Object>)
  nameWithType.vb: InstructionLevelNotifySystem.CreateExpression(Expression, IEnumerable(Of ParameterExpression), IDictionary(Of String, Object))
  fullName.vb: NMF.Expressions.InstructionLevelNotifySystem.CreateExpression(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Collections.Generic.IDictionary(Of System.String, System.Object))
  name.vb: CreateExpression(Expression, IEnumerable(Of ParameterExpression), IDictionary(Of String, Object))
  spec.csharp:
  - uid: NMF.Expressions.InstructionLevelNotifySystem.CreateExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
    name: CreateExpression
    nameWithType: InstructionLevelNotifySystem.CreateExpression
    fullName: NMF.Expressions.InstructionLevelNotifySystem.CreateExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    nameWithType: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.InstructionLevelNotifySystem.CreateExpression(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IDictionary{System.String,System.Object})
    name: CreateExpression
    nameWithType: InstructionLevelNotifySystem.CreateExpression
    fullName: NMF.Expressions.InstructionLevelNotifySystem.CreateExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    nameWithType: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.InstructionLevelNotifySystem.CreateLocal``2(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``1},System.String@)
  commentId: M:NMF.Expressions.InstructionLevelNotifySystem.CreateLocal``2(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``1},System.String@)
  isExternal: true
  name: CreateLocal<T, TVar>(INotifyExpression<T>, INotifyExpression<TVar>, String)
  nameWithType: InstructionLevelNotifySystem.CreateLocal<T, TVar>(INotifyExpression<T>, INotifyExpression<TVar>, String)
  fullName: NMF.Expressions.InstructionLevelNotifySystem.CreateLocal<T, TVar>(NMF.Expressions.INotifyExpression<T>, NMF.Expressions.INotifyExpression<TVar>, System.String)
  nameWithType.vb: InstructionLevelNotifySystem.CreateLocal(Of T, TVar)(INotifyExpression(Of T), INotifyExpression(Of TVar), String)
  fullName.vb: NMF.Expressions.InstructionLevelNotifySystem.CreateLocal(Of T, TVar)(NMF.Expressions.INotifyExpression(Of T), NMF.Expressions.INotifyExpression(Of TVar), System.String)
  name.vb: CreateLocal(Of T, TVar)(INotifyExpression(Of T), INotifyExpression(Of TVar), String)
  spec.csharp:
  - uid: NMF.Expressions.InstructionLevelNotifySystem.CreateLocal``2(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``1},System.String@)
    name: CreateLocal<T, TVar>
    nameWithType: InstructionLevelNotifySystem.CreateLocal<T, TVar>
    fullName: NMF.Expressions.InstructionLevelNotifySystem.CreateLocal<T, TVar>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    nameWithType: INotifyExpression
    fullName: NMF.Expressions.INotifyExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    nameWithType: INotifyExpression
    fullName: NMF.Expressions.INotifyExpression
  - name: <
    nameWithType: <
    fullName: <
  - name: TVar
    nameWithType: TVar
    fullName: TVar
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.InstructionLevelNotifySystem.CreateLocal``2(NMF.Expressions.INotifyExpression{``0},NMF.Expressions.INotifyExpression{``1},System.String@)
    name: CreateLocal(Of T, TVar)
    nameWithType: InstructionLevelNotifySystem.CreateLocal(Of T, TVar)
    fullName: NMF.Expressions.InstructionLevelNotifySystem.CreateLocal(Of T, TVar)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    nameWithType: INotifyExpression
    fullName: NMF.Expressions.INotifyExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Expressions.INotifyExpression`1
    name: INotifyExpression
    nameWithType: INotifyExpression
    fullName: NMF.Expressions.INotifyExpression
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TVar
    nameWithType: TVar
    fullName: TVar
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ModelNotifySystem
  commentId: T:NMF.Expressions.ModelNotifySystem
  parent: NMF.Expressions
  name: ModelNotifySystem
  nameWithType: ModelNotifySystem
  fullName: NMF.Expressions.ModelNotifySystem
