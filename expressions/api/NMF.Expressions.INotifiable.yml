### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.INotifiable
  commentId: T:NMF.Expressions.INotifiable
  id: INotifiable
  parent: NMF.Expressions
  children:
  - NMF.Expressions.INotifiable.Dependencies
  - NMF.Expressions.INotifiable.ExecutionMetaData
  - NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  - NMF.Expressions.INotifiable.Successors
  langs:
  - csharp
  - vb
  name: INotifiable
  nameWithType: INotifiable
  fullName: NMF.Expressions.INotifiable
  type: Interface
  source:
    remote:
      path: Expressions/Expressions/Public/INotifiable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: INotifiable
    path: src/Expressions/Expressions/Public/INotifiable.cs
    startLine: 11
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nRepresents a node in a graph which can notify its successors\nand gets notified by its dependencies.\n"
  example: []
  syntax:
    content: 'public interface INotifiable : IDisposable'
    content.vb: >-
      Public Interface INotifiable

          Inherits IDisposable
  inheritedMembers:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: NMF.Expressions.INotifiable.Successors
  commentId: P:NMF.Expressions.INotifiable.Successors
  id: Successors
  parent: NMF.Expressions.INotifiable
  langs:
  - csharp
  - vb
  name: Successors
  nameWithType: INotifiable.Successors
  fullName: NMF.Expressions.INotifiable.Successors
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/INotifiable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Successors
    path: src/Expressions/Expressions/Public/INotifiable.cs
    startLine: 16
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nThe nodes that will get notified by this node.\n"
  example: []
  syntax:
    content: ISuccessorList Successors { get; }
    parameters: []
    return:
      type: NMF.Expressions.ISuccessorList
    content.vb: ReadOnly Property Successors As ISuccessorList
  overload: NMF.Expressions.INotifiable.Successors*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: NMF.Expressions.INotifiable.Dependencies
  commentId: P:NMF.Expressions.INotifiable.Dependencies
  id: Dependencies
  parent: NMF.Expressions.INotifiable
  langs:
  - csharp
  - vb
  name: Dependencies
  nameWithType: INotifiable.Dependencies
  fullName: NMF.Expressions.INotifiable.Dependencies
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/INotifiable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Dependencies
    path: src/Expressions/Expressions/Public/INotifiable.cs
    startLine: 21
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nNodes that notify this node.\n"
  example: []
  syntax:
    content: IEnumerable<INotifiable> Dependencies { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
    content.vb: ReadOnly Property Dependencies As IEnumerable(Of INotifiable)
  overload: NMF.Expressions.INotifiable.Dependencies*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  commentId: M:NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  id: Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  parent: NMF.Expressions.INotifiable
  langs:
  - csharp
  - vb
  name: Notify(IList<INotificationResult>)
  nameWithType: INotifiable.Notify(IList<INotificationResult>)
  fullName: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList<NMF.Expressions.INotificationResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions/Public/INotifiable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Notify
    path: src/Expressions/Expressions/Public/INotifiable.cs
    startLine: 28
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nGets called when one of the dependencies signals a notification.\n"
  example: []
  syntax:
    content: INotificationResult Notify(IList<INotificationResult> sources)
    parameters:
    - id: sources
      type: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
    return:
      type: NMF.Expressions.INotificationResult
      description: An object describing the changes that happened in this notification.
    content.vb: Function Notify(sources As IList(Of INotificationResult)) As INotificationResult
  overload: NMF.Expressions.INotifiable.Notify*
  nameWithType.vb: INotifiable.Notify(IList(Of INotificationResult))
  fullName.vb: NMF.Expressions.INotifiable.Notify(System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
- uid: NMF.Expressions.INotifiable.ExecutionMetaData
  commentId: P:NMF.Expressions.INotifiable.ExecutionMetaData
  id: ExecutionMetaData
  parent: NMF.Expressions.INotifiable
  langs:
  - csharp
  - vb
  name: ExecutionMetaData
  nameWithType: INotifiable.ExecutionMetaData
  fullName: NMF.Expressions.INotifiable.ExecutionMetaData
  type: Property
  source:
    remote:
      path: Expressions/Expressions/Public/INotifiable.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ExecutionMetaData
    path: src/Expressions/Expressions/Public/INotifiable.cs
    startLine: 33
  assemblies:
  - NMF.Expressions
  namespace: NMF.Expressions
  summary: "\nUsed by the execution engine during incremental execution.\n"
  example: []
  syntax:
    content: ExecutionMetaData ExecutionMetaData { get; }
    parameters: []
    return:
      type: NMF.Expressions.ExecutionMetaData
    content.vb: ReadOnly Property ExecutionMetaData As ExecutionMetaData
  overload: NMF.Expressions.INotifiable.ExecutionMetaData*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.INotifiable.Successors*
  commentId: Overload:NMF.Expressions.INotifiable.Successors
  name: Successors
  nameWithType: INotifiable.Successors
  fullName: NMF.Expressions.INotifiable.Successors
- uid: NMF.Expressions.ISuccessorList
  commentId: T:NMF.Expressions.ISuccessorList
  parent: NMF.Expressions
  name: ISuccessorList
  nameWithType: ISuccessorList
  fullName: NMF.Expressions.ISuccessorList
- uid: NMF.Expressions.INotifiable.Dependencies*
  commentId: Overload:NMF.Expressions.INotifiable.Dependencies
  name: Dependencies
  nameWithType: INotifiable.Dependencies
  fullName: NMF.Expressions.INotifiable.Dependencies
- uid: System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<INotifiable>
  nameWithType: IEnumerable<INotifiable>
  fullName: System.Collections.Generic.IEnumerable<NMF.Expressions.INotifiable>
  nameWithType.vb: IEnumerable(Of INotifiable)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Expressions.INotifiable)
  name.vb: IEnumerable(Of INotifiable)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
    nameWithType: INotifiable
    fullName: NMF.Expressions.INotifiable
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
    nameWithType: INotifiable
    fullName: NMF.Expressions.INotifiable
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.Expressions.INotifiable.Notify*
  commentId: Overload:NMF.Expressions.INotifiable.Notify
  name: Notify
  nameWithType: INotifiable.Notify
  fullName: NMF.Expressions.INotifiable.Notify
- uid: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  commentId: T:System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<INotificationResult>
  nameWithType: IList<INotificationResult>
  fullName: System.Collections.Generic.IList<NMF.Expressions.INotificationResult>
  nameWithType.vb: IList(Of INotificationResult)
  fullName.vb: System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult)
  name.vb: IList(Of INotificationResult)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
    nameWithType: INotificationResult
    fullName: NMF.Expressions.INotificationResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotificationResult
  commentId: T:NMF.Expressions.INotificationResult
  parent: NMF.Expressions
  name: INotificationResult
  nameWithType: INotificationResult
  fullName: NMF.Expressions.INotificationResult
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifiable.ExecutionMetaData*
  commentId: Overload:NMF.Expressions.INotifiable.ExecutionMetaData
  name: ExecutionMetaData
  nameWithType: INotifiable.ExecutionMetaData
  fullName: NMF.Expressions.INotifiable.ExecutionMetaData
- uid: NMF.Expressions.ExecutionMetaData
  commentId: T:NMF.Expressions.ExecutionMetaData
  parent: NMF.Expressions
  name: ExecutionMetaData
  nameWithType: ExecutionMetaData
  fullName: NMF.Expressions.ExecutionMetaData
