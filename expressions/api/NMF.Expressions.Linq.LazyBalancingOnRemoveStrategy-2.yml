### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2
  commentId: T:NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2
  id: LazyBalancingOnRemoveStrategy`2
  parent: NMF.Expressions.Linq
  children:
  - NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.CanAdjust(`1)
  - NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.CanMove(`1,`1)
  - NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.CreateStrategy(NMF.Expressions.Linq.IObservableChunk{`0,`1})
  - NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.Default
  - NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.GetChunkToRemove(NMF.Expressions.Linq.IObservableChunk{`0,`1},System.Int32)
  - NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.Move(System.Int32,System.Collections.Generic.List{System.Int32},NMF.Expressions.Linq.IObservableChunk{`0,`1})
  - NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.RemoveFromOriginal
  - NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.TryAddToExistingChunk(NMF.Expressions.Linq.IObservableChunk{`0,`1},`0,System.Int32)
  langs:
  - csharp
  - vb
  name: LazyBalancingOnRemoveStrategy<T, TChunk>
  nameWithType: LazyBalancingOnRemoveStrategy<T, TChunk>
  fullName: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy<T, TChunk>
  type: Class
  source:
    remote:
      path: Expressions/Expressions.Chunk/LazyBalancingStrategy.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: LazyBalancingOnRemoveStrategy
    path: src/Expressions/Expressions.Chunk/LazyBalancingStrategy.cs
    startLine: 29
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nDenotes a base class for lazy balancing strategies for chunks\n"
  example: []
  syntax:
    content: 'public class LazyBalancingOnRemoveStrategy<T, TChunk> : IChunkBalancingStrategyProvider<T, TChunk>'
    typeParameters:
    - id: T
      description: The type of elements
    - id: TChunk
      description: The type of chunks
    content.vb: >-
      Public Class LazyBalancingOnRemoveStrategy(Of T, TChunk)
          Implements IChunkBalancingStrategyProvider(Of T, TChunk)
  inheritance:
  - System.Object
  implements:
  - NMF.Expressions.Linq.IChunkBalancingStrategyProvider{{T},{TChunk}}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: LazyBalancingOnRemoveStrategy(Of T, TChunk)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy(Of T, TChunk)
  name.vb: LazyBalancingOnRemoveStrategy(Of T, TChunk)
- uid: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.Default
  commentId: F:NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.Default
  id: Default
  parent: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2
  langs:
  - csharp
  - vb
  name: Default
  nameWithType: LazyBalancingOnRemoveStrategy<T, TChunk>.Default
  fullName: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy<T, TChunk>.Default
  type: Field
  source:
    remote:
      path: Expressions/Expressions.Chunk/LazyBalancingStrategy.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Default
    path: src/Expressions/Expressions.Chunk/LazyBalancingStrategy.cs
    startLine: 34
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nDenotes the default lazy balancing strategy\n"
  example: []
  syntax:
    content: public static readonly LazyBalancingOnRemoveStrategy<T, TChunk> Default
    return:
      type: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2
    content.vb: Public Shared ReadOnly Default As LazyBalancingOnRemoveStrategy(Of T, TChunk)
  nameWithType.vb: LazyBalancingOnRemoveStrategy(Of T, TChunk).Default
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy(Of T, TChunk).Default
- uid: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.CreateStrategy(NMF.Expressions.Linq.IObservableChunk{`0,`1})
  commentId: M:NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.CreateStrategy(NMF.Expressions.Linq.IObservableChunk{`0,`1})
  id: CreateStrategy(NMF.Expressions.Linq.IObservableChunk{`0,`1})
  parent: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2
  langs:
  - csharp
  - vb
  name: CreateStrategy(IObservableChunk<T, TChunk>)
  nameWithType: LazyBalancingOnRemoveStrategy<T, TChunk>.CreateStrategy(IObservableChunk<T, TChunk>)
  fullName: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy<T, TChunk>.CreateStrategy(NMF.Expressions.Linq.IObservableChunk<T, TChunk>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Chunk/LazyBalancingStrategy.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateStrategy
    path: src/Expressions/Expressions.Chunk/LazyBalancingStrategy.cs
    startLine: 37
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  example: []
  syntax:
    content: public IChunkBalancingStrategy<T, TChunk> CreateStrategy(IObservableChunk<T, TChunk> observableChunk)
    parameters:
    - id: observableChunk
      type: NMF.Expressions.Linq.IObservableChunk{{T},{TChunk}}
    return:
      type: NMF.Expressions.Linq.IChunkBalancingStrategy{{T},{TChunk}}
    content.vb: Public Function CreateStrategy(observableChunk As IObservableChunk(Of T, TChunk)) As IChunkBalancingStrategy(Of T, TChunk)
  overload: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.CreateStrategy*
  implements:
  - NMF.Expressions.Linq.IChunkBalancingStrategyProvider{{T},{TChunk}}.CreateStrategy(NMF.Expressions.Linq.IObservableChunk{{T},{TChunk}})
  nameWithType.vb: LazyBalancingOnRemoveStrategy(Of T, TChunk).CreateStrategy(IObservableChunk(Of T, TChunk))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy(Of T, TChunk).CreateStrategy(NMF.Expressions.Linq.IObservableChunk(Of T, TChunk))
  name.vb: CreateStrategy(IObservableChunk(Of T, TChunk))
- uid: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.CanAdjust(`1)
  commentId: M:NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.CanAdjust(`1)
  id: CanAdjust(`1)
  parent: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2
  langs:
  - csharp
  - vb
  name: CanAdjust(TChunk)
  nameWithType: LazyBalancingOnRemoveStrategy<T, TChunk>.CanAdjust(TChunk)
  fullName: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy<T, TChunk>.CanAdjust(TChunk)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Chunk/LazyBalancingStrategy.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CanAdjust
    path: src/Expressions/Expressions.Chunk/LazyBalancingStrategy.cs
    startLine: 47
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nDetermines whether the given chunk can be adjusted\n"
  example: []
  syntax:
    content: protected virtual bool CanAdjust(TChunk chunk)
    parameters:
    - id: chunk
      type: '{TChunk}'
      description: The chunk to adjust
    return:
      type: System.Boolean
      description: True, if the chunk can be modified, otherwise False
    content.vb: Protected Overridable Function CanAdjust(chunk As TChunk) As Boolean
  overload: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.CanAdjust*
  nameWithType.vb: LazyBalancingOnRemoveStrategy(Of T, TChunk).CanAdjust(TChunk)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy(Of T, TChunk).CanAdjust(TChunk)
- uid: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.CanMove(`1,`1)
  commentId: M:NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.CanMove(`1,`1)
  id: CanMove(`1,`1)
  parent: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2
  langs:
  - csharp
  - vb
  name: CanMove(TChunk, TChunk)
  nameWithType: LazyBalancingOnRemoveStrategy<T, TChunk>.CanMove(TChunk, TChunk)
  fullName: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy<T, TChunk>.CanMove(TChunk, TChunk)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Chunk/LazyBalancingStrategy.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CanMove
    path: src/Expressions/Expressions.Chunk/LazyBalancingStrategy.cs
    startLine: 58
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nDetermines whether elements can be moved between the given chunks\n"
  example: []
  syntax:
    content: protected virtual bool CanMove(TChunk sourceChunk, TChunk targetChunk)
    parameters:
    - id: sourceChunk
      type: '{TChunk}'
      description: The source chunk
    - id: targetChunk
      type: '{TChunk}'
      description: The target chunk
    return:
      type: System.Boolean
      description: True, if moves are allowed, otherwise False
    content.vb: Protected Overridable Function CanMove(sourceChunk As TChunk, targetChunk As TChunk) As Boolean
  overload: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.CanMove*
  nameWithType.vb: LazyBalancingOnRemoveStrategy(Of T, TChunk).CanMove(TChunk, TChunk)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy(Of T, TChunk).CanMove(TChunk, TChunk)
- uid: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.RemoveFromOriginal
  commentId: P:NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.RemoveFromOriginal
  id: RemoveFromOriginal
  parent: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2
  langs:
  - csharp
  - vb
  name: RemoveFromOriginal
  nameWithType: LazyBalancingOnRemoveStrategy<T, TChunk>.RemoveFromOriginal
  fullName: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy<T, TChunk>.RemoveFromOriginal
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Chunk/LazyBalancingStrategy.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RemoveFromOriginal
    path: src/Expressions/Expressions.Chunk/LazyBalancingStrategy.cs
    startLine: 66
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nDetermines whether the items shall be removed from their original chunk\n"
  example: []
  syntax:
    content: protected virtual bool RemoveFromOriginal { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected Overridable ReadOnly Property RemoveFromOriginal As Boolean
  overload: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.RemoveFromOriginal*
  nameWithType.vb: LazyBalancingOnRemoveStrategy(Of T, TChunk).RemoveFromOriginal
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
  fullName.vb: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy(Of T, TChunk).RemoveFromOriginal
- uid: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.Move(System.Int32,System.Collections.Generic.List{System.Int32},NMF.Expressions.Linq.IObservableChunk{`0,`1})
  commentId: M:NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.Move(System.Int32,System.Collections.Generic.List{System.Int32},NMF.Expressions.Linq.IObservableChunk{`0,`1})
  id: Move(System.Int32,System.Collections.Generic.List{System.Int32},NMF.Expressions.Linq.IObservableChunk{`0,`1})
  parent: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2
  langs:
  - csharp
  - vb
  name: Move(Int32, List<Int32>, IObservableChunk<T, TChunk>)
  nameWithType: LazyBalancingOnRemoveStrategy<T, TChunk>.Move(Int32, List<Int32>, IObservableChunk<T, TChunk>)
  fullName: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy<T, TChunk>.Move(System.Int32, System.Collections.Generic.List<System.Int32>, NMF.Expressions.Linq.IObservableChunk<T, TChunk>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Chunk/LazyBalancingStrategy.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Move
    path: src/Expressions/Expressions.Chunk/LazyBalancingStrategy.cs
    startLine: 74
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nMoves the given element from one chunk to the other\n"
  example: []
  syntax:
    content: protected virtual void Move(int sourceChunk, List<int> targetChunks, IObservableChunk<T, TChunk> observable)
    parameters:
    - id: sourceChunk
      type: System.Int32
      description: The index of the source chunk
    - id: targetChunks
      type: System.Collections.Generic.List{System.Int32}
      description: The index of the target chunk
    - id: observable
      type: NMF.Expressions.Linq.IObservableChunk{{T},{TChunk}}
      description: The observable chunk collection
    content.vb: Protected Overridable Sub Move(sourceChunk As Integer, targetChunks As List(Of Integer), observable As IObservableChunk(Of T, TChunk))
  overload: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.Move*
  nameWithType.vb: LazyBalancingOnRemoveStrategy(Of T, TChunk).Move(Int32, List(Of Int32), IObservableChunk(Of T, TChunk))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy(Of T, TChunk).Move(System.Int32, System.Collections.Generic.List(Of System.Int32), NMF.Expressions.Linq.IObservableChunk(Of T, TChunk))
  name.vb: Move(Int32, List(Of Int32), IObservableChunk(Of T, TChunk))
- uid: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.GetChunkToRemove(NMF.Expressions.Linq.IObservableChunk{`0,`1},System.Int32)
  commentId: M:NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.GetChunkToRemove(NMF.Expressions.Linq.IObservableChunk{`0,`1},System.Int32)
  id: GetChunkToRemove(NMF.Expressions.Linq.IObservableChunk{`0,`1},System.Int32)
  parent: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2
  langs:
  - csharp
  - vb
  name: GetChunkToRemove(IObservableChunk<T, TChunk>, Int32)
  nameWithType: LazyBalancingOnRemoveStrategy<T, TChunk>.GetChunkToRemove(IObservableChunk<T, TChunk>, Int32)
  fullName: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy<T, TChunk>.GetChunkToRemove(NMF.Expressions.Linq.IObservableChunk<T, TChunk>, System.Int32)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Chunk/LazyBalancingStrategy.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetChunkToRemove
    path: src/Expressions/Expressions.Chunk/LazyBalancingStrategy.cs
    startLine: 94
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nGets the index of a chunk that can be targeted to remove\n"
  example: []
  syntax:
    content: protected virtual int GetChunkToRemove(IObservableChunk<T, TChunk> observable, int chunkStartIndex)
    parameters:
    - id: observable
      type: NMF.Expressions.Linq.IObservableChunk{{T},{TChunk}}
      description: The observable chunk collection
    - id: chunkStartIndex
      type: System.Int32
      description: The start chunk index to look from
    return:
      type: System.Int32
      description: The index of a chunk that could be targeted to save
    content.vb: Protected Overridable Function GetChunkToRemove(observable As IObservableChunk(Of T, TChunk), chunkStartIndex As Integer) As Integer
  overload: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.GetChunkToRemove*
  nameWithType.vb: LazyBalancingOnRemoveStrategy(Of T, TChunk).GetChunkToRemove(IObservableChunk(Of T, TChunk), Int32)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy(Of T, TChunk).GetChunkToRemove(NMF.Expressions.Linq.IObservableChunk(Of T, TChunk), System.Int32)
  name.vb: GetChunkToRemove(IObservableChunk(Of T, TChunk), Int32)
- uid: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.TryAddToExistingChunk(NMF.Expressions.Linq.IObservableChunk{`0,`1},`0,System.Int32)
  commentId: M:NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.TryAddToExistingChunk(NMF.Expressions.Linq.IObservableChunk{`0,`1},`0,System.Int32)
  id: TryAddToExistingChunk(NMF.Expressions.Linq.IObservableChunk{`0,`1},`0,System.Int32)
  parent: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2
  langs:
  - csharp
  - vb
  name: TryAddToExistingChunk(IObservableChunk<T, TChunk>, T, Int32)
  nameWithType: LazyBalancingOnRemoveStrategy<T, TChunk>.TryAddToExistingChunk(IObservableChunk<T, TChunk>, T, Int32)
  fullName: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy<T, TChunk>.TryAddToExistingChunk(NMF.Expressions.Linq.IObservableChunk<T, TChunk>, T, System.Int32)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Chunk/LazyBalancingStrategy.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: TryAddToExistingChunk
    path: src/Expressions/Expressions.Chunk/LazyBalancingStrategy.cs
    startLine: 127
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nTries to add the item to an existing chunk\n"
  example: []
  syntax:
    content: protected virtual bool TryAddToExistingChunk(IObservableChunk<T, TChunk> observable, T item, int sourceStartIndex)
    parameters:
    - id: observable
      type: NMF.Expressions.Linq.IObservableChunk{{T},{TChunk}}
      description: The observable chunk collection
    - id: item
      type: '{T}'
      description: The item that shall be added
    - id: sourceStartIndex
      type: System.Int32
      description: The index of the item in the source collection
    return:
      type: System.Boolean
      description: True, if the item could be added to a chunk, otherwise False
    content.vb: Protected Overridable Function TryAddToExistingChunk(observable As IObservableChunk(Of T, TChunk), item As T, sourceStartIndex As Integer) As Boolean
  overload: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.TryAddToExistingChunk*
  nameWithType.vb: LazyBalancingOnRemoveStrategy(Of T, TChunk).TryAddToExistingChunk(IObservableChunk(Of T, TChunk), T, Int32)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy(Of T, TChunk).TryAddToExistingChunk(NMF.Expressions.Linq.IObservableChunk(Of T, TChunk), T, System.Int32)
  name.vb: TryAddToExistingChunk(IObservableChunk(Of T, TChunk), T, Int32)
references:
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider{{T},{TChunk}}
  commentId: T:NMF.Expressions.Linq.IChunkBalancingStrategyProvider{`0,`1}
  parent: NMF.Expressions.Linq
  definition: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
  name: IChunkBalancingStrategyProvider<T, TChunk>
  nameWithType: IChunkBalancingStrategyProvider<T, TChunk>
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider<T, TChunk>
  nameWithType.vb: IChunkBalancingStrategyProvider(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of T, TChunk)
  name.vb: IChunkBalancingStrategyProvider(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
  commentId: T:NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
  name: IChunkBalancingStrategyProvider<T, TChunk>
  nameWithType: IChunkBalancingStrategyProvider<T, TChunk>
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider<T, TChunk>
  nameWithType.vb: IChunkBalancingStrategyProvider(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of T, TChunk)
  name.vb: IChunkBalancingStrategyProvider(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
    nameWithType: IChunkBalancingStrategyProvider
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2
  commentId: T:NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2
  parent: NMF.Expressions.Linq
  name: LazyBalancingOnRemoveStrategy<T, TChunk>
  nameWithType: LazyBalancingOnRemoveStrategy<T, TChunk>
  fullName: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy<T, TChunk>
  nameWithType.vb: LazyBalancingOnRemoveStrategy(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy(Of T, TChunk)
  name.vb: LazyBalancingOnRemoveStrategy(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2
    name: LazyBalancingOnRemoveStrategy
    nameWithType: LazyBalancingOnRemoveStrategy
    fullName: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2
    name: LazyBalancingOnRemoveStrategy
    nameWithType: LazyBalancingOnRemoveStrategy
    fullName: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.CreateStrategy*
  commentId: Overload:NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.CreateStrategy
  name: CreateStrategy
  nameWithType: LazyBalancingOnRemoveStrategy<T, TChunk>.CreateStrategy
  fullName: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy<T, TChunk>.CreateStrategy
  nameWithType.vb: LazyBalancingOnRemoveStrategy(Of T, TChunk).CreateStrategy
  fullName.vb: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy(Of T, TChunk).CreateStrategy
- uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider{{T},{TChunk}}.CreateStrategy(NMF.Expressions.Linq.IObservableChunk{{T},{TChunk}})
  commentId: M:NMF.Expressions.Linq.IChunkBalancingStrategyProvider{`0,`1}.CreateStrategy(NMF.Expressions.Linq.IObservableChunk{`0,`1})
  parent: NMF.Expressions.Linq.IChunkBalancingStrategyProvider{{T},{TChunk}}
  definition: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2.CreateStrategy(NMF.Expressions.Linq.IObservableChunk{`0,`1})
  name: CreateStrategy(IObservableChunk<T, TChunk>)
  nameWithType: IChunkBalancingStrategyProvider<T, TChunk>.CreateStrategy(IObservableChunk<T, TChunk>)
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider<T, TChunk>.CreateStrategy(NMF.Expressions.Linq.IObservableChunk<T, TChunk>)
  nameWithType.vb: IChunkBalancingStrategyProvider(Of T, TChunk).CreateStrategy(IObservableChunk(Of T, TChunk))
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of T, TChunk).CreateStrategy(NMF.Expressions.Linq.IObservableChunk(Of T, TChunk))
  name.vb: CreateStrategy(IObservableChunk(Of T, TChunk))
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2.CreateStrategy(NMF.Expressions.Linq.IObservableChunk{`0,`1})
    name: CreateStrategy
    nameWithType: IChunkBalancingStrategyProvider<T, TChunk>.CreateStrategy
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider<T, TChunk>.CreateStrategy
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    nameWithType: IObservableChunk
    fullName: NMF.Expressions.Linq.IObservableChunk
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2.CreateStrategy(NMF.Expressions.Linq.IObservableChunk{`0,`1})
    name: CreateStrategy
    nameWithType: IChunkBalancingStrategyProvider(Of T, TChunk).CreateStrategy
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of T, TChunk).CreateStrategy
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    nameWithType: IObservableChunk
    fullName: NMF.Expressions.Linq.IObservableChunk
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IObservableChunk{{T},{TChunk}}
  commentId: T:NMF.Expressions.Linq.IObservableChunk{``0,``1}
  parent: NMF.Expressions.Linq
  definition: NMF.Expressions.Linq.IObservableChunk`2
  name: IObservableChunk<T, TChunk>
  nameWithType: IObservableChunk<T, TChunk>
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>
  nameWithType.vb: IObservableChunk(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk)
  name.vb: IObservableChunk(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    nameWithType: IObservableChunk
    fullName: NMF.Expressions.Linq.IObservableChunk
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    nameWithType: IObservableChunk
    fullName: NMF.Expressions.Linq.IObservableChunk
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IChunkBalancingStrategy{{T},{TChunk}}
  commentId: T:NMF.Expressions.Linq.IChunkBalancingStrategy{``0,``1}
  parent: NMF.Expressions.Linq
  definition: NMF.Expressions.Linq.IChunkBalancingStrategy`2
  name: IChunkBalancingStrategy<T, TChunk>
  nameWithType: IChunkBalancingStrategy<T, TChunk>
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategy<T, TChunk>
  nameWithType.vb: IChunkBalancingStrategy(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategy(Of T, TChunk)
  name.vb: IChunkBalancingStrategy(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2
    name: IChunkBalancingStrategy
    nameWithType: IChunkBalancingStrategy
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategy
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2
    name: IChunkBalancingStrategy
    nameWithType: IChunkBalancingStrategy
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategy
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2.CreateStrategy(NMF.Expressions.Linq.IObservableChunk{`0,`1})
  commentId: M:NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2.CreateStrategy(NMF.Expressions.Linq.IObservableChunk{`0,`1})
  name: CreateStrategy(IObservableChunk<T, TChunk>)
  nameWithType: IChunkBalancingStrategyProvider<T, TChunk>.CreateStrategy(IObservableChunk<T, TChunk>)
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider<T, TChunk>.CreateStrategy(NMF.Expressions.Linq.IObservableChunk<T, TChunk>)
  nameWithType.vb: IChunkBalancingStrategyProvider(Of T, TChunk).CreateStrategy(IObservableChunk(Of T, TChunk))
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of T, TChunk).CreateStrategy(NMF.Expressions.Linq.IObservableChunk(Of T, TChunk))
  name.vb: CreateStrategy(IObservableChunk(Of T, TChunk))
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2.CreateStrategy(NMF.Expressions.Linq.IObservableChunk{`0,`1})
    name: CreateStrategy
    nameWithType: IChunkBalancingStrategyProvider<T, TChunk>.CreateStrategy
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider<T, TChunk>.CreateStrategy
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    nameWithType: IObservableChunk
    fullName: NMF.Expressions.Linq.IObservableChunk
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2.CreateStrategy(NMF.Expressions.Linq.IObservableChunk{`0,`1})
    name: CreateStrategy
    nameWithType: IChunkBalancingStrategyProvider(Of T, TChunk).CreateStrategy
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of T, TChunk).CreateStrategy
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    nameWithType: IObservableChunk
    fullName: NMF.Expressions.Linq.IObservableChunk
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IObservableChunk`2
  commentId: T:NMF.Expressions.Linq.IObservableChunk`2
  name: IObservableChunk<T, TChunk>
  nameWithType: IObservableChunk<T, TChunk>
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>
  nameWithType.vb: IObservableChunk(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk)
  name.vb: IObservableChunk(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    nameWithType: IObservableChunk
    fullName: NMF.Expressions.Linq.IObservableChunk
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    nameWithType: IObservableChunk
    fullName: NMF.Expressions.Linq.IObservableChunk
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2
  commentId: T:NMF.Expressions.Linq.IChunkBalancingStrategy`2
  name: IChunkBalancingStrategy<T, TChunk>
  nameWithType: IChunkBalancingStrategy<T, TChunk>
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategy<T, TChunk>
  nameWithType.vb: IChunkBalancingStrategy(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategy(Of T, TChunk)
  name.vb: IChunkBalancingStrategy(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2
    name: IChunkBalancingStrategy
    nameWithType: IChunkBalancingStrategy
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategy
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2
    name: IChunkBalancingStrategy
    nameWithType: IChunkBalancingStrategy
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategy
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.CanAdjust*
  commentId: Overload:NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.CanAdjust
  name: CanAdjust
  nameWithType: LazyBalancingOnRemoveStrategy<T, TChunk>.CanAdjust
  fullName: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy<T, TChunk>.CanAdjust
  nameWithType.vb: LazyBalancingOnRemoveStrategy(Of T, TChunk).CanAdjust
  fullName.vb: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy(Of T, TChunk).CanAdjust
- uid: '{TChunk}'
  commentId: '!:TChunk'
  definition: TChunk
  name: TChunk
  nameWithType: TChunk
  fullName: TChunk
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TChunk
  name: TChunk
  nameWithType: TChunk
  fullName: TChunk
- uid: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.CanMove*
  commentId: Overload:NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.CanMove
  name: CanMove
  nameWithType: LazyBalancingOnRemoveStrategy<T, TChunk>.CanMove
  fullName: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy<T, TChunk>.CanMove
  nameWithType.vb: LazyBalancingOnRemoveStrategy(Of T, TChunk).CanMove
  fullName.vb: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy(Of T, TChunk).CanMove
- uid: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.RemoveFromOriginal*
  commentId: Overload:NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.RemoveFromOriginal
  name: RemoveFromOriginal
  nameWithType: LazyBalancingOnRemoveStrategy<T, TChunk>.RemoveFromOriginal
  fullName: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy<T, TChunk>.RemoveFromOriginal
  nameWithType.vb: LazyBalancingOnRemoveStrategy(Of T, TChunk).RemoveFromOriginal
  fullName.vb: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy(Of T, TChunk).RemoveFromOriginal
- uid: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.Move*
  commentId: Overload:NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.Move
  name: Move
  nameWithType: LazyBalancingOnRemoveStrategy<T, TChunk>.Move
  fullName: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy<T, TChunk>.Move
  nameWithType.vb: LazyBalancingOnRemoveStrategy(Of T, TChunk).Move
  fullName.vb: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy(Of T, TChunk).Move
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.List{System.Int32}
  commentId: T:System.Collections.Generic.List{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Int32>
  nameWithType: List<Int32>
  fullName: System.Collections.Generic.List<System.Int32>
  nameWithType.vb: List(Of Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Int32)
  name.vb: List(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.GetChunkToRemove*
  commentId: Overload:NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.GetChunkToRemove
  name: GetChunkToRemove
  nameWithType: LazyBalancingOnRemoveStrategy<T, TChunk>.GetChunkToRemove
  fullName: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy<T, TChunk>.GetChunkToRemove
  nameWithType.vb: LazyBalancingOnRemoveStrategy(Of T, TChunk).GetChunkToRemove
  fullName.vb: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy(Of T, TChunk).GetChunkToRemove
- uid: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.TryAddToExistingChunk*
  commentId: Overload:NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy`2.TryAddToExistingChunk
  name: TryAddToExistingChunk
  nameWithType: LazyBalancingOnRemoveStrategy<T, TChunk>.TryAddToExistingChunk
  fullName: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy<T, TChunk>.TryAddToExistingChunk
  nameWithType.vb: LazyBalancingOnRemoveStrategy(Of T, TChunk).TryAddToExistingChunk
  fullName.vb: NMF.Expressions.Linq.LazyBalancingOnRemoveStrategy(Of T, TChunk).TryAddToExistingChunk
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
