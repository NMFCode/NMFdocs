### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.Linq.NoBalancingStrategy
  commentId: T:NMF.Expressions.Linq.NoBalancingStrategy
  id: NoBalancingStrategy
  parent: NMF.Expressions.Linq
  children:
  - NMF.Expressions.Linq.NoBalancingStrategy.CreateStrategy``2(NMF.Expressions.Linq.IObservableChunk{``0,``1})
  langs:
  - csharp
  - vb
  name: NoBalancingStrategy
  nameWithType: NoBalancingStrategy
  fullName: NMF.Expressions.Linq.NoBalancingStrategy
  type: Class
  source:
    remote:
      path: Expressions/Expressions.Chunk/NoBalancingStrategy.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: NoBalancingStrategy
    path: src/Expressions/Expressions.Chunk/NoBalancingStrategy.cs
    startLine: 9
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  summary: "\nDenotes a class representing no balancing strategy at all\n"
  example: []
  syntax:
    content: 'public sealed class NoBalancingStrategy : IChunkBalancingStrategyProvider'
    content.vb: >-
      Public NotInheritable Class NoBalancingStrategy
          Implements IChunkBalancingStrategyProvider
  inheritance:
  - System.Object
  implements:
  - NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: NMF.Expressions.Linq.NoBalancingStrategy.CreateStrategy``2(NMF.Expressions.Linq.IObservableChunk{``0,``1})
  commentId: M:NMF.Expressions.Linq.NoBalancingStrategy.CreateStrategy``2(NMF.Expressions.Linq.IObservableChunk{``0,``1})
  id: CreateStrategy``2(NMF.Expressions.Linq.IObservableChunk{``0,``1})
  parent: NMF.Expressions.Linq.NoBalancingStrategy
  langs:
  - csharp
  - vb
  name: CreateStrategy<T, TChunk>(IObservableChunk<T, TChunk>)
  nameWithType: NoBalancingStrategy.CreateStrategy<T, TChunk>(IObservableChunk<T, TChunk>)
  fullName: NMF.Expressions.Linq.NoBalancingStrategy.CreateStrategy<T, TChunk>(NMF.Expressions.Linq.IObservableChunk<T, TChunk>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Chunk/NoBalancingStrategy.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateStrategy
    path: src/Expressions/Expressions.Chunk/NoBalancingStrategy.cs
    startLine: 13
  assemblies:
  - NMF.Expressions.Chunk
  namespace: NMF.Expressions.Linq
  example: []
  syntax:
    content: public IChunkBalancingStrategy<T, TChunk> CreateStrategy<T, TChunk>(IObservableChunk<T, TChunk> observableChunk)
    parameters:
    - id: observableChunk
      type: NMF.Expressions.Linq.IObservableChunk{{T},{TChunk}}
    typeParameters:
    - id: T
    - id: TChunk
    return:
      type: NMF.Expressions.Linq.IChunkBalancingStrategy{{T},{TChunk}}
    content.vb: Public Function CreateStrategy(Of T, TChunk)(observableChunk As IObservableChunk(Of T, TChunk)) As IChunkBalancingStrategy(Of T, TChunk)
  overload: NMF.Expressions.Linq.NoBalancingStrategy.CreateStrategy*
  implements:
  - NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy``2(NMF.Expressions.Linq.IObservableChunk{{T},{TChunk}})
  nameWithType.vb: NoBalancingStrategy.CreateStrategy(Of T, TChunk)(IObservableChunk(Of T, TChunk))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.Linq.NoBalancingStrategy.CreateStrategy(Of T, TChunk)(NMF.Expressions.Linq.IObservableChunk(Of T, TChunk))
  name.vb: CreateStrategy(Of T, TChunk)(IObservableChunk(Of T, TChunk))
references:
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  commentId: T:NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  parent: NMF.Expressions.Linq
  name: IChunkBalancingStrategyProvider
  nameWithType: IChunkBalancingStrategyProvider
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.Linq.NoBalancingStrategy.CreateStrategy*
  commentId: Overload:NMF.Expressions.Linq.NoBalancingStrategy.CreateStrategy
  name: CreateStrategy
  nameWithType: NoBalancingStrategy.CreateStrategy
  fullName: NMF.Expressions.Linq.NoBalancingStrategy.CreateStrategy
- uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy``2(NMF.Expressions.Linq.IObservableChunk{{T},{TChunk}})
  commentId: M:NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy``2(NMF.Expressions.Linq.IObservableChunk{``0,``1})
  parent: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
  definition: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy``2(NMF.Expressions.Linq.IObservableChunk{``0,``1})
  name: CreateStrategy<T, TChunk>(IObservableChunk<T, TChunk>)
  nameWithType: IChunkBalancingStrategyProvider.CreateStrategy<T, TChunk>(IObservableChunk<T, TChunk>)
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy<T, TChunk>(NMF.Expressions.Linq.IObservableChunk<T, TChunk>)
  nameWithType.vb: IChunkBalancingStrategyProvider.CreateStrategy(Of T, TChunk)(IObservableChunk(Of T, TChunk))
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy(Of T, TChunk)(NMF.Expressions.Linq.IObservableChunk(Of T, TChunk))
  name.vb: CreateStrategy(Of T, TChunk)(IObservableChunk(Of T, TChunk))
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy``2(NMF.Expressions.Linq.IObservableChunk{``0,``1})
    name: CreateStrategy<T, TChunk>
    nameWithType: IChunkBalancingStrategyProvider.CreateStrategy<T, TChunk>
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy<T, TChunk>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    nameWithType: IObservableChunk
    fullName: NMF.Expressions.Linq.IObservableChunk
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy``2(NMF.Expressions.Linq.IObservableChunk{``0,``1})
    name: CreateStrategy(Of T, TChunk)
    nameWithType: IChunkBalancingStrategyProvider.CreateStrategy(Of T, TChunk)
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy(Of T, TChunk)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    nameWithType: IObservableChunk
    fullName: NMF.Expressions.Linq.IObservableChunk
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IObservableChunk{{T},{TChunk}}
  commentId: T:NMF.Expressions.Linq.IObservableChunk{``0,``1}
  parent: NMF.Expressions.Linq
  definition: NMF.Expressions.Linq.IObservableChunk`2
  name: IObservableChunk<T, TChunk>
  nameWithType: IObservableChunk<T, TChunk>
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>
  nameWithType.vb: IObservableChunk(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk)
  name.vb: IObservableChunk(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    nameWithType: IObservableChunk
    fullName: NMF.Expressions.Linq.IObservableChunk
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    nameWithType: IObservableChunk
    fullName: NMF.Expressions.Linq.IObservableChunk
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IChunkBalancingStrategy{{T},{TChunk}}
  commentId: T:NMF.Expressions.Linq.IChunkBalancingStrategy{``0,``1}
  parent: NMF.Expressions.Linq
  definition: NMF.Expressions.Linq.IChunkBalancingStrategy`2
  name: IChunkBalancingStrategy<T, TChunk>
  nameWithType: IChunkBalancingStrategy<T, TChunk>
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategy<T, TChunk>
  nameWithType.vb: IChunkBalancingStrategy(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategy(Of T, TChunk)
  name.vb: IChunkBalancingStrategy(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2
    name: IChunkBalancingStrategy
    nameWithType: IChunkBalancingStrategy
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategy
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2
    name: IChunkBalancingStrategy
    nameWithType: IChunkBalancingStrategy
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategy
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy``2(NMF.Expressions.Linq.IObservableChunk{``0,``1})
  commentId: M:NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy``2(NMF.Expressions.Linq.IObservableChunk{``0,``1})
  name: CreateStrategy<T, TChunk>(IObservableChunk<T, TChunk>)
  nameWithType: IChunkBalancingStrategyProvider.CreateStrategy<T, TChunk>(IObservableChunk<T, TChunk>)
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy<T, TChunk>(NMF.Expressions.Linq.IObservableChunk<T, TChunk>)
  nameWithType.vb: IChunkBalancingStrategyProvider.CreateStrategy(Of T, TChunk)(IObservableChunk(Of T, TChunk))
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy(Of T, TChunk)(NMF.Expressions.Linq.IObservableChunk(Of T, TChunk))
  name.vb: CreateStrategy(Of T, TChunk)(IObservableChunk(Of T, TChunk))
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy``2(NMF.Expressions.Linq.IObservableChunk{``0,``1})
    name: CreateStrategy<T, TChunk>
    nameWithType: IChunkBalancingStrategyProvider.CreateStrategy<T, TChunk>
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy<T, TChunk>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    nameWithType: IObservableChunk
    fullName: NMF.Expressions.Linq.IObservableChunk
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy``2(NMF.Expressions.Linq.IObservableChunk{``0,``1})
    name: CreateStrategy(Of T, TChunk)
    nameWithType: IChunkBalancingStrategyProvider.CreateStrategy(Of T, TChunk)
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategyProvider.CreateStrategy(Of T, TChunk)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    nameWithType: IObservableChunk
    fullName: NMF.Expressions.Linq.IObservableChunk
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IObservableChunk`2
  commentId: T:NMF.Expressions.Linq.IObservableChunk`2
  name: IObservableChunk<T, TChunk>
  nameWithType: IObservableChunk<T, TChunk>
  fullName: NMF.Expressions.Linq.IObservableChunk<T, TChunk>
  nameWithType.vb: IObservableChunk(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IObservableChunk(Of T, TChunk)
  name.vb: IObservableChunk(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    nameWithType: IObservableChunk
    fullName: NMF.Expressions.Linq.IObservableChunk
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IObservableChunk`2
    name: IObservableChunk
    nameWithType: IObservableChunk
    fullName: NMF.Expressions.Linq.IObservableChunk
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2
  commentId: T:NMF.Expressions.Linq.IChunkBalancingStrategy`2
  name: IChunkBalancingStrategy<T, TChunk>
  nameWithType: IChunkBalancingStrategy<T, TChunk>
  fullName: NMF.Expressions.Linq.IChunkBalancingStrategy<T, TChunk>
  nameWithType.vb: IChunkBalancingStrategy(Of T, TChunk)
  fullName.vb: NMF.Expressions.Linq.IChunkBalancingStrategy(Of T, TChunk)
  name.vb: IChunkBalancingStrategy(Of T, TChunk)
  spec.csharp:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2
    name: IChunkBalancingStrategy
    nameWithType: IChunkBalancingStrategy
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategy
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategy`2
    name: IChunkBalancingStrategy
    nameWithType: IChunkBalancingStrategy
    fullName: NMF.Expressions.Linq.IChunkBalancingStrategy
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TChunk
    nameWithType: TChunk
    fullName: TChunk
  - name: )
    nameWithType: )
    fullName: )
