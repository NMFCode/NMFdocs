### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.Linq.IncrementalLookup`2
  commentId: T:NMF.Expressions.Linq.IncrementalLookup`2
  id: IncrementalLookup`2
  parent: NMF.Expressions.Linq
  children:
  - NMF.Expressions.Linq.IncrementalLookup`2.#ctor(NMF.Expressions.INotifyEnumerable{`0},NMF.Expressions.ObservingFunc{`0,`1})
  - NMF.Expressions.Linq.IncrementalLookup`2.Dependencies
  - NMF.Expressions.Linq.IncrementalLookup`2.GetEnumerator
  - NMF.Expressions.Linq.IncrementalLookup`2.Item(`1)
  - NMF.Expressions.Linq.IncrementalLookup`2.Keys
  - NMF.Expressions.Linq.IncrementalLookup`2.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  - NMF.Expressions.Linq.IncrementalLookup`2.OnAttach
  langs:
  - csharp
  - vb
  name: IncrementalLookup<TSource, TKey>
  nameWithType: IncrementalLookup<TSource, TKey>
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>
  type: Class
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IncrementalLookup
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 14
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  summary: "\nImplements an incremental lookup\n"
  example: []
  syntax:
    content: 'public class IncrementalLookup<TSource, TKey> : ObservableEnumerable<TKey>, INotifyEnumerable<TKey>, INotifyEnumerable, INotifiable, ICollection<TKey>, IEnumerable<TKey>, IEnumerable, INotifyCollectionChanged, IDisposable, ISuccessorList, INotifyLookup<TSource, TKey>'
    typeParameters:
    - id: TSource
      description: The source type of elements
    - id: TKey
      description: The type along which the elements are grouped
    content.vb: Public Class IncrementalLookup(Of TSource, TKey) Inherits ObservableEnumerable(Of TKey) Implements INotifyEnumerable(Of TKey), INotifyEnumerable, INotifiable, ICollection(Of TKey), IEnumerable(Of TKey), IEnumerable, INotifyCollectionChanged, IDisposable, ISuccessorList, INotifyLookup(Of TSource, TKey)
  inheritance:
  - System.Object
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  implements:
  - NMF.Expressions.INotifyEnumerable{{TKey}}
  - NMF.Expressions.INotifyEnumerable
  - NMF.Expressions.INotifiable
  - System.Collections.Generic.ICollection{{TKey}}
  - System.Collections.Generic.IEnumerable{{TKey}}
  - System.Collections.IEnumerable
  - System.Collections.Specialized.INotifyCollectionChanged
  - System.IDisposable
  - NMF.Expressions.ISuccessorList
  - NMF.Expressions.Linq.INotifyLookup{{TSource},{TKey}}
  inheritedMembers:
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.OnAddItem({TKey},System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.OnAddItems(System.Collections.Generic.IEnumerable{{TKey}},System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.ToString
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.RaiseEvents(System.Collections.Generic.IList{{TKey}},System.Collections.Generic.IList{{TKey}},System.Collections.Generic.IList{{TKey}},System.Int32,System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.OnRemoveItem({TKey},System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.OnRemoveItems(System.Collections.Generic.IEnumerable{{TKey}},System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.OnReplaceItems(System.Collections.Generic.IEnumerable{{TKey}},System.Collections.Generic.IEnumerable{{TKey}},System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.OnCleared
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.OnReplaceItem({TKey},{TKey},System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.OnMoveItem({TKey},System.Int32,System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.OnMoveItems(System.Collections.Generic.IEnumerable{{TKey}},System.Int32,System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.HasEventSubscriber
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.CollectionChanged
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.Dispose
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.Add({TKey})
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.Clear
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.IsReadOnly
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.Remove({TKey})
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.Contains({TKey})
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.CopyTo({TKey}[],System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.Count
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.Successors
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.ExecutionMetaData
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.HasSuccessors
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.IsAttached
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.AllSuccessors
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.Set(NMF.Expressions.INotifiable)
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.SetDummy
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.Unset(NMF.Expressions.INotifiable,System.Boolean)
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.UnsetAll
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.GetSuccessor(System.Int32)
  - NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.OnDetach
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - NMF.Expressions.INotifiable.NMF.Expressions.Debug.DebugExtensions.ExportToDgml(System.String)
  - NMF.Expressions.INotifiable.NMF.Expressions.Debug.DebugExtensions.Visualize
  - NMF.Expressions.INotifyEnumerable.NMF.Expressions.Linq.ObservableExtensions.Cast``1
  - NMF.Expressions.INotifyEnumerable.NMF.Expressions.Linq.ObservableExtensions.OfType``1
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TKey}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TKey}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{{TKey},{TResult}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TKey}},System.Int32,{TResult}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TKey},System.Int32}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TKey},System.Int32}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{{TKey},System.Int32},{TResult}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TKey},System.Int32}},System.Int32,{TResult}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.All``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Boolean}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Any``1
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Any``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Boolean}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Decimal}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Double}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Int32}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Int64}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Nullable{System.Decimal}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Nullable{System.Double}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Nullable{System.Int32}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Nullable{System.Int64}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Nullable{System.Single}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Single}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Concat``1(System.Collections.Generic.IEnumerable{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Contains``1({TKey},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Contains``1({TKey})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Count``1
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Count``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Boolean}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Distinct``1
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Distinct``1(System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Except``1(System.Collections.Generic.IEnumerable{{TKey}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Except``1(System.Collections.Generic.IEnumerable{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Boolean}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}},System.Func{{TKey},{TKey}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}},System.Func{{TKey},{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}},System.Func{{TKey},{TKey}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TKey}},{TResult}}},System.Func{{TKey},System.Collections.Generic.IEnumerable{{TKey}},{TResult}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}},System.Func{{TKey},{TKey}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TKey}},{TResult}}},System.Func{{TKey},System.Collections.Generic.IEnumerable{{TKey}},{TResult}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TKey}},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TKey}},{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{{TKey}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{{TKey}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{{TKey}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{{TKey}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{{TKey}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},{TInner},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},{TInner},{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``1(System.Collections.Generic.IComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TResult}}},System.Collections.Generic.IComparer{{TResult}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TKey},System.Nullable{{TResult}}}},System.Collections.Generic.IComparer{{TResult}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TKey},System.Nullable{{TResult}}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``1(System.Collections.Generic.IComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TResult}}},System.Collections.Generic.IComparer{{TResult}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TKey},System.Nullable{{TResult}}}},System.Collections.Generic.IComparer{{TResult}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TKey},System.Nullable{{TResult}}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TResult}}},System.Func{{TKey},{TResult}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TResult}}}},System.Func{{TKey},System.Collections.Generic.IEnumerable{{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TResult}}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TIntermediate}}}},System.Func{{TKey},System.Collections.Generic.IEnumerable{{TIntermediate}}},System.Linq.Expressions.Expression{System.Func{{TKey},{TIntermediate},{TResult}}},System.Func{{TKey},{TIntermediate},{TResult}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TIntermediate}}}},System.Linq.Expressions.Expression{System.Func{{TKey},{TIntermediate},{TResult}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{{TKey}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Boolean}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Decimal}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Double}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Int32}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Int64}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Nullable{System.Decimal}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Nullable{System.Double}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Nullable{System.Int32}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Nullable{System.Int64}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Nullable{System.Single}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Single}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Union``1(System.Collections.Generic.IEnumerable{{TKey}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Union``1(System.Collections.Generic.IEnumerable{{TKey}})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Boolean}},System.Func{{TKey},System.Boolean})
  - NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Boolean}})
  - NMF.Expressions.Linq.IncrementalLookup`2.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  - System.Collections.Generic.ICollection{`1}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  - System.Collections.Generic.IEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TKey}},System.Int32,{TResult}})
  - System.Collections.Generic.IEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TKey},System.Int32}},System.Int32,{TResult}})
  - System.Collections.Generic.IEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  nameWithType.vb: IncrementalLookup(Of TSource, TKey)
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey)
  name.vb: IncrementalLookup(Of TSource, TKey)
- uid: NMF.Expressions.Linq.IncrementalLookup`2.#ctor(NMF.Expressions.INotifyEnumerable{`0},NMF.Expressions.ObservingFunc{`0,`1})
  commentId: M:NMF.Expressions.Linq.IncrementalLookup`2.#ctor(NMF.Expressions.INotifyEnumerable{`0},NMF.Expressions.ObservingFunc{`0,`1})
  id: '#ctor(NMF.Expressions.INotifyEnumerable{`0},NMF.Expressions.ObservingFunc{`0,`1})'
  parent: NMF.Expressions.Linq.IncrementalLookup`2
  langs:
  - csharp
  - vb
  name: IncrementalLookup(INotifyEnumerable<TSource>, ObservingFunc<TSource, TKey>)
  nameWithType: IncrementalLookup<TSource, TKey>.IncrementalLookup(INotifyEnumerable<TSource>, ObservingFunc<TSource, TKey>)
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.IncrementalLookup(NMF.Expressions.INotifyEnumerable<TSource>, NMF.Expressions.ObservingFunc<TSource, TKey>)
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 27
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  summary: "\nCreates an incremental lookup\n"
  example: []
  syntax:
    content: public IncrementalLookup(INotifyEnumerable<TSource> source, ObservingFunc<TSource, TKey> keySelector)
    parameters:
    - id: source
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: The source of elements
    - id: keySelector
      type: NMF.Expressions.ObservingFunc{{TSource},{TKey}}
      description: A function that selects the keys for an element
    content.vb: Public Sub New(source As INotifyEnumerable(Of TSource), keySelector As ObservingFunc(Of TSource, TKey))
  overload: NMF.Expressions.Linq.IncrementalLookup`2.#ctor*
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).New(INotifyEnumerable(Of TSource), ObservingFunc(Of TSource, TKey))
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).New(NMF.Expressions.INotifyEnumerable(Of TSource), NMF.Expressions.ObservingFunc(Of TSource, TKey))
  name.vb: New(INotifyEnumerable(Of TSource), ObservingFunc(Of TSource, TKey))
- uid: NMF.Expressions.Linq.IncrementalLookup`2.OnAttach
  commentId: M:NMF.Expressions.Linq.IncrementalLookup`2.OnAttach
  id: OnAttach
  parent: NMF.Expressions.Linq.IncrementalLookup`2
  langs:
  - csharp
  - vb
  name: OnAttach()
  nameWithType: IncrementalLookup<TSource, TKey>.OnAttach()
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.OnAttach()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OnAttach
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 35
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  summary: "\nGets called when a successor attaches and there was no successor before\n"
  example: []
  syntax:
    content: protected override void OnAttach()
    content.vb: Protected Overrides Sub OnAttach()
  overridden: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.OnAttach
  overload: NMF.Expressions.Linq.IncrementalLookup`2.OnAttach*
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).OnAttach()
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).OnAttach()
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Dependencies
  commentId: P:NMF.Expressions.Linq.IncrementalLookup`2.Dependencies
  id: Dependencies
  parent: NMF.Expressions.Linq.IncrementalLookup`2
  langs:
  - csharp
  - vb
  name: Dependencies
  nameWithType: IncrementalLookup<TSource, TKey>.Dependencies
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Dependencies
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Dependencies
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 45
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  summary: "\nNodes that notify this node.\n"
  example: []
  syntax:
    content: public override IEnumerable<INotifiable> Dependencies { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
    content.vb: Public Overrides ReadOnly Property Dependencies As IEnumerable(Of INotifiable)
  overridden: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.Dependencies
  overload: NMF.Expressions.Linq.IncrementalLookup`2.Dependencies*
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Dependencies
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Dependencies
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Keys
  commentId: P:NMF.Expressions.Linq.IncrementalLookup`2.Keys
  id: Keys
  parent: NMF.Expressions.Linq.IncrementalLookup`2
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: IncrementalLookup<TSource, TKey>.Keys
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Keys
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Keys
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 54
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  summary: "\nGets a collection of keys\n"
  example: []
  syntax:
    content: public INotifyEnumerable<TKey> Keys { get; }
    parameters: []
    return:
      type: NMF.Expressions.INotifyEnumerable{{TKey}}
    content.vb: Public ReadOnly Property Keys As INotifyEnumerable(Of TKey)
  overload: NMF.Expressions.Linq.IncrementalLookup`2.Keys*
  implements:
  - NMF.Expressions.Linq.INotifyLookup{{TSource},{TKey}}.Keys
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Keys
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Keys
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Item(`1)
  commentId: P:NMF.Expressions.Linq.IncrementalLookup`2.Item(`1)
  id: Item(`1)
  parent: NMF.Expressions.Linq.IncrementalLookup`2
  langs:
  - csharp
  - vb
  name: this[TKey]
  nameWithType: IncrementalLookup<TSource, TKey>.this[TKey]
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.this[TKey]
  type: Property
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: this[]
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 60
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  summary: "\nGets the collection of elements for the given key\n"
  example: []
  syntax:
    content: public INotifyEnumerable<TSource> this[TKey key] { get; }
    parameters:
    - id: key
      type: '{TKey}'
      description: The key
    return:
      type: NMF.Expressions.INotifyEnumerable{{TSource}}
      description: A collection of associated elements
    content.vb: Public ReadOnly Default Property this[](key As TKey) As INotifyEnumerable(Of TSource)
  overload: NMF.Expressions.Linq.IncrementalLookup`2.Item*
  implements:
  - NMF.Expressions.Linq.INotifyLookup{{TSource},{TKey}}.Item({TKey})
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).this[](TKey)
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).this[](TKey)
  name.vb: this[](TKey)
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  commentId: M:NMF.Expressions.Linq.IncrementalLookup`2.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  id: Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  parent: NMF.Expressions.Linq.IncrementalLookup`2
  langs:
  - csharp
  - vb
  name: Notify(IList<INotificationResult>)
  nameWithType: IncrementalLookup<TSource, TKey>.Notify(IList<INotificationResult>)
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notify(System.Collections.Generic.IList<NMF.Expressions.INotificationResult>)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Notify
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 85
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  summary: "\nGets called when one of the dependencies signals a notification.\n"
  example: []
  syntax:
    content: public override INotificationResult Notify(IList<INotificationResult> sources)
    parameters:
    - id: sources
      type: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
      description: Contains information about what triggered this notification.
    return:
      type: NMF.Expressions.INotificationResult
      description: An object describing the changes that happened in this notification.
    content.vb: Public Overrides Function Notify(sources As IList(Of INotificationResult)) As INotificationResult
  overridden: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  overload: NMF.Expressions.Linq.IncrementalLookup`2.Notify*
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notify(IList(Of INotificationResult))
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notify(System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
- uid: NMF.Expressions.Linq.IncrementalLookup`2.GetEnumerator
  commentId: M:NMF.Expressions.Linq.IncrementalLookup`2.GetEnumerator
  id: GetEnumerator
  parent: NMF.Expressions.Linq.IncrementalLookup`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: IncrementalLookup<TSource, TKey>.GetEnumerator()
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/IncrementalLookup.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetEnumerator
    path: src/Expressions/Expressions.Utilities/IncrementalLookup.cs
    startLine: 179
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions.Linq
  example: []
  syntax:
    content: public override IEnumerator<TKey> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{TKey}}
    content.vb: Public Overrides Function GetEnumerator() As IEnumerator(Of TKey)
  overridden: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.GetEnumerator
  overload: NMF.Expressions.Linq.IncrementalLookup`2.GetEnumerator*
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).GetEnumerator()
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).GetEnumerator()
references:
- uid: NMF.Expressions.Linq
  commentId: N:NMF.Expressions.Linq
  name: NMF.Expressions.Linq
  nameWithType: NMF.Expressions.Linq
  fullName: NMF.Expressions.Linq
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Linq
    name: Linq
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  commentId: T:NMF.Expressions.Linq.ObservableEnumerable{`1}
  parent: NMF.Expressions.Linq
  definition: NMF.Expressions.Linq.ObservableEnumerable`1
  name: ObservableEnumerable<TKey>
  nameWithType: ObservableEnumerable<TKey>
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>
  nameWithType.vb: ObservableEnumerable(Of TKey)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey)
  name.vb: ObservableEnumerable(Of TKey)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1
    name: ObservableEnumerable
  - name: <
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1
    name: ObservableEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{{TKey}}
  commentId: T:NMF.Expressions.INotifyEnumerable{`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<TKey>
  nameWithType: INotifyEnumerable<TKey>
  fullName: NMF.Expressions.INotifyEnumerable<TKey>
  nameWithType.vb: INotifyEnumerable(Of TKey)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of TKey)
  name.vb: INotifyEnumerable(Of TKey)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
- uid: NMF.Expressions.INotifyEnumerable
  commentId: T:NMF.Expressions.INotifyEnumerable
  parent: NMF.Expressions
  name: INotifyEnumerable
  nameWithType: INotifyEnumerable
  fullName: NMF.Expressions.INotifyEnumerable
- uid: NMF.Expressions.INotifiable
  commentId: T:NMF.Expressions.INotifiable
  parent: NMF.Expressions
  name: INotifiable
  nameWithType: INotifiable
  fullName: NMF.Expressions.INotifiable
- uid: System.Collections.Generic.ICollection{{TKey}}
  commentId: T:System.Collections.Generic.ICollection{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TKey>
  nameWithType: ICollection<TKey>
  fullName: System.Collections.Generic.ICollection<TKey>
  nameWithType.vb: ICollection(Of TKey)
  fullName.vb: System.Collections.Generic.ICollection(Of TKey)
  name.vb: ICollection(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
- uid: System.Collections.Generic.IEnumerable{{TKey}}
  commentId: T:System.Collections.Generic.IEnumerable{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TKey>
  nameWithType: IEnumerable<TKey>
  fullName: System.Collections.Generic.IEnumerable<TKey>
  nameWithType.vb: IEnumerable(Of TKey)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TKey)
  name.vb: IEnumerable(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Specialized.INotifyCollectionChanged
  commentId: T:System.Collections.Specialized.INotifyCollectionChanged
  parent: System.Collections.Specialized
  isExternal: true
  name: INotifyCollectionChanged
  nameWithType: INotifyCollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: NMF.Expressions.ISuccessorList
  commentId: T:NMF.Expressions.ISuccessorList
  parent: NMF.Expressions
  name: ISuccessorList
  nameWithType: ISuccessorList
  fullName: NMF.Expressions.ISuccessorList
- uid: NMF.Expressions.Linq.INotifyLookup{{TSource},{TKey}}
  commentId: T:NMF.Expressions.Linq.INotifyLookup{`0,`1}
  parent: NMF.Expressions.Linq
  definition: NMF.Expressions.Linq.INotifyLookup`2
  name: INotifyLookup<TSource, TKey>
  nameWithType: INotifyLookup<TSource, TKey>
  fullName: NMF.Expressions.Linq.INotifyLookup<TSource, TKey>
  nameWithType.vb: INotifyLookup(Of TSource, TKey)
  fullName.vb: NMF.Expressions.Linq.INotifyLookup(Of TSource, TKey)
  name.vb: INotifyLookup(Of TSource, TKey)
  spec.csharp:
  - uid: NMF.Expressions.Linq.INotifyLookup`2
    name: INotifyLookup
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.INotifyLookup`2
    name: INotifyLookup
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.OnAddItem({TKey},System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`1}.OnAddItem(`1,System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItem(`0,System.Int32)
  name: OnAddItem(TKey, int)
  nameWithType: ObservableEnumerable<TKey>.OnAddItem(TKey, int)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.OnAddItem(TKey, int)
  nameWithType.vb: ObservableEnumerable(Of TKey).OnAddItem(TKey, Integer)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).OnAddItem(TKey, Integer)
  name.vb: OnAddItem(TKey, Integer)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.OnAddItem(`1,System.Int32)
    name: OnAddItem
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.OnAddItem(`1,System.Int32)
    name: OnAddItem
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.OnAddItems(System.Collections.Generic.IEnumerable{{TKey}},System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`1}.OnAddItems(System.Collections.Generic.IEnumerable{`1},System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
  name: OnAddItems(IEnumerable<TKey>, int)
  nameWithType: ObservableEnumerable<TKey>.OnAddItems(IEnumerable<TKey>, int)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.OnAddItems(System.Collections.Generic.IEnumerable<TKey>, int)
  nameWithType.vb: ObservableEnumerable(Of TKey).OnAddItems(IEnumerable(Of TKey), Integer)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).OnAddItems(System.Collections.Generic.IEnumerable(Of TKey), Integer)
  name.vb: OnAddItems(IEnumerable(Of TKey), Integer)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.OnAddItems(System.Collections.Generic.IEnumerable{`1},System.Int32)
    name: OnAddItems
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.OnAddItems(System.Collections.Generic.IEnumerable{`1},System.Int32)
    name: OnAddItems
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.ToString
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`1}.ToString
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.ToString
  name: ToString()
  nameWithType: ObservableEnumerable<TKey>.ToString()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.ToString()
  nameWithType.vb: ObservableEnumerable(Of TKey).ToString()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).ToString()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.ToString
    name: ToString
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.ToString
    name: ToString
  - name: (
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.RaiseEvents(System.Collections.Generic.IList{{TKey}},System.Collections.Generic.IList{{TKey}},System.Collections.Generic.IList{{TKey}},System.Int32,System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`1}.RaiseEvents(System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`1},System.Int32,System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.RaiseEvents(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  name: RaiseEvents(IList<TKey>, IList<TKey>, IList<TKey>, int, int)
  nameWithType: ObservableEnumerable<TKey>.RaiseEvents(IList<TKey>, IList<TKey>, IList<TKey>, int, int)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.RaiseEvents(System.Collections.Generic.IList<TKey>, System.Collections.Generic.IList<TKey>, System.Collections.Generic.IList<TKey>, int, int)
  nameWithType.vb: ObservableEnumerable(Of TKey).RaiseEvents(IList(Of TKey), IList(Of TKey), IList(Of TKey), Integer, Integer)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).RaiseEvents(System.Collections.Generic.IList(Of TKey), System.Collections.Generic.IList(Of TKey), System.Collections.Generic.IList(Of TKey), Integer, Integer)
  name.vb: RaiseEvents(IList(Of TKey), IList(Of TKey), IList(Of TKey), Integer, Integer)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.RaiseEvents(System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`1},System.Int32,System.Int32)
    name: RaiseEvents
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.RaiseEvents(System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`1},System.Int32,System.Int32)
    name: RaiseEvents
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.OnRemoveItem({TKey},System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`1}.OnRemoveItem(`1,System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItem(`0,System.Int32)
  name: OnRemoveItem(TKey, int)
  nameWithType: ObservableEnumerable<TKey>.OnRemoveItem(TKey, int)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.OnRemoveItem(TKey, int)
  nameWithType.vb: ObservableEnumerable(Of TKey).OnRemoveItem(TKey, Integer)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).OnRemoveItem(TKey, Integer)
  name.vb: OnRemoveItem(TKey, Integer)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.OnRemoveItem(`1,System.Int32)
    name: OnRemoveItem
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.OnRemoveItem(`1,System.Int32)
    name: OnRemoveItem
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.OnRemoveItems(System.Collections.Generic.IEnumerable{{TKey}},System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`1}.OnRemoveItems(System.Collections.Generic.IEnumerable{`1},System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
  name: OnRemoveItems(IEnumerable<TKey>, int)
  nameWithType: ObservableEnumerable<TKey>.OnRemoveItems(IEnumerable<TKey>, int)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.OnRemoveItems(System.Collections.Generic.IEnumerable<TKey>, int)
  nameWithType.vb: ObservableEnumerable(Of TKey).OnRemoveItems(IEnumerable(Of TKey), Integer)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).OnRemoveItems(System.Collections.Generic.IEnumerable(Of TKey), Integer)
  name.vb: OnRemoveItems(IEnumerable(Of TKey), Integer)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.OnRemoveItems(System.Collections.Generic.IEnumerable{`1},System.Int32)
    name: OnRemoveItems
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.OnRemoveItems(System.Collections.Generic.IEnumerable{`1},System.Int32)
    name: OnRemoveItems
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.OnReplaceItems(System.Collections.Generic.IEnumerable{{TKey}},System.Collections.Generic.IEnumerable{{TKey}},System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`1}.OnReplaceItems(System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.OnReplaceItems(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Int32)
  name: OnReplaceItems(IEnumerable<TKey>, IEnumerable<TKey>, int)
  nameWithType: ObservableEnumerable<TKey>.OnReplaceItems(IEnumerable<TKey>, IEnumerable<TKey>, int)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.OnReplaceItems(System.Collections.Generic.IEnumerable<TKey>, System.Collections.Generic.IEnumerable<TKey>, int)
  nameWithType.vb: ObservableEnumerable(Of TKey).OnReplaceItems(IEnumerable(Of TKey), IEnumerable(Of TKey), Integer)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).OnReplaceItems(System.Collections.Generic.IEnumerable(Of TKey), System.Collections.Generic.IEnumerable(Of TKey), Integer)
  name.vb: OnReplaceItems(IEnumerable(Of TKey), IEnumerable(Of TKey), Integer)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.OnReplaceItems(System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Int32)
    name: OnReplaceItems
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.OnReplaceItems(System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Int32)
    name: OnReplaceItems
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.OnCleared
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`1}.OnCleared
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.OnCleared
  name: OnCleared()
  nameWithType: ObservableEnumerable<TKey>.OnCleared()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.OnCleared()
  nameWithType.vb: ObservableEnumerable(Of TKey).OnCleared()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).OnCleared()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.OnCleared
    name: OnCleared
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.OnCleared
    name: OnCleared
  - name: (
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.OnReplaceItem({TKey},{TKey},System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`1}.OnReplaceItem(`1,`1,System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.OnReplaceItem(`0,`0,System.Int32)
  name: OnReplaceItem(TKey, TKey, int)
  nameWithType: ObservableEnumerable<TKey>.OnReplaceItem(TKey, TKey, int)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.OnReplaceItem(TKey, TKey, int)
  nameWithType.vb: ObservableEnumerable(Of TKey).OnReplaceItem(TKey, TKey, Integer)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).OnReplaceItem(TKey, TKey, Integer)
  name.vb: OnReplaceItem(TKey, TKey, Integer)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.OnReplaceItem(`1,`1,System.Int32)
    name: OnReplaceItem
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.OnReplaceItem(`1,`1,System.Int32)
    name: OnReplaceItem
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.OnMoveItem({TKey},System.Int32,System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`1}.OnMoveItem(`1,System.Int32,System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItem(`0,System.Int32,System.Int32)
  name: OnMoveItem(TKey, int, int)
  nameWithType: ObservableEnumerable<TKey>.OnMoveItem(TKey, int, int)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.OnMoveItem(TKey, int, int)
  nameWithType.vb: ObservableEnumerable(Of TKey).OnMoveItem(TKey, Integer, Integer)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).OnMoveItem(TKey, Integer, Integer)
  name.vb: OnMoveItem(TKey, Integer, Integer)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.OnMoveItem(`1,System.Int32,System.Int32)
    name: OnMoveItem
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.OnMoveItem(`1,System.Int32,System.Int32)
    name: OnMoveItem
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.OnMoveItems(System.Collections.Generic.IEnumerable{{TKey}},System.Int32,System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`1}.OnMoveItems(System.Collections.Generic.IEnumerable{`1},System.Int32,System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)
  name: OnMoveItems(IEnumerable<TKey>, int, int)
  nameWithType: ObservableEnumerable<TKey>.OnMoveItems(IEnumerable<TKey>, int, int)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.OnMoveItems(System.Collections.Generic.IEnumerable<TKey>, int, int)
  nameWithType.vb: ObservableEnumerable(Of TKey).OnMoveItems(IEnumerable(Of TKey), Integer, Integer)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).OnMoveItems(System.Collections.Generic.IEnumerable(Of TKey), Integer, Integer)
  name.vb: OnMoveItems(IEnumerable(Of TKey), Integer, Integer)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.OnMoveItems(System.Collections.Generic.IEnumerable{`1},System.Int32,System.Int32)
    name: OnMoveItems
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.OnMoveItems(System.Collections.Generic.IEnumerable{`1},System.Int32,System.Int32)
    name: OnMoveItems
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.HasEventSubscriber
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable{`1}.HasEventSubscriber
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.HasEventSubscriber
  name: HasEventSubscriber
  nameWithType: ObservableEnumerable<TKey>.HasEventSubscriber
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.HasEventSubscriber
  nameWithType.vb: ObservableEnumerable(Of TKey).HasEventSubscriber
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).HasEventSubscriber
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`1}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  name: OnCollectionChanged(NotifyCollectionChangedEventArgs)
  nameWithType: ObservableEnumerable<TKey>.OnCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  nameWithType.vb: ObservableEnumerable(Of TKey).OnCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanged
  - name: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanged
  - name: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.CollectionChanged
  commentId: E:NMF.Expressions.Linq.ObservableEnumerable{`1}.CollectionChanged
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.CollectionChanged
  name: CollectionChanged
  nameWithType: ObservableEnumerable<TKey>.CollectionChanged
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.CollectionChanged
  nameWithType.vb: ObservableEnumerable(Of TKey).CollectionChanged
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).CollectionChanged
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.Dispose
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`1}.Dispose
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.Dispose
  name: Dispose()
  nameWithType: ObservableEnumerable<TKey>.Dispose()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.Dispose()
  nameWithType.vb: ObservableEnumerable(Of TKey).Dispose()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).Dispose()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.Dispose
    name: Dispose
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.Dispose
    name: Dispose
  - name: (
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.Add({TKey})
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`1}.Add(`1)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.Add(`0)
  name: Add(TKey)
  nameWithType: ObservableEnumerable<TKey>.Add(TKey)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.Add(TKey)
  nameWithType.vb: ObservableEnumerable(Of TKey).Add(TKey)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).Add(TKey)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.Add(`1)
    name: Add
  - name: (
  - name: TKey
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.Add(`1)
    name: Add
  - name: (
  - name: TKey
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.Clear
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`1}.Clear
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.Clear
  name: Clear()
  nameWithType: ObservableEnumerable<TKey>.Clear()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.Clear()
  nameWithType.vb: ObservableEnumerable(Of TKey).Clear()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).Clear()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.Clear
    name: Clear
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.Clear
    name: Clear
  - name: (
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.IsReadOnly
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable{`1}.IsReadOnly
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ObservableEnumerable<TKey>.IsReadOnly
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.IsReadOnly
  nameWithType.vb: ObservableEnumerable(Of TKey).IsReadOnly
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).IsReadOnly
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.Remove({TKey})
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`1}.Remove(`1)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.Remove(`0)
  name: Remove(TKey)
  nameWithType: ObservableEnumerable<TKey>.Remove(TKey)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.Remove(TKey)
  nameWithType.vb: ObservableEnumerable(Of TKey).Remove(TKey)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).Remove(TKey)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.Remove(`1)
    name: Remove
  - name: (
  - name: TKey
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.Remove(`1)
    name: Remove
  - name: (
  - name: TKey
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.Contains({TKey})
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`1}.Contains(`1)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.Contains(`0)
  name: Contains(TKey)
  nameWithType: ObservableEnumerable<TKey>.Contains(TKey)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.Contains(TKey)
  nameWithType.vb: ObservableEnumerable(Of TKey).Contains(TKey)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).Contains(TKey)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.Contains(`1)
    name: Contains
  - name: (
  - name: TKey
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.Contains(`1)
    name: Contains
  - name: (
  - name: TKey
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.CopyTo({TKey}[],System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`1}.CopyTo(`1[],System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.CopyTo(`0[],System.Int32)
  name: CopyTo(TKey[], int)
  nameWithType: ObservableEnumerable<TKey>.CopyTo(TKey[], int)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.CopyTo(TKey[], int)
  nameWithType.vb: ObservableEnumerable(Of TKey).CopyTo(TKey(), Integer)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).CopyTo(TKey(), Integer)
  name.vb: CopyTo(TKey(), Integer)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.CopyTo(`1[],System.Int32)
    name: CopyTo
  - name: (
  - name: TKey
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.CopyTo(`1[],System.Int32)
    name: CopyTo
  - name: (
  - name: TKey
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.Count
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable{`1}.Count
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.Count
  name: Count
  nameWithType: ObservableEnumerable<TKey>.Count
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.Count
  nameWithType.vb: ObservableEnumerable(Of TKey).Count
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).Count
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.Successors
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable{`1}.Successors
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.Successors
  name: Successors
  nameWithType: ObservableEnumerable<TKey>.Successors
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.Successors
  nameWithType.vb: ObservableEnumerable(Of TKey).Successors
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).Successors
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.ExecutionMetaData
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable{`1}.ExecutionMetaData
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.ExecutionMetaData
  name: ExecutionMetaData
  nameWithType: ObservableEnumerable<TKey>.ExecutionMetaData
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.ExecutionMetaData
  nameWithType.vb: ObservableEnumerable(Of TKey).ExecutionMetaData
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).ExecutionMetaData
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.HasSuccessors
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable{`1}.HasSuccessors
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.HasSuccessors
  name: HasSuccessors
  nameWithType: ObservableEnumerable<TKey>.HasSuccessors
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.HasSuccessors
  nameWithType.vb: ObservableEnumerable(Of TKey).HasSuccessors
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).HasSuccessors
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.IsAttached
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable{`1}.IsAttached
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.IsAttached
  name: IsAttached
  nameWithType: ObservableEnumerable<TKey>.IsAttached
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.IsAttached
  nameWithType.vb: ObservableEnumerable(Of TKey).IsAttached
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).IsAttached
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.AllSuccessors
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable{`1}.AllSuccessors
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.AllSuccessors
  name: AllSuccessors
  nameWithType: ObservableEnumerable<TKey>.AllSuccessors
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.AllSuccessors
  nameWithType.vb: ObservableEnumerable(Of TKey).AllSuccessors
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).AllSuccessors
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.Set(NMF.Expressions.INotifiable)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`1}.Set(NMF.Expressions.INotifiable)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.Set(NMF.Expressions.INotifiable)
  name: Set(INotifiable)
  nameWithType: ObservableEnumerable<TKey>.Set(INotifiable)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.Set(NMF.Expressions.INotifiable)
  nameWithType.vb: ObservableEnumerable(Of TKey).Set(INotifiable)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).Set(NMF.Expressions.INotifiable)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.Set(NMF.Expressions.INotifiable)
    name: Set
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.Set(NMF.Expressions.INotifiable)
    name: Set
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.SetDummy
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`1}.SetDummy
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.SetDummy
  name: SetDummy()
  nameWithType: ObservableEnumerable<TKey>.SetDummy()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.SetDummy()
  nameWithType.vb: ObservableEnumerable(Of TKey).SetDummy()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).SetDummy()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.SetDummy
    name: SetDummy
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.SetDummy
    name: SetDummy
  - name: (
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.Unset(NMF.Expressions.INotifiable,System.Boolean)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`1}.Unset(NMF.Expressions.INotifiable,System.Boolean)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.Unset(NMF.Expressions.INotifiable,System.Boolean)
  name: Unset(INotifiable, bool)
  nameWithType: ObservableEnumerable<TKey>.Unset(INotifiable, bool)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.Unset(NMF.Expressions.INotifiable, bool)
  nameWithType.vb: ObservableEnumerable(Of TKey).Unset(INotifiable, Boolean)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).Unset(NMF.Expressions.INotifiable, Boolean)
  name.vb: Unset(INotifiable, Boolean)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.Unset(NMF.Expressions.INotifiable,System.Boolean)
    name: Unset
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.Unset(NMF.Expressions.INotifiable,System.Boolean)
    name: Unset
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.UnsetAll
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`1}.UnsetAll
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.UnsetAll
  name: UnsetAll()
  nameWithType: ObservableEnumerable<TKey>.UnsetAll()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.UnsetAll()
  nameWithType.vb: ObservableEnumerable(Of TKey).UnsetAll()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).UnsetAll()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.UnsetAll
    name: UnsetAll
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.UnsetAll
    name: UnsetAll
  - name: (
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.GetSuccessor(System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`1}.GetSuccessor(System.Int32)
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.GetSuccessor(System.Int32)
  name: GetSuccessor(int)
  nameWithType: ObservableEnumerable<TKey>.GetSuccessor(int)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.GetSuccessor(int)
  nameWithType.vb: ObservableEnumerable(Of TKey).GetSuccessor(Integer)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).GetSuccessor(Integer)
  name.vb: GetSuccessor(Integer)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.GetSuccessor(System.Int32)
    name: GetSuccessor
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.GetSuccessor(System.Int32)
    name: GetSuccessor
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.OnDetach
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`1}.OnDetach
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.OnDetach
  name: OnDetach()
  nameWithType: ObservableEnumerable<TKey>.OnDetach()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.OnDetach()
  nameWithType.vb: ObservableEnumerable(Of TKey).OnDetach()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).OnDetach()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.OnDetach
    name: OnDetach
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.OnDetach
    name: OnDetach
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: NMF.Expressions.INotifiable.NMF.Expressions.Debug.DebugExtensions.ExportToDgml(System.String)
  commentId: M:NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
  parent: NMF.Expressions.Debug.DebugExtensions
  definition: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
  name: ExportToDgml(INotifiable, string)
  nameWithType: DebugExtensions.ExportToDgml(INotifiable, string)
  fullName: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable, string)
  nameWithType.vb: DebugExtensions.ExportToDgml(INotifiable, String)
  fullName.vb: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable, String)
  name.vb: ExportToDgml(INotifiable, String)
  spec.csharp:
  - uid: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
    name: ExportToDgml
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
    name: ExportToDgml
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: NMF.Expressions.INotifiable.NMF.Expressions.Debug.DebugExtensions.Visualize
  commentId: M:NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
  parent: NMF.Expressions.Debug.DebugExtensions
  definition: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
  name: Visualize(INotifiable)
  nameWithType: DebugExtensions.Visualize(INotifiable)
  fullName: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
  spec.csharp:
  - uid: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
    name: Visualize
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
    name: Visualize
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: )
- uid: NMF.Expressions.INotifyEnumerable.NMF.Expressions.Linq.ObservableExtensions.Cast``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
  name: Cast<TResult>(INotifyEnumerable)
  nameWithType: ObservableExtensions.Cast<TResult>(INotifyEnumerable)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Cast<TResult>(NMF.Expressions.INotifyEnumerable)
  nameWithType.vb: ObservableExtensions.Cast(Of TResult)(INotifyEnumerable)
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Cast(Of TResult)(NMF.Expressions.INotifyEnumerable)
  name.vb: Cast(Of TResult)(INotifyEnumerable)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
    name: Cast
  - name: <
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable
    name: INotifyEnumerable
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
    name: Cast
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable
    name: INotifyEnumerable
  - name: )
- uid: NMF.Expressions.INotifyEnumerable.NMF.Expressions.Linq.ObservableExtensions.OfType``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
  name: OfType<TResult>(INotifyEnumerable)
  nameWithType: ObservableExtensions.OfType<TResult>(INotifyEnumerable)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OfType<TResult>(NMF.Expressions.INotifyEnumerable)
  nameWithType.vb: ObservableExtensions.OfType(Of TResult)(INotifyEnumerable)
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OfType(Of TResult)(NMF.Expressions.INotifyEnumerable)
  name.vb: OfType(Of TResult)(INotifyEnumerable)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
    name: OfType
  - name: <
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable
    name: INotifyEnumerable
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
    name: OfType
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable
    name: INotifyEnumerable
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TKey}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name: Chunk<TKey, TResult>(INotifyEnumerable<TKey>, int, Func<IEnumerableExpression<TKey>, int, TResult>, IChunkBalancingStrategyProvider)
  nameWithType: ChunkExtensions.Chunk<TKey, TResult>(INotifyEnumerable<TKey>, int, Func<IEnumerableExpression<TKey>, int, TResult>, IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<TKey, TResult>(NMF.Expressions.INotifyEnumerable<TKey>, int, System.Func<NMF.Expressions.IEnumerableExpression<TKey>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  nameWithType.vb: ChunkExtensions.Chunk(Of TKey, TResult)(INotifyEnumerable(Of TKey), Integer, Func(Of IEnumerableExpression(Of TKey), Integer, TResult), IChunkBalancingStrategyProvider)
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TKey), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of TKey), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: Chunk(Of TKey, TResult)(INotifyEnumerable(Of TKey), Integer, Func(Of IEnumerableExpression(Of TKey), Integer, TResult), IChunkBalancingStrategyProvider)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{`1},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: Chunk
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{`1},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: Chunk
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TKey}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{{TKey},{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  name: Chunk<TKey, TResult>(INotifyEnumerable<TKey>, int, Func<IEnumerableExpression<TKey>, int, TResult>, IChunkBalancingStrategyProvider<TKey, TResult>)
  nameWithType: ChunkExtensions.Chunk<TKey, TResult>(INotifyEnumerable<TKey>, int, Func<IEnumerableExpression<TKey>, int, TResult>, IChunkBalancingStrategyProvider<TKey, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<TKey, TResult>(NMF.Expressions.INotifyEnumerable<TKey>, int, System.Func<NMF.Expressions.IEnumerableExpression<TKey>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider<TKey, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of TKey, TResult)(INotifyEnumerable(Of TKey), Integer, Func(Of IEnumerableExpression(Of TKey), Integer, TResult), IChunkBalancingStrategyProvider(Of TKey, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TKey), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of TKey), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of TKey, TResult))
  name.vb: Chunk(Of TKey, TResult)(INotifyEnumerable(Of TKey), Integer, Func(Of IEnumerableExpression(Of TKey), Integer, TResult), IChunkBalancingStrategyProvider(Of TKey, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{`1},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{`1,``1})
    name: Chunk
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{`1},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{`1,``1})
    name: Chunk
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TKey}},System.Int32,{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  name: Chunk<TKey, TResult>(INotifyEnumerable<TKey>, int, Func<IEnumerableExpression<TKey>, int, TResult>)
  nameWithType: ChunkExtensions.Chunk<TKey, TResult>(INotifyEnumerable<TKey>, int, Func<IEnumerableExpression<TKey>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<TKey, TResult>(NMF.Expressions.INotifyEnumerable<TKey>, int, System.Func<NMF.Expressions.IEnumerableExpression<TKey>, int, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of TKey, TResult)(INotifyEnumerable(Of TKey), Integer, Func(Of IEnumerableExpression(Of TKey), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TKey), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of TKey), Integer, TResult))
  name.vb: Chunk(Of TKey, TResult)(INotifyEnumerable(Of TKey), Integer, Func(Of IEnumerableExpression(Of TKey), Integer, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{`1},System.Int32,``1})
    name: Chunk
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{`1},System.Int32,``1})
    name: Chunk
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TKey},System.Int32}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name: ChunkIndexed<TKey, TResult>(INotifyEnumerable<TKey>, int, Func<IEnumerableExpression<(TKey, int)>, int, TResult>, IChunkBalancingStrategyProvider)
  nameWithType: ChunkExtensions.ChunkIndexed<TKey, TResult>(INotifyEnumerable<TKey>, int, Func<IEnumerableExpression<(TKey, int)>, int, TResult>, IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<TKey, TResult>(NMF.Expressions.INotifyEnumerable<TKey>, int, System.Func<NMF.Expressions.IEnumerableExpression<(TKey, int)>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of TKey, TResult)(INotifyEnumerable(Of TKey), Integer, Func(Of IEnumerableExpression(Of (TKey, Integer)), Integer, TResult), IChunkBalancingStrategyProvider)
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TKey), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (TKey, Integer)), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: ChunkIndexed(Of TKey, TResult)(INotifyEnumerable(Of TKey), Integer, Func(Of IEnumerableExpression(Of (TKey, Integer)), Integer, TResult), IChunkBalancingStrategyProvider)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{`1,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: ChunkIndexed
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{`1,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: ChunkIndexed
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TKey},System.Int32}},System.Int32,{TResult}},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{{TKey},System.Int32},{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  name: ChunkIndexed<TKey, TResult>(INotifyEnumerable<TKey>, int, Func<IEnumerableExpression<(TKey, int)>, int, TResult>, IChunkBalancingStrategyProvider<(TKey, int), TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<TKey, TResult>(INotifyEnumerable<TKey>, int, Func<IEnumerableExpression<(TKey, int)>, int, TResult>, IChunkBalancingStrategyProvider<(TKey, int), TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<TKey, TResult>(NMF.Expressions.INotifyEnumerable<TKey>, int, System.Func<NMF.Expressions.IEnumerableExpression<(TKey, int)>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider<(TKey, int), TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of TKey, TResult)(INotifyEnumerable(Of TKey), Integer, Func(Of IEnumerableExpression(Of (TKey, Integer)), Integer, TResult), IChunkBalancingStrategyProvider(Of (TKey, Integer), TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TKey), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (TKey, Integer)), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of (TKey, Integer), TResult))
  name.vb: ChunkIndexed(Of TKey, TResult)(INotifyEnumerable(Of TKey), Integer, Func(Of IEnumerableExpression(Of (TKey, Integer)), Integer, TResult), IChunkBalancingStrategyProvider(Of (TKey, Integer), TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{`1,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{`1,System.Int32},``1})
    name: ChunkIndexed
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
  - name: <
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{`1,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{`1,System.Int32},``1})
    name: ChunkIndexed
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TKey},System.Int32}},System.Int32,{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  name: ChunkIndexed<TKey, TResult>(INotifyEnumerable<TKey>, int, Func<IEnumerableExpression<(TKey, int)>, int, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<TKey, TResult>(INotifyEnumerable<TKey>, int, Func<IEnumerableExpression<(TKey, int)>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<TKey, TResult>(NMF.Expressions.INotifyEnumerable<TKey>, int, System.Func<NMF.Expressions.IEnumerableExpression<(TKey, int)>, int, TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of TKey, TResult)(INotifyEnumerable(Of TKey), Integer, Func(Of IEnumerableExpression(Of (TKey, Integer)), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TKey), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (TKey, Integer)), Integer, TResult))
  name.vb: ChunkIndexed(Of TKey, TResult)(INotifyEnumerable(Of TKey), Integer, Func(Of IEnumerableExpression(Of (TKey, Integer)), Integer, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{`1,System.Int32}},System.Int32,``1})
    name: ChunkIndexed
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{`1,System.Int32}},System.Int32,``1})
    name: ChunkIndexed
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.LookupExtensions.ToLookup``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}})
  commentId: M:NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.LookupExtensions
  definition: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: ToLookup<TKey, TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, TKey>>)
  nameWithType: LookupExtensions.ToLookup<TKey, TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, TKey>>)
  fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TKey, TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, TKey>>)
  nameWithType.vb: LookupExtensions.ToLookup(Of TKey, TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TKey)))
  fullName.vb: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TKey, TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TKey)))
  name.vb: ToLookup(Of TKey, TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: ToLookup
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: ToLookup
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.All``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: All<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, bool>>)
  nameWithType: ObservableExtensions.All<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.All<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, bool>>)
  nameWithType.vb: ObservableExtensions.All(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.All(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, Boolean)))
  name.vb: All(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: All
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: All
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Any``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0})
  name: Any<TItem>(INotifyEnumerable<TItem>)
  nameWithType: ObservableExtensions.Any<TItem>(INotifyEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Any<TItem>(NMF.Expressions.INotifyEnumerable<TItem>)
  nameWithType.vb: ObservableExtensions.Any(Of TItem)(INotifyEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Any(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem))
  name.vb: Any(Of TItem)(INotifyEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{`1})
    name: Any
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{`1})
    name: Any
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Any``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Any<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, bool>>)
  nameWithType: ObservableExtensions.Any<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Any<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, bool>>)
  nameWithType.vb: ObservableExtensions.Any(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Any(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, Boolean)))
  name.vb: Any(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: Any
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: Any
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  name: Average<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, decimal>>)
  nameWithType: ObservableExtensions.Average<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, decimal>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, decimal>>)
  nameWithType.vb: ObservableExtensions.Average(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, Decimal)))
  name.vb: Average(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Decimal)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Decimal}})
    name: Average
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Decimal}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Double}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  name: Average<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, double>>)
  nameWithType: ObservableExtensions.Average<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, double>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, double>>)
  nameWithType.vb: ObservableExtensions.Average(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Double)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, Double)))
  name.vb: Average(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Double)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Double}})
    name: Average
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Double}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Int32}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  name: Average<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, int>>)
  nameWithType: ObservableExtensions.Average<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, int>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, int>>)
  nameWithType.vb: ObservableExtensions.Average(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Integer)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, Integer)))
  name.vb: Average(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Integer)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Int32}})
    name: Average
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Int32}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Int64}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  name: Average<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, long>>)
  nameWithType: ObservableExtensions.Average<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, long>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, long>>)
  nameWithType.vb: ObservableExtensions.Average(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Long)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, Long)))
  name.vb: Average(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Long)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Int64}})
    name: Average
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Int64}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  name: Average<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, decimal?>>)
  nameWithType: ObservableExtensions.Average<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, decimal?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, decimal?>>)
  nameWithType.vb: ObservableExtensions.Average(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Decimal?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, Decimal?)))
  name.vb: Average(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Decimal?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Decimal}}})
    name: Average
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Decimal}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  name: Average<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, double?>>)
  nameWithType: ObservableExtensions.Average<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, double?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, double?>>)
  nameWithType.vb: ObservableExtensions.Average(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Double?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, Double?)))
  name.vb: Average(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Double?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Double}}})
    name: Average
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Double}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  name: Average<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, int?>>)
  nameWithType: ObservableExtensions.Average<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, int?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, int?>>)
  nameWithType.vb: ObservableExtensions.Average(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Integer?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, Integer?)))
  name.vb: Average(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Integer?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int32}}})
    name: Average
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int32}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  name: Average<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, long?>>)
  nameWithType: ObservableExtensions.Average<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, long?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, long?>>)
  nameWithType.vb: ObservableExtensions.Average(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Long?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, Long?)))
  name.vb: Average(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Long?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int64}}})
    name: Average
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int64}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  name: Average<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, float?>>)
  nameWithType: ObservableExtensions.Average<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, float?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, float?>>)
  nameWithType.vb: ObservableExtensions.Average(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Single?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, Single?)))
  name.vb: Average(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Single?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Single}}})
    name: Average
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Single}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Average``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Single}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  name: Average<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, float>>)
  nameWithType: ObservableExtensions.Average<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, float>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, float>>)
  nameWithType.vb: ObservableExtensions.Average(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Single)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, Single)))
  name.vb: Average(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Single)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Single}})
    name: Average
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Single}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Concat``1(System.Collections.Generic.IEnumerable{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: Concat<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>)
  nameWithType: ObservableExtensions.Concat<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Concat<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Collections.Generic.IEnumerable<TKey>)
  nameWithType.vb: ObservableExtensions.Concat(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Concat(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Collections.Generic.IEnumerable(Of TKey))
  name.vb: Concat(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: Concat
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: Concat
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Contains``1({TKey},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  name: Contains<TKey>(INotifyEnumerable<TKey>, TKey, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.Contains<TKey>(INotifyEnumerable<TKey>, TKey, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Contains<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, TKey, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.Contains(Of TKey)(INotifyEnumerable(Of TKey), TKey, IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Contains(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), TKey, System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Contains(Of TKey)(INotifyEnumerable(Of TKey), TKey, IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{`1},`1,System.Collections.Generic.IEqualityComparer{`1})
    name: Contains
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{`1},`1,System.Collections.Generic.IEqualityComparer{`1})
    name: Contains
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Contains``1({TKey})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0)
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0)
  name: Contains<TKey>(INotifyEnumerable<TKey>, TKey)
  nameWithType: ObservableExtensions.Contains<TKey>(INotifyEnumerable<TKey>, TKey)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Contains<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, TKey)
  nameWithType.vb: ObservableExtensions.Contains(Of TKey)(INotifyEnumerable(Of TKey), TKey)
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Contains(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), TKey)
  name.vb: Contains(Of TKey)(INotifyEnumerable(Of TKey), TKey)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{`1},`1)
    name: Contains
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{`1},`1)
    name: Contains
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - name: TKey
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Count``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0})
  name: Count<TItem>(INotifyEnumerable<TItem>)
  nameWithType: ObservableExtensions.Count<TItem>(INotifyEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Count<TItem>(NMF.Expressions.INotifyEnumerable<TItem>)
  nameWithType.vb: ObservableExtensions.Count(Of TItem)(INotifyEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Count(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem))
  name.vb: Count(Of TItem)(INotifyEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{`1})
    name: Count
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{`1})
    name: Count
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Count``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Count<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, bool>>)
  nameWithType: ObservableExtensions.Count<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Count<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, bool>>)
  nameWithType.vb: ObservableExtensions.Count(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Count(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, Boolean)))
  name.vb: Count(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: Count
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: Count
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Distinct``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0})
  name: Distinct<TItem>(INotifyEnumerable<TItem>)
  nameWithType: ObservableExtensions.Distinct<TItem>(INotifyEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct<TItem>(NMF.Expressions.INotifyEnumerable<TItem>)
  nameWithType.vb: ObservableExtensions.Distinct(Of TItem)(INotifyEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Distinct(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem))
  name.vb: Distinct(Of TItem)(INotifyEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{`1})
    name: Distinct
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{`1})
    name: Distinct
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Distinct``1(System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Distinct<TKey>(INotifyEnumerable<TKey>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.Distinct<TKey>(INotifyEnumerable<TKey>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.Distinct(Of TKey)(INotifyEnumerable(Of TKey), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Distinct(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Distinct(Of TKey)(INotifyEnumerable(Of TKey), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: Distinct
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: Distinct
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Except``1(System.Collections.Generic.IEnumerable{{TKey}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Except<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.Except<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Except<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Collections.Generic.IEnumerable<TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.Except(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Except(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Collections.Generic.IEnumerable(Of TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Except(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: Except
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: Except
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Except``1(System.Collections.Generic.IEnumerable{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: Except<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>)
  nameWithType: ObservableExtensions.Except<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Except<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Collections.Generic.IEnumerable<TKey>)
  nameWithType.vb: ObservableExtensions.Except(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Except(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Collections.Generic.IEnumerable(Of TKey))
  name.vb: Except(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: Except
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: Except
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  name: FirstOrDefault<TItem>(INotifyEnumerable<TItem>)
  nameWithType: ObservableExtensions.FirstOrDefault<TItem>(INotifyEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault<TItem>(NMF.Expressions.INotifyEnumerable<TItem>)
  nameWithType.vb: ObservableExtensions.FirstOrDefault(Of TItem)(INotifyEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem))
  name.vb: FirstOrDefault(Of TItem)(INotifyEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{`1})
    name: FirstOrDefault
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{`1})
    name: FirstOrDefault
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: FirstOrDefault<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, bool>>)
  nameWithType: ObservableExtensions.FirstOrDefault<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, bool>>)
  nameWithType.vb: ObservableExtensions.FirstOrDefault(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, Boolean)))
  name.vb: FirstOrDefault(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: FirstOrDefault
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: FirstOrDefault
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  name: GroupBy<TKey, TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, TKey>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupBy<TKey, TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, TKey>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TKey, TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TKey, TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TKey)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TKey, TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TKey)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TKey, TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TKey)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}},System.Func{{TKey},{TKey}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  name: GroupBy<TKey, TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, TKey>>, Func<TKey, TKey>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupBy<TKey, TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, TKey>>, Func<TKey, TKey>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TKey, TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, TKey>>, System.Func<TKey, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TKey, TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TKey)), Func(Of TKey, TKey), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TKey, TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TKey)), System.Func(Of TKey, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TKey, TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TKey)), Func(Of TKey, TKey), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Func{`1,``1},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Func{`1,``1},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}},System.Func{{TKey},{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  name: GroupBy<TKey, TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, TKey>>, Func<TKey, TKey>)
  nameWithType: ObservableExtensions.GroupBy<TKey, TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, TKey>>, Func<TKey, TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TKey, TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, TKey>>, System.Func<TKey, TKey>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TKey, TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TKey)), Func(Of TKey, TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TKey, TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TKey)), System.Func(Of TKey, TKey))
  name.vb: GroupBy(Of TKey, TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TKey)), Func(Of TKey, TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Func{`1,``1})
    name: GroupBy
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Func{`1,``1})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: GroupBy<TKey, TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, TKey>>)
  nameWithType: ObservableExtensions.GroupBy<TKey, TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TKey, TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, TKey>>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TKey, TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TKey, TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TKey)))
  name.vb: GroupBy(Of TKey, TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: GroupBy
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}},System.Func{{TKey},{TKey}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TKey}},{TResult}}},System.Func{{TKey},System.Collections.Generic.IEnumerable{{TKey}},{TResult}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  name: GroupBy<TKey, TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, TKey>>, Func<TKey, TKey>, Expression<Func<TKey, IEnumerable<TKey>, TResult>>, Func<TKey, IEnumerable<TKey>, TResult>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupBy<TKey, TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, TKey>>, Func<TKey, TKey>, Expression<Func<TKey, IEnumerable<TKey>, TResult>>, Func<TKey, IEnumerable<TKey>, TResult>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TKey, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, TKey>>, System.Func<TKey, TKey>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TKey>, TResult>>, System.Func<TKey, System.Collections.Generic.IEnumerable<TKey>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TKey, TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TKey)), Func(Of TKey, TKey), Expression(Of Func(Of TKey, IEnumerable(Of TKey), TResult)), Func(Of TKey, IEnumerable(Of TKey), TResult), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TKey, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TKey)), System.Func(Of TKey, TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TKey), TResult)), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TKey), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TKey, TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TKey)), Func(Of TKey, TKey), Expression(Of Func(Of TKey, IEnumerable(Of TKey), TResult)), Func(Of TKey, IEnumerable(Of TKey), TResult), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Func{`1,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{`1},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{`1},``2},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Func{`1,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{`1},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{`1},``2},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}},System.Func{{TKey},{TKey}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TKey}},{TResult}}},System.Func{{TKey},System.Collections.Generic.IEnumerable{{TKey}},{TResult}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  name: GroupBy<TKey, TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, TKey>>, Func<TKey, TKey>, Expression<Func<TKey, IEnumerable<TKey>, TResult>>, Func<TKey, IEnumerable<TKey>, TResult>)
  nameWithType: ObservableExtensions.GroupBy<TKey, TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, TKey>>, Func<TKey, TKey>, Expression<Func<TKey, IEnumerable<TKey>, TResult>>, Func<TKey, IEnumerable<TKey>, TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TKey, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, TKey>>, System.Func<TKey, TKey>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TKey>, TResult>>, System.Func<TKey, System.Collections.Generic.IEnumerable<TKey>, TResult>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TKey, TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TKey)), Func(Of TKey, TKey), Expression(Of Func(Of TKey, IEnumerable(Of TKey), TResult)), Func(Of TKey, IEnumerable(Of TKey), TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TKey, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TKey)), System.Func(Of TKey, TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TKey), TResult)), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TKey), TResult))
  name.vb: GroupBy(Of TKey, TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TKey)), Func(Of TKey, TKey), Expression(Of Func(Of TKey, IEnumerable(Of TKey), TResult)), Func(Of TKey, IEnumerable(Of TKey), TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Func{`1,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{`1},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{`1},``2})
    name: GroupBy
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Func{`1,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{`1},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{`1},``2})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TKey}},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  name: GroupBy<TKey, TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, TKey>>, Expression<Func<TKey, IEnumerable<TKey>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupBy<TKey, TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, TKey>>, Expression<Func<TKey, IEnumerable<TKey>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TKey, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TKey>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TKey, TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TKey), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TKey, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TKey), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TKey, TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TKey), TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{`1},``2}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{`1},``2}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TKey}},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  name: GroupBy<TKey, TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, TKey>>, Expression<Func<TKey, IEnumerable<TKey>, TResult>>)
  nameWithType: ObservableExtensions.GroupBy<TKey, TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, TKey>>, Expression<Func<TKey, IEnumerable<TKey>, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TKey, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TKey>, TResult>>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TKey, TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TKey), TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TKey, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TKey), TResult)))
  name.vb: GroupBy(Of TKey, TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TKey), TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{`1},``2}})
    name: GroupBy
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{`1},``2}})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  name: GroupJoin<TKey, TInner, TKey, TResult>(INotifyEnumerable<TKey>, IEnumerable<TInner>, Expression<Func<TKey, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TKey, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupJoin<TKey, TInner, TKey, TResult>(INotifyEnumerable<TKey>, IEnumerable<TInner>, Expression<Func<TKey, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TKey, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin<TKey, TInner, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TKey>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TKey, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TInner>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupJoin(Of TKey, TInner, TKey, TResult)(INotifyEnumerable(Of TKey), IEnumerable(Of TInner), Expression(Of Func(Of TKey, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupJoin(Of TKey, TInner, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TInner), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupJoin(Of TKey, TInner, TKey, TResult)(INotifyEnumerable(Of TKey), IEnumerable(Of TInner), Expression(Of Func(Of TKey, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{`1,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{`1,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  name: GroupJoin<TKey, TInner, TKey, TResult>(INotifyEnumerable<TKey>, IEnumerable<TInner>, Expression<Func<TKey, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TKey, IEnumerable<TInner>, TResult>>)
  nameWithType: ObservableExtensions.GroupJoin<TKey, TInner, TKey, TResult>(INotifyEnumerable<TKey>, IEnumerable<TInner>, Expression<Func<TKey, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TKey, IEnumerable<TInner>, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin<TKey, TInner, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TKey>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TKey, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TInner>, TResult>>)
  nameWithType.vb: ObservableExtensions.GroupJoin(Of TKey, TInner, TKey, TResult)(INotifyEnumerable(Of TKey), IEnumerable(Of TInner), Expression(Of Func(Of TKey, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TInner), TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupJoin(Of TKey, TInner, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TInner), TResult)))
  name.vb: GroupJoin(Of TKey, TInner, TKey, TResult)(INotifyEnumerable(Of TKey), IEnumerable(Of TInner), Expression(Of Func(Of TKey, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TInner), TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{`1,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{``1},``3}})
    name: GroupJoin
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{`1,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{``1},``3}})
    name: GroupJoin
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{{TKey}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Intersect<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.Intersect<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Collections.Generic.IEnumerable<TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.Intersect(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Intersect(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Collections.Generic.IEnumerable(Of TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Intersect(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: Intersect
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: Intersect
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Intersect``1(System.Collections.Generic.IEnumerable{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: Intersect<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>)
  nameWithType: ObservableExtensions.Intersect<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Collections.Generic.IEnumerable<TKey>)
  nameWithType.vb: ObservableExtensions.Intersect(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Intersect(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Collections.Generic.IEnumerable(Of TKey))
  name.vb: Intersect(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: Intersect
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: Intersect
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{{TKey}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsProperSubsetOf<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.IsProperSubsetOf<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Collections.Generic.IEnumerable<TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.IsProperSubsetOf(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Collections.Generic.IEnumerable(Of TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: IsProperSubsetOf(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: IsProperSubsetOf
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: IsProperSubsetOf
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsProperSubsetOf<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>)
  nameWithType: ObservableExtensions.IsProperSubsetOf<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Collections.Generic.IEnumerable<TKey>)
  nameWithType.vb: ObservableExtensions.IsProperSubsetOf(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Collections.Generic.IEnumerable(Of TKey))
  name.vb: IsProperSubsetOf(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: IsProperSubsetOf
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: IsProperSubsetOf
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{{TKey}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsProperSupersetOf<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.IsProperSupersetOf<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Collections.Generic.IEnumerable<TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.IsProperSupersetOf(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Collections.Generic.IEnumerable(Of TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: IsProperSupersetOf(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: IsProperSupersetOf
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: IsProperSupersetOf
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(System.Collections.Generic.IEnumerable{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsProperSupersetOf<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>)
  nameWithType: ObservableExtensions.IsProperSupersetOf<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Collections.Generic.IEnumerable<TKey>)
  nameWithType.vb: ObservableExtensions.IsProperSupersetOf(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Collections.Generic.IEnumerable(Of TKey))
  name.vb: IsProperSupersetOf(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: IsProperSupersetOf
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: IsProperSupersetOf
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{{TKey}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsSubsetOf<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.IsSubsetOf<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Collections.Generic.IEnumerable<TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.IsSubsetOf(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Collections.Generic.IEnumerable(Of TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: IsSubsetOf(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: IsSubsetOf
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: IsSubsetOf
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(System.Collections.Generic.IEnumerable{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsSubsetOf<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>)
  nameWithType: ObservableExtensions.IsSubsetOf<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Collections.Generic.IEnumerable<TKey>)
  nameWithType.vb: ObservableExtensions.IsSubsetOf(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Collections.Generic.IEnumerable(Of TKey))
  name.vb: IsSubsetOf(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: IsSubsetOf
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: IsSubsetOf
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{{TKey}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: IsSupersetOf<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.IsSupersetOf<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Collections.Generic.IEnumerable<TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.IsSupersetOf(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Collections.Generic.IEnumerable(Of TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: IsSupersetOf(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: IsSupersetOf
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: IsSupersetOf
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(System.Collections.Generic.IEnumerable{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: IsSupersetOf<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>)
  nameWithType: ObservableExtensions.IsSupersetOf<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Collections.Generic.IEnumerable<TKey>)
  nameWithType.vb: ObservableExtensions.IsSupersetOf(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Collections.Generic.IEnumerable(Of TKey))
  name.vb: IsSupersetOf(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: IsSupersetOf
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: IsSupersetOf
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},{TInner},{TResult}}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  name: Join<TKey, TInner, TKey, TResult>(INotifyEnumerable<TKey>, IEnumerable<TInner>, Expression<Func<TKey, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TKey, TInner, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.Join<TKey, TInner, TKey, TResult>(INotifyEnumerable<TKey>, IEnumerable<TInner>, Expression<Func<TKey, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TKey, TInner, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Join<TKey, TInner, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TKey>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TKey, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, TInner, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.Join(Of TKey, TInner, TKey, TResult)(INotifyEnumerable(Of TKey), IEnumerable(Of TInner), Expression(Of Func(Of TKey, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TKey, TInner, TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Join(Of TKey, TInner, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TInner, TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Join(Of TKey, TInner, TKey, TResult)(INotifyEnumerable(Of TKey), IEnumerable(Of TInner), Expression(Of Func(Of TKey, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TKey, TInner, TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{`1,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{`1,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: Join
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{`1,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{`1,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: Join
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}},System.Linq.Expressions.Expression{System.Func{{TKey},{TInner},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  name: Join<TKey, TInner, TKey, TResult>(INotifyEnumerable<TKey>, IEnumerable<TInner>, Expression<Func<TKey, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TKey, TInner, TResult>>)
  nameWithType: ObservableExtensions.Join<TKey, TInner, TKey, TResult>(INotifyEnumerable<TKey>, IEnumerable<TInner>, Expression<Func<TKey, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TKey, TInner, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Join<TKey, TInner, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TKey>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TKey, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, TInner, TResult>>)
  nameWithType.vb: ObservableExtensions.Join(Of TKey, TInner, TKey, TResult)(INotifyEnumerable(Of TKey), IEnumerable(Of TInner), Expression(Of Func(Of TKey, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TKey, TInner, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Join(Of TKey, TInner, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TInner, TResult)))
  name.vb: Join(Of TKey, TInner, TKey, TResult)(INotifyEnumerable(Of TKey), IEnumerable(Of TInner), Expression(Of Func(Of TKey, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TKey, TInner, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{`1,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{`1,``1,``3}})
    name: Join
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{`1,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{`1,``1,``3}})
    name: Join
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``1(System.Collections.Generic.IComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  name: Max<TKey>(INotifyEnumerable<TKey>, IComparer<TKey>)
  nameWithType: ObservableExtensions.Max<TKey>(INotifyEnumerable<TKey>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ObservableExtensions.Max(Of TKey)(INotifyEnumerable(Of TKey), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Collections.Generic.IComparer(Of TKey))
  name.vb: Max(Of TKey)(INotifyEnumerable(Of TKey), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IComparer{`1})
    name: Max
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IComparer{`1})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TResult}}},System.Collections.Generic.IComparer{{TResult}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: Max<TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, TResult>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Max<TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TKey, TResult>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, TResult>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Max(Of TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TResult)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Collections.Generic.IComparer{``1})
    name: Max
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Collections.Generic.IComparer{``1})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: Max<TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, TResult>>)
  nameWithType: ObservableExtensions.Max<TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TKey, TResult>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, TResult>>)
  nameWithType.vb: ObservableExtensions.Max(Of TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TResult)))
  name.vb: Max(Of TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: Max
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TKey},System.Nullable{{TResult}}}},System.Collections.Generic.IComparer{{TResult}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  name: Max<TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, TResult?>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Max<TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, TResult?>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TKey, TResult>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, TResult?>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Max(Of TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TResult?)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TResult?)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TResult?)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Max
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Max``2(System.Linq.Expressions.Expression{System.Func{{TKey},System.Nullable{{TResult}}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  name: Max<TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, TResult?>>)
  nameWithType: ObservableExtensions.Max<TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, TResult?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TKey, TResult>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, TResult?>>)
  nameWithType.vb: ObservableExtensions.Max(Of TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TResult?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TResult?)))
  name.vb: Max(Of TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TResult?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{``1}}})
    name: Max
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{``1}}})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``1(System.Collections.Generic.IComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  name: Min<TKey>(INotifyEnumerable<TKey>, IComparer<TKey>)
  nameWithType: ObservableExtensions.Min<TKey>(INotifyEnumerable<TKey>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ObservableExtensions.Min(Of TKey)(INotifyEnumerable(Of TKey), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Collections.Generic.IComparer(Of TKey))
  name.vb: Min(Of TKey)(INotifyEnumerable(Of TKey), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IComparer{`1})
    name: Min
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IComparer{`1})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TResult}}},System.Collections.Generic.IComparer{{TResult}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: Min<TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, TResult>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Min<TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TKey, TResult>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, TResult>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Min(Of TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TResult)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Collections.Generic.IComparer{``1})
    name: Min
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Collections.Generic.IComparer{``1})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: Min<TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, TResult>>)
  nameWithType: ObservableExtensions.Min<TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TKey, TResult>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, TResult>>)
  nameWithType.vb: ObservableExtensions.Min(Of TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TResult)))
  name.vb: Min(Of TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: Min
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TKey},System.Nullable{{TResult}}}},System.Collections.Generic.IComparer{{TResult}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  name: Min<TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, TResult?>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Min<TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, TResult?>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TKey, TResult>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, TResult?>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Min(Of TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TResult?)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TResult?)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TResult?)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Min
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Min``2(System.Linq.Expressions.Expression{System.Func{{TKey},System.Nullable{{TResult}}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  name: Min<TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, TResult?>>)
  nameWithType: ObservableExtensions.Min<TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, TResult?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TKey, TResult>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, TResult?>>)
  nameWithType.vb: ObservableExtensions.Min(Of TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TResult?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TResult?)))
  name.vb: Min(Of TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TResult?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{``1}}})
    name: Min
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{``1}}})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: OrderBy<TKey, TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.OrderBy<TKey, TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy<TKey, TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ObservableExtensions.OrderBy(Of TKey, TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderBy(Of TKey, TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderBy(Of TKey, TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderBy
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderBy
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: OrderBy<TKey, TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, TKey>>)
  nameWithType: ObservableExtensions.OrderBy<TKey, TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy<TKey, TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, TKey>>)
  nameWithType.vb: ObservableExtensions.OrderBy(Of TKey, TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderBy(Of TKey, TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TKey)))
  name.vb: OrderBy(Of TKey, TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: OrderBy
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: OrderBy
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: OrderByDescending<TKey, TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.OrderByDescending<TKey, TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending<TKey, TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ObservableExtensions.OrderByDescending(Of TKey, TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending(Of TKey, TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderByDescending(Of TKey, TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: OrderByDescending<TKey, TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, TKey>>)
  nameWithType: ObservableExtensions.OrderByDescending<TKey, TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending<TKey, TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, TKey>>)
  nameWithType.vb: ObservableExtensions.OrderByDescending(Of TKey, TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending(Of TKey, TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TKey)))
  name.vb: OrderByDescending(Of TKey, TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: OrderByDescending
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: OrderByDescending
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TResult}}},System.Func{{TKey},{TResult}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  name: Select<TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, TResult>>, Func<TKey, TResult>)
  nameWithType: ObservableExtensions.Select<TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, TResult>>, Func<TKey, TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Select<TKey, TResult>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, TResult>>, System.Func<TKey, TResult>)
  nameWithType.vb: ObservableExtensions.Select(Of TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TResult)), Func(Of TKey, TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Select(Of TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TResult)), System.Func(Of TKey, TResult))
  name.vb: Select(Of TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TResult)), Func(Of TKey, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Func{`1,``1})
    name: Select
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Func{`1,``1})
    name: Select
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Select``2(System.Linq.Expressions.Expression{System.Func{{TKey},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: Select<TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, TResult>>)
  nameWithType: ObservableExtensions.Select<TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Select<TKey, TResult>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, TResult>>)
  nameWithType.vb: ObservableExtensions.Select(Of TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Select(Of TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TResult)))
  name.vb: Select(Of TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: Select
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: Select
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TResult}}}},System.Func{{TKey},System.Collections.Generic.IEnumerable{{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  name: SelectMany<TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, IEnumerable<TResult>>>, Func<TKey, IEnumerable<TResult>>)
  nameWithType: ObservableExtensions.SelectMany<TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, IEnumerable<TResult>>>, Func<TKey, IEnumerable<TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TKey, TResult>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TResult>>>, System.Func<TKey, System.Collections.Generic.IEnumerable<TResult>>)
  nameWithType.vb: ObservableExtensions.SelectMany(Of TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, IEnumerable(Of TResult))), Func(Of TKey, IEnumerable(Of TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TResult))), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TResult)))
  name.vb: SelectMany(Of TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, IEnumerable(Of TResult))), Func(Of TKey, IEnumerable(Of TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{``1}}},System.Func{`1,System.Collections.Generic.IEnumerable{``1}})
    name: SelectMany
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{``1}}},System.Func{`1,System.Collections.Generic.IEnumerable{``1}})
    name: SelectMany
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TResult}}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  name: SelectMany<TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, IEnumerable<TResult>>>)
  nameWithType: ObservableExtensions.SelectMany<TKey, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, IEnumerable<TResult>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TKey, TResult>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TResult>>>)
  nameWithType.vb: ObservableExtensions.SelectMany(Of TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, IEnumerable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TResult))))
  name.vb: SelectMany(Of TKey, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, IEnumerable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{``1}}})
    name: SelectMany
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{``1}}})
    name: SelectMany
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TIntermediate}}}},System.Func{{TKey},System.Collections.Generic.IEnumerable{{TIntermediate}}},System.Linq.Expressions.Expression{System.Func{{TKey},{TIntermediate},{TResult}}},System.Func{{TKey},{TIntermediate},{TResult}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Func{``0,``1,``2})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Func{``0,``1,``2})
  name: SelectMany<TKey, TIntermediate, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, IEnumerable<TIntermediate>>>, Func<TKey, IEnumerable<TIntermediate>>, Expression<Func<TKey, TIntermediate, TResult>>, Func<TKey, TIntermediate, TResult>)
  nameWithType: ObservableExtensions.SelectMany<TKey, TIntermediate, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, IEnumerable<TIntermediate>>>, Func<TKey, IEnumerable<TIntermediate>>, Expression<Func<TKey, TIntermediate, TResult>>, Func<TKey, TIntermediate, TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TKey, TIntermediate, TResult>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TIntermediate>>>, System.Func<TKey, System.Collections.Generic.IEnumerable<TIntermediate>>, System.Linq.Expressions.Expression<System.Func<TKey, TIntermediate, TResult>>, System.Func<TKey, TIntermediate, TResult>)
  nameWithType.vb: ObservableExtensions.SelectMany(Of TKey, TIntermediate, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, IEnumerable(Of TIntermediate))), Func(Of TKey, IEnumerable(Of TIntermediate)), Expression(Of Func(Of TKey, TIntermediate, TResult)), Func(Of TKey, TIntermediate, TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TKey, TIntermediate, TResult)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TIntermediate))), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TIntermediate)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TIntermediate, TResult)), System.Func(Of TKey, TIntermediate, TResult))
  name.vb: SelectMany(Of TKey, TIntermediate, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, IEnumerable(Of TIntermediate))), Func(Of TKey, IEnumerable(Of TIntermediate)), Expression(Of Func(Of TKey, TIntermediate, TResult)), Func(Of TKey, TIntermediate, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{``1}}},System.Func{`1,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{`1,``1,``2}},System.Func{`1,``1,``2})
    name: SelectMany
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIntermediate
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIntermediate
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{``1}}},System.Func{`1,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{`1,``1,``2}},System.Func{`1,``1,``2})
    name: SelectMany
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIntermediate
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIntermediate
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TIntermediate}}}},System.Linq.Expressions.Expression{System.Func{{TKey},{TIntermediate},{TResult}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  name: SelectMany<TKey, TIntermediate, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, IEnumerable<TIntermediate>>>, Expression<Func<TKey, TIntermediate, TResult>>)
  nameWithType: ObservableExtensions.SelectMany<TKey, TIntermediate, TResult>(INotifyEnumerable<TKey>, Expression<Func<TKey, IEnumerable<TIntermediate>>>, Expression<Func<TKey, TIntermediate, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TKey, TIntermediate, TResult>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TIntermediate>>>, System.Linq.Expressions.Expression<System.Func<TKey, TIntermediate, TResult>>)
  nameWithType.vb: ObservableExtensions.SelectMany(Of TKey, TIntermediate, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, IEnumerable(Of TIntermediate))), Expression(Of Func(Of TKey, TIntermediate, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TKey, TIntermediate, TResult)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TIntermediate))), System.Linq.Expressions.Expression(Of System.Func(Of TKey, TIntermediate, TResult)))
  name.vb: SelectMany(Of TKey, TIntermediate, TResult)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, IEnumerable(Of TIntermediate))), Expression(Of Func(Of TKey, TIntermediate, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{`1,``1,``2}})
    name: SelectMany
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIntermediate
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{`1,``1,``2}})
    name: SelectMany
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIntermediate
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{{TKey}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: SetEquals<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.SetEquals<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Collections.Generic.IEnumerable<TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.SetEquals(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SetEquals(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Collections.Generic.IEnumerable(Of TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: SetEquals(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: SetEquals
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: SetEquals
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(System.Collections.Generic.IEnumerable{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: SetEquals<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>)
  nameWithType: ObservableExtensions.SetEquals<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Collections.Generic.IEnumerable<TKey>)
  nameWithType.vb: ObservableExtensions.SetEquals(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SetEquals(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Collections.Generic.IEnumerable(Of TKey))
  name.vb: SetEquals(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: SetEquals
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: SetEquals
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  name: SingleOrDefault<TItem>(INotifyEnumerable<TItem>)
  nameWithType: ObservableExtensions.SingleOrDefault<TItem>(INotifyEnumerable<TItem>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault<TItem>(NMF.Expressions.INotifyEnumerable<TItem>)
  nameWithType.vb: ObservableExtensions.SingleOrDefault(Of TItem)(INotifyEnumerable(Of TItem))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault(Of TItem)(NMF.Expressions.INotifyEnumerable(Of TItem))
  name.vb: SingleOrDefault(Of TItem)(INotifyEnumerable(Of TItem))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{`1})
    name: SingleOrDefault
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{`1})
    name: SingleOrDefault
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: SingleOrDefault<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, bool>>)
  nameWithType: ObservableExtensions.SingleOrDefault<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, bool>>)
  nameWithType.vb: ObservableExtensions.SingleOrDefault(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, Boolean)))
  name.vb: SingleOrDefault(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SingleOrDefault
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: SingleOrDefault
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  name: Sum<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, decimal>>)
  nameWithType: ObservableExtensions.Sum<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, decimal>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, decimal>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, Decimal)))
  name.vb: Sum(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Decimal)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Decimal}})
    name: Sum
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Decimal}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Double}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  name: Sum<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, double>>)
  nameWithType: ObservableExtensions.Sum<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, double>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, double>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Double)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, Double)))
  name.vb: Sum(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Double)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Double}})
    name: Sum
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Double}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Int32}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  name: Sum<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, int>>)
  nameWithType: ObservableExtensions.Sum<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, int>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, int>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Integer)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, Integer)))
  name.vb: Sum(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Integer)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Int32}})
    name: Sum
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Int32}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Int64}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  name: Sum<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, long>>)
  nameWithType: ObservableExtensions.Sum<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, long>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, long>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Long)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, Long)))
  name.vb: Sum(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Long)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Int64}})
    name: Sum
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Int64}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  name: Sum<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, decimal?>>)
  nameWithType: ObservableExtensions.Sum<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, decimal?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, decimal?>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Decimal?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, Decimal?)))
  name.vb: Sum(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Decimal?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Decimal}}})
    name: Sum
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Decimal}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  name: Sum<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, double?>>)
  nameWithType: ObservableExtensions.Sum<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, double?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, double?>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Double?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, Double?)))
  name.vb: Sum(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Double?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Double}}})
    name: Sum
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Double}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  name: Sum<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, int?>>)
  nameWithType: ObservableExtensions.Sum<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, int?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, int?>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Integer?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, Integer?)))
  name.vb: Sum(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Integer?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int32}}})
    name: Sum
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int32}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  name: Sum<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, long?>>)
  nameWithType: ObservableExtensions.Sum<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, long?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, long?>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Long?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, Long?)))
  name.vb: Sum(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Long?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int64}}})
    name: Sum
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Int64}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  name: Sum<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, float?>>)
  nameWithType: ObservableExtensions.Sum<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, float?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, float?>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Single?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, Single?)))
  name.vb: Sum(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Single?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Single}}})
    name: Sum
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{System.Single}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Sum``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Single}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  name: Sum<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, float>>)
  nameWithType: ObservableExtensions.Sum<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, float>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, float>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Single)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, Single)))
  name.vb: Sum(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Single)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Single}})
    name: Sum
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Single}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}},System.Collections.Generic.IComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  name: TopX<TKey, TKey>(INotifyEnumerable<TKey>, int, Expression<Func<TKey, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.TopX<TKey, TKey>(INotifyEnumerable<TKey>, int, Expression<Func<TKey, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.TopX<TKey, TKey>(NMF.Expressions.INotifyEnumerable<TKey>, int, System.Linq.Expressions.Expression<System.Func<TKey, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ObservableExtensions.TopX(Of TKey, TKey)(INotifyEnumerable(Of TKey), Integer, Expression(Of Func(Of TKey, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.TopX(Of TKey, TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), Integer, System.Linq.Expressions.Expression(Of System.Func(Of TKey, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: TopX(Of TKey, TKey)(INotifyEnumerable(Of TKey), Integer, Expression(Of Func(Of TKey, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Collections.Generic.IComparer{``1})
    name: TopX
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Linq.Expressions.Expression{System.Func{`1,``1}},System.Collections.Generic.IComparer{``1})
    name: TopX
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.TopX``2(System.Int32,System.Linq.Expressions.Expression{System.Func{{TKey},{TKey}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  name: TopX<TKey, TKey>(INotifyEnumerable<TKey>, int, Expression<Func<TKey, TKey>>)
  nameWithType: ObservableExtensions.TopX<TKey, TKey>(INotifyEnumerable<TKey>, int, Expression<Func<TKey, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.TopX<TKey, TKey>(NMF.Expressions.INotifyEnumerable<TKey>, int, System.Linq.Expressions.Expression<System.Func<TKey, TKey>>)
  nameWithType.vb: ObservableExtensions.TopX(Of TKey, TKey)(INotifyEnumerable(Of TKey), Integer, Expression(Of Func(Of TKey, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.TopX(Of TKey, TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), Integer, System.Linq.Expressions.Expression(Of System.Func(Of TKey, TKey)))
  name.vb: TopX(Of TKey, TKey)(INotifyEnumerable(Of TKey), Integer, Expression(Of Func(Of TKey, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: TopX
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{`1},System.Int32,System.Linq.Expressions.Expression{System.Func{`1,``1}})
    name: TopX
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Union``1(System.Collections.Generic.IEnumerable{{TKey}},System.Collections.Generic.IEqualityComparer{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Union<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.Union<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Union<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Collections.Generic.IEnumerable<TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.Union(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Union(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Collections.Generic.IEnumerable(Of TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Union(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: Union
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEqualityComparer{`1})
    name: Union
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Union``1(System.Collections.Generic.IEnumerable{{TKey}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: Union<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>)
  nameWithType: ObservableExtensions.Union<TKey>(INotifyEnumerable<TKey>, IEnumerable<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Union<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Collections.Generic.IEnumerable<TKey>)
  nameWithType.vb: ObservableExtensions.Union(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Union(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Collections.Generic.IEnumerable(Of TKey))
  name.vb: Union(Of TKey)(INotifyEnumerable(Of TKey), IEnumerable(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: Union
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{`1},System.Collections.Generic.IEnumerable{`1})
    name: Union
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Boolean}},System.Func{{TKey},System.Boolean})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  name: Where<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, bool>>, Func<TKey, bool>)
  nameWithType: ObservableExtensions.Where<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, bool>>, Func<TKey, bool>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Where<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, bool>>, System.Func<TKey, bool>)
  nameWithType.vb: ObservableExtensions.Where(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Boolean)), Func(Of TKey, Boolean))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Where(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, Boolean)), System.Func(Of TKey, Boolean))
  name.vb: Where(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Boolean)), Func(Of TKey, Boolean))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Func{`1,System.Boolean})
    name: Where
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Func{`1,System.Boolean})
    name: Where
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Expressions.INotifyEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.Where``1(System.Linq.Expressions.Expression{System.Func{{TKey},System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  name: Where<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, bool>>)
  nameWithType: ObservableExtensions.Where<TKey>(INotifyEnumerable<TKey>, Expression<Func<TKey, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Where<TKey>(NMF.Expressions.INotifyEnumerable<TKey>, System.Linq.Expressions.Expression<System.Func<TKey, bool>>)
  nameWithType.vb: ObservableExtensions.Where(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Where(Of TKey)(NMF.Expressions.INotifyEnumerable(Of TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, Boolean)))
  name.vb: Where(Of TKey)(INotifyEnumerable(Of TKey), Expression(Of Func(Of TKey, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: Where
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})
    name: Where
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.IncrementalLookup`2.NMF.Expressions.Linq.ExpressionExtensions.AsOne``1
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  parent: NMF.Expressions.Linq.ExpressionExtensions
  definition: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<IncrementalLookup<TSource, TKey>>(IncrementalLookup<TSource, TKey>)
  nameWithType: ExpressionExtensions.AsOne<IncrementalLookup<TSource, TKey>>(IncrementalLookup<TSource, TKey>)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>>(NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>)
  nameWithType.vb: ExpressionExtensions.AsOne(Of IncrementalLookup(Of TSource, TKey))(IncrementalLookup(Of TSource, TKey))
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey))(NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey))
  name.vb: AsOne(Of IncrementalLookup(Of TSource, TKey))(IncrementalLookup(Of TSource, TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.Linq.IncrementalLookup{`0,`1})
    name: AsOne
  - name: <
  - uid: NMF.Expressions.Linq.IncrementalLookup`2
    name: IncrementalLookup
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: (
  - uid: NMF.Expressions.Linq.IncrementalLookup`2
    name: IncrementalLookup
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(NMF.Expressions.Linq.IncrementalLookup{`0,`1})
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.Linq.IncrementalLookup`2
    name: IncrementalLookup
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: (
  - uid: NMF.Expressions.Linq.IncrementalLookup`2
    name: IncrementalLookup
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: System.Collections.Generic.ICollection{`1}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
  name: WithUpdates<TKey>(ICollection<TKey>)
  nameWithType: ObservableExtensions.WithUpdates<TKey>(ICollection<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<TKey>(System.Collections.Generic.ICollection<TKey>)
  nameWithType.vb: ObservableExtensions.WithUpdates(Of TKey)(ICollection(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of TKey)(System.Collections.Generic.ICollection(Of TKey))
  name.vb: WithUpdates(Of TKey)(ICollection(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{`1})
    name: WithUpdates
  - name: <
  - name: TKey
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{`1})
    name: WithUpdates
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{{TKey}},System.Int32,{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  name: Chunk<TKey, TResult>(IEnumerable<TKey>, int, Func<IEnumerableExpression<TKey>, int, TResult>)
  nameWithType: ChunkExtensions.Chunk<TKey, TResult>(IEnumerable<TKey>, int, Func<IEnumerableExpression<TKey>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<TKey, TResult>(System.Collections.Generic.IEnumerable<TKey>, int, System.Func<NMF.Expressions.IEnumerableExpression<TKey>, int, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of TKey, TResult)(IEnumerable(Of TKey), Integer, Func(Of IEnumerableExpression(Of TKey), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of TKey, TResult)(System.Collections.Generic.IEnumerable(Of TKey), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of TKey), Integer, TResult))
  name.vb: Chunk(Of TKey, TResult)(IEnumerable(Of TKey), Integer, Func(Of IEnumerableExpression(Of TKey), Integer, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{`1},System.Int32,``1})
    name: Chunk
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{`1},System.Int32,``1})
    name: Chunk
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable{`1}.NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{{TKey},System.Int32}},System.Int32,{TResult}})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  parent: NMF.Expressions.Linq.ChunkExtensions
  definition: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  name: ChunkIndexed<TKey, TResult>(IEnumerable<TKey>, int, Func<IEnumerableExpression<(TKey, int)>, int, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<TKey, TResult>(IEnumerable<TKey>, int, Func<IEnumerableExpression<(TKey, int)>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<TKey, TResult>(System.Collections.Generic.IEnumerable<TKey>, int, System.Func<NMF.Expressions.IEnumerableExpression<(TKey, int)>, int, TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of TKey, TResult)(IEnumerable(Of TKey), Integer, Func(Of IEnumerableExpression(Of (TKey, Integer)), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of TKey, TResult)(System.Collections.Generic.IEnumerable(Of TKey), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (TKey, Integer)), Integer, TResult))
  name.vb: ChunkIndexed(Of TKey, TResult)(IEnumerable(Of TKey), Integer, Func(Of IEnumerableExpression(Of (TKey, Integer)), Integer, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{`1,System.Int32}},System.Int32,``1})
    name: ChunkIndexed
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{`1},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{`1,System.Int32}},System.Int32,``1})
    name: ChunkIndexed
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable{`1}.NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  parent: NMF.Expressions.Linq.ObservableExtensions
  definition: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  name: WithUpdates<TElement>(IEnumerable<TElement>)
  nameWithType: ObservableExtensions.WithUpdates<TElement>(IEnumerable<TElement>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<TElement>(System.Collections.Generic.IEnumerable<TElement>)
  nameWithType.vb: ObservableExtensions.WithUpdates(Of TElement)(IEnumerable(Of TElement))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of TElement)(System.Collections.Generic.IEnumerable(Of TElement))
  name.vb: WithUpdates(Of TElement)(IEnumerable(Of TElement))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{`1})
    name: WithUpdates
  - name: <
  - name: TElement
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TElement
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{`1})
    name: WithUpdates
  - name: (
  - name: Of
  - name: " "
  - name: TElement
  - name: )
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TElement
  - name: )
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.Linq.ObservableEnumerable`1
  commentId: T:NMF.Expressions.Linq.ObservableEnumerable`1
  name: ObservableEnumerable<T>
  nameWithType: ObservableEnumerable<T>
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>
  nameWithType.vb: ObservableEnumerable(Of T)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T)
  name.vb: ObservableEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1
    name: ObservableEnumerable
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1
    name: ObservableEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.INotifyEnumerable`1
  commentId: T:NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<T>
  nameWithType: INotifyEnumerable<T>
  fullName: NMF.Expressions.INotifyEnumerable<T>
  nameWithType.vb: INotifyEnumerable(Of T)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of T)
  name.vb: INotifyEnumerable(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
- uid: System.Collections.Specialized
  commentId: N:System.Collections.Specialized
  isExternal: true
  name: System.Collections.Specialized
  nameWithType: System.Collections.Specialized
  fullName: System.Collections.Specialized
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Specialized
    name: Specialized
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Specialized
    name: Specialized
    isExternal: true
- uid: NMF.Expressions.Linq.INotifyLookup`2
  commentId: T:NMF.Expressions.Linq.INotifyLookup`2
  name: INotifyLookup<TSource, TKey>
  nameWithType: INotifyLookup<TSource, TKey>
  fullName: NMF.Expressions.Linq.INotifyLookup<TSource, TKey>
  nameWithType.vb: INotifyLookup(Of TSource, TKey)
  fullName.vb: NMF.Expressions.Linq.INotifyLookup(Of TSource, TKey)
  name.vb: INotifyLookup(Of TSource, TKey)
  spec.csharp:
  - uid: NMF.Expressions.Linq.INotifyLookup`2
    name: INotifyLookup
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.Linq.INotifyLookup`2
    name: INotifyLookup
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItem(`0,System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItem(`0,System.Int32)
  isExternal: true
  name: OnAddItem(T, int)
  nameWithType: ObservableEnumerable<T>.OnAddItem(T, int)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnAddItem(T, int)
  nameWithType.vb: ObservableEnumerable(Of T).OnAddItem(T, Integer)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnAddItem(T, Integer)
  name.vb: OnAddItem(T, Integer)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItem(`0,System.Int32)
    name: OnAddItem
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItem(`0,System.Int32)
    name: OnAddItem
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
  isExternal: true
  name: OnAddItems(IEnumerable<T>, int)
  nameWithType: ObservableEnumerable<T>.OnAddItems(IEnumerable<T>, int)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnAddItems(System.Collections.Generic.IEnumerable<T>, int)
  nameWithType.vb: ObservableEnumerable(Of T).OnAddItems(IEnumerable(Of T), Integer)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnAddItems(System.Collections.Generic.IEnumerable(Of T), Integer)
  name.vb: OnAddItems(IEnumerable(Of T), Integer)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
    name: OnAddItems
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAddItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
    name: OnAddItems
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.ToString
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.ToString
  name: ToString()
  nameWithType: ObservableEnumerable<T>.ToString()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.ToString()
  nameWithType.vb: ObservableEnumerable(Of T).ToString()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).ToString()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.ToString
    name: ToString
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.ToString
    name: ToString
  - name: (
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.RaiseEvents(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.RaiseEvents(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0},System.Int32,System.Int32)
  isExternal: true
  name: RaiseEvents(IList<T>, IList<T>, IList<T>, int, int)
  nameWithType: ObservableEnumerable<T>.RaiseEvents(IList<T>, IList<T>, IList<T>, int, int)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.RaiseEvents(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>, int, int)
  nameWithType.vb: ObservableEnumerable(Of T).RaiseEvents(IList(Of T), IList(Of T), IList(Of T), Integer, Integer)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).RaiseEvents(System.Collections.Generic.IList(Of T), System.Collections.Generic.IList(Of T), System.Collections.Generic.IList(Of T), Integer, Integer)
  name.vb: RaiseEvents(IList(Of T), IList(Of T), IList(Of T), Integer, Integer)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.RaiseEvents(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0},System.Int32,System.Int32)
    name: RaiseEvents
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.RaiseEvents(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0},System.Int32,System.Int32)
    name: RaiseEvents
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItem(`0,System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItem(`0,System.Int32)
  isExternal: true
  name: OnRemoveItem(T, int)
  nameWithType: ObservableEnumerable<T>.OnRemoveItem(T, int)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnRemoveItem(T, int)
  nameWithType.vb: ObservableEnumerable(Of T).OnRemoveItem(T, Integer)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnRemoveItem(T, Integer)
  name.vb: OnRemoveItem(T, Integer)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItem(`0,System.Int32)
    name: OnRemoveItem
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItem(`0,System.Int32)
    name: OnRemoveItem
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
  isExternal: true
  name: OnRemoveItems(IEnumerable<T>, int)
  nameWithType: ObservableEnumerable<T>.OnRemoveItems(IEnumerable<T>, int)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnRemoveItems(System.Collections.Generic.IEnumerable<T>, int)
  nameWithType.vb: ObservableEnumerable(Of T).OnRemoveItems(IEnumerable(Of T), Integer)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnRemoveItems(System.Collections.Generic.IEnumerable(Of T), Integer)
  name.vb: OnRemoveItems(IEnumerable(Of T), Integer)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
    name: OnRemoveItems
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnRemoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32)
    name: OnRemoveItems
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnReplaceItems(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnReplaceItems(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Int32)
  isExternal: true
  name: OnReplaceItems(IEnumerable<T>, IEnumerable<T>, int)
  nameWithType: ObservableEnumerable<T>.OnReplaceItems(IEnumerable<T>, IEnumerable<T>, int)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnReplaceItems(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEnumerable<T>, int)
  nameWithType.vb: ObservableEnumerable(Of T).OnReplaceItems(IEnumerable(Of T), IEnumerable(Of T), Integer)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnReplaceItems(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), Integer)
  name.vb: OnReplaceItems(IEnumerable(Of T), IEnumerable(Of T), Integer)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnReplaceItems(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Int32)
    name: OnReplaceItems
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnReplaceItems(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},System.Int32)
    name: OnReplaceItems
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnCleared
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnCleared
  name: OnCleared()
  nameWithType: ObservableEnumerable<T>.OnCleared()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnCleared()
  nameWithType.vb: ObservableEnumerable(Of T).OnCleared()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnCleared()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnCleared
    name: OnCleared
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnCleared
    name: OnCleared
  - name: (
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnReplaceItem(`0,`0,System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnReplaceItem(`0,`0,System.Int32)
  isExternal: true
  name: OnReplaceItem(T, T, int)
  nameWithType: ObservableEnumerable<T>.OnReplaceItem(T, T, int)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnReplaceItem(T, T, int)
  nameWithType.vb: ObservableEnumerable(Of T).OnReplaceItem(T, T, Integer)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnReplaceItem(T, T, Integer)
  name.vb: OnReplaceItem(T, T, Integer)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnReplaceItem(`0,`0,System.Int32)
    name: OnReplaceItem
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnReplaceItem(`0,`0,System.Int32)
    name: OnReplaceItem
  - name: (
  - name: T
  - name: ','
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItem(`0,System.Int32,System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItem(`0,System.Int32,System.Int32)
  isExternal: true
  name: OnMoveItem(T, int, int)
  nameWithType: ObservableEnumerable<T>.OnMoveItem(T, int, int)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnMoveItem(T, int, int)
  nameWithType.vb: ObservableEnumerable(Of T).OnMoveItem(T, Integer, Integer)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnMoveItem(T, Integer, Integer)
  name.vb: OnMoveItem(T, Integer, Integer)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItem(`0,System.Int32,System.Int32)
    name: OnMoveItem
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItem(`0,System.Int32,System.Int32)
    name: OnMoveItem
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)
  isExternal: true
  name: OnMoveItems(IEnumerable<T>, int, int)
  nameWithType: ObservableEnumerable<T>.OnMoveItems(IEnumerable<T>, int, int)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnMoveItems(System.Collections.Generic.IEnumerable<T>, int, int)
  nameWithType.vb: ObservableEnumerable(Of T).OnMoveItems(IEnumerable(Of T), Integer, Integer)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnMoveItems(System.Collections.Generic.IEnumerable(Of T), Integer, Integer)
  name.vb: OnMoveItems(IEnumerable(Of T), Integer, Integer)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)
    name: OnMoveItems
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnMoveItems(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)
    name: OnMoveItems
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.HasEventSubscriber
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable`1.HasEventSubscriber
  name: HasEventSubscriber
  nameWithType: ObservableEnumerable<T>.HasEventSubscriber
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.HasEventSubscriber
  nameWithType.vb: ObservableEnumerable(Of T).HasEventSubscriber
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).HasEventSubscriber
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  isExternal: true
  name: OnCollectionChanged(NotifyCollectionChangedEventArgs)
  nameWithType: ObservableEnumerable<T>.OnCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  nameWithType.vb: ObservableEnumerable(Of T).OnCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanged
  - name: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
    name: OnCollectionChanged
  - name: (
  - uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
    name: NotifyCollectionChangedEventArgs
    isExternal: true
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.CollectionChanged
  commentId: E:NMF.Expressions.Linq.ObservableEnumerable`1.CollectionChanged
  name: CollectionChanged
  nameWithType: ObservableEnumerable<T>.CollectionChanged
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.CollectionChanged
  nameWithType.vb: ObservableEnumerable(Of T).CollectionChanged
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).CollectionChanged
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Dispose
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.Dispose
  name: Dispose()
  nameWithType: ObservableEnumerable<T>.Dispose()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Dispose()
  nameWithType.vb: ObservableEnumerable(Of T).Dispose()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Dispose()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Dispose
    name: Dispose
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Dispose
    name: Dispose
  - name: (
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Add(`0)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.Add(`0)
  name: Add(T)
  nameWithType: ObservableEnumerable<T>.Add(T)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Add(T)
  nameWithType.vb: ObservableEnumerable(Of T).Add(T)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Add(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Add(`0)
    name: Add
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Add(`0)
    name: Add
  - name: (
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Clear
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.Clear
  name: Clear()
  nameWithType: ObservableEnumerable<T>.Clear()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Clear()
  nameWithType.vb: ObservableEnumerable(Of T).Clear()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Clear()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Clear
    name: Clear
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Clear
    name: Clear
  - name: (
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.IsReadOnly
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ObservableEnumerable<T>.IsReadOnly
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.IsReadOnly
  nameWithType.vb: ObservableEnumerable(Of T).IsReadOnly
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).IsReadOnly
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Remove(`0)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.Remove(`0)
  name: Remove(T)
  nameWithType: ObservableEnumerable<T>.Remove(T)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Remove(T)
  nameWithType.vb: ObservableEnumerable(Of T).Remove(T)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Remove(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Remove(`0)
    name: Remove
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Remove(`0)
    name: Remove
  - name: (
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Contains(`0)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.Contains(`0)
  name: Contains(T)
  nameWithType: ObservableEnumerable<T>.Contains(T)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Contains(T)
  nameWithType.vb: ObservableEnumerable(Of T).Contains(T)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Contains(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Contains(`0)
    name: Contains
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Contains(`0)
    name: Contains
  - name: (
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.CopyTo(`0[],System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], int)
  nameWithType: ObservableEnumerable<T>.CopyTo(T[], int)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.CopyTo(T[], int)
  nameWithType.vb: ObservableEnumerable(Of T).CopyTo(T(), Integer)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).CopyTo(T(), Integer)
  name.vb: CopyTo(T(), Integer)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.CopyTo(`0[],System.Int32)
    name: CopyTo
  - name: (
  - name: T
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.CopyTo(`0[],System.Int32)
    name: CopyTo
  - name: (
  - name: T
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Count
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable`1.Count
  name: Count
  nameWithType: ObservableEnumerable<T>.Count
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Count
  nameWithType.vb: ObservableEnumerable(Of T).Count
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Count
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Successors
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable`1.Successors
  name: Successors
  nameWithType: ObservableEnumerable<T>.Successors
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Successors
  nameWithType.vb: ObservableEnumerable(Of T).Successors
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Successors
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.ExecutionMetaData
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable`1.ExecutionMetaData
  name: ExecutionMetaData
  nameWithType: ObservableEnumerable<T>.ExecutionMetaData
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.ExecutionMetaData
  nameWithType.vb: ObservableEnumerable(Of T).ExecutionMetaData
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).ExecutionMetaData
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.HasSuccessors
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable`1.HasSuccessors
  name: HasSuccessors
  nameWithType: ObservableEnumerable<T>.HasSuccessors
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.HasSuccessors
  nameWithType.vb: ObservableEnumerable(Of T).HasSuccessors
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).HasSuccessors
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.IsAttached
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable`1.IsAttached
  name: IsAttached
  nameWithType: ObservableEnumerable<T>.IsAttached
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.IsAttached
  nameWithType.vb: ObservableEnumerable(Of T).IsAttached
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).IsAttached
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.AllSuccessors
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable`1.AllSuccessors
  name: AllSuccessors
  nameWithType: ObservableEnumerable<T>.AllSuccessors
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.AllSuccessors
  nameWithType.vb: ObservableEnumerable(Of T).AllSuccessors
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).AllSuccessors
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Set(NMF.Expressions.INotifiable)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.Set(NMF.Expressions.INotifiable)
  name: Set(INotifiable)
  nameWithType: ObservableEnumerable<T>.Set(INotifiable)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Set(NMF.Expressions.INotifiable)
  nameWithType.vb: ObservableEnumerable(Of T).Set(INotifiable)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Set(NMF.Expressions.INotifiable)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Set(NMF.Expressions.INotifiable)
    name: Set
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Set(NMF.Expressions.INotifiable)
    name: Set
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.SetDummy
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.SetDummy
  name: SetDummy()
  nameWithType: ObservableEnumerable<T>.SetDummy()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.SetDummy()
  nameWithType.vb: ObservableEnumerable(Of T).SetDummy()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).SetDummy()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.SetDummy
    name: SetDummy
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.SetDummy
    name: SetDummy
  - name: (
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Unset(NMF.Expressions.INotifiable,System.Boolean)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.Unset(NMF.Expressions.INotifiable,System.Boolean)
  isExternal: true
  name: Unset(INotifiable, bool)
  nameWithType: ObservableEnumerable<T>.Unset(INotifiable, bool)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Unset(NMF.Expressions.INotifiable, bool)
  nameWithType.vb: ObservableEnumerable(Of T).Unset(INotifiable, Boolean)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Unset(NMF.Expressions.INotifiable, Boolean)
  name.vb: Unset(INotifiable, Boolean)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Unset(NMF.Expressions.INotifiable,System.Boolean)
    name: Unset
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Unset(NMF.Expressions.INotifiable,System.Boolean)
    name: Unset
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.UnsetAll
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.UnsetAll
  name: UnsetAll()
  nameWithType: ObservableEnumerable<T>.UnsetAll()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.UnsetAll()
  nameWithType.vb: ObservableEnumerable(Of T).UnsetAll()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).UnsetAll()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.UnsetAll
    name: UnsetAll
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.UnsetAll
    name: UnsetAll
  - name: (
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.GetSuccessor(System.Int32)
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.GetSuccessor(System.Int32)
  isExternal: true
  name: GetSuccessor(int)
  nameWithType: ObservableEnumerable<T>.GetSuccessor(int)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.GetSuccessor(int)
  nameWithType.vb: ObservableEnumerable(Of T).GetSuccessor(Integer)
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).GetSuccessor(Integer)
  name.vb: GetSuccessor(Integer)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.GetSuccessor(System.Int32)
    name: GetSuccessor
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.GetSuccessor(System.Int32)
    name: GetSuccessor
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnDetach
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnDetach
  name: OnDetach()
  nameWithType: ObservableEnumerable<T>.OnDetach()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnDetach()
  nameWithType.vb: ObservableEnumerable(Of T).OnDetach()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnDetach()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnDetach
    name: OnDetach
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnDetach
    name: OnDetach
  - name: (
  - name: )
- uid: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
  commentId: M:NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
  isExternal: true
  name: ExportToDgml(INotifiable, string)
  nameWithType: DebugExtensions.ExportToDgml(INotifiable, string)
  fullName: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable, string)
  nameWithType.vb: DebugExtensions.ExportToDgml(INotifiable, String)
  fullName.vb: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable, String)
  name.vb: ExportToDgml(INotifiable, String)
  spec.csharp:
  - uid: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
    name: ExportToDgml
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Debug.DebugExtensions.ExportToDgml(NMF.Expressions.INotifiable,System.String)
    name: ExportToDgml
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: NMF.Expressions.Debug.DebugExtensions
  commentId: T:NMF.Expressions.Debug.DebugExtensions
  parent: NMF.Expressions.Debug
  name: DebugExtensions
  nameWithType: DebugExtensions
  fullName: NMF.Expressions.Debug.DebugExtensions
- uid: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
  commentId: M:NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
  name: Visualize(INotifiable)
  nameWithType: DebugExtensions.Visualize(INotifiable)
  fullName: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
  spec.csharp:
  - uid: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
    name: Visualize
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Debug.DebugExtensions.Visualize(NMF.Expressions.INotifiable)
    name: Visualize
  - name: (
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
  name: Cast<TResult>(INotifyEnumerable)
  nameWithType: ObservableExtensions.Cast<TResult>(INotifyEnumerable)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Cast<TResult>(NMF.Expressions.INotifyEnumerable)
  nameWithType.vb: ObservableExtensions.Cast(Of TResult)(INotifyEnumerable)
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Cast(Of TResult)(NMF.Expressions.INotifyEnumerable)
  name.vb: Cast(Of TResult)(INotifyEnumerable)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
    name: Cast
  - name: <
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable
    name: INotifyEnumerable
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Cast``1(NMF.Expressions.INotifyEnumerable)
    name: Cast
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable
    name: INotifyEnumerable
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions
  commentId: T:NMF.Expressions.Linq.ObservableExtensions
  parent: NMF.Expressions.Linq
  name: ObservableExtensions
  nameWithType: ObservableExtensions
  fullName: NMF.Expressions.Linq.ObservableExtensions
- uid: NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
  name: OfType<TResult>(INotifyEnumerable)
  nameWithType: ObservableExtensions.OfType<TResult>(INotifyEnumerable)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OfType<TResult>(NMF.Expressions.INotifyEnumerable)
  nameWithType.vb: ObservableExtensions.OfType(Of TResult)(INotifyEnumerable)
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OfType(Of TResult)(NMF.Expressions.INotifyEnumerable)
  name.vb: OfType(Of TResult)(INotifyEnumerable)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
    name: OfType
  - name: <
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable
    name: INotifyEnumerable
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OfType``1(NMF.Expressions.INotifyEnumerable)
    name: OfType
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable
    name: INotifyEnumerable
  - name: )
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  isExternal: true
  name: Chunk<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<T>, int, TResult>, IChunkBalancingStrategyProvider)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<T>, int, TResult>, IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.INotifyEnumerable<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<T>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult), IChunkBalancingStrategyProvider)
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.INotifyEnumerable(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: Chunk(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult), IChunkBalancingStrategyProvider)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: Chunk
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: Chunk
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
  - name: )
- uid: NMF.Expressions.Linq.ChunkExtensions
  commentId: T:NMF.Expressions.Linq.ChunkExtensions
  parent: NMF.Expressions.Linq
  name: ChunkExtensions
  nameWithType: ChunkExtensions
  fullName: NMF.Expressions.Linq.ChunkExtensions
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
  isExternal: true
  name: Chunk<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<T>, int, TResult>, IChunkBalancingStrategyProvider<T, TResult>)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<T>, int, TResult>, IChunkBalancingStrategyProvider<T, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.INotifyEnumerable<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<T>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider<T, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult), IChunkBalancingStrategyProvider(Of T, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.INotifyEnumerable(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of T, TResult))
  name.vb: Chunk(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult), IChunkBalancingStrategyProvider(Of T, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
    name: Chunk
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{``0,``1})
    name: Chunk
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  isExternal: true
  name: Chunk<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<T>, int, TResult>)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<T>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(NMF.Expressions.INotifyEnumerable<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<T>, int, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(NMF.Expressions.INotifyEnumerable(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), Integer, TResult))
  name.vb: Chunk(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
    name: Chunk
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
    name: Chunk
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  isExternal: true
  name: ChunkIndexed<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>, IChunkBalancingStrategyProvider)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>, IChunkBalancingStrategyProvider)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.INotifyEnumerable<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<(T, int)>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult), IChunkBalancingStrategyProvider)
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.INotifyEnumerable(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (T, Integer)), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
  name.vb: ChunkIndexed(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult), IChunkBalancingStrategyProvider)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: ChunkIndexed
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider)
    name: ChunkIndexed
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider
    name: IChunkBalancingStrategyProvider
  - name: )
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
  isExternal: true
  name: ChunkIndexed<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>, IChunkBalancingStrategyProvider<(T, int), TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>, IChunkBalancingStrategyProvider<(T, int), TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.INotifyEnumerable<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<(T, int)>, int, TResult>, NMF.Expressions.Linq.IChunkBalancingStrategyProvider<(T, int), TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult), IChunkBalancingStrategyProvider(Of (T, Integer), TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.INotifyEnumerable(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (T, Integer)), Integer, TResult), NMF.Expressions.Linq.IChunkBalancingStrategyProvider(Of (T, Integer), TResult))
  name.vb: ChunkIndexed(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult), IChunkBalancingStrategyProvider(Of (T, Integer), TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
    name: ChunkIndexed
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
  - name: <
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1},NMF.Expressions.Linq.IChunkBalancingStrategyProvider{System.ValueTuple{``0,System.Int32},``1})
    name: ChunkIndexed
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: NMF.Expressions.Linq.IChunkBalancingStrategyProvider`2
    name: IChunkBalancingStrategyProvider
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  isExternal: true
  name: ChunkIndexed<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(INotifyEnumerable<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(NMF.Expressions.INotifyEnumerable<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<(T, int)>, int, TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(NMF.Expressions.INotifyEnumerable(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  name.vb: ChunkIndexed(Of T, TResult)(INotifyEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: ToLookup<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>)
  nameWithType: LookupExtensions.ToLookup<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>)
  fullName: NMF.Expressions.Linq.LookupExtensions.ToLookup<TSource, TKey>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  nameWithType.vb: LookupExtensions.ToLookup(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)))
  fullName.vb: NMF.Expressions.Linq.LookupExtensions.ToLookup(Of TSource, TKey)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: ToLookup(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.LookupExtensions.ToLookup``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: ToLookup
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.LookupExtensions
  commentId: T:NMF.Expressions.Linq.LookupExtensions
  parent: NMF.Expressions.Linq
  name: LookupExtensions
  nameWithType: LookupExtensions
  fullName: NMF.Expressions.Linq.LookupExtensions
- uid: NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: All<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  nameWithType: ObservableExtensions.All<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.All<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, bool>>)
  nameWithType.vb: ObservableExtensions.All(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.All(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Boolean)))
  name.vb: All(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: All
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.All``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: All
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0})
  name: Any<TSource>(INotifyEnumerable<TSource>)
  nameWithType: ObservableExtensions.Any<TSource>(INotifyEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Any<TSource>(NMF.Expressions.INotifyEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.Any(Of TSource)(INotifyEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Any(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource))
  name.vb: Any(Of TSource)(INotifyEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0})
    name: Any
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0})
    name: Any
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: Any<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  nameWithType: ObservableExtensions.Any<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Any<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, bool>>)
  nameWithType.vb: ObservableExtensions.Any(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Any(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Boolean)))
  name.vb: Any(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Any
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Any``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Any
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, decimal>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, decimal>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, decimal>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Decimal)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, double>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, double>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, double>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Double)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, int>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, int>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, int>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Integer)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Integer)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Integer)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, long>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, long>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, long>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Long)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Long)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Long)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, decimal?>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, decimal?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, decimal?>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Decimal?)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, double?>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, double?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, double?>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Double?)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, int?>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, int?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, int?>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Integer?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Integer?)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Integer?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, long?>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, long?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, long?>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Long?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Long?)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Long?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, float?>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, float?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, float?>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Single?)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  isExternal: true
  name: Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, float>>)
  nameWithType: ObservableExtensions.Average<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, float>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Average<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, float>>)
  nameWithType.vb: ObservableExtensions.Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Average(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Single)))
  name.vb: Average(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Average
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Average``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Average
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Concat<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: ObservableExtensions.Concat<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Concat<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.Concat(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Concat(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Concat(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Concat
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Concat``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Concat
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Contains<TSource>(INotifyEnumerable<TSource>, TSource, IEqualityComparer<TSource>)
  nameWithType: ObservableExtensions.Contains<TSource>(INotifyEnumerable<TSource>, TSource, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Contains<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ObservableExtensions.Contains(Of TSource)(INotifyEnumerable(Of TSource), TSource, IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Contains(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), TSource, System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Contains(Of TSource)(INotifyEnumerable(Of TSource), TSource, IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
    name: Contains
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
    name: Contains
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0)
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0)
  name: Contains<TSource>(INotifyEnumerable<TSource>, TSource)
  nameWithType: ObservableExtensions.Contains<TSource>(INotifyEnumerable<TSource>, TSource)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Contains<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, TSource)
  nameWithType.vb: ObservableExtensions.Contains(Of TSource)(INotifyEnumerable(Of TSource), TSource)
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Contains(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), TSource)
  name.vb: Contains(Of TSource)(INotifyEnumerable(Of TSource), TSource)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0)
    name: Contains
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - name: TSource
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Contains``1(NMF.Expressions.INotifyEnumerable{``0},``0)
    name: Contains
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - name: TSource
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0})
  name: Count<TSource>(INotifyEnumerable<TSource>)
  nameWithType: ObservableExtensions.Count<TSource>(INotifyEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Count<TSource>(NMF.Expressions.INotifyEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.Count(Of TSource)(INotifyEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Count(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource))
  name.vb: Count(Of TSource)(INotifyEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0})
    name: Count
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0})
    name: Count
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: Count<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  nameWithType: ObservableExtensions.Count<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Count<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, bool>>)
  nameWithType.vb: ObservableExtensions.Count(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Count(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Boolean)))
  name.vb: Count(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Count
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Count``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Count
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0})
  name: Distinct<TSource>(INotifyEnumerable<TSource>)
  nameWithType: ObservableExtensions.Distinct<TSource>(INotifyEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct<TSource>(NMF.Expressions.INotifyEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.Distinct(Of TSource)(INotifyEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Distinct(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource))
  name.vb: Distinct(Of TSource)(INotifyEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0})
    name: Distinct
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0})
    name: Distinct
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Distinct<TSource>(INotifyEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ObservableExtensions.Distinct<TSource>(INotifyEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Distinct<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ObservableExtensions.Distinct(Of TSource)(INotifyEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Distinct(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Distinct(Of TSource)(INotifyEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Distinct
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Distinct``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Distinct
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Except<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ObservableExtensions.Except<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Except<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ObservableExtensions.Except(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Except(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Except(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Except
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Except
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Except<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: ObservableExtensions.Except<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Except<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.Except(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Except(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Except(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Except
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Except``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Except
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  name: FirstOrDefault<TSource>(INotifyEnumerable<TSource>)
  nameWithType: ObservableExtensions.FirstOrDefault<TSource>(INotifyEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault<TSource>(NMF.Expressions.INotifyEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.FirstOrDefault(Of TSource)(INotifyEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource))
  name.vb: FirstOrDefault(Of TSource)(INotifyEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
    name: FirstOrDefault
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
    name: FirstOrDefault
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: FirstOrDefault<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  nameWithType: ObservableExtensions.FirstOrDefault<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, bool>>)
  nameWithType.vb: ObservableExtensions.FirstOrDefault(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Boolean)))
  name.vb: FirstOrDefault(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: FirstOrDefault
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.FirstOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: FirstOrDefault
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  isExternal: true
  name: GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExternal: true
  name: GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  isExternal: true
  name: GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Func<TSource, TKey>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Func<TSource, TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Func<TSource, TKey>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Func(Of TSource, TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Func(Of TSource, TKey))
  name.vb: GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Func(Of TSource, TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
    name: GroupBy
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: GroupBy(Of TSource, TKey)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: GroupBy
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  isExternal: true
  name: GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Func<TSource, TKey>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, Func<TKey, IEnumerable<TSource>, TResult>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Func<TSource, TKey>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, Func<TKey, IEnumerable<TSource>, TResult>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Func<TSource, TKey>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Func(Of TSource, TKey), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), Func(Of TKey, IEnumerable(Of TSource), TResult), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Func(Of TSource, TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Func(Of TSource, TKey), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), Func(Of TKey, IEnumerable(Of TSource), TResult), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  isExternal: true
  name: GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Func<TSource, TKey>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, Func<TKey, IEnumerable<TSource>, TResult>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Func<TSource, TKey>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, Func<TKey, IEnumerable<TSource>, TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Func<TSource, TKey>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Func(Of TSource, TKey), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), Func(Of TKey, IEnumerable(Of TSource), TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Func(Of TSource, TKey), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult))
  name.vb: GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Func(Of TSource, TKey), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), Func(Of TKey, IEnumerable(Of TSource), TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
    name: GroupBy
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  isExternal: true
  name: GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  isExternal: true
  name: GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>)
  nameWithType: ObservableExtensions.GroupBy<TSource, TKey, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TKey>>, Expression<Func<TKey, IEnumerable<TSource>, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupBy<TSource, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>)
  nameWithType.vb: ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupBy(Of TSource, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)))
  name.vb: GroupBy(Of TSource, TKey, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TKey)), Expression(Of Func(Of TKey, IEnumerable(Of TSource), TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
    name: GroupBy
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupBy``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
    name: GroupBy
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  isExternal: true
  name: GroupJoin<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TOuter
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  isExternal: true
  name: GroupJoin<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>)
  nameWithType: ObservableExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, IEnumerable<TInner>, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.GroupJoin<TOuter, TInner, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>)
  nameWithType.vb: ObservableExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.GroupJoin(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, IEnumerable(Of TInner), TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
    name: GroupJoin
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TOuter
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.GroupJoin``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
    name: GroupJoin
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Intersect<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ObservableExtensions.Intersect<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ObservableExtensions.Intersect(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Intersect(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Intersect(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Intersect
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Intersect
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Intersect<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: ObservableExtensions.Intersect<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Intersect<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.Intersect(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Intersect(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Intersect(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Intersect
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Intersect``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Intersect
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsProperSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.IsProperSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.IsProperSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsProperSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSubsetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSubsetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsProperSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  nameWithType: ObservableExtensions.IsProperSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.IsProperSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsProperSubsetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsProperSubsetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsProperSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.IsProperSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.IsProperSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsProperSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSupersetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsProperSupersetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsProperSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  nameWithType: ObservableExtensions.IsProperSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.IsProperSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsProperSupersetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsProperSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsProperSupersetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.IsSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.IsSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSubsetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSubsetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  nameWithType: ObservableExtensions.IsSubsetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.IsSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSubsetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsSubsetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSubsetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsSubsetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: IsSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.IsSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.IsSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: IsSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSupersetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: IsSupersetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: IsSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  nameWithType: ObservableExtensions.IsSupersetOf<T>(INotifyEnumerable<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.IsSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSupersetOf(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsSupersetOf
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.IsSupersetOf``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: IsSupersetOf
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  isExternal: true
  name: Join<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>, IEqualityComparer<TKey>)
  nameWithType: ObservableExtensions.Join<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>, IEqualityComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Join<TOuter, TInner, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  nameWithType.vb: ObservableExtensions.Join(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)), IEqualityComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Join(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: Join
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TOuter
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
    name: Join
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  isExternal: true
  name: Join<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>)
  nameWithType: ObservableExtensions.Join<TOuter, TInner, TKey, TResult>(INotifyEnumerable<TOuter>, IEnumerable<TInner>, Expression<Func<TOuter, TKey>>, Expression<Func<TInner, TKey>>, Expression<Func<TOuter, TInner, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Join<TOuter, TInner, TKey, TResult>(NMF.Expressions.INotifyEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>)
  nameWithType.vb: ObservableExtensions.Join(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Join(Of TOuter, TInner, TKey, TResult)(NMF.Expressions.INotifyEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult)))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(INotifyEnumerable(Of TOuter), IEnumerable(Of TInner), Expression(Of Func(Of TOuter, TKey)), Expression(Of Func(Of TInner, TKey)), Expression(Of Func(Of TOuter, TInner, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
    name: Join
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TOuter
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TInner
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Join``4(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
    name: Join
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TOuter
  - name: ','
  - name: " "
  - name: TInner
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  isExternal: true
  name: Max<TSource>(INotifyEnumerable<TSource>, IComparer<TSource>)
  nameWithType: ObservableExtensions.Max<TSource>(INotifyEnumerable<TSource>, IComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IComparer<TSource>)
  nameWithType.vb: ObservableExtensions.Max(Of TSource)(INotifyEnumerable(Of TSource), IComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IComparer(Of TSource))
  name.vb: Max(Of TSource)(INotifyEnumerable(Of TSource), IComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
    name: Max
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Max
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  nameWithType: ObservableExtensions.Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  nameWithType.vb: ObservableExtensions.Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Max
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult?>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult?>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult?>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult?)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult?)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult?)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Max
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  isExternal: true
  name: Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult?>>)
  nameWithType: ObservableExtensions.Max<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Max<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult?>>)
  nameWithType.vb: ObservableExtensions.Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Max(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult?)))
  name.vb: Max(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Max
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Max``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Max
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
  isExternal: true
  name: Min<TSource>(INotifyEnumerable<TSource>, IComparer<TSource>)
  nameWithType: ObservableExtensions.Min<TSource>(INotifyEnumerable<TSource>, IComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IComparer<TSource>)
  nameWithType.vb: ObservableExtensions.Min(Of TSource)(INotifyEnumerable(Of TSource), IComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IComparer(Of TSource))
  name.vb: Min(Of TSource)(INotifyEnumerable(Of TSource), IComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
    name: Min
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IComparer{``0})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Min
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  nameWithType: ObservableExtensions.Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  nameWithType.vb: ObservableExtensions.Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Min
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult?>>, IComparer<TResult>)
  nameWithType: ObservableExtensions.Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult?>>, IComparer<TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult?>>, System.Collections.Generic.IComparer<TResult>)
  nameWithType.vb: ObservableExtensions.Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult?)), IComparer(Of TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult?)), System.Collections.Generic.IComparer(Of TResult))
  name.vb: Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult?)), IComparer(Of TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Min
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}},System.Collections.Generic.IComparer{``1})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
  isExternal: true
  name: Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult?>>)
  nameWithType: ObservableExtensions.Min<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Min<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult?>>)
  nameWithType.vb: ObservableExtensions.Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Min(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult?)))
  name.vb: Min(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Min
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Min``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})
    name: Min
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: OrderBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.OrderBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ObservableExtensions.OrderBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderBy(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderBy
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderBy
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: OrderBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  nameWithType: ObservableExtensions.OrderBy<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderBy<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ObservableExtensions.OrderBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderBy(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: OrderBy(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderBy
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderBy``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderBy
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: OrderByDescending<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.OrderByDescending<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ObservableExtensions.OrderByDescending(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderByDescending(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: OrderByDescending<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  nameWithType: ObservableExtensions.OrderByDescending<TItem, TKey>(INotifyEnumerable<TItem>, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ObservableExtensions.OrderByDescending(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: OrderByDescending(Of TItem, TKey)(INotifyEnumerable(Of TItem), Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderByDescending
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.OrderByDescending``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: OrderByDescending
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
  isExternal: true
  name: Select<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>, Func<TSource, TResult>)
  nameWithType: ObservableExtensions.Select<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>, Func<TSource, TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Select<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>, System.Func<TSource, TResult>)
  nameWithType.vb: ObservableExtensions.Select(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)), Func(Of TSource, TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Select(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)), System.Func(Of TSource, TResult))
  name.vb: Select(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)), Func(Of TSource, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
    name: Select
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``0,``1})
    name: Select
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: Select<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  nameWithType: ObservableExtensions.Select<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Select<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  nameWithType.vb: ObservableExtensions.Select(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Select(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Select(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Select
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Select``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: Select
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  isExternal: true
  name: SelectMany<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TResult>>>, Func<TSource, IEnumerable<TResult>>)
  nameWithType: ObservableExtensions.SelectMany<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TResult>>>, Func<TSource, IEnumerable<TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>>, System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)
  nameWithType.vb: ObservableExtensions.SelectMany(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TResult))), Func(Of TSource, IEnumerable(Of TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult))), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult)))
  name.vb: SelectMany(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TResult))), Func(Of TSource, IEnumerable(Of TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
    name: SelectMany
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
    name: SelectMany
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  isExternal: true
  name: SelectMany<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TResult>>>)
  nameWithType: ObservableExtensions.SelectMany<TSource, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TResult>>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TSource, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>>)
  nameWithType.vb: ObservableExtensions.SelectMany(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TResult))))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TSource, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult))))
  name.vb: SelectMany(Of TSource, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TResult))))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
    name: SelectMany
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``2(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
    name: SelectMany
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Func{``0,``1,``2})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Func{``0,``1,``2})
  isExternal: true
  name: SelectMany<TSource, TIntermediate, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TIntermediate>>>, Func<TSource, IEnumerable<TIntermediate>>, Expression<Func<TSource, TIntermediate, TResult>>, Func<TSource, TIntermediate, TResult>)
  nameWithType: ObservableExtensions.SelectMany<TSource, TIntermediate, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TIntermediate>>>, Func<TSource, IEnumerable<TIntermediate>>, Expression<Func<TSource, TIntermediate, TResult>>, Func<TSource, TIntermediate, TResult>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TSource, TIntermediate, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TIntermediate>>>, System.Func<TSource, System.Collections.Generic.IEnumerable<TIntermediate>>, System.Linq.Expressions.Expression<System.Func<TSource, TIntermediate, TResult>>, System.Func<TSource, TIntermediate, TResult>)
  nameWithType.vb: ObservableExtensions.SelectMany(Of TSource, TIntermediate, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate))), Func(Of TSource, IEnumerable(Of TIntermediate)), Expression(Of Func(Of TSource, TIntermediate, TResult)), Func(Of TSource, TIntermediate, TResult))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TSource, TIntermediate, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TIntermediate))), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TIntermediate)), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TIntermediate, TResult)), System.Func(Of TSource, TIntermediate, TResult))
  name.vb: SelectMany(Of TSource, TIntermediate, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate))), Func(Of TSource, IEnumerable(Of TIntermediate)), Expression(Of Func(Of TSource, TIntermediate, TResult)), Func(Of TSource, TIntermediate, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Func{``0,``1,``2})
    name: SelectMany
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIntermediate
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIntermediate
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Func{``0,``1,``2})
    name: SelectMany
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIntermediate
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIntermediate
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  isExternal: true
  name: SelectMany<TSource, TIntermediate, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TIntermediate>>>, Expression<Func<TSource, TIntermediate, TResult>>)
  nameWithType: ObservableExtensions.SelectMany<TSource, TIntermediate, TResult>(INotifyEnumerable<TSource>, Expression<Func<TSource, IEnumerable<TIntermediate>>>, Expression<Func<TSource, TIntermediate, TResult>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SelectMany<TSource, TIntermediate, TResult>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TIntermediate>>>, System.Linq.Expressions.Expression<System.Func<TSource, TIntermediate, TResult>>)
  nameWithType.vb: ObservableExtensions.SelectMany(Of TSource, TIntermediate, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate))), Expression(Of Func(Of TSource, TIntermediate, TResult)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SelectMany(Of TSource, TIntermediate, TResult)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TIntermediate))), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TIntermediate, TResult)))
  name.vb: SelectMany(Of TSource, TIntermediate, TResult)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, IEnumerable(Of TIntermediate))), Expression(Of Func(Of TSource, TIntermediate, TResult)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
    name: SelectMany
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TIntermediate
  - name: '>'
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SelectMany``3(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
    name: SelectMany
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TIntermediate
  - name: )
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TIntermediate
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: SetEquals<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  nameWithType: ObservableExtensions.SetEquals<T>(INotifyEnumerable<T>, IEnumerable<T>, IEqualityComparer<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  nameWithType.vb: ObservableExtensions.SetEquals(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SetEquals(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: SetEquals(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: SetEquals
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: SetEquals
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: SetEquals<T>(INotifyEnumerable<T>, IEnumerable<T>)
  nameWithType: ObservableExtensions.SetEquals<T>(INotifyEnumerable<T>, IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SetEquals<T>(NMF.Expressions.INotifyEnumerable<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.SetEquals(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SetEquals(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: SetEquals(Of T)(INotifyEnumerable(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: SetEquals
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SetEquals``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: SetEquals
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
  name: SingleOrDefault<TSource>(INotifyEnumerable<TSource>)
  nameWithType: ObservableExtensions.SingleOrDefault<TSource>(INotifyEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault<TSource>(NMF.Expressions.INotifyEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.SingleOrDefault(Of TSource)(INotifyEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource))
  name.vb: SingleOrDefault(Of TSource)(INotifyEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
    name: SingleOrDefault
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0})
    name: SingleOrDefault
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: SingleOrDefault<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  nameWithType: ObservableExtensions.SingleOrDefault<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, bool>>)
  nameWithType.vb: ObservableExtensions.SingleOrDefault(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Boolean)))
  name.vb: SingleOrDefault(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: SingleOrDefault
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.SingleOrDefault``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: SingleOrDefault
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, decimal>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, decimal>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, decimal>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Decimal)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, double>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, double>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, double>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Double)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, int>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, int>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, int>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Integer)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Integer)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Integer)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, long>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, long>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, long>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Long)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Long)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Long)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, decimal?>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, decimal?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, decimal?>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Decimal?)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Decimal?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: decimal
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Decimal
    name: Decimal
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, double?>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, double?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, double?>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Double?)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Double?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, int?>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, int?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, int?>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Integer?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Integer?)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Integer?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, long?>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, long?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, long?>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Long?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Long?)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Long?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int64
    name: long
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Int64
    name: Long
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, float?>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, float?>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, float?>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single?)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Single?)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single?)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '?'
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: '?'
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  isExternal: true
  name: Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, float>>)
  nameWithType: ObservableExtensions.Sum<TSource>(INotifyEnumerable<TSource>, Expression<Func<TSource, float>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Sum<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, float>>)
  nameWithType.vb: ObservableExtensions.Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Sum(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, Single)))
  name.vb: Sum(Of TSource)(INotifyEnumerable(Of TSource), Expression(Of Func(Of TSource, Single)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Sum
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Sum``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
    name: Sum
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: TopX<TItem, TKey>(INotifyEnumerable<TItem>, int, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  nameWithType: ObservableExtensions.TopX<TItem, TKey>(INotifyEnumerable<TItem>, int, Expression<Func<TItem, TKey>>, IComparer<TKey>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.TopX<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, int, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>, System.Collections.Generic.IComparer<TKey>)
  nameWithType.vb: ObservableExtensions.TopX(Of TItem, TKey)(INotifyEnumerable(Of TItem), Integer, Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.TopX(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), Integer, System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: TopX(Of TItem, TKey)(INotifyEnumerable(Of TItem), Integer, Expression(Of Func(Of TItem, TKey)), IComparer(Of TKey))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: TopX
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
    name: TopX
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExternal: true
  name: TopX<TItem, TKey>(INotifyEnumerable<TItem>, int, Expression<Func<TItem, TKey>>)
  nameWithType: ObservableExtensions.TopX<TItem, TKey>(INotifyEnumerable<TItem>, int, Expression<Func<TItem, TKey>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.TopX<TItem, TKey>(NMF.Expressions.INotifyEnumerable<TItem>, int, System.Linq.Expressions.Expression<System.Func<TItem, TKey>>)
  nameWithType.vb: ObservableExtensions.TopX(Of TItem, TKey)(INotifyEnumerable(Of TItem), Integer, Expression(Of Func(Of TItem, TKey)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.TopX(Of TItem, TKey)(NMF.Expressions.INotifyEnumerable(Of TItem), Integer, System.Linq.Expressions.Expression(Of System.Func(Of TItem, TKey)))
  name.vb: TopX(Of TItem, TKey)(INotifyEnumerable(Of TItem), Integer, Expression(Of Func(Of TItem, TKey)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: TopX
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.TopX``2(NMF.Expressions.INotifyEnumerable{``0},System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}})
    name: TopX
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Union<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType: ObservableExtensions.Union<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Union<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  nameWithType.vb: ObservableExtensions.Union(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Union(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Union(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Union
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Union
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Union<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType: ObservableExtensions.Union<TSource>(INotifyEnumerable<TSource>, IEnumerable<TSource>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Union<TSource>(NMF.Expressions.INotifyEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  nameWithType.vb: ObservableExtensions.Union(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Union(Of TSource)(NMF.Expressions.INotifyEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Union(Of TSource)(INotifyEnumerable(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Union
  - name: <
  - name: TSource
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: TSource
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Union``1(NMF.Expressions.INotifyEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Union
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
  isExternal: true
  name: Where<T>(INotifyEnumerable<T>, Expression<Func<T, bool>>, Func<T, bool>)
  nameWithType: ObservableExtensions.Where<T>(INotifyEnumerable<T>, Expression<Func<T, bool>>, Func<T, bool>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Where<T>(NMF.Expressions.INotifyEnumerable<T>, System.Linq.Expressions.Expression<System.Func<T, bool>>, System.Func<T, bool>)
  nameWithType.vb: ObservableExtensions.Where(Of T)(INotifyEnumerable(Of T), Expression(Of Func(Of T, Boolean)), Func(Of T, Boolean))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Where(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)), System.Func(Of T, Boolean))
  name.vb: Where(Of T)(INotifyEnumerable(Of T), Expression(Of Func(Of T, Boolean)), Func(Of T, Boolean))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
    name: Where
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,System.Boolean})
    name: Where
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExternal: true
  name: Where<T>(INotifyEnumerable<T>, Expression<Func<T, bool>>)
  nameWithType: ObservableExtensions.Where<T>(INotifyEnumerable<T>, Expression<Func<T, bool>>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.Where<T>(NMF.Expressions.INotifyEnumerable<T>, System.Linq.Expressions.Expression<System.Func<T, bool>>)
  nameWithType.vb: ObservableExtensions.Where(Of T)(INotifyEnumerable(Of T), Expression(Of Func(Of T, Boolean)))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.Where(Of T)(NMF.Expressions.INotifyEnumerable(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean)))
  name.vb: Where(Of T)(INotifyEnumerable(Of T), Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.Where``1(NMF.Expressions.INotifyEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
    name: Where
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  commentId: M:NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
  name: AsOne<T>(T)
  nameWithType: ExpressionExtensions.AsOne<T>(T)
  fullName: NMF.Expressions.Linq.ExpressionExtensions.AsOne<T>(T)
  nameWithType.vb: ExpressionExtensions.AsOne(Of T)(T)
  fullName.vb: NMF.Expressions.Linq.ExpressionExtensions.AsOne(Of T)(T)
  name.vb: AsOne(Of T)(T)
  spec.csharp:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ExpressionExtensions.AsOne``1(``0)
    name: AsOne
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ExpressionExtensions
  commentId: T:NMF.Expressions.Linq.ExpressionExtensions
  parent: NMF.Expressions.Linq
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: NMF.Expressions.Linq.ExpressionExtensions
- uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
  isExternal: true
  name: WithUpdates<T>(ICollection<T>)
  nameWithType: ObservableExtensions.WithUpdates<T>(ICollection<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>(System.Collections.Generic.ICollection<T>)
  nameWithType.vb: ObservableExtensions.WithUpdates(Of T)(ICollection(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)(System.Collections.Generic.ICollection(Of T))
  name.vb: WithUpdates(Of T)(ICollection(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
    name: WithUpdates
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.ICollection{``0})
    name: WithUpdates
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
  isExternal: true
  name: Chunk<T, TResult>(IEnumerable<T>, int, Func<IEnumerableExpression<T>, int, TResult>)
  nameWithType: ChunkExtensions.Chunk<T, TResult>(IEnumerable<T>, int, Func<IEnumerableExpression<T>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.Chunk<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<T>, int, TResult>)
  nameWithType.vb: ChunkExtensions.Chunk(Of T, TResult)(IEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.Chunk(Of T, TResult)(System.Collections.Generic.IEnumerable(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of T), Integer, TResult))
  name.vb: Chunk(Of T, TResult)(IEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of T), Integer, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
    name: Chunk
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.Chunk``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{``0},System.Int32,``1})
    name: Chunk
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  commentId: M:NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
  isExternal: true
  name: ChunkIndexed<T, TResult>(IEnumerable<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>)
  nameWithType: ChunkExtensions.ChunkIndexed<T, TResult>(IEnumerable<T>, int, Func<IEnumerableExpression<(T, int)>, int, TResult>)
  fullName: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed<T, TResult>(System.Collections.Generic.IEnumerable<T>, int, System.Func<NMF.Expressions.IEnumerableExpression<(T, int)>, int, TResult>)
  nameWithType.vb: ChunkExtensions.ChunkIndexed(Of T, TResult)(IEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  fullName.vb: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed(Of T, TResult)(System.Collections.Generic.IEnumerable(Of T), Integer, System.Func(Of NMF.Expressions.IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  name.vb: ChunkIndexed(Of T, TResult)(IEnumerable(Of T), Integer, Func(Of IEnumerableExpression(Of (T, Integer)), Integer, TResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: <
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: <
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ChunkExtensions.ChunkIndexed``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{NMF.Expressions.IEnumerableExpression{System.ValueTuple{``0,System.Int32}},System.Int32,``1})
    name: ChunkIndexed
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Func`3
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.IEnumerableExpression`1
    name: IEnumerableExpression
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - name: TResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: WithUpdates<T>(IEnumerable<T>)
  nameWithType: ObservableExtensions.WithUpdates<T>(IEnumerable<T>)
  fullName: NMF.Expressions.Linq.ObservableExtensions.WithUpdates<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: ObservableExtensions.WithUpdates(Of T)(IEnumerable(Of T))
  fullName.vb: NMF.Expressions.Linq.ObservableExtensions.WithUpdates(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: WithUpdates(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
    name: WithUpdates
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableExtensions.WithUpdates``1(System.Collections.Generic.IEnumerable{``0})
    name: WithUpdates
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: NMF.Expressions.Debug
  commentId: N:NMF.Expressions.Debug
  name: NMF.Expressions.Debug
  nameWithType: NMF.Expressions.Debug
  fullName: NMF.Expressions.Debug
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Debug
    name: Debug
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  - name: .
  - uid: NMF.Expressions.Debug
    name: Debug
- uid: NMF.Expressions.Linq.IncrementalLookup`2.#ctor*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.#ctor
  name: IncrementalLookup
  nameWithType: IncrementalLookup<TSource, TKey>.IncrementalLookup
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.IncrementalLookup
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).New
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).New
  name.vb: New
- uid: NMF.Expressions.INotifyEnumerable{{TSource}}
  commentId: T:NMF.Expressions.INotifyEnumerable{``0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyEnumerable`1
  name: INotifyEnumerable<TSource>
  nameWithType: INotifyEnumerable<TSource>
  fullName: NMF.Expressions.INotifyEnumerable<TSource>
  nameWithType.vb: INotifyEnumerable(Of TSource)
  fullName.vb: NMF.Expressions.INotifyEnumerable(Of TSource)
  name.vb: INotifyEnumerable(Of TSource)
  spec.csharp:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: <
  - name: TSource
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyEnumerable`1
    name: INotifyEnumerable
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: )
- uid: NMF.Expressions.ObservingFunc{{TSource},{TKey}}
  commentId: T:NMF.Expressions.ObservingFunc{`0,`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`2
  name: ObservingFunc<TSource, TKey>
  nameWithType: ObservingFunc<TSource, TKey>
  fullName: NMF.Expressions.ObservingFunc<TSource, TKey>
  nameWithType.vb: ObservingFunc(Of TSource, TKey)
  fullName.vb: NMF.Expressions.ObservingFunc(Of TSource, TKey)
  name.vb: ObservingFunc(Of TSource, TKey)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
- uid: NMF.Expressions.ObservingFunc`2
  commentId: T:NMF.Expressions.ObservingFunc`2
  parent: NMF.Expressions
  name: ObservingFunc<T1, TResult>
  nameWithType: ObservingFunc<T1, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>
  nameWithType.vb: ObservingFunc(Of T1, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult)
  name.vb: ObservingFunc(Of T1, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.OnAttach
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`1}.OnAttach
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.OnAttach
  name: OnAttach()
  nameWithType: ObservableEnumerable<TKey>.OnAttach()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.OnAttach()
  nameWithType.vb: ObservableEnumerable(Of TKey).OnAttach()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).OnAttach()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.OnAttach
    name: OnAttach
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.OnAttach
    name: OnAttach
  - name: (
  - name: )
- uid: NMF.Expressions.Linq.IncrementalLookup`2.OnAttach*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.OnAttach
  name: OnAttach
  nameWithType: IncrementalLookup<TSource, TKey>.OnAttach
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.OnAttach
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).OnAttach
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).OnAttach
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAttach
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.OnAttach
  name: OnAttach()
  nameWithType: ObservableEnumerable<T>.OnAttach()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.OnAttach()
  nameWithType.vb: ObservableEnumerable(Of T).OnAttach()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).OnAttach()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAttach
    name: OnAttach
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.OnAttach
    name: OnAttach
  - name: (
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.Dependencies
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable{`1}.Dependencies
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.Dependencies
  name: Dependencies
  nameWithType: ObservableEnumerable<TKey>.Dependencies
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.Dependencies
  nameWithType.vb: ObservableEnumerable(Of TKey).Dependencies
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).Dependencies
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Dependencies*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.Dependencies
  name: Dependencies
  nameWithType: IncrementalLookup<TSource, TKey>.Dependencies
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Dependencies
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Dependencies
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Dependencies
- uid: System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Expressions.INotifiable}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<INotifiable>
  nameWithType: IEnumerable<INotifiable>
  fullName: System.Collections.Generic.IEnumerable<NMF.Expressions.INotifiable>
  nameWithType.vb: IEnumerable(Of INotifiable)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Expressions.INotifiable)
  name.vb: IEnumerable(Of INotifiable)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.INotifiable
    name: INotifiable
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Dependencies
  commentId: P:NMF.Expressions.Linq.ObservableEnumerable`1.Dependencies
  name: Dependencies
  nameWithType: ObservableEnumerable<T>.Dependencies
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Dependencies
  nameWithType.vb: ObservableEnumerable(Of T).Dependencies
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Dependencies
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Keys*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.Keys
  name: Keys
  nameWithType: IncrementalLookup<TSource, TKey>.Keys
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Keys
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Keys
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Keys
- uid: NMF.Expressions.Linq.INotifyLookup{{TSource},{TKey}}.Keys
  commentId: P:NMF.Expressions.Linq.INotifyLookup{`0,`1}.Keys
  parent: NMF.Expressions.Linq.INotifyLookup{{TSource},{TKey}}
  definition: NMF.Expressions.Linq.INotifyLookup`2.Keys
  name: Keys
  nameWithType: INotifyLookup<TSource, TKey>.Keys
  fullName: NMF.Expressions.Linq.INotifyLookup<TSource, TKey>.Keys
  nameWithType.vb: INotifyLookup(Of TSource, TKey).Keys
  fullName.vb: NMF.Expressions.Linq.INotifyLookup(Of TSource, TKey).Keys
- uid: NMF.Expressions.Linq.INotifyLookup`2.Keys
  commentId: P:NMF.Expressions.Linq.INotifyLookup`2.Keys
  name: Keys
  nameWithType: INotifyLookup<TSource, TKey>.Keys
  fullName: NMF.Expressions.Linq.INotifyLookup<TSource, TKey>.Keys
  nameWithType.vb: INotifyLookup(Of TSource, TKey).Keys
  fullName.vb: NMF.Expressions.Linq.INotifyLookup(Of TSource, TKey).Keys
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Item*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.Item
  name: this
  nameWithType: IncrementalLookup<TSource, TKey>.this
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.this
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).this[]
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).this[]
  name.vb: this[]
- uid: NMF.Expressions.Linq.INotifyLookup{{TSource},{TKey}}.Item({TKey})
  commentId: P:NMF.Expressions.Linq.INotifyLookup{`0,`1}.Item(`1)
  parent: NMF.Expressions.Linq.INotifyLookup{{TSource},{TKey}}
  definition: NMF.Expressions.Linq.INotifyLookup`2.Item(`1)
  name: this[TKey]
  nameWithType: INotifyLookup<TSource, TKey>.this[TKey]
  fullName: NMF.Expressions.Linq.INotifyLookup<TSource, TKey>.this[TKey]
  nameWithType.vb: INotifyLookup(Of TSource, TKey).this[](TKey)
  fullName.vb: NMF.Expressions.Linq.INotifyLookup(Of TSource, TKey).this[](TKey)
  name.vb: this[](TKey)
  spec.csharp:
  - name: this
  - name: '['
  - name: TKey
  - name: ']'
  spec.vb:
  - uid: NMF.Expressions.Linq.INotifyLookup{`0,`1}.Item(`1)
    name: this[]
  - name: (
  - name: TKey
  - name: )
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: NMF.Expressions.Linq.INotifyLookup`2.Item(`1)
  commentId: P:NMF.Expressions.Linq.INotifyLookup`2.Item(`1)
  name: this[TKey]
  nameWithType: INotifyLookup<TSource, TKey>.this[TKey]
  fullName: NMF.Expressions.Linq.INotifyLookup<TSource, TKey>.this[TKey]
  nameWithType.vb: INotifyLookup(Of TSource, TKey).this[](TKey)
  fullName.vb: NMF.Expressions.Linq.INotifyLookup(Of TSource, TKey).this[](TKey)
  name.vb: this[](TKey)
  spec.csharp:
  - name: this
  - name: '['
  - name: TKey
  - name: ']'
  spec.vb:
  - uid: NMF.Expressions.Linq.INotifyLookup`2.Item(`1)
    name: this[]
  - name: (
  - name: TKey
  - name: )
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`1}.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  name: Notify(IList<INotificationResult>)
  nameWithType: ObservableEnumerable<TKey>.Notify(IList<INotificationResult>)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.Notify(System.Collections.Generic.IList<NMF.Expressions.INotificationResult>)
  nameWithType.vb: ObservableEnumerable(Of TKey).Notify(IList(Of INotificationResult))
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).Notify(System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
  - name: )
  - name: )
- uid: NMF.Expressions.Linq.IncrementalLookup`2.Notify*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.Notify
  name: Notify
  nameWithType: IncrementalLookup<TSource, TKey>.Notify
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.Notify
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).Notify
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).Notify
- uid: System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  commentId: T:System.Collections.Generic.IList{NMF.Expressions.INotificationResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<INotificationResult>
  nameWithType: IList<INotificationResult>
  fullName: System.Collections.Generic.IList<NMF.Expressions.INotificationResult>
  nameWithType.vb: IList(Of INotificationResult)
  fullName.vb: System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult)
  name.vb: IList(Of INotificationResult)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
  - name: )
- uid: NMF.Expressions.INotificationResult
  commentId: T:NMF.Expressions.INotificationResult
  parent: NMF.Expressions
  name: INotificationResult
  nameWithType: INotificationResult
  fullName: NMF.Expressions.INotificationResult
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
  isExternal: true
  name: Notify(IList<INotificationResult>)
  nameWithType: ObservableEnumerable<T>.Notify(IList<INotificationResult>)
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.Notify(System.Collections.Generic.IList<NMF.Expressions.INotificationResult>)
  nameWithType.vb: ObservableEnumerable(Of T).Notify(IList(Of INotificationResult))
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).Notify(System.Collections.Generic.IList(Of NMF.Expressions.INotificationResult))
  name.vb: Notify(IList(Of INotificationResult))
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
  - name: '>'
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.Notify(System.Collections.Generic.IList{NMF.Expressions.INotificationResult})
    name: Notify
  - name: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Expressions.INotificationResult
    name: INotificationResult
  - name: )
  - name: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}.GetEnumerator
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable{`1}.GetEnumerator
  parent: NMF.Expressions.Linq.ObservableEnumerable{{TKey}}
  definition: NMF.Expressions.Linq.ObservableEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: ObservableEnumerable<TKey>.GetEnumerator()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<TKey>.GetEnumerator()
  nameWithType.vb: ObservableEnumerable(Of TKey).GetEnumerator()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of TKey).GetEnumerator()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.GetEnumerator
    name: GetEnumerator
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable{`1}.GetEnumerator
    name: GetEnumerator
  - name: (
  - name: )
- uid: NMF.Expressions.Linq.IncrementalLookup`2.GetEnumerator*
  commentId: Overload:NMF.Expressions.Linq.IncrementalLookup`2.GetEnumerator
  name: GetEnumerator
  nameWithType: IncrementalLookup<TSource, TKey>.GetEnumerator
  fullName: NMF.Expressions.Linq.IncrementalLookup<TSource, TKey>.GetEnumerator
  nameWithType.vb: IncrementalLookup(Of TSource, TKey).GetEnumerator
  fullName.vb: NMF.Expressions.Linq.IncrementalLookup(Of TSource, TKey).GetEnumerator
- uid: System.Collections.Generic.IEnumerator{{TKey}}
  commentId: T:System.Collections.Generic.IEnumerator{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<TKey>
  nameWithType: IEnumerator<TKey>
  fullName: System.Collections.Generic.IEnumerator<TKey>
  nameWithType.vb: IEnumerator(Of TKey)
  fullName.vb: System.Collections.Generic.IEnumerator(Of TKey)
  name.vb: IEnumerator(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
- uid: NMF.Expressions.Linq.ObservableEnumerable`1.GetEnumerator
  commentId: M:NMF.Expressions.Linq.ObservableEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: ObservableEnumerable<T>.GetEnumerator()
  fullName: NMF.Expressions.Linq.ObservableEnumerable<T>.GetEnumerator()
  nameWithType.vb: ObservableEnumerable(Of T).GetEnumerator()
  fullName.vb: NMF.Expressions.Linq.ObservableEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.GetEnumerator
    name: GetEnumerator
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Expressions.Linq.ObservableEnumerable`1.GetEnumerator
    name: GetEnumerator
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
