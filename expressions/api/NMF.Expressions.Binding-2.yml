### YamlMime:ManagedReference
items:
- uid: NMF.Expressions.Binding`2
  commentId: T:NMF.Expressions.Binding`2
  id: Binding`2
  parent: NMF.Expressions
  children:
  - NMF.Expressions.Binding`2.#ctor(NMF.Expressions.ObservingFunc{`0,`1},System.Action{`0,`1})
  - NMF.Expressions.Binding`2.Bind(`0)
  langs:
  - csharp
  - vb
  name: Binding<T, TMember>
  nameWithType: Binding<T, TMember>
  fullName: NMF.Expressions.Binding<T, TMember>
  type: Class
  source:
    remote:
      path: Expressions/Expressions.Utilities/Binding.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Binding
    path: src/Expressions/Expressions.Utilities/Binding.cs
    startLine: 44
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nDenotes a binding of type T\n"
  example: []
  syntax:
    content: public class Binding<T, TMember>
    typeParameters:
    - id: T
      description: The type of the object that is bound
    - id: TMember
      description: The value type of the binding
    content.vb: Public Class Binding(Of T, TMember)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: Binding(Of T, TMember)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: NMF.Expressions.Binding(Of T, TMember)
  name.vb: Binding(Of T, TMember)
- uid: NMF.Expressions.Binding`2.#ctor(NMF.Expressions.ObservingFunc{`0,`1},System.Action{`0,`1})
  commentId: M:NMF.Expressions.Binding`2.#ctor(NMF.Expressions.ObservingFunc{`0,`1},System.Action{`0,`1})
  id: '#ctor(NMF.Expressions.ObservingFunc{`0,`1},System.Action{`0,`1})'
  parent: NMF.Expressions.Binding`2
  langs:
  - csharp
  - vb
  name: Binding(ObservingFunc<T, TMember>, Action<T, TMember>)
  nameWithType: Binding<T, TMember>.Binding(ObservingFunc<T, TMember>, Action<T, TMember>)
  fullName: NMF.Expressions.Binding<T, TMember>.Binding(NMF.Expressions.ObservingFunc<T, TMember>, System.Action<T, TMember>)
  type: Constructor
  source:
    remote:
      path: Expressions/Expressions.Utilities/Binding.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Expressions/Expressions.Utilities/Binding.cs
    startLine: 54
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nCreates a new binding\n"
  example: []
  syntax:
    content: public Binding(ObservingFunc<T, TMember> func, Action<T, TMember> setter)
    parameters:
    - id: func
      type: NMF.Expressions.ObservingFunc{{T},{TMember}}
      description: The function that should be bound
    - id: setter
      type: System.Action{{T},{TMember}}
      description: The setter to which the function should be bound
    content.vb: Public Sub New(func As ObservingFunc(Of T, TMember), setter As Action(Of T, TMember))
  overload: NMF.Expressions.Binding`2.#ctor*
  nameWithType.vb: Binding(Of T, TMember).Binding(ObservingFunc(Of T, TMember), Action(Of T, TMember))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.Binding(Of T, TMember).Binding(NMF.Expressions.ObservingFunc(Of T, TMember), System.Action(Of T, TMember))
  name.vb: Binding(ObservingFunc(Of T, TMember), Action(Of T, TMember))
- uid: NMF.Expressions.Binding`2.Bind(`0)
  commentId: M:NMF.Expressions.Binding`2.Bind(`0)
  id: Bind(`0)
  parent: NMF.Expressions.Binding`2
  langs:
  - csharp
  - vb
  name: Bind(T)
  nameWithType: Binding<T, TMember>.Bind(T)
  fullName: NMF.Expressions.Binding<T, TMember>.Bind(T)
  type: Method
  source:
    remote:
      path: Expressions/Expressions.Utilities/Binding.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Bind
    path: src/Expressions/Expressions.Utilities/Binding.cs
    startLine: 65
  assemblies:
  - NMF.Expressions.Utilities
  namespace: NMF.Expressions
  summary: "\nExecutes the binding for the given element\n"
  example: []
  syntax:
    content: public IDisposable Bind(T item)
    parameters:
    - id: item
      type: '{T}'
      description: The element that should be bound
    return:
      type: System.IDisposable
      description: A disposable instance. When disposed, the binding for the provided element ends.
    content.vb: Public Function Bind(item As T) As IDisposable
  overload: NMF.Expressions.Binding`2.Bind*
  nameWithType.vb: Binding(Of T, TMember).Bind(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Expressions.Binding(Of T, TMember).Bind(T)
references:
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Expressions.Binding`2.#ctor*
  commentId: Overload:NMF.Expressions.Binding`2.#ctor
  name: Binding
  nameWithType: Binding<T, TMember>.Binding
  fullName: NMF.Expressions.Binding<T, TMember>.Binding
  nameWithType.vb: Binding(Of T, TMember).Binding
  fullName.vb: NMF.Expressions.Binding(Of T, TMember).Binding
- uid: NMF.Expressions.ObservingFunc{{T},{TMember}}
  commentId: T:NMF.Expressions.ObservingFunc{`0,`1}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`2
  name: ObservingFunc<T, TMember>
  nameWithType: ObservingFunc<T, TMember>
  fullName: NMF.Expressions.ObservingFunc<T, TMember>
  nameWithType.vb: ObservingFunc(Of T, TMember)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T, TMember)
  name.vb: ObservingFunc(Of T, TMember)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TMember
    nameWithType: TMember
    fullName: TMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TMember
    nameWithType: TMember
    fullName: TMember
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{T},{TMember}}
  commentId: T:System.Action{`0,``0}
  parent: System
  definition: System.Action`2
  name: Action<T, TMember>
  nameWithType: Action<T, TMember>
  fullName: System.Action<T, TMember>
  nameWithType.vb: Action(Of T, TMember)
  fullName.vb: System.Action(Of T, TMember)
  name.vb: Action(Of T, TMember)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TMember
    nameWithType: TMember
    fullName: TMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TMember
    nameWithType: TMember
    fullName: TMember
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`2
  commentId: T:NMF.Expressions.ObservingFunc`2
  parent: NMF.Expressions
  name: ObservingFunc<T1, TResult>
  nameWithType: ObservingFunc<T1, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>
  nameWithType.vb: ObservingFunc(Of T1, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult)
  name.vb: ObservingFunc(Of T1, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.Binding`2.Bind*
  commentId: Overload:NMF.Expressions.Binding`2.Bind
  name: Bind
  nameWithType: Binding<T, TMember>.Bind
  fullName: NMF.Expressions.Binding<T, TMember>.Bind
  nameWithType.vb: Binding(Of T, TMember).Bind
  fullName.vb: NMF.Expressions.Binding(Of T, TMember).Bind
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: T
  name: T
  nameWithType: T
  fullName: T
