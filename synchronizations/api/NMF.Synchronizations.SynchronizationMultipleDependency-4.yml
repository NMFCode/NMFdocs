### YamlMime:ManagedReference
items:
- uid: NMF.Synchronizations.SynchronizationMultipleDependency`4
  commentId: T:NMF.Synchronizations.SynchronizationMultipleDependency`4
  id: SynchronizationMultipleDependency`4
  parent: NMF.Synchronizations
  children:
  - NMF.Synchronizations.SynchronizationMultipleDependency`4.#ctor(NMF.Synchronizations.SynchronizationRule{`0,`1},NMF.Synchronizations.SynchronizationRule{`2,`3},System.Linq.Expressions.Expression{System.Func{`0,ICollectionExpression{`2}}},System.Linq.Expressions.Expression{System.Func{`1,ICollectionExpression{`3}}})
  - NMF.Synchronizations.SynchronizationMultipleDependency`4.CreateLeftToRightDependency
  - NMF.Synchronizations.SynchronizationMultipleDependency`4.CreateRightToLeftDependency
  - NMF.Synchronizations.SynchronizationMultipleDependency`4.HandleLeftToRightDependency(Computation)
  - NMF.Synchronizations.SynchronizationMultipleDependency`4.HandleRightToLeftDependency(Computation)
  - NMF.Synchronizations.SynchronizationMultipleDependency`4.SynchronizeLTRCollections(System.Collections.Generic.ICollection{`2},System.Collections.Generic.ICollection{`3},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  - NMF.Synchronizations.SynchronizationMultipleDependency`4.SynchronizeRTLCollections(System.Collections.Generic.ICollection{`2},System.Collections.Generic.ICollection{`3},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  langs:
  - csharp
  - vb
  name: SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>
  nameWithType: SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>
  fullName: NMF.Synchronizations.SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>
  type: Class
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationMultipleDependency.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizationMultipleDependency
    path: src/Synchronizations/Synchronizations/SynchronizationMultipleDependency.cs
    startLine: 14
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: >-
      public class SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>

          where TLeft : class where TRight : class where TDepLeft : class where TDepRight : class
    typeParameters:
    - id: TLeft
    - id: TRight
    - id: TDepLeft
    - id: TDepRight
    content.vb: Public Class SynchronizationMultipleDependency(Of TLeft As Class, TRight As Class, TDepLeft As Class, TDepRight As Class)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: NMF.Synchronizations.SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight)
  name.vb: SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight)
- uid: NMF.Synchronizations.SynchronizationMultipleDependency`4.#ctor(NMF.Synchronizations.SynchronizationRule{`0,`1},NMF.Synchronizations.SynchronizationRule{`2,`3},System.Linq.Expressions.Expression{System.Func{`0,ICollectionExpression{`2}}},System.Linq.Expressions.Expression{System.Func{`1,ICollectionExpression{`3}}})
  commentId: M:NMF.Synchronizations.SynchronizationMultipleDependency`4.#ctor(NMF.Synchronizations.SynchronizationRule{`0,`1},NMF.Synchronizations.SynchronizationRule{`2,`3},System.Linq.Expressions.Expression{System.Func{`0,ICollectionExpression{`2}}},System.Linq.Expressions.Expression{System.Func{`1,ICollectionExpression{`3}}})
  id: '#ctor(NMF.Synchronizations.SynchronizationRule{`0,`1},NMF.Synchronizations.SynchronizationRule{`2,`3},System.Linq.Expressions.Expression{System.Func{`0,ICollectionExpression{`2}}},System.Linq.Expressions.Expression{System.Func{`1,ICollectionExpression{`3}}})'
  parent: NMF.Synchronizations.SynchronizationMultipleDependency`4
  langs:
  - csharp
  - vb
  name: SynchronizationMultipleDependency(SynchronizationRule<TLeft, TRight>, SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ICollectionExpression<TDepLeft>>>, Expression<Func<TRight, ICollectionExpression<TDepRight>>>)
  nameWithType: SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>.SynchronizationMultipleDependency(SynchronizationRule<TLeft, TRight>, SynchronizationRule<TDepLeft, TDepRight>, Expression<Func<TLeft, ICollectionExpression<TDepLeft>>>, Expression<Func<TRight, ICollectionExpression<TDepRight>>>)
  fullName: NMF.Synchronizations.SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>.SynchronizationMultipleDependency(NMF.Synchronizations.SynchronizationRule<TLeft, TRight>, NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>, System.Linq.Expressions.Expression<System.Func<TLeft, ICollectionExpression<TDepLeft>>>, System.Linq.Expressions.Expression<System.Func<TRight, ICollectionExpression<TDepRight>>>)
  type: Constructor
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationMultipleDependency.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Synchronizations/Synchronizations/SynchronizationMultipleDependency.cs
    startLine: 26
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public SynchronizationMultipleDependency(SynchronizationRule<TLeft, TRight> parentRule, SynchronizationRule<TDepLeft, TDepRight> childRule, Expression<Func<TLeft, ICollectionExpression<TDepLeft>>> leftSelector, Expression<Func<TRight, ICollectionExpression<TDepRight>>> rightSelector)
    parameters:
    - id: parentRule
      type: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
    - id: childRule
      type: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
    - id: leftSelector
      type: System.Linq.Expressions.Expression{System.Func{{TLeft},ICollectionExpression{{TDepLeft}}}}
    - id: rightSelector
      type: System.Linq.Expressions.Expression{System.Func{{TRight},ICollectionExpression{{TDepRight}}}}
    content.vb: Public Sub New(parentRule As SynchronizationRule(Of TLeft, TRight), childRule As SynchronizationRule(Of TDepLeft, TDepRight), leftSelector As Expression(Of Func(Of TLeft, ICollectionExpression(Of TDepLeft))), rightSelector As Expression(Of Func(Of TRight, ICollectionExpression(Of TDepRight))))
  overload: NMF.Synchronizations.SynchronizationMultipleDependency`4.#ctor*
  nameWithType.vb: SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight).SynchronizationMultipleDependency(SynchronizationRule(Of TLeft, TRight), SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ICollectionExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ICollectionExpression(Of TDepRight))))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight).SynchronizationMultipleDependency(NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight), NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight), System.Linq.Expressions.Expression(Of System.Func(Of TLeft, ICollectionExpression(Of TDepLeft))), System.Linq.Expressions.Expression(Of System.Func(Of TRight, ICollectionExpression(Of TDepRight))))
  name.vb: SynchronizationMultipleDependency(SynchronizationRule(Of TLeft, TRight), SynchronizationRule(Of TDepLeft, TDepRight), Expression(Of Func(Of TLeft, ICollectionExpression(Of TDepLeft))), Expression(Of Func(Of TRight, ICollectionExpression(Of TDepRight))))
- uid: NMF.Synchronizations.SynchronizationMultipleDependency`4.HandleLeftToRightDependency(Computation)
  commentId: M:NMF.Synchronizations.SynchronizationMultipleDependency`4.HandleLeftToRightDependency(Computation)
  id: HandleLeftToRightDependency(Computation)
  parent: NMF.Synchronizations.SynchronizationMultipleDependency`4
  langs:
  - csharp
  - vb
  name: HandleLeftToRightDependency(Computation)
  nameWithType: SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>.HandleLeftToRightDependency(Computation)
  fullName: NMF.Synchronizations.SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>.HandleLeftToRightDependency(Computation)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationMultipleDependency.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: HandleLeftToRightDependency
    path: src/Synchronizations/Synchronizations/SynchronizationMultipleDependency.cs
    startLine: 66
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public void HandleLeftToRightDependency(Computation computation)
    parameters:
    - id: computation
      type: Computation
    content.vb: Public Sub HandleLeftToRightDependency(computation As Computation)
  overload: NMF.Synchronizations.SynchronizationMultipleDependency`4.HandleLeftToRightDependency*
  nameWithType.vb: SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight).HandleLeftToRightDependency(Computation)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight).HandleLeftToRightDependency(Computation)
- uid: NMF.Synchronizations.SynchronizationMultipleDependency`4.HandleRightToLeftDependency(Computation)
  commentId: M:NMF.Synchronizations.SynchronizationMultipleDependency`4.HandleRightToLeftDependency(Computation)
  id: HandleRightToLeftDependency(Computation)
  parent: NMF.Synchronizations.SynchronizationMultipleDependency`4
  langs:
  - csharp
  - vb
  name: HandleRightToLeftDependency(Computation)
  nameWithType: SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>.HandleRightToLeftDependency(Computation)
  fullName: NMF.Synchronizations.SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>.HandleRightToLeftDependency(Computation)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationMultipleDependency.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: HandleRightToLeftDependency
    path: src/Synchronizations/Synchronizations/SynchronizationMultipleDependency.cs
    startLine: 80
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public void HandleRightToLeftDependency(Computation computation)
    parameters:
    - id: computation
      type: Computation
    content.vb: Public Sub HandleRightToLeftDependency(computation As Computation)
  overload: NMF.Synchronizations.SynchronizationMultipleDependency`4.HandleRightToLeftDependency*
  nameWithType.vb: SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight).HandleRightToLeftDependency(Computation)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight).HandleRightToLeftDependency(Computation)
- uid: NMF.Synchronizations.SynchronizationMultipleDependency`4.SynchronizeLTRCollections(System.Collections.Generic.ICollection{`2},System.Collections.Generic.ICollection{`3},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  commentId: M:NMF.Synchronizations.SynchronizationMultipleDependency`4.SynchronizeLTRCollections(System.Collections.Generic.ICollection{`2},System.Collections.Generic.ICollection{`3},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  id: SynchronizeLTRCollections(System.Collections.Generic.ICollection{`2},System.Collections.Generic.ICollection{`3},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  parent: NMF.Synchronizations.SynchronizationMultipleDependency`4
  langs:
  - csharp
  - vb
  name: SynchronizeLTRCollections(ICollection<TDepLeft>, ICollection<TDepRight>, ISynchronizationContext, Boolean)
  nameWithType: SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>.SynchronizeLTRCollections(ICollection<TDepLeft>, ICollection<TDepRight>, ISynchronizationContext, Boolean)
  fullName: NMF.Synchronizations.SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>.SynchronizeLTRCollections(System.Collections.Generic.ICollection<TDepLeft>, System.Collections.Generic.ICollection<TDepRight>, NMF.Synchronizations.ISynchronizationContext, System.Boolean)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationMultipleDependency.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizeLTRCollections
    path: src/Synchronizations/Synchronizations/SynchronizationMultipleDependency.cs
    startLine: 94
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: protected IDisposable SynchronizeLTRCollections(ICollection<TDepLeft> lefts, ICollection<TDepRight> rights, ISynchronizationContext context, bool ignoreCandidates)
    parameters:
    - id: lefts
      type: System.Collections.Generic.ICollection{{TDepLeft}}
    - id: rights
      type: System.Collections.Generic.ICollection{{TDepRight}}
    - id: context
      type: NMF.Synchronizations.ISynchronizationContext
    - id: ignoreCandidates
      type: System.Boolean
    return:
      type: System.IDisposable
    content.vb: Protected Function SynchronizeLTRCollections(lefts As ICollection(Of TDepLeft), rights As ICollection(Of TDepRight), context As ISynchronizationContext, ignoreCandidates As Boolean) As IDisposable
  overload: NMF.Synchronizations.SynchronizationMultipleDependency`4.SynchronizeLTRCollections*
  nameWithType.vb: SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight).SynchronizeLTRCollections(ICollection(Of TDepLeft), ICollection(Of TDepRight), ISynchronizationContext, Boolean)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NMF.Synchronizations.SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight).SynchronizeLTRCollections(System.Collections.Generic.ICollection(Of TDepLeft), System.Collections.Generic.ICollection(Of TDepRight), NMF.Synchronizations.ISynchronizationContext, System.Boolean)
  name.vb: SynchronizeLTRCollections(ICollection(Of TDepLeft), ICollection(Of TDepRight), ISynchronizationContext, Boolean)
- uid: NMF.Synchronizations.SynchronizationMultipleDependency`4.SynchronizeRTLCollections(System.Collections.Generic.ICollection{`2},System.Collections.Generic.ICollection{`3},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  commentId: M:NMF.Synchronizations.SynchronizationMultipleDependency`4.SynchronizeRTLCollections(System.Collections.Generic.ICollection{`2},System.Collections.Generic.ICollection{`3},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  id: SynchronizeRTLCollections(System.Collections.Generic.ICollection{`2},System.Collections.Generic.ICollection{`3},NMF.Synchronizations.ISynchronizationContext,System.Boolean)
  parent: NMF.Synchronizations.SynchronizationMultipleDependency`4
  langs:
  - csharp
  - vb
  name: SynchronizeRTLCollections(ICollection<TDepLeft>, ICollection<TDepRight>, ISynchronizationContext, Boolean)
  nameWithType: SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>.SynchronizeRTLCollections(ICollection<TDepLeft>, ICollection<TDepRight>, ISynchronizationContext, Boolean)
  fullName: NMF.Synchronizations.SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>.SynchronizeRTLCollections(System.Collections.Generic.ICollection<TDepLeft>, System.Collections.Generic.ICollection<TDepRight>, NMF.Synchronizations.ISynchronizationContext, System.Boolean)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationMultipleDependency.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizeRTLCollections
    path: src/Synchronizations/Synchronizations/SynchronizationMultipleDependency.cs
    startLine: 246
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: protected IDisposable SynchronizeRTLCollections(ICollection<TDepLeft> lefts, ICollection<TDepRight> rights, ISynchronizationContext context, bool ignoreCandidates)
    parameters:
    - id: lefts
      type: System.Collections.Generic.ICollection{{TDepLeft}}
    - id: rights
      type: System.Collections.Generic.ICollection{{TDepRight}}
    - id: context
      type: NMF.Synchronizations.ISynchronizationContext
    - id: ignoreCandidates
      type: System.Boolean
    return:
      type: System.IDisposable
    content.vb: Protected Function SynchronizeRTLCollections(lefts As ICollection(Of TDepLeft), rights As ICollection(Of TDepRight), context As ISynchronizationContext, ignoreCandidates As Boolean) As IDisposable
  overload: NMF.Synchronizations.SynchronizationMultipleDependency`4.SynchronizeRTLCollections*
  nameWithType.vb: SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight).SynchronizeRTLCollections(ICollection(Of TDepLeft), ICollection(Of TDepRight), ISynchronizationContext, Boolean)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NMF.Synchronizations.SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight).SynchronizeRTLCollections(System.Collections.Generic.ICollection(Of TDepLeft), System.Collections.Generic.ICollection(Of TDepRight), NMF.Synchronizations.ISynchronizationContext, System.Boolean)
  name.vb: SynchronizeRTLCollections(ICollection(Of TDepLeft), ICollection(Of TDepRight), ISynchronizationContext, Boolean)
- uid: NMF.Synchronizations.SynchronizationMultipleDependency`4.CreateLeftToRightDependency
  commentId: M:NMF.Synchronizations.SynchronizationMultipleDependency`4.CreateLeftToRightDependency
  id: CreateLeftToRightDependency
  parent: NMF.Synchronizations.SynchronizationMultipleDependency`4
  langs:
  - csharp
  - vb
  name: CreateLeftToRightDependency()
  nameWithType: SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>.CreateLeftToRightDependency()
  fullName: NMF.Synchronizations.SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>.CreateLeftToRightDependency()
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationMultipleDependency.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateLeftToRightDependency
    path: src/Synchronizations/Synchronizations/SynchronizationMultipleDependency.cs
    startLine: 259
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public ITransformationRuleDependency CreateLeftToRightDependency()
    return:
      type: ITransformationRuleDependency
    content.vb: Public Function CreateLeftToRightDependency As ITransformationRuleDependency
  overload: NMF.Synchronizations.SynchronizationMultipleDependency`4.CreateLeftToRightDependency*
  nameWithType.vb: SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight).CreateLeftToRightDependency()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight).CreateLeftToRightDependency()
- uid: NMF.Synchronizations.SynchronizationMultipleDependency`4.CreateRightToLeftDependency
  commentId: M:NMF.Synchronizations.SynchronizationMultipleDependency`4.CreateRightToLeftDependency
  id: CreateRightToLeftDependency
  parent: NMF.Synchronizations.SynchronizationMultipleDependency`4
  langs:
  - csharp
  - vb
  name: CreateRightToLeftDependency()
  nameWithType: SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>.CreateRightToLeftDependency()
  fullName: NMF.Synchronizations.SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>.CreateRightToLeftDependency()
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationMultipleDependency.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateRightToLeftDependency
    path: src/Synchronizations/Synchronizations/SynchronizationMultipleDependency.cs
    startLine: 264
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public ITransformationRuleDependency CreateRightToLeftDependency()
    return:
      type: ITransformationRuleDependency
    content.vb: Public Function CreateRightToLeftDependency As ITransformationRuleDependency
  overload: NMF.Synchronizations.SynchronizationMultipleDependency`4.CreateRightToLeftDependency*
  nameWithType.vb: SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight).CreateRightToLeftDependency()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight).CreateRightToLeftDependency()
references:
- uid: NMF.Synchronizations
  commentId: N:NMF.Synchronizations
  name: NMF.Synchronizations
  nameWithType: NMF.Synchronizations
  fullName: NMF.Synchronizations
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Synchronizations.SynchronizationMultipleDependency`4.#ctor*
  commentId: Overload:NMF.Synchronizations.SynchronizationMultipleDependency`4.#ctor
  name: SynchronizationMultipleDependency
  nameWithType: SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>.SynchronizationMultipleDependency
  fullName: NMF.Synchronizations.SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>.SynchronizationMultipleDependency
  nameWithType.vb: SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight).SynchronizationMultipleDependency
  fullName.vb: NMF.Synchronizations.SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight).SynchronizationMultipleDependency
- uid: NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}}
  commentId: T:NMF.Synchronizations.SynchronizationRule{``0,``1}
  parent: NMF.Synchronizations
  definition: NMF.Synchronizations.SynchronizationRule`2
  name: SynchronizationRule<TLeft, TRight>
  nameWithType: SynchronizationRule<TLeft, TRight>
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight)
  name.vb: SynchronizationRule(Of TLeft, TRight)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationRule{{TDepLeft},{TDepRight}}
  commentId: T:NMF.Synchronizations.SynchronizationRule{`2,`3}
  parent: NMF.Synchronizations
  definition: NMF.Synchronizations.SynchronizationRule`2
  name: SynchronizationRule<TDepLeft, TDepRight>
  nameWithType: SynchronizationRule<TDepLeft, TDepRight>
  fullName: NMF.Synchronizations.SynchronizationRule<TDepLeft, TDepRight>
  nameWithType.vb: SynchronizationRule(Of TDepLeft, TDepRight)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TDepLeft, TDepRight)
  name.vb: SynchronizationRule(Of TDepLeft, TDepRight)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TDepLeft
    nameWithType: TDepLeft
    fullName: TDepLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDepRight
    nameWithType: TDepRight
    fullName: TDepRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDepLeft
    nameWithType: TDepLeft
    fullName: TDepLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDepRight
    nameWithType: TDepRight
    fullName: TDepRight
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TLeft},ICollectionExpression{{TDepLeft}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,ICollectionExpression{`2}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TLeft, ICollectionExpression<TDepLeft>>>
  nameWithType: Expression<Func<TLeft, ICollectionExpression<TDepLeft>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TLeft, ICollectionExpression<TDepLeft>>>
  nameWithType.vb: Expression(Of Func(Of TLeft, ICollectionExpression(Of TDepLeft)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TLeft, ICollectionExpression(Of TDepLeft)))
  name.vb: Expression(Of Func(Of TLeft, ICollectionExpression(Of TDepLeft)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: ICollectionExpression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDepLeft
    nameWithType: TDepLeft
    fullName: TDepLeft
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: ICollectionExpression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDepLeft
    nameWithType: TDepLeft
    fullName: TDepLeft
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TRight},ICollectionExpression{{TDepRight}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`1,ICollectionExpression{`3}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TRight, ICollectionExpression<TDepRight>>>
  nameWithType: Expression<Func<TRight, ICollectionExpression<TDepRight>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TRight, ICollectionExpression<TDepRight>>>
  nameWithType.vb: Expression(Of Func(Of TRight, ICollectionExpression(Of TDepRight)))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TRight, ICollectionExpression(Of TDepRight)))
  name.vb: Expression(Of Func(Of TRight, ICollectionExpression(Of TDepRight)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: ICollectionExpression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDepRight
    nameWithType: TDepRight
    fullName: TDepRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ICollectionExpression`1
    name: ICollectionExpression
    nameWithType: ICollectionExpression
    fullName: ICollectionExpression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDepRight
    nameWithType: TDepRight
    fullName: TDepRight
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationRule`2
  commentId: T:NMF.Synchronizations.SynchronizationRule`2
  name: SynchronizationRule<TLeft, TRight>
  nameWithType: SynchronizationRule<TLeft, TRight>
  fullName: NMF.Synchronizations.SynchronizationRule<TLeft, TRight>
  nameWithType.vb: SynchronizationRule(Of TLeft, TRight)
  fullName.vb: NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight)
  name.vb: SynchronizationRule(Of TLeft, TRight)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: NMF.Synchronizations.SynchronizationMultipleDependency`4.HandleLeftToRightDependency*
  commentId: Overload:NMF.Synchronizations.SynchronizationMultipleDependency`4.HandleLeftToRightDependency
  name: HandleLeftToRightDependency
  nameWithType: SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>.HandleLeftToRightDependency
  fullName: NMF.Synchronizations.SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>.HandleLeftToRightDependency
  nameWithType.vb: SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight).HandleLeftToRightDependency
  fullName.vb: NMF.Synchronizations.SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight).HandleLeftToRightDependency
- uid: Computation
  isExternal: true
  name: Computation
  nameWithType: Computation
  fullName: Computation
- uid: NMF.Synchronizations.SynchronizationMultipleDependency`4.HandleRightToLeftDependency*
  commentId: Overload:NMF.Synchronizations.SynchronizationMultipleDependency`4.HandleRightToLeftDependency
  name: HandleRightToLeftDependency
  nameWithType: SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>.HandleRightToLeftDependency
  fullName: NMF.Synchronizations.SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>.HandleRightToLeftDependency
  nameWithType.vb: SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight).HandleRightToLeftDependency
  fullName.vb: NMF.Synchronizations.SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight).HandleRightToLeftDependency
- uid: NMF.Synchronizations.SynchronizationMultipleDependency`4.SynchronizeLTRCollections*
  commentId: Overload:NMF.Synchronizations.SynchronizationMultipleDependency`4.SynchronizeLTRCollections
  name: SynchronizeLTRCollections
  nameWithType: SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>.SynchronizeLTRCollections
  fullName: NMF.Synchronizations.SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>.SynchronizeLTRCollections
  nameWithType.vb: SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight).SynchronizeLTRCollections
  fullName.vb: NMF.Synchronizations.SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight).SynchronizeLTRCollections
- uid: System.Collections.Generic.ICollection{{TDepLeft}}
  commentId: T:System.Collections.Generic.ICollection{`2}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TDepLeft>
  nameWithType: ICollection<TDepLeft>
  fullName: System.Collections.Generic.ICollection<TDepLeft>
  nameWithType.vb: ICollection(Of TDepLeft)
  fullName.vb: System.Collections.Generic.ICollection(Of TDepLeft)
  name.vb: ICollection(Of TDepLeft)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDepLeft
    nameWithType: TDepLeft
    fullName: TDepLeft
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDepLeft
    nameWithType: TDepLeft
    fullName: TDepLeft
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{TDepRight}}
  commentId: T:System.Collections.Generic.ICollection{`3}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TDepRight>
  nameWithType: ICollection<TDepRight>
  fullName: System.Collections.Generic.ICollection<TDepRight>
  nameWithType.vb: ICollection(Of TDepRight)
  fullName.vb: System.Collections.Generic.ICollection(Of TDepRight)
  name.vb: ICollection(Of TDepRight)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDepRight
    nameWithType: TDepRight
    fullName: TDepRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDepRight
    nameWithType: TDepRight
    fullName: TDepRight
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.ISynchronizationContext
  commentId: T:NMF.Synchronizations.ISynchronizationContext
  parent: NMF.Synchronizations
  name: ISynchronizationContext
  nameWithType: ISynchronizationContext
  fullName: NMF.Synchronizations.ISynchronizationContext
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.Synchronizations.SynchronizationMultipleDependency`4.SynchronizeRTLCollections*
  commentId: Overload:NMF.Synchronizations.SynchronizationMultipleDependency`4.SynchronizeRTLCollections
  name: SynchronizeRTLCollections
  nameWithType: SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>.SynchronizeRTLCollections
  fullName: NMF.Synchronizations.SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>.SynchronizeRTLCollections
  nameWithType.vb: SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight).SynchronizeRTLCollections
  fullName.vb: NMF.Synchronizations.SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight).SynchronizeRTLCollections
- uid: NMF.Synchronizations.SynchronizationMultipleDependency`4.CreateLeftToRightDependency*
  commentId: Overload:NMF.Synchronizations.SynchronizationMultipleDependency`4.CreateLeftToRightDependency
  name: CreateLeftToRightDependency
  nameWithType: SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>.CreateLeftToRightDependency
  fullName: NMF.Synchronizations.SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>.CreateLeftToRightDependency
  nameWithType.vb: SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight).CreateLeftToRightDependency
  fullName.vb: NMF.Synchronizations.SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight).CreateLeftToRightDependency
- uid: ITransformationRuleDependency
  isExternal: true
  name: ITransformationRuleDependency
  nameWithType: ITransformationRuleDependency
  fullName: ITransformationRuleDependency
- uid: NMF.Synchronizations.SynchronizationMultipleDependency`4.CreateRightToLeftDependency*
  commentId: Overload:NMF.Synchronizations.SynchronizationMultipleDependency`4.CreateRightToLeftDependency
  name: CreateRightToLeftDependency
  nameWithType: SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>.CreateRightToLeftDependency
  fullName: NMF.Synchronizations.SynchronizationMultipleDependency<TLeft, TRight, TDepLeft, TDepRight>.CreateRightToLeftDependency
  nameWithType.vb: SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight).CreateRightToLeftDependency
  fullName.vb: NMF.Synchronizations.SynchronizationMultipleDependency(Of TLeft, TRight, TDepLeft, TDepRight).CreateRightToLeftDependency
