### YamlMime:ManagedReference
items:
- uid: NMF.Synchronizations.LeftGuardedSynchronizationJob`2
  commentId: T:NMF.Synchronizations.LeftGuardedSynchronizationJob`2
  id: LeftGuardedSynchronizationJob`2
  parent: NMF.Synchronizations
  children:
  - NMF.Synchronizations.LeftGuardedSynchronizationJob`2.#ctor(NMF.Synchronizations.ISynchronizationJob{`0,`1},NMF.Expressions.ObservingFunc{`0,System.Boolean})
  - NMF.Synchronizations.LeftGuardedSynchronizationJob`2.CreateTracker(NMF.Synchronizations.SynchronizationComputation{`0,`1})
  langs:
  - csharp
  - vb
  name: LeftGuardedSynchronizationJob<TLeft, TRight>
  nameWithType: LeftGuardedSynchronizationJob<TLeft, TRight>
  fullName: NMF.Synchronizations.LeftGuardedSynchronizationJob<TLeft, TRight>
  type: Class
  source:
    remote:
      path: Synchronizations/Synchronizations/GuardedSynchronizationJob.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: LeftGuardedSynchronizationJob
    path: src/Synchronizations/Synchronizations/GuardedSynchronizationJob.cs
    startLine: 166
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nDenotes a synchronization job guarded at the LHS\n"
  example: []
  syntax:
    content: 'public class LeftGuardedSynchronizationJob<TLeft, TRight> : GuardedSynchronizationJob<TLeft, TRight>, ISynchronizationJob<TLeft, TRight>'
    typeParameters:
    - id: TLeft
      description: The LHS type
    - id: TRight
      description: The RHS type
    content.vb: >-
      Public Class LeftGuardedSynchronizationJob(Of TLeft, TRight)
          Inherits GuardedSynchronizationJob(Of TLeft, TRight)
          Implements ISynchronizationJob(Of TLeft, TRight)
  inheritance:
  - System.Object
  - NMF.Synchronizations.GuardedSynchronizationJob{{TLeft},{TRight}}
  implements:
  - NMF.Synchronizations.ISynchronizationJob{{TLeft},{TRight}}
  inheritedMembers:
  - NMF.Synchronizations.GuardedSynchronizationJob{{TLeft},{TRight}}.IsEarly
  - NMF.Synchronizations.GuardedSynchronizationJob{{TLeft},{TRight}}.Perform(NMF.Synchronizations.SynchronizationComputation{{TLeft},{TRight}},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
  - NMF.Synchronizations.GuardedSynchronizationJob{{TLeft},{TRight}}.CreateTracker(NMF.Synchronizations.SynchronizationComputation{{TLeft},{TRight}})
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: LeftGuardedSynchronizationJob(Of TLeft, TRight)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: NMF.Synchronizations.LeftGuardedSynchronizationJob(Of TLeft, TRight)
  name.vb: LeftGuardedSynchronizationJob(Of TLeft, TRight)
- uid: NMF.Synchronizations.LeftGuardedSynchronizationJob`2.#ctor(NMF.Synchronizations.ISynchronizationJob{`0,`1},NMF.Expressions.ObservingFunc{`0,System.Boolean})
  commentId: M:NMF.Synchronizations.LeftGuardedSynchronizationJob`2.#ctor(NMF.Synchronizations.ISynchronizationJob{`0,`1},NMF.Expressions.ObservingFunc{`0,System.Boolean})
  id: '#ctor(NMF.Synchronizations.ISynchronizationJob{`0,`1},NMF.Expressions.ObservingFunc{`0,System.Boolean})'
  parent: NMF.Synchronizations.LeftGuardedSynchronizationJob`2
  langs:
  - csharp
  - vb
  name: LeftGuardedSynchronizationJob(ISynchronizationJob<TLeft, TRight>, ObservingFunc<TLeft, Boolean>)
  nameWithType: LeftGuardedSynchronizationJob<TLeft, TRight>.LeftGuardedSynchronizationJob(ISynchronizationJob<TLeft, TRight>, ObservingFunc<TLeft, Boolean>)
  fullName: NMF.Synchronizations.LeftGuardedSynchronizationJob<TLeft, TRight>.LeftGuardedSynchronizationJob(NMF.Synchronizations.ISynchronizationJob<TLeft, TRight>, NMF.Expressions.ObservingFunc<TLeft, System.Boolean>)
  type: Constructor
  source:
    remote:
      path: Synchronizations/Synchronizations/GuardedSynchronizationJob.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Synchronizations/Synchronizations/GuardedSynchronizationJob.cs
    startLine: 175
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nCreates a new synchronization job guarded at the LHS\n"
  example: []
  syntax:
    content: public LeftGuardedSynchronizationJob(ISynchronizationJob<TLeft, TRight> inner, ObservingFunc<TLeft, bool> guard)
    parameters:
    - id: inner
      type: NMF.Synchronizations.ISynchronizationJob{{TLeft},{TRight}}
      description: The inner synchronization job
    - id: guard
      type: NMF.Expressions.ObservingFunc{{TLeft},System.Boolean}
      description: The guard function
    content.vb: Public Sub New(inner As ISynchronizationJob(Of TLeft, TRight), guard As ObservingFunc(Of TLeft, Boolean))
  overload: NMF.Synchronizations.LeftGuardedSynchronizationJob`2.#ctor*
  nameWithType.vb: LeftGuardedSynchronizationJob(Of TLeft, TRight).LeftGuardedSynchronizationJob(ISynchronizationJob(Of TLeft, TRight), ObservingFunc(Of TLeft, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.LeftGuardedSynchronizationJob(Of TLeft, TRight).LeftGuardedSynchronizationJob(NMF.Synchronizations.ISynchronizationJob(Of TLeft, TRight), NMF.Expressions.ObservingFunc(Of TLeft, System.Boolean))
  name.vb: LeftGuardedSynchronizationJob(ISynchronizationJob(Of TLeft, TRight), ObservingFunc(Of TLeft, Boolean))
- uid: NMF.Synchronizations.LeftGuardedSynchronizationJob`2.CreateTracker(NMF.Synchronizations.SynchronizationComputation{`0,`1})
  commentId: M:NMF.Synchronizations.LeftGuardedSynchronizationJob`2.CreateTracker(NMF.Synchronizations.SynchronizationComputation{`0,`1})
  id: CreateTracker(NMF.Synchronizations.SynchronizationComputation{`0,`1})
  parent: NMF.Synchronizations.LeftGuardedSynchronizationJob`2
  langs:
  - csharp
  - vb
  name: CreateTracker(SynchronizationComputation<TLeft, TRight>)
  nameWithType: LeftGuardedSynchronizationJob<TLeft, TRight>.CreateTracker(SynchronizationComputation<TLeft, TRight>)
  fullName: NMF.Synchronizations.LeftGuardedSynchronizationJob<TLeft, TRight>.CreateTracker(NMF.Synchronizations.SynchronizationComputation<TLeft, TRight>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/GuardedSynchronizationJob.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateTracker
    path: src/Synchronizations/Synchronizations/GuardedSynchronizationJob.cs
    startLine: 184
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  example: []
  syntax:
    content: protected override INotifyValue<bool> CreateTracker(SynchronizationComputation<TLeft, TRight> computation)
    parameters:
    - id: computation
      type: NMF.Synchronizations.SynchronizationComputation{{TLeft},{TRight}}
    return:
      type: NMF.Expressions.INotifyValue{System.Boolean}
    content.vb: Protected Overrides Function CreateTracker(computation As SynchronizationComputation(Of TLeft, TRight)) As INotifyValue(Of Boolean)
  overridden: NMF.Synchronizations.GuardedSynchronizationJob{{TLeft},{TRight}}.CreateTracker(NMF.Synchronizations.SynchronizationComputation{{TLeft},{TRight}})
  overload: NMF.Synchronizations.LeftGuardedSynchronizationJob`2.CreateTracker*
  nameWithType.vb: LeftGuardedSynchronizationJob(Of TLeft, TRight).CreateTracker(SynchronizationComputation(Of TLeft, TRight))
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: NMF.Synchronizations.LeftGuardedSynchronizationJob(Of TLeft, TRight).CreateTracker(NMF.Synchronizations.SynchronizationComputation(Of TLeft, TRight))
  name.vb: CreateTracker(SynchronizationComputation(Of TLeft, TRight))
references:
- uid: NMF.Synchronizations
  commentId: N:NMF.Synchronizations
  name: NMF.Synchronizations
  nameWithType: NMF.Synchronizations
  fullName: NMF.Synchronizations
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Synchronizations.GuardedSynchronizationJob{{TLeft},{TRight}}
  commentId: T:NMF.Synchronizations.GuardedSynchronizationJob{`0,`1}
  parent: NMF.Synchronizations
  definition: NMF.Synchronizations.GuardedSynchronizationJob`2
  name: GuardedSynchronizationJob<TLeft, TRight>
  nameWithType: GuardedSynchronizationJob<TLeft, TRight>
  fullName: NMF.Synchronizations.GuardedSynchronizationJob<TLeft, TRight>
  nameWithType.vb: GuardedSynchronizationJob(Of TLeft, TRight)
  fullName.vb: NMF.Synchronizations.GuardedSynchronizationJob(Of TLeft, TRight)
  name.vb: GuardedSynchronizationJob(Of TLeft, TRight)
  spec.csharp:
  - uid: NMF.Synchronizations.GuardedSynchronizationJob`2
    name: GuardedSynchronizationJob
    nameWithType: GuardedSynchronizationJob
    fullName: NMF.Synchronizations.GuardedSynchronizationJob
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Synchronizations.GuardedSynchronizationJob`2
    name: GuardedSynchronizationJob
    nameWithType: GuardedSynchronizationJob
    fullName: NMF.Synchronizations.GuardedSynchronizationJob
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.ISynchronizationJob{{TLeft},{TRight}}
  commentId: T:NMF.Synchronizations.ISynchronizationJob{`0,`1}
  parent: NMF.Synchronizations
  definition: NMF.Synchronizations.ISynchronizationJob`2
  name: ISynchronizationJob<TLeft, TRight>
  nameWithType: ISynchronizationJob<TLeft, TRight>
  fullName: NMF.Synchronizations.ISynchronizationJob<TLeft, TRight>
  nameWithType.vb: ISynchronizationJob(Of TLeft, TRight)
  fullName.vb: NMF.Synchronizations.ISynchronizationJob(Of TLeft, TRight)
  name.vb: ISynchronizationJob(Of TLeft, TRight)
  spec.csharp:
  - uid: NMF.Synchronizations.ISynchronizationJob`2
    name: ISynchronizationJob
    nameWithType: ISynchronizationJob
    fullName: NMF.Synchronizations.ISynchronizationJob
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Synchronizations.ISynchronizationJob`2
    name: ISynchronizationJob
    nameWithType: ISynchronizationJob
    fullName: NMF.Synchronizations.ISynchronizationJob
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.GuardedSynchronizationJob{{TLeft},{TRight}}.IsEarly
  commentId: P:NMF.Synchronizations.GuardedSynchronizationJob{`0,`1}.IsEarly
  parent: NMF.Synchronizations.GuardedSynchronizationJob{{TLeft},{TRight}}
  definition: NMF.Synchronizations.GuardedSynchronizationJob`2.IsEarly
  name: IsEarly
  nameWithType: GuardedSynchronizationJob<TLeft, TRight>.IsEarly
  fullName: NMF.Synchronizations.GuardedSynchronizationJob<TLeft, TRight>.IsEarly
  nameWithType.vb: GuardedSynchronizationJob(Of TLeft, TRight).IsEarly
  fullName.vb: NMF.Synchronizations.GuardedSynchronizationJob(Of TLeft, TRight).IsEarly
- uid: NMF.Synchronizations.GuardedSynchronizationJob{{TLeft},{TRight}}.Perform(NMF.Synchronizations.SynchronizationComputation{{TLeft},{TRight}},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
  commentId: M:NMF.Synchronizations.GuardedSynchronizationJob{`0,`1}.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
  parent: NMF.Synchronizations.GuardedSynchronizationJob{{TLeft},{TRight}}
  definition: NMF.Synchronizations.GuardedSynchronizationJob`2.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
  name: Perform(SynchronizationComputation<TLeft, TRight>, SynchronizationDirection, ISynchronizationContext)
  nameWithType: GuardedSynchronizationJob<TLeft, TRight>.Perform(SynchronizationComputation<TLeft, TRight>, SynchronizationDirection, ISynchronizationContext)
  fullName: NMF.Synchronizations.GuardedSynchronizationJob<TLeft, TRight>.Perform(NMF.Synchronizations.SynchronizationComputation<TLeft, TRight>, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext)
  nameWithType.vb: GuardedSynchronizationJob(Of TLeft, TRight).Perform(SynchronizationComputation(Of TLeft, TRight), SynchronizationDirection, ISynchronizationContext)
  fullName.vb: NMF.Synchronizations.GuardedSynchronizationJob(Of TLeft, TRight).Perform(NMF.Synchronizations.SynchronizationComputation(Of TLeft, TRight), NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext)
  name.vb: Perform(SynchronizationComputation(Of TLeft, TRight), SynchronizationDirection, ISynchronizationContext)
  spec.csharp:
  - uid: NMF.Synchronizations.GuardedSynchronizationJob`2.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
    name: Perform
    nameWithType: GuardedSynchronizationJob<TLeft, TRight>.Perform
    fullName: NMF.Synchronizations.GuardedSynchronizationJob<TLeft, TRight>.Perform
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.GuardedSynchronizationJob`2.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
    name: Perform
    nameWithType: GuardedSynchronizationJob(Of TLeft, TRight).Perform
    fullName: NMF.Synchronizations.GuardedSynchronizationJob(Of TLeft, TRight).Perform
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.GuardedSynchronizationJob{{TLeft},{TRight}}.CreateTracker(NMF.Synchronizations.SynchronizationComputation{{TLeft},{TRight}})
  commentId: M:NMF.Synchronizations.GuardedSynchronizationJob{`0,`1}.CreateTracker(NMF.Synchronizations.SynchronizationComputation{`0,`1})
  parent: NMF.Synchronizations.GuardedSynchronizationJob{{TLeft},{TRight}}
  definition: NMF.Synchronizations.GuardedSynchronizationJob`2.CreateTracker(NMF.Synchronizations.SynchronizationComputation{`0,`1})
  name: CreateTracker(SynchronizationComputation<TLeft, TRight>)
  nameWithType: GuardedSynchronizationJob<TLeft, TRight>.CreateTracker(SynchronizationComputation<TLeft, TRight>)
  fullName: NMF.Synchronizations.GuardedSynchronizationJob<TLeft, TRight>.CreateTracker(NMF.Synchronizations.SynchronizationComputation<TLeft, TRight>)
  nameWithType.vb: GuardedSynchronizationJob(Of TLeft, TRight).CreateTracker(SynchronizationComputation(Of TLeft, TRight))
  fullName.vb: NMF.Synchronizations.GuardedSynchronizationJob(Of TLeft, TRight).CreateTracker(NMF.Synchronizations.SynchronizationComputation(Of TLeft, TRight))
  name.vb: CreateTracker(SynchronizationComputation(Of TLeft, TRight))
  spec.csharp:
  - uid: NMF.Synchronizations.GuardedSynchronizationJob`2.CreateTracker(NMF.Synchronizations.SynchronizationComputation{`0,`1})
    name: CreateTracker
    nameWithType: GuardedSynchronizationJob<TLeft, TRight>.CreateTracker
    fullName: NMF.Synchronizations.GuardedSynchronizationJob<TLeft, TRight>.CreateTracker
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.GuardedSynchronizationJob`2.CreateTracker(NMF.Synchronizations.SynchronizationComputation{`0,`1})
    name: CreateTracker
    nameWithType: GuardedSynchronizationJob(Of TLeft, TRight).CreateTracker
    fullName: NMF.Synchronizations.GuardedSynchronizationJob(Of TLeft, TRight).CreateTracker
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Synchronizations.GuardedSynchronizationJob`2
  commentId: T:NMF.Synchronizations.GuardedSynchronizationJob`2
  name: GuardedSynchronizationJob<TLeft, TRight>
  nameWithType: GuardedSynchronizationJob<TLeft, TRight>
  fullName: NMF.Synchronizations.GuardedSynchronizationJob<TLeft, TRight>
  nameWithType.vb: GuardedSynchronizationJob(Of TLeft, TRight)
  fullName.vb: NMF.Synchronizations.GuardedSynchronizationJob(Of TLeft, TRight)
  name.vb: GuardedSynchronizationJob(Of TLeft, TRight)
  spec.csharp:
  - uid: NMF.Synchronizations.GuardedSynchronizationJob`2
    name: GuardedSynchronizationJob
    nameWithType: GuardedSynchronizationJob
    fullName: NMF.Synchronizations.GuardedSynchronizationJob
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Synchronizations.GuardedSynchronizationJob`2
    name: GuardedSynchronizationJob
    nameWithType: GuardedSynchronizationJob
    fullName: NMF.Synchronizations.GuardedSynchronizationJob
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.ISynchronizationJob`2
  commentId: T:NMF.Synchronizations.ISynchronizationJob`2
  name: ISynchronizationJob<TLeft, TRight>
  nameWithType: ISynchronizationJob<TLeft, TRight>
  fullName: NMF.Synchronizations.ISynchronizationJob<TLeft, TRight>
  nameWithType.vb: ISynchronizationJob(Of TLeft, TRight)
  fullName.vb: NMF.Synchronizations.ISynchronizationJob(Of TLeft, TRight)
  name.vb: ISynchronizationJob(Of TLeft, TRight)
  spec.csharp:
  - uid: NMF.Synchronizations.ISynchronizationJob`2
    name: ISynchronizationJob
    nameWithType: ISynchronizationJob
    fullName: NMF.Synchronizations.ISynchronizationJob
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Synchronizations.ISynchronizationJob`2
    name: ISynchronizationJob
    nameWithType: ISynchronizationJob
    fullName: NMF.Synchronizations.ISynchronizationJob
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.GuardedSynchronizationJob`2.IsEarly
  commentId: P:NMF.Synchronizations.GuardedSynchronizationJob`2.IsEarly
  name: IsEarly
  nameWithType: GuardedSynchronizationJob<TLeft, TRight>.IsEarly
  fullName: NMF.Synchronizations.GuardedSynchronizationJob<TLeft, TRight>.IsEarly
  nameWithType.vb: GuardedSynchronizationJob(Of TLeft, TRight).IsEarly
  fullName.vb: NMF.Synchronizations.GuardedSynchronizationJob(Of TLeft, TRight).IsEarly
- uid: NMF.Synchronizations.GuardedSynchronizationJob`2.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
  commentId: M:NMF.Synchronizations.GuardedSynchronizationJob`2.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
  name: Perform(SynchronizationComputation<TLeft, TRight>, SynchronizationDirection, ISynchronizationContext)
  nameWithType: GuardedSynchronizationJob<TLeft, TRight>.Perform(SynchronizationComputation<TLeft, TRight>, SynchronizationDirection, ISynchronizationContext)
  fullName: NMF.Synchronizations.GuardedSynchronizationJob<TLeft, TRight>.Perform(NMF.Synchronizations.SynchronizationComputation<TLeft, TRight>, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext)
  nameWithType.vb: GuardedSynchronizationJob(Of TLeft, TRight).Perform(SynchronizationComputation(Of TLeft, TRight), SynchronizationDirection, ISynchronizationContext)
  fullName.vb: NMF.Synchronizations.GuardedSynchronizationJob(Of TLeft, TRight).Perform(NMF.Synchronizations.SynchronizationComputation(Of TLeft, TRight), NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext)
  name.vb: Perform(SynchronizationComputation(Of TLeft, TRight), SynchronizationDirection, ISynchronizationContext)
  spec.csharp:
  - uid: NMF.Synchronizations.GuardedSynchronizationJob`2.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
    name: Perform
    nameWithType: GuardedSynchronizationJob<TLeft, TRight>.Perform
    fullName: NMF.Synchronizations.GuardedSynchronizationJob<TLeft, TRight>.Perform
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.GuardedSynchronizationJob`2.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
    name: Perform
    nameWithType: GuardedSynchronizationJob(Of TLeft, TRight).Perform
    fullName: NMF.Synchronizations.GuardedSynchronizationJob(Of TLeft, TRight).Perform
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.GuardedSynchronizationJob`2.CreateTracker(NMF.Synchronizations.SynchronizationComputation{`0,`1})
  commentId: M:NMF.Synchronizations.GuardedSynchronizationJob`2.CreateTracker(NMF.Synchronizations.SynchronizationComputation{`0,`1})
  name: CreateTracker(SynchronizationComputation<TLeft, TRight>)
  nameWithType: GuardedSynchronizationJob<TLeft, TRight>.CreateTracker(SynchronizationComputation<TLeft, TRight>)
  fullName: NMF.Synchronizations.GuardedSynchronizationJob<TLeft, TRight>.CreateTracker(NMF.Synchronizations.SynchronizationComputation<TLeft, TRight>)
  nameWithType.vb: GuardedSynchronizationJob(Of TLeft, TRight).CreateTracker(SynchronizationComputation(Of TLeft, TRight))
  fullName.vb: NMF.Synchronizations.GuardedSynchronizationJob(Of TLeft, TRight).CreateTracker(NMF.Synchronizations.SynchronizationComputation(Of TLeft, TRight))
  name.vb: CreateTracker(SynchronizationComputation(Of TLeft, TRight))
  spec.csharp:
  - uid: NMF.Synchronizations.GuardedSynchronizationJob`2.CreateTracker(NMF.Synchronizations.SynchronizationComputation{`0,`1})
    name: CreateTracker
    nameWithType: GuardedSynchronizationJob<TLeft, TRight>.CreateTracker
    fullName: NMF.Synchronizations.GuardedSynchronizationJob<TLeft, TRight>.CreateTracker
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.GuardedSynchronizationJob`2.CreateTracker(NMF.Synchronizations.SynchronizationComputation{`0,`1})
    name: CreateTracker
    nameWithType: GuardedSynchronizationJob(Of TLeft, TRight).CreateTracker
    fullName: NMF.Synchronizations.GuardedSynchronizationJob(Of TLeft, TRight).CreateTracker
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.LeftGuardedSynchronizationJob`2.#ctor*
  commentId: Overload:NMF.Synchronizations.LeftGuardedSynchronizationJob`2.#ctor
  name: LeftGuardedSynchronizationJob
  nameWithType: LeftGuardedSynchronizationJob<TLeft, TRight>.LeftGuardedSynchronizationJob
  fullName: NMF.Synchronizations.LeftGuardedSynchronizationJob<TLeft, TRight>.LeftGuardedSynchronizationJob
  nameWithType.vb: LeftGuardedSynchronizationJob(Of TLeft, TRight).LeftGuardedSynchronizationJob
  fullName.vb: NMF.Synchronizations.LeftGuardedSynchronizationJob(Of TLeft, TRight).LeftGuardedSynchronizationJob
- uid: NMF.Expressions.ObservingFunc{{TLeft},System.Boolean}
  commentId: T:NMF.Expressions.ObservingFunc{`0,System.Boolean}
  parent: NMF.Expressions
  definition: NMF.Expressions.ObservingFunc`2
  name: ObservingFunc<TLeft, Boolean>
  nameWithType: ObservingFunc<TLeft, Boolean>
  fullName: NMF.Expressions.ObservingFunc<TLeft, System.Boolean>
  nameWithType.vb: ObservingFunc(Of TLeft, Boolean)
  fullName.vb: NMF.Expressions.ObservingFunc(Of TLeft, System.Boolean)
  name.vb: ObservingFunc(Of TLeft, Boolean)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.ObservingFunc`2
  commentId: T:NMF.Expressions.ObservingFunc`2
  name: ObservingFunc<T1, TResult>
  nameWithType: ObservingFunc<T1, TResult>
  fullName: NMF.Expressions.ObservingFunc<T1, TResult>
  nameWithType.vb: ObservingFunc(Of T1, TResult)
  fullName.vb: NMF.Expressions.ObservingFunc(Of T1, TResult)
  name.vb: ObservingFunc(Of T1, TResult)
  spec.csharp:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.ObservingFunc`2
    name: ObservingFunc
    nameWithType: ObservingFunc
    fullName: NMF.Expressions.ObservingFunc
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: NMF.Synchronizations.LeftGuardedSynchronizationJob`2.CreateTracker*
  commentId: Overload:NMF.Synchronizations.LeftGuardedSynchronizationJob`2.CreateTracker
  name: CreateTracker
  nameWithType: LeftGuardedSynchronizationJob<TLeft, TRight>.CreateTracker
  fullName: NMF.Synchronizations.LeftGuardedSynchronizationJob<TLeft, TRight>.CreateTracker
  nameWithType.vb: LeftGuardedSynchronizationJob(Of TLeft, TRight).CreateTracker
  fullName.vb: NMF.Synchronizations.LeftGuardedSynchronizationJob(Of TLeft, TRight).CreateTracker
- uid: NMF.Synchronizations.SynchronizationComputation{{TLeft},{TRight}}
  commentId: T:NMF.Synchronizations.SynchronizationComputation{`0,`1}
  parent: NMF.Synchronizations
  definition: NMF.Synchronizations.SynchronizationComputation`2
  name: SynchronizationComputation<TLeft, TRight>
  nameWithType: SynchronizationComputation<TLeft, TRight>
  fullName: NMF.Synchronizations.SynchronizationComputation<TLeft, TRight>
  nameWithType.vb: SynchronizationComputation(Of TLeft, TRight)
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TLeft, TRight)
  name.vb: SynchronizationComputation(Of TLeft, TRight)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue{System.Boolean}
  commentId: T:NMF.Expressions.INotifyValue{System.Boolean}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<Boolean>
  nameWithType: INotifyValue<Boolean>
  fullName: NMF.Expressions.INotifyValue<System.Boolean>
  nameWithType.vb: INotifyValue(Of Boolean)
  fullName.vb: NMF.Expressions.INotifyValue(Of System.Boolean)
  name.vb: INotifyValue(Of Boolean)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationComputation`2
  commentId: T:NMF.Synchronizations.SynchronizationComputation`2
  name: SynchronizationComputation<TIn, TOut>
  nameWithType: SynchronizationComputation<TIn, TOut>
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut)
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut)
  name.vb: SynchronizationComputation(Of TIn, TOut)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue`1
  commentId: T:NMF.Expressions.INotifyValue`1
  name: INotifyValue<T>
  nameWithType: INotifyValue<T>
  fullName: NMF.Expressions.INotifyValue<T>
  nameWithType.vb: INotifyValue(Of T)
  fullName.vb: NMF.Expressions.INotifyValue(Of T)
  name.vb: INotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
