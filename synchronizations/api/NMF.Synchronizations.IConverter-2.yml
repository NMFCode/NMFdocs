### YamlMime:ManagedReference
items:
- uid: NMF.Synchronizations.IConverter`2
  commentId: T:NMF.Synchronizations.IConverter`2
  id: IConverter`2
  parent: NMF.Synchronizations
  children:
  - NMF.Synchronizations.IConverter`2.ConvertLeftToRight(`0,`1)
  - NMF.Synchronizations.IConverter`2.ConvertRightToLeft(`1,`0)
  langs:
  - csharp
  - vb
  name: IConverter<TLeft, TRight>
  nameWithType: IConverter<TLeft, TRight>
  fullName: NMF.Synchronizations.IConverter<TLeft, TRight>
  type: Interface
  source:
    remote:
      path: Synchronizations/Synchronizations/Converter.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IConverter
    path: src/Synchronizations/Synchronizations/Converter.cs
    startLine: 9
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public interface IConverter<TLeft, TRight>
    typeParameters:
    - id: TLeft
    - id: TRight
    content.vb: Public Interface IConverter(Of TLeft, TRight)
  nameWithType.vb: IConverter(Of TLeft, TRight)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: NMF.Synchronizations.IConverter(Of TLeft, TRight)
  name.vb: IConverter(Of TLeft, TRight)
- uid: NMF.Synchronizations.IConverter`2.ConvertLeftToRight(`0,`1)
  commentId: M:NMF.Synchronizations.IConverter`2.ConvertLeftToRight(`0,`1)
  id: ConvertLeftToRight(`0,`1)
  parent: NMF.Synchronizations.IConverter`2
  langs:
  - csharp
  - vb
  name: ConvertLeftToRight(TLeft, TRight)
  nameWithType: IConverter<TLeft, TRight>.ConvertLeftToRight(TLeft, TRight)
  fullName: NMF.Synchronizations.IConverter<TLeft, TRight>.ConvertLeftToRight(TLeft, TRight)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Converter.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ConvertLeftToRight
    path: src/Synchronizations/Synchronizations/Converter.cs
    startLine: 11
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: TRight ConvertLeftToRight(TLeft left, TRight currentRight)
    parameters:
    - id: left
      type: '{TLeft}'
    - id: currentRight
      type: '{TRight}'
    return:
      type: '{TRight}'
    content.vb: Function ConvertLeftToRight(left As TLeft, currentRight As TRight) As TRight
  overload: NMF.Synchronizations.IConverter`2.ConvertLeftToRight*
  nameWithType.vb: IConverter(Of TLeft, TRight).ConvertLeftToRight(TLeft, TRight)
  fullName.vb: NMF.Synchronizations.IConverter(Of TLeft, TRight).ConvertLeftToRight(TLeft, TRight)
- uid: NMF.Synchronizations.IConverter`2.ConvertRightToLeft(`1,`0)
  commentId: M:NMF.Synchronizations.IConverter`2.ConvertRightToLeft(`1,`0)
  id: ConvertRightToLeft(`1,`0)
  parent: NMF.Synchronizations.IConverter`2
  langs:
  - csharp
  - vb
  name: ConvertRightToLeft(TRight, TLeft)
  nameWithType: IConverter<TLeft, TRight>.ConvertRightToLeft(TRight, TLeft)
  fullName: NMF.Synchronizations.IConverter<TLeft, TRight>.ConvertRightToLeft(TRight, TLeft)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Converter.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ConvertRightToLeft
    path: src/Synchronizations/Synchronizations/Converter.cs
    startLine: 13
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: TLeft ConvertRightToLeft(TRight right, TLeft currentLeft)
    parameters:
    - id: right
      type: '{TRight}'
    - id: currentLeft
      type: '{TLeft}'
    return:
      type: '{TLeft}'
    content.vb: Function ConvertRightToLeft(right As TRight, currentLeft As TLeft) As TLeft
  overload: NMF.Synchronizations.IConverter`2.ConvertRightToLeft*
  nameWithType.vb: IConverter(Of TLeft, TRight).ConvertRightToLeft(TRight, TLeft)
  fullName.vb: NMF.Synchronizations.IConverter(Of TLeft, TRight).ConvertRightToLeft(TRight, TLeft)
references:
- uid: NMF.Synchronizations
  commentId: N:NMF.Synchronizations
  name: NMF.Synchronizations
  nameWithType: NMF.Synchronizations
  fullName: NMF.Synchronizations
- uid: NMF.Synchronizations.IConverter`2.ConvertLeftToRight*
  commentId: Overload:NMF.Synchronizations.IConverter`2.ConvertLeftToRight
  name: ConvertLeftToRight
  nameWithType: IConverter<TLeft, TRight>.ConvertLeftToRight
  fullName: NMF.Synchronizations.IConverter<TLeft, TRight>.ConvertLeftToRight
  nameWithType.vb: IConverter(Of TLeft, TRight).ConvertLeftToRight
  fullName.vb: NMF.Synchronizations.IConverter(Of TLeft, TRight).ConvertLeftToRight
- uid: '{TLeft}'
  commentId: '!:TLeft'
  definition: TLeft
  name: TLeft
  nameWithType: TLeft
  fullName: TLeft
- uid: '{TRight}'
  commentId: '!:TRight'
  definition: TRight
  name: TRight
  nameWithType: TRight
  fullName: TRight
- uid: TLeft
  name: TLeft
  nameWithType: TLeft
  fullName: TLeft
- uid: TRight
  name: TRight
  nameWithType: TRight
  fullName: TRight
- uid: NMF.Synchronizations.IConverter`2.ConvertRightToLeft*
  commentId: Overload:NMF.Synchronizations.IConverter`2.ConvertRightToLeft
  name: ConvertRightToLeft
  nameWithType: IConverter<TLeft, TRight>.ConvertRightToLeft
  fullName: NMF.Synchronizations.IConverter<TLeft, TRight>.ConvertRightToLeft
  nameWithType.vb: IConverter(Of TLeft, TRight).ConvertRightToLeft
  fullName.vb: NMF.Synchronizations.IConverter(Of TLeft, TRight).ConvertRightToLeft
