### YamlMime:ManagedReference
items:
- uid: NMF.Synchronizations.OpaqueSynchronizationJob`2
  commentId: T:NMF.Synchronizations.OpaqueSynchronizationJob`2
  id: OpaqueSynchronizationJob`2
  parent: NMF.Synchronizations
  children:
  - NMF.Synchronizations.OpaqueSynchronizationJob`2.#ctor(System.Func{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable})
  - NMF.Synchronizations.OpaqueSynchronizationJob`2.Action
  - NMF.Synchronizations.OpaqueSynchronizationJob`2.IsEarly
  - NMF.Synchronizations.OpaqueSynchronizationJob`2.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
  langs:
  - csharp
  - vb
  name: OpaqueSynchronizationJob<TLeft, TRight>
  nameWithType: OpaqueSynchronizationJob<TLeft, TRight>
  fullName: NMF.Synchronizations.OpaqueSynchronizationJob<TLeft, TRight>
  type: Class
  source:
    remote:
      path: Synchronizations/Synchronizations/OpaqueSynchronizationJob.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OpaqueSynchronizationJob
    path: src/Synchronizations/Synchronizations/OpaqueSynchronizationJob.cs
    startLine: 8
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: 'public class OpaqueSynchronizationJob<TLeft, TRight> : ISynchronizationJob<TLeft, TRight> where TLeft : class where TRight : class'
    typeParameters:
    - id: TLeft
    - id: TRight
    content.vb: >-
      Public Class OpaqueSynchronizationJob(Of TLeft As Class, TRight As Class)

          Implements ISynchronizationJob(Of TLeft, TRight)
  inheritance:
  - System.Object
  implements:
  - NMF.Synchronizations.ISynchronizationJob{{TLeft},{TRight}}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: OpaqueSynchronizationJob(Of TLeft, TRight)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: NMF.Synchronizations.OpaqueSynchronizationJob(Of TLeft, TRight)
  name.vb: OpaqueSynchronizationJob(Of TLeft, TRight)
- uid: NMF.Synchronizations.OpaqueSynchronizationJob`2.Action
  commentId: P:NMF.Synchronizations.OpaqueSynchronizationJob`2.Action
  id: Action
  parent: NMF.Synchronizations.OpaqueSynchronizationJob`2
  langs:
  - csharp
  - vb
  name: Action
  nameWithType: OpaqueSynchronizationJob<TLeft, TRight>.Action
  fullName: NMF.Synchronizations.OpaqueSynchronizationJob<TLeft, TRight>.Action
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/OpaqueSynchronizationJob.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Action
    path: src/Synchronizations/Synchronizations/OpaqueSynchronizationJob.cs
    startLine: 12
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public Func<TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable> Action { get; }
    parameters: []
    return:
      type: System.Func{{TLeft},{TRight},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable}
    content.vb: Public ReadOnly Property Action As Func(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable)
  overload: NMF.Synchronizations.OpaqueSynchronizationJob`2.Action*
  nameWithType.vb: OpaqueSynchronizationJob(Of TLeft, TRight).Action
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Synchronizations.OpaqueSynchronizationJob(Of TLeft, TRight).Action
- uid: NMF.Synchronizations.OpaqueSynchronizationJob`2.#ctor(System.Func{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable})
  commentId: M:NMF.Synchronizations.OpaqueSynchronizationJob`2.#ctor(System.Func{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable})
  id: '#ctor(System.Func{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable})'
  parent: NMF.Synchronizations.OpaqueSynchronizationJob`2
  langs:
  - csharp
  - vb
  name: OpaqueSynchronizationJob(Func<TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable>)
  nameWithType: OpaqueSynchronizationJob<TLeft, TRight>.OpaqueSynchronizationJob(Func<TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable>)
  fullName: NMF.Synchronizations.OpaqueSynchronizationJob<TLeft, TRight>.OpaqueSynchronizationJob(System.Func<TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext, System.IDisposable>)
  type: Constructor
  source:
    remote:
      path: Synchronizations/Synchronizations/OpaqueSynchronizationJob.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Synchronizations/Synchronizations/OpaqueSynchronizationJob.cs
    startLine: 14
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public OpaqueSynchronizationJob(Func<TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable> action)
    parameters:
    - id: action
      type: System.Func{{TLeft},{TRight},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable}
    content.vb: Public Sub New(action As Func(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable))
  overload: NMF.Synchronizations.OpaqueSynchronizationJob`2.#ctor*
  nameWithType.vb: OpaqueSynchronizationJob(Of TLeft, TRight).OpaqueSynchronizationJob(Func(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.OpaqueSynchronizationJob(Of TLeft, TRight).OpaqueSynchronizationJob(System.Func(Of TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext, System.IDisposable))
  name.vb: OpaqueSynchronizationJob(Func(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable))
- uid: NMF.Synchronizations.OpaqueSynchronizationJob`2.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
  commentId: M:NMF.Synchronizations.OpaqueSynchronizationJob`2.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
  id: Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
  parent: NMF.Synchronizations.OpaqueSynchronizationJob`2
  langs:
  - csharp
  - vb
  name: Perform(SynchronizationComputation<TLeft, TRight>, SynchronizationDirection, ISynchronizationContext)
  nameWithType: OpaqueSynchronizationJob<TLeft, TRight>.Perform(SynchronizationComputation<TLeft, TRight>, SynchronizationDirection, ISynchronizationContext)
  fullName: NMF.Synchronizations.OpaqueSynchronizationJob<TLeft, TRight>.Perform(NMF.Synchronizations.SynchronizationComputation<TLeft, TRight>, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/OpaqueSynchronizationJob.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Perform
    path: src/Synchronizations/Synchronizations/OpaqueSynchronizationJob.cs
    startLine: 19
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public IDisposable Perform(SynchronizationComputation<TLeft, TRight> computation, SynchronizationDirection direction, ISynchronizationContext context)
    parameters:
    - id: computation
      type: NMF.Synchronizations.SynchronizationComputation{{TLeft},{TRight}}
    - id: direction
      type: NMF.Synchronizations.SynchronizationDirection
    - id: context
      type: NMF.Synchronizations.ISynchronizationContext
    return:
      type: System.IDisposable
    content.vb: Public Function Perform(computation As SynchronizationComputation(Of TLeft, TRight), direction As SynchronizationDirection, context As ISynchronizationContext) As IDisposable
  overload: NMF.Synchronizations.OpaqueSynchronizationJob`2.Perform*
  implements:
  - NMF.Synchronizations.ISynchronizationJob{{TLeft},{TRight}}.Perform(NMF.Synchronizations.SynchronizationComputation{{TLeft},{TRight}},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
  nameWithType.vb: OpaqueSynchronizationJob(Of TLeft, TRight).Perform(SynchronizationComputation(Of TLeft, TRight), SynchronizationDirection, ISynchronizationContext)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.OpaqueSynchronizationJob(Of TLeft, TRight).Perform(NMF.Synchronizations.SynchronizationComputation(Of TLeft, TRight), NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext)
  name.vb: Perform(SynchronizationComputation(Of TLeft, TRight), SynchronizationDirection, ISynchronizationContext)
- uid: NMF.Synchronizations.OpaqueSynchronizationJob`2.IsEarly
  commentId: P:NMF.Synchronizations.OpaqueSynchronizationJob`2.IsEarly
  id: IsEarly
  parent: NMF.Synchronizations.OpaqueSynchronizationJob`2
  langs:
  - csharp
  - vb
  name: IsEarly
  nameWithType: OpaqueSynchronizationJob<TLeft, TRight>.IsEarly
  fullName: NMF.Synchronizations.OpaqueSynchronizationJob<TLeft, TRight>.IsEarly
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/OpaqueSynchronizationJob.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsEarly
    path: src/Synchronizations/Synchronizations/OpaqueSynchronizationJob.cs
    startLine: 31
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public bool IsEarly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsEarly As Boolean
  overload: NMF.Synchronizations.OpaqueSynchronizationJob`2.IsEarly*
  implements:
  - NMF.Synchronizations.ISynchronizationJob{{TLeft},{TRight}}.IsEarly
  nameWithType.vb: OpaqueSynchronizationJob(Of TLeft, TRight).IsEarly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Synchronizations.OpaqueSynchronizationJob(Of TLeft, TRight).IsEarly
references:
- uid: NMF.Synchronizations
  commentId: N:NMF.Synchronizations
  name: NMF.Synchronizations
  nameWithType: NMF.Synchronizations
  fullName: NMF.Synchronizations
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Synchronizations.ISynchronizationJob{{TLeft},{TRight}}
  commentId: T:NMF.Synchronizations.ISynchronizationJob{`0,`1}
  parent: NMF.Synchronizations
  definition: NMF.Synchronizations.ISynchronizationJob`2
  name: ISynchronizationJob<TLeft, TRight>
  nameWithType: ISynchronizationJob<TLeft, TRight>
  fullName: NMF.Synchronizations.ISynchronizationJob<TLeft, TRight>
  nameWithType.vb: ISynchronizationJob(Of TLeft, TRight)
  fullName.vb: NMF.Synchronizations.ISynchronizationJob(Of TLeft, TRight)
  name.vb: ISynchronizationJob(Of TLeft, TRight)
  spec.csharp:
  - uid: NMF.Synchronizations.ISynchronizationJob`2
    name: ISynchronizationJob
    nameWithType: ISynchronizationJob
    fullName: NMF.Synchronizations.ISynchronizationJob
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Synchronizations.ISynchronizationJob`2
    name: ISynchronizationJob
    nameWithType: ISynchronizationJob
    fullName: NMF.Synchronizations.ISynchronizationJob
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Synchronizations.ISynchronizationJob`2
  commentId: T:NMF.Synchronizations.ISynchronizationJob`2
  name: ISynchronizationJob<TLeft, TRight>
  nameWithType: ISynchronizationJob<TLeft, TRight>
  fullName: NMF.Synchronizations.ISynchronizationJob<TLeft, TRight>
  nameWithType.vb: ISynchronizationJob(Of TLeft, TRight)
  fullName.vb: NMF.Synchronizations.ISynchronizationJob(Of TLeft, TRight)
  name.vb: ISynchronizationJob(Of TLeft, TRight)
  spec.csharp:
  - uid: NMF.Synchronizations.ISynchronizationJob`2
    name: ISynchronizationJob
    nameWithType: ISynchronizationJob
    fullName: NMF.Synchronizations.ISynchronizationJob
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Synchronizations.ISynchronizationJob`2
    name: ISynchronizationJob
    nameWithType: ISynchronizationJob
    fullName: NMF.Synchronizations.ISynchronizationJob
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.OpaqueSynchronizationJob`2.Action*
  commentId: Overload:NMF.Synchronizations.OpaqueSynchronizationJob`2.Action
  name: Action
  nameWithType: OpaqueSynchronizationJob<TLeft, TRight>.Action
  fullName: NMF.Synchronizations.OpaqueSynchronizationJob<TLeft, TRight>.Action
  nameWithType.vb: OpaqueSynchronizationJob(Of TLeft, TRight).Action
  fullName.vb: NMF.Synchronizations.OpaqueSynchronizationJob(Of TLeft, TRight).Action
- uid: System.Func{{TLeft},{TRight},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable}
  commentId: T:System.Func{`0,`1,NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext,System.IDisposable}
  parent: System
  definition: System.Func`5
  name: Func<TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable>
  nameWithType: Func<TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable>
  fullName: System.Func<TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext, System.IDisposable>
  nameWithType.vb: Func(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable)
  fullName.vb: System.Func(Of TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext, System.IDisposable)
  name.vb: Func(Of TLeft, TRight, SynchronizationDirection, ISynchronizationContext, IDisposable)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: System.IDisposable
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: System.IDisposable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`5
  commentId: T:System.Func`5
  isExternal: true
  name: Func<T1, T2, T3, T4, TResult>
  nameWithType: Func<T1, T2, T3, T4, TResult>
  fullName: System.Func<T1, T2, T3, T4, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, TResult)
  fullName.vb: System.Func(Of T1, T2, T3, T4, TResult)
  name.vb: Func(Of T1, T2, T3, T4, TResult)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.OpaqueSynchronizationJob`2.#ctor*
  commentId: Overload:NMF.Synchronizations.OpaqueSynchronizationJob`2.#ctor
  name: OpaqueSynchronizationJob
  nameWithType: OpaqueSynchronizationJob<TLeft, TRight>.OpaqueSynchronizationJob
  fullName: NMF.Synchronizations.OpaqueSynchronizationJob<TLeft, TRight>.OpaqueSynchronizationJob
  nameWithType.vb: OpaqueSynchronizationJob(Of TLeft, TRight).OpaqueSynchronizationJob
  fullName.vb: NMF.Synchronizations.OpaqueSynchronizationJob(Of TLeft, TRight).OpaqueSynchronizationJob
- uid: NMF.Synchronizations.OpaqueSynchronizationJob`2.Perform*
  commentId: Overload:NMF.Synchronizations.OpaqueSynchronizationJob`2.Perform
  name: Perform
  nameWithType: OpaqueSynchronizationJob<TLeft, TRight>.Perform
  fullName: NMF.Synchronizations.OpaqueSynchronizationJob<TLeft, TRight>.Perform
  nameWithType.vb: OpaqueSynchronizationJob(Of TLeft, TRight).Perform
  fullName.vb: NMF.Synchronizations.OpaqueSynchronizationJob(Of TLeft, TRight).Perform
- uid: NMF.Synchronizations.ISynchronizationJob{{TLeft},{TRight}}.Perform(NMF.Synchronizations.SynchronizationComputation{{TLeft},{TRight}},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
  commentId: M:NMF.Synchronizations.ISynchronizationJob{`0,`1}.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
  parent: NMF.Synchronizations.ISynchronizationJob{{TLeft},{TRight}}
  definition: NMF.Synchronizations.ISynchronizationJob`2.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
  name: Perform(SynchronizationComputation<TLeft, TRight>, SynchronizationDirection, ISynchronizationContext)
  nameWithType: ISynchronizationJob<TLeft, TRight>.Perform(SynchronizationComputation<TLeft, TRight>, SynchronizationDirection, ISynchronizationContext)
  fullName: NMF.Synchronizations.ISynchronizationJob<TLeft, TRight>.Perform(NMF.Synchronizations.SynchronizationComputation<TLeft, TRight>, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext)
  nameWithType.vb: ISynchronizationJob(Of TLeft, TRight).Perform(SynchronizationComputation(Of TLeft, TRight), SynchronizationDirection, ISynchronizationContext)
  fullName.vb: NMF.Synchronizations.ISynchronizationJob(Of TLeft, TRight).Perform(NMF.Synchronizations.SynchronizationComputation(Of TLeft, TRight), NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext)
  name.vb: Perform(SynchronizationComputation(Of TLeft, TRight), SynchronizationDirection, ISynchronizationContext)
  spec.csharp:
  - uid: NMF.Synchronizations.ISynchronizationJob`2.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
    name: Perform
    nameWithType: ISynchronizationJob<TLeft, TRight>.Perform
    fullName: NMF.Synchronizations.ISynchronizationJob<TLeft, TRight>.Perform
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.ISynchronizationJob`2.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
    name: Perform
    nameWithType: ISynchronizationJob(Of TLeft, TRight).Perform
    fullName: NMF.Synchronizations.ISynchronizationJob(Of TLeft, TRight).Perform
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationComputation{{TLeft},{TRight}}
  commentId: T:NMF.Synchronizations.SynchronizationComputation{`0,`1}
  parent: NMF.Synchronizations
  definition: NMF.Synchronizations.SynchronizationComputation`2
  name: SynchronizationComputation<TLeft, TRight>
  nameWithType: SynchronizationComputation<TLeft, TRight>
  fullName: NMF.Synchronizations.SynchronizationComputation<TLeft, TRight>
  nameWithType.vb: SynchronizationComputation(Of TLeft, TRight)
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TLeft, TRight)
  name.vb: SynchronizationComputation(Of TLeft, TRight)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationDirection
  commentId: T:NMF.Synchronizations.SynchronizationDirection
  parent: NMF.Synchronizations
  name: SynchronizationDirection
  nameWithType: SynchronizationDirection
  fullName: NMF.Synchronizations.SynchronizationDirection
- uid: NMF.Synchronizations.ISynchronizationContext
  commentId: T:NMF.Synchronizations.ISynchronizationContext
  parent: NMF.Synchronizations
  name: ISynchronizationContext
  nameWithType: ISynchronizationContext
  fullName: NMF.Synchronizations.ISynchronizationContext
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: NMF.Synchronizations.ISynchronizationJob`2.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
  commentId: M:NMF.Synchronizations.ISynchronizationJob`2.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
  name: Perform(SynchronizationComputation<TLeft, TRight>, SynchronizationDirection, ISynchronizationContext)
  nameWithType: ISynchronizationJob<TLeft, TRight>.Perform(SynchronizationComputation<TLeft, TRight>, SynchronizationDirection, ISynchronizationContext)
  fullName: NMF.Synchronizations.ISynchronizationJob<TLeft, TRight>.Perform(NMF.Synchronizations.SynchronizationComputation<TLeft, TRight>, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext)
  nameWithType.vb: ISynchronizationJob(Of TLeft, TRight).Perform(SynchronizationComputation(Of TLeft, TRight), SynchronizationDirection, ISynchronizationContext)
  fullName.vb: NMF.Synchronizations.ISynchronizationJob(Of TLeft, TRight).Perform(NMF.Synchronizations.SynchronizationComputation(Of TLeft, TRight), NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext)
  name.vb: Perform(SynchronizationComputation(Of TLeft, TRight), SynchronizationDirection, ISynchronizationContext)
  spec.csharp:
  - uid: NMF.Synchronizations.ISynchronizationJob`2.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
    name: Perform
    nameWithType: ISynchronizationJob<TLeft, TRight>.Perform
    fullName: NMF.Synchronizations.ISynchronizationJob<TLeft, TRight>.Perform
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.ISynchronizationJob`2.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
    name: Perform
    nameWithType: ISynchronizationJob(Of TLeft, TRight).Perform
    fullName: NMF.Synchronizations.ISynchronizationJob(Of TLeft, TRight).Perform
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationComputation`2
  commentId: T:NMF.Synchronizations.SynchronizationComputation`2
  name: SynchronizationComputation<TIn, TOut>
  nameWithType: SynchronizationComputation<TIn, TOut>
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut)
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut)
  name.vb: SynchronizationComputation(Of TIn, TOut)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.OpaqueSynchronizationJob`2.IsEarly*
  commentId: Overload:NMF.Synchronizations.OpaqueSynchronizationJob`2.IsEarly
  name: IsEarly
  nameWithType: OpaqueSynchronizationJob<TLeft, TRight>.IsEarly
  fullName: NMF.Synchronizations.OpaqueSynchronizationJob<TLeft, TRight>.IsEarly
  nameWithType.vb: OpaqueSynchronizationJob(Of TLeft, TRight).IsEarly
  fullName.vb: NMF.Synchronizations.OpaqueSynchronizationJob(Of TLeft, TRight).IsEarly
- uid: NMF.Synchronizations.ISynchronizationJob{{TLeft},{TRight}}.IsEarly
  commentId: P:NMF.Synchronizations.ISynchronizationJob{`0,`1}.IsEarly
  parent: NMF.Synchronizations.ISynchronizationJob{{TLeft},{TRight}}
  definition: NMF.Synchronizations.ISynchronizationJob`2.IsEarly
  name: IsEarly
  nameWithType: ISynchronizationJob<TLeft, TRight>.IsEarly
  fullName: NMF.Synchronizations.ISynchronizationJob<TLeft, TRight>.IsEarly
  nameWithType.vb: ISynchronizationJob(Of TLeft, TRight).IsEarly
  fullName.vb: NMF.Synchronizations.ISynchronizationJob(Of TLeft, TRight).IsEarly
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NMF.Synchronizations.ISynchronizationJob`2.IsEarly
  commentId: P:NMF.Synchronizations.ISynchronizationJob`2.IsEarly
  name: IsEarly
  nameWithType: ISynchronizationJob<TLeft, TRight>.IsEarly
  fullName: NMF.Synchronizations.ISynchronizationJob<TLeft, TRight>.IsEarly
  nameWithType.vb: ISynchronizationJob(Of TLeft, TRight).IsEarly
  fullName.vb: NMF.Synchronizations.ISynchronizationJob(Of TLeft, TRight).IsEarly
