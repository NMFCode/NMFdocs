### YamlMime:ManagedReference
items:
- uid: NMF.Synchronizations.SynchronizationDirectionExtensions
  commentId: T:NMF.Synchronizations.SynchronizationDirectionExtensions
  id: SynchronizationDirectionExtensions
  parent: NMF.Synchronizations
  children:
  - NMF.Synchronizations.SynchronizationDirectionExtensions.IsLeftToRight(NMF.Synchronizations.SynchronizationDirection)
  - NMF.Synchronizations.SynchronizationDirectionExtensions.IsRightToLeft(NMF.Synchronizations.SynchronizationDirection)
  langs:
  - csharp
  - vb
  name: SynchronizationDirectionExtensions
  nameWithType: SynchronizationDirectionExtensions
  fullName: NMF.Synchronizations.SynchronizationDirectionExtensions
  type: Class
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationDirection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizationDirectionExtensions
    path: src/Synchronizations/Synchronizations/SynchronizationDirection.cs
    startLine: 46
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nDenotes extension methods for synchronization directions\n"
  example: []
  syntax:
    content: public static class SynchronizationDirectionExtensions
    content.vb: Public Module SynchronizationDirectionExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NMF.Synchronizations.SynchronizationDirectionExtensions.IsLeftToRight(NMF.Synchronizations.SynchronizationDirection)
  commentId: M:NMF.Synchronizations.SynchronizationDirectionExtensions.IsLeftToRight(NMF.Synchronizations.SynchronizationDirection)
  id: IsLeftToRight(NMF.Synchronizations.SynchronizationDirection)
  isExtensionMethod: true
  parent: NMF.Synchronizations.SynchronizationDirectionExtensions
  langs:
  - csharp
  - vb
  name: IsLeftToRight(SynchronizationDirection)
  nameWithType: SynchronizationDirectionExtensions.IsLeftToRight(SynchronizationDirection)
  fullName: NMF.Synchronizations.SynchronizationDirectionExtensions.IsLeftToRight(NMF.Synchronizations.SynchronizationDirection)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationDirection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsLeftToRight
    path: src/Synchronizations/Synchronizations/SynchronizationDirection.cs
    startLine: 53
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nDetermines whether the basic direction is LHS to RHS\n"
  example: []
  syntax:
    content: public static bool IsLeftToRight(this SynchronizationDirection direction)
    parameters:
    - id: direction
      type: NMF.Synchronizations.SynchronizationDirection
      description: The direction
    return:
      type: System.Boolean
      description: True, if the direction is mostly LHS to RHS, otherwise false
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsLeftToRight(direction As SynchronizationDirection) As Boolean
  overload: NMF.Synchronizations.SynchronizationDirectionExtensions.IsLeftToRight*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NMF.Synchronizations.SynchronizationDirectionExtensions.IsRightToLeft(NMF.Synchronizations.SynchronizationDirection)
  commentId: M:NMF.Synchronizations.SynchronizationDirectionExtensions.IsRightToLeft(NMF.Synchronizations.SynchronizationDirection)
  id: IsRightToLeft(NMF.Synchronizations.SynchronizationDirection)
  isExtensionMethod: true
  parent: NMF.Synchronizations.SynchronizationDirectionExtensions
  langs:
  - csharp
  - vb
  name: IsRightToLeft(SynchronizationDirection)
  nameWithType: SynchronizationDirectionExtensions.IsRightToLeft(SynchronizationDirection)
  fullName: NMF.Synchronizations.SynchronizationDirectionExtensions.IsRightToLeft(NMF.Synchronizations.SynchronizationDirection)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/SynchronizationDirection.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsRightToLeft
    path: src/Synchronizations/Synchronizations/SynchronizationDirection.cs
    startLine: 63
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nDetermines whether the basic direction is RHS to LHS\n"
  example: []
  syntax:
    content: public static bool IsRightToLeft(this SynchronizationDirection direction)
    parameters:
    - id: direction
      type: NMF.Synchronizations.SynchronizationDirection
      description: The direction
    return:
      type: System.Boolean
      description: True, if the direction is mostly RHS to LHS, otherwise false
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsRightToLeft(direction As SynchronizationDirection) As Boolean
  overload: NMF.Synchronizations.SynchronizationDirectionExtensions.IsRightToLeft*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: NMF.Synchronizations
  commentId: N:NMF.Synchronizations
  name: NMF.Synchronizations
  nameWithType: NMF.Synchronizations
  fullName: NMF.Synchronizations
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Synchronizations.SynchronizationDirectionExtensions.IsLeftToRight*
  commentId: Overload:NMF.Synchronizations.SynchronizationDirectionExtensions.IsLeftToRight
  name: IsLeftToRight
  nameWithType: SynchronizationDirectionExtensions.IsLeftToRight
  fullName: NMF.Synchronizations.SynchronizationDirectionExtensions.IsLeftToRight
- uid: NMF.Synchronizations.SynchronizationDirection
  commentId: T:NMF.Synchronizations.SynchronizationDirection
  parent: NMF.Synchronizations
  name: SynchronizationDirection
  nameWithType: SynchronizationDirection
  fullName: NMF.Synchronizations.SynchronizationDirection
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NMF.Synchronizations.SynchronizationDirectionExtensions.IsRightToLeft*
  commentId: Overload:NMF.Synchronizations.SynchronizationDirectionExtensions.IsRightToLeft
  name: IsRightToLeft
  nameWithType: SynchronizationDirectionExtensions.IsRightToLeft
  fullName: NMF.Synchronizations.SynchronizationDirectionExtensions.IsRightToLeft
