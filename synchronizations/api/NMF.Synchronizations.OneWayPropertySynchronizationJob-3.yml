### YamlMime:ManagedReference
items:
- uid: NMF.Synchronizations.OneWayPropertySynchronizationJob`3
  commentId: T:NMF.Synchronizations.OneWayPropertySynchronizationJob`3
  id: OneWayPropertySynchronizationJob`3
  parent: NMF.Synchronizations
  children:
  - NMF.Synchronizations.OneWayPropertySynchronizationJob`3.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`2}},System.Action{`1,`2},System.Boolean)
  - NMF.Synchronizations.OneWayPropertySynchronizationJob`3.IsEarly
  - NMF.Synchronizations.OneWayPropertySynchronizationJob`3.Perform(`0,`1,NMF.Synchronizations.ISynchronizationContext)
  langs:
  - csharp
  - vb
  name: OneWayPropertySynchronizationJob<TSource, TTarget, TValue>
  nameWithType: OneWayPropertySynchronizationJob<TSource, TTarget, TValue>
  fullName: NMF.Synchronizations.OneWayPropertySynchronizationJob<TSource, TTarget, TValue>
  type: Class
  source:
    remote:
      path: Synchronizations/Synchronizations/PropertySynchronizationJob.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: OneWayPropertySynchronizationJob
    path: src/Synchronizations/Synchronizations/PropertySynchronizationJob.cs
    startLine: 223
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: >-
      public class OneWayPropertySynchronizationJob<TSource, TTarget, TValue>

          where TSource : class where TTarget : class
    typeParameters:
    - id: TSource
    - id: TTarget
    - id: TValue
    content.vb: Public Class OneWayPropertySynchronizationJob(Of TSource As Class, TTarget As Class, TValue)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: OneWayPropertySynchronizationJob(Of TSource, TTarget, TValue)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: NMF.Synchronizations.OneWayPropertySynchronizationJob(Of TSource, TTarget, TValue)
  name.vb: OneWayPropertySynchronizationJob(Of TSource, TTarget, TValue)
- uid: NMF.Synchronizations.OneWayPropertySynchronizationJob`3.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`2}},System.Action{`1,`2},System.Boolean)
  commentId: M:NMF.Synchronizations.OneWayPropertySynchronizationJob`3.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`2}},System.Action{`1,`2},System.Boolean)
  id: '#ctor(System.Linq.Expressions.Expression{System.Func{`0,`2}},System.Action{`1,`2},System.Boolean)'
  parent: NMF.Synchronizations.OneWayPropertySynchronizationJob`3
  langs:
  - csharp
  - vb
  name: OneWayPropertySynchronizationJob(Expression<Func<TSource, TValue>>, Action<TTarget, TValue>, Boolean)
  nameWithType: OneWayPropertySynchronizationJob<TSource, TTarget, TValue>.OneWayPropertySynchronizationJob(Expression<Func<TSource, TValue>>, Action<TTarget, TValue>, Boolean)
  fullName: NMF.Synchronizations.OneWayPropertySynchronizationJob<TSource, TTarget, TValue>.OneWayPropertySynchronizationJob(System.Linq.Expressions.Expression<System.Func<TSource, TValue>>, System.Action<TTarget, TValue>, System.Boolean)
  type: Constructor
  source:
    remote:
      path: Synchronizations/Synchronizations/PropertySynchronizationJob.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Synchronizations/Synchronizations/PropertySynchronizationJob.cs
    startLine: 234
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public OneWayPropertySynchronizationJob(Expression<Func<TSource, TValue>> sourceGetter, Action<TTarget, TValue> targetSetter, bool isEarly)
    parameters:
    - id: sourceGetter
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TValue}}}
    - id: targetSetter
      type: System.Action{{TTarget},{TValue}}
    - id: isEarly
      type: System.Boolean
    content.vb: Public Sub New(sourceGetter As Expression(Of Func(Of TSource, TValue)), targetSetter As Action(Of TTarget, TValue), isEarly As Boolean)
  overload: NMF.Synchronizations.OneWayPropertySynchronizationJob`3.#ctor*
  nameWithType.vb: OneWayPropertySynchronizationJob(Of TSource, TTarget, TValue).OneWayPropertySynchronizationJob(Expression(Of Func(Of TSource, TValue)), Action(Of TTarget, TValue), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.OneWayPropertySynchronizationJob(Of TSource, TTarget, TValue).OneWayPropertySynchronizationJob(System.Linq.Expressions.Expression(Of System.Func(Of TSource, TValue)), System.Action(Of TTarget, TValue), System.Boolean)
  name.vb: OneWayPropertySynchronizationJob(Expression(Of Func(Of TSource, TValue)), Action(Of TTarget, TValue), Boolean)
- uid: NMF.Synchronizations.OneWayPropertySynchronizationJob`3.IsEarly
  commentId: P:NMF.Synchronizations.OneWayPropertySynchronizationJob`3.IsEarly
  id: IsEarly
  parent: NMF.Synchronizations.OneWayPropertySynchronizationJob`3
  langs:
  - csharp
  - vb
  name: IsEarly
  nameWithType: OneWayPropertySynchronizationJob<TSource, TTarget, TValue>.IsEarly
  fullName: NMF.Synchronizations.OneWayPropertySynchronizationJob<TSource, TTarget, TValue>.IsEarly
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/PropertySynchronizationJob.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsEarly
    path: src/Synchronizations/Synchronizations/PropertySynchronizationJob.cs
    startLine: 247
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: public bool IsEarly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsEarly As Boolean
  overload: NMF.Synchronizations.OneWayPropertySynchronizationJob`3.IsEarly*
  nameWithType.vb: OneWayPropertySynchronizationJob(Of TSource, TTarget, TValue).IsEarly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Synchronizations.OneWayPropertySynchronizationJob(Of TSource, TTarget, TValue).IsEarly
- uid: NMF.Synchronizations.OneWayPropertySynchronizationJob`3.Perform(`0,`1,NMF.Synchronizations.ISynchronizationContext)
  commentId: M:NMF.Synchronizations.OneWayPropertySynchronizationJob`3.Perform(`0,`1,NMF.Synchronizations.ISynchronizationContext)
  id: Perform(`0,`1,NMF.Synchronizations.ISynchronizationContext)
  parent: NMF.Synchronizations.OneWayPropertySynchronizationJob`3
  langs:
  - csharp
  - vb
  name: Perform(TSource, TTarget, ISynchronizationContext)
  nameWithType: OneWayPropertySynchronizationJob<TSource, TTarget, TValue>.Perform(TSource, TTarget, ISynchronizationContext)
  fullName: NMF.Synchronizations.OneWayPropertySynchronizationJob<TSource, TTarget, TValue>.Perform(TSource, TTarget, NMF.Synchronizations.ISynchronizationContext)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/PropertySynchronizationJob.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Perform
    path: src/Synchronizations/Synchronizations/PropertySynchronizationJob.cs
    startLine: 255
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  syntax:
    content: protected IDisposable Perform(TSource source, TTarget target, ISynchronizationContext context)
    parameters:
    - id: source
      type: '{TSource}'
    - id: target
      type: '{TTarget}'
    - id: context
      type: NMF.Synchronizations.ISynchronizationContext
    return:
      type: System.IDisposable
    content.vb: Protected Function Perform(source As TSource, target As TTarget, context As ISynchronizationContext) As IDisposable
  overload: NMF.Synchronizations.OneWayPropertySynchronizationJob`3.Perform*
  nameWithType.vb: OneWayPropertySynchronizationJob(Of TSource, TTarget, TValue).Perform(TSource, TTarget, ISynchronizationContext)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: NMF.Synchronizations.OneWayPropertySynchronizationJob(Of TSource, TTarget, TValue).Perform(TSource, TTarget, NMF.Synchronizations.ISynchronizationContext)
references:
- uid: NMF.Synchronizations
  commentId: N:NMF.Synchronizations
  name: NMF.Synchronizations
  nameWithType: NMF.Synchronizations
  fullName: NMF.Synchronizations
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Synchronizations.OneWayPropertySynchronizationJob`3.#ctor*
  commentId: Overload:NMF.Synchronizations.OneWayPropertySynchronizationJob`3.#ctor
  name: OneWayPropertySynchronizationJob
  nameWithType: OneWayPropertySynchronizationJob<TSource, TTarget, TValue>.OneWayPropertySynchronizationJob
  fullName: NMF.Synchronizations.OneWayPropertySynchronizationJob<TSource, TTarget, TValue>.OneWayPropertySynchronizationJob
  nameWithType.vb: OneWayPropertySynchronizationJob(Of TSource, TTarget, TValue).OneWayPropertySynchronizationJob
  fullName.vb: NMF.Synchronizations.OneWayPropertySynchronizationJob(Of TSource, TTarget, TValue).OneWayPropertySynchronizationJob
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},{TValue}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`2}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TSource, TValue>>
  nameWithType: Expression<Func<TSource, TValue>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, TValue>>
  nameWithType.vb: Expression(Of Func(Of TSource, TValue))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, TValue))
  name.vb: Expression(Of Func(Of TSource, TValue))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{TTarget},{TValue}}
  commentId: T:System.Action{`1,`2}
  parent: System
  definition: System.Action`2
  name: Action<TTarget, TValue>
  nameWithType: Action<TTarget, TValue>
  fullName: System.Action<TTarget, TValue>
  nameWithType.vb: Action(Of TTarget, TValue)
  fullName.vb: System.Action(Of TTarget, TValue)
  name.vb: Action(Of TTarget, TValue)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.OneWayPropertySynchronizationJob`3.IsEarly*
  commentId: Overload:NMF.Synchronizations.OneWayPropertySynchronizationJob`3.IsEarly
  name: IsEarly
  nameWithType: OneWayPropertySynchronizationJob<TSource, TTarget, TValue>.IsEarly
  fullName: NMF.Synchronizations.OneWayPropertySynchronizationJob<TSource, TTarget, TValue>.IsEarly
  nameWithType.vb: OneWayPropertySynchronizationJob(Of TSource, TTarget, TValue).IsEarly
  fullName.vb: NMF.Synchronizations.OneWayPropertySynchronizationJob(Of TSource, TTarget, TValue).IsEarly
- uid: NMF.Synchronizations.OneWayPropertySynchronizationJob`3.Perform*
  commentId: Overload:NMF.Synchronizations.OneWayPropertySynchronizationJob`3.Perform
  name: Perform
  nameWithType: OneWayPropertySynchronizationJob<TSource, TTarget, TValue>.Perform
  fullName: NMF.Synchronizations.OneWayPropertySynchronizationJob<TSource, TTarget, TValue>.Perform
  nameWithType.vb: OneWayPropertySynchronizationJob(Of TSource, TTarget, TValue).Perform
  fullName.vb: NMF.Synchronizations.OneWayPropertySynchronizationJob(Of TSource, TTarget, TValue).Perform
- uid: '{TSource}'
  commentId: '!:TSource'
  definition: TSource
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: '{TTarget}'
  commentId: '!:TTarget'
  definition: TTarget
  name: TTarget
  nameWithType: TTarget
  fullName: TTarget
- uid: NMF.Synchronizations.ISynchronizationContext
  commentId: T:NMF.Synchronizations.ISynchronizationContext
  parent: NMF.Synchronizations
  name: ISynchronizationContext
  nameWithType: ISynchronizationContext
  fullName: NMF.Synchronizations.ISynchronizationContext
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: TSource
  commentId: '!:TSource'
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: TTarget
  commentId: '!:TTarget'
  name: TTarget
  nameWithType: TTarget
  fullName: TTarget
