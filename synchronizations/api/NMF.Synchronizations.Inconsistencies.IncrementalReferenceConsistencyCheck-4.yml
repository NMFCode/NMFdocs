### YamlMime:ManagedReference
items:
- uid: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4
  commentId: T:NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4
  id: IncrementalReferenceConsistencyCheck`4
  parent: NMF.Synchronizations.Inconsistencies
  children:
  - NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.CanResolveLeft
  - NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.CanResolveRight
  - NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Computation
  - NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Dispose
  - NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  - NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Equals(NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck{`0,`1,`2,`3})
  - NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Equals(System.Object)
  - NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.GetHashCode
  - NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Left
  - NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.ResolveLeft
  - NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.ResolveRight
  - NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Right
  langs:
  - csharp
  - vb
  name: IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>
  nameWithType: IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>
  type: Class
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalReferenceConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IncrementalReferenceConsistencyCheck
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalReferenceConsistencyCheck.cs
    startLine: 16
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  summary: "\nDenotes an incrementally maintained inconsistency that a reference has different values in LHS and RHS\n"
  example: []
  syntax:
    content: 'public class IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight> : IDisposable, IInconsistency, IEquatable<IInconsistency>'
    typeParameters:
    - id: TLeft
      description: The LHS context type
    - id: TRight
      description: The RHS context type
    - id: TDepLeft
      description: The LHS dependency type
    - id: TDepRight
      description: The RHS dependency type
    content.vb: Public Class IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight) Implements IDisposable, IInconsistency, IEquatable(Of IInconsistency)
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  - NMF.Synchronizations.Inconsistencies.IInconsistency
  - System.IEquatable{NMF.Synchronizations.Inconsistencies.IInconsistency}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight)
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight)
  name.vb: IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight)
- uid: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Left
  commentId: P:NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Left
  id: Left
  parent: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4
  langs:
  - csharp
  - vb
  name: Left
  nameWithType: IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.Left
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.Left
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalReferenceConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Left
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalReferenceConsistencyCheck.cs
    startLine: 21
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  summary: "\nGets an incrementally maintained value of the LHS dependency\n"
  example: []
  syntax:
    content: public INotifyReversableValue<TDepLeft> Left { get; }
    parameters: []
    return:
      type: NMF.Expressions.INotifyReversableValue{{TDepLeft}}
    content.vb: Public Property Left As INotifyReversableValue(Of TDepLeft)
  overload: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Left*
  nameWithType.vb: IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).Left
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).Left
- uid: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Right
  commentId: P:NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Right
  id: Right
  parent: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4
  langs:
  - csharp
  - vb
  name: Right
  nameWithType: IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.Right
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.Right
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalReferenceConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Right
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalReferenceConsistencyCheck.cs
    startLine: 26
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  summary: "\nGets an incrementally maintained value of the RHS dependency\n"
  example: []
  syntax:
    content: public INotifyReversableValue<TDepRight> Right { get; }
    parameters: []
    return:
      type: NMF.Expressions.INotifyReversableValue{{TDepRight}}
    content.vb: Public Property Right As INotifyReversableValue(Of TDepRight)
  overload: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Right*
  nameWithType.vb: IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).Right
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).Right
- uid: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Computation
  commentId: P:NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Computation
  id: Computation
  parent: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4
  langs:
  - csharp
  - vb
  name: Computation
  nameWithType: IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.Computation
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.Computation
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalReferenceConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Computation
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalReferenceConsistencyCheck.cs
    startLine: 32
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  summary: "\nGets the base correspondence on the basis of which the inconsistency was detected\n"
  example: []
  syntax:
    content: public SynchronizationComputation<TLeft, TRight> Computation { get; }
    parameters: []
    return:
      type: NMF.Synchronizations.SynchronizationComputation{{TLeft},{TRight}}
    content.vb: Public Property Computation As SynchronizationComputation(Of TLeft, TRight)
  overload: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Computation*
  nameWithType.vb: IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).Computation
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).Computation
- uid: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.CanResolveLeft
  commentId: P:NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.CanResolveLeft
  id: CanResolveLeft
  parent: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4
  langs:
  - csharp
  - vb
  name: CanResolveLeft
  nameWithType: IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.CanResolveLeft
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.CanResolveLeft
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalReferenceConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CanResolveLeft
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalReferenceConsistencyCheck.cs
    startLine: 35
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  summary: "\nGets a value indicating whether the inconsistency can be automatically resolved modifying the left hand model only\n"
  example: []
  syntax:
    content: public bool CanResolveLeft { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property CanResolveLeft As Boolean
  overload: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.CanResolveLeft*
  implements:
  - NMF.Synchronizations.Inconsistencies.IInconsistency.CanResolveLeft
  nameWithType.vb: IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).CanResolveLeft
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).CanResolveLeft
- uid: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.CanResolveRight
  commentId: P:NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.CanResolveRight
  id: CanResolveRight
  parent: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4
  langs:
  - csharp
  - vb
  name: CanResolveRight
  nameWithType: IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.CanResolveRight
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.CanResolveRight
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalReferenceConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CanResolveRight
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalReferenceConsistencyCheck.cs
    startLine: 38
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  summary: "\nGets a value indicating whether the inconsistency can be automatically resolved modifying the right hand model only\n"
  example: []
  syntax:
    content: public bool CanResolveRight { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property CanResolveRight As Boolean
  overload: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.CanResolveRight*
  implements:
  - NMF.Synchronizations.Inconsistencies.IInconsistency.CanResolveRight
  nameWithType.vb: IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).CanResolveRight
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).CanResolveRight
- uid: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Dispose
  commentId: M:NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Dispose
  id: Dispose
  parent: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.Dispose()
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.Dispose()
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalReferenceConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Dispose
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalReferenceConsistencyCheck.cs
    startLine: 70
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose()
  overload: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).Dispose()
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).Dispose()
- uid: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.ResolveLeft
  commentId: M:NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.ResolveLeft
  id: ResolveLeft
  parent: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4
  langs:
  - csharp
  - vb
  name: ResolveLeft()
  nameWithType: IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.ResolveLeft()
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.ResolveLeft()
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalReferenceConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ResolveLeft
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalReferenceConsistencyCheck.cs
    startLine: 79
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  summary: "\nResolves the inconsistency modifying the left hand side model\n"
  example: []
  syntax:
    content: public void ResolveLeft()
    content.vb: Public Sub ResolveLeft()
  overload: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.ResolveLeft*
  implements:
  - NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveLeft
  nameWithType.vb: IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).ResolveLeft()
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).ResolveLeft()
- uid: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.ResolveRight
  commentId: M:NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.ResolveRight
  id: ResolveRight
  parent: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4
  langs:
  - csharp
  - vb
  name: ResolveRight()
  nameWithType: IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.ResolveRight()
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.ResolveRight()
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalReferenceConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ResolveRight
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalReferenceConsistencyCheck.cs
    startLine: 104
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  summary: "\nResolves the inconsistency modifying the right hand side model\n"
  example: []
  syntax:
    content: public void ResolveRight()
    content.vb: Public Sub ResolveRight()
  overload: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.ResolveRight*
  implements:
  - NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveRight
  nameWithType.vb: IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).ResolveRight()
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).ResolveRight()
- uid: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.GetHashCode
  commentId: M:NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.GetHashCode
  id: GetHashCode
  parent: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.GetHashCode()
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.GetHashCode()
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalReferenceConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetHashCode
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalReferenceConsistencyCheck.cs
    startLine: 125
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.Object.GetHashCode
  overload: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.GetHashCode*
  nameWithType.vb: IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).GetHashCode()
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).GetHashCode()
- uid: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Equals(System.Object)
  commentId: M:NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Equals(System.Object)
  id: Equals(System.Object)
  parent: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4
  langs:
  - csharp
  - vb
  name: Equals(object)
  nameWithType: IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.Equals(object)
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.Equals(object)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalReferenceConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Equals
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalReferenceConsistencyCheck.cs
    startLine: 138
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Equals*
  nameWithType.vb: IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).Equals(Object)
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).Equals(Object)
  name.vb: Equals(Object)
- uid: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  commentId: M:NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  id: Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  parent: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4
  langs:
  - csharp
  - vb
  name: Equals(IInconsistency)
  nameWithType: IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.Equals(IInconsistency)
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalReferenceConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Equals
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalReferenceConsistencyCheck.cs
    startLine: 146
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  example: []
  syntax:
    content: public bool Equals(IInconsistency other)
    parameters:
    - id: other
      type: NMF.Synchronizations.Inconsistencies.IInconsistency
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As IInconsistency) As Boolean
  overload: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Equals*
  implements:
  - System.IEquatable{NMF.Synchronizations.Inconsistencies.IInconsistency}.Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  nameWithType.vb: IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).Equals(IInconsistency)
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
- uid: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Equals(NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck{`0,`1,`2,`3})
  commentId: M:NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Equals(NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck{`0,`1,`2,`3})
  id: Equals(NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck{`0,`1,`2,`3})
  parent: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4
  langs:
  - csharp
  - vb
  name: Equals(IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>)
  nameWithType: IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.Equals(IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>)
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.Equals(NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalReferenceConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Equals
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalReferenceConsistencyCheck.cs
    startLine: 152
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  example: []
  syntax:
    content: public bool Equals(IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight> other)
    parameters:
    - id: other
      type: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight)) As Boolean
  overload: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Equals*
  nameWithType.vb: IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).Equals(IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight))
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).Equals(NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight))
  name.vb: Equals(IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight))
references:
- uid: NMF.Synchronizations.Inconsistencies
  commentId: N:NMF.Synchronizations.Inconsistencies
  name: NMF.Synchronizations.Inconsistencies
  nameWithType: NMF.Synchronizations.Inconsistencies
  fullName: NMF.Synchronizations.Inconsistencies
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Synchronizations
    name: Synchronizations
  - name: .
  - uid: NMF.Synchronizations.Inconsistencies
    name: Inconsistencies
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Synchronizations
    name: Synchronizations
  - name: .
  - uid: NMF.Synchronizations.Inconsistencies
    name: Inconsistencies
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: NMF.Synchronizations.Inconsistencies.IInconsistency
  commentId: T:NMF.Synchronizations.Inconsistencies.IInconsistency
  parent: NMF.Synchronizations.Inconsistencies
  name: IInconsistency
  nameWithType: IInconsistency
  fullName: NMF.Synchronizations.Inconsistencies.IInconsistency
- uid: System.IEquatable{NMF.Synchronizations.Inconsistencies.IInconsistency}
  commentId: T:System.IEquatable{NMF.Synchronizations.Inconsistencies.IInconsistency}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<IInconsistency>
  nameWithType: IEquatable<IInconsistency>
  fullName: System.IEquatable<NMF.Synchronizations.Inconsistencies.IInconsistency>
  nameWithType.vb: IEquatable(Of IInconsistency)
  fullName.vb: System.IEquatable(Of NMF.Synchronizations.Inconsistencies.IInconsistency)
  name.vb: IEquatable(Of IInconsistency)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
  - name: <
  - uid: NMF.Synchronizations.Inconsistencies.IInconsistency
    name: IInconsistency
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Synchronizations.Inconsistencies.IInconsistency
    name: IInconsistency
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Left*
  commentId: Overload:NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Left
  name: Left
  nameWithType: IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.Left
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.Left
  nameWithType.vb: IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).Left
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).Left
- uid: NMF.Expressions.INotifyReversableValue{{TDepLeft}}
  commentId: T:NMF.Expressions.INotifyReversableValue{`2}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyReversableValue`1
  name: INotifyReversableValue<TDepLeft>
  nameWithType: INotifyReversableValue<TDepLeft>
  fullName: NMF.Expressions.INotifyReversableValue<TDepLeft>
  nameWithType.vb: INotifyReversableValue(Of TDepLeft)
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of TDepLeft)
  name.vb: INotifyReversableValue(Of TDepLeft)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
  - name: <
  - name: TDepLeft
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
  - name: (
  - name: Of
  - name: " "
  - name: TDepLeft
  - name: )
- uid: NMF.Expressions.INotifyReversableValue`1
  commentId: T:NMF.Expressions.INotifyReversableValue`1
  name: INotifyReversableValue<T>
  nameWithType: INotifyReversableValue<T>
  fullName: NMF.Expressions.INotifyReversableValue<T>
  nameWithType.vb: INotifyReversableValue(Of T)
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of T)
  name.vb: INotifyReversableValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Expressions
    name: Expressions
- uid: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Right*
  commentId: Overload:NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Right
  name: Right
  nameWithType: IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.Right
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.Right
  nameWithType.vb: IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).Right
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).Right
- uid: NMF.Expressions.INotifyReversableValue{{TDepRight}}
  commentId: T:NMF.Expressions.INotifyReversableValue{`3}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyReversableValue`1
  name: INotifyReversableValue<TDepRight>
  nameWithType: INotifyReversableValue<TDepRight>
  fullName: NMF.Expressions.INotifyReversableValue<TDepRight>
  nameWithType.vb: INotifyReversableValue(Of TDepRight)
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of TDepRight)
  name.vb: INotifyReversableValue(Of TDepRight)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
  - name: <
  - name: TDepRight
  - name: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
  - name: (
  - name: Of
  - name: " "
  - name: TDepRight
  - name: )
- uid: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Computation*
  commentId: Overload:NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Computation
  name: Computation
  nameWithType: IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.Computation
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.Computation
  nameWithType.vb: IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).Computation
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).Computation
- uid: NMF.Synchronizations.SynchronizationComputation{{TLeft},{TRight}}
  commentId: T:NMF.Synchronizations.SynchronizationComputation{`0,`1}
  parent: NMF.Synchronizations
  definition: NMF.Synchronizations.SynchronizationComputation`2
  name: SynchronizationComputation<TLeft, TRight>
  nameWithType: SynchronizationComputation<TLeft, TRight>
  fullName: NMF.Synchronizations.SynchronizationComputation<TLeft, TRight>
  nameWithType.vb: SynchronizationComputation(Of TLeft, TRight)
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TLeft, TRight)
  name.vb: SynchronizationComputation(Of TLeft, TRight)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: '>'
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: )
- uid: NMF.Synchronizations.SynchronizationComputation`2
  commentId: T:NMF.Synchronizations.SynchronizationComputation`2
  name: SynchronizationComputation<TIn, TOut>
  nameWithType: SynchronizationComputation<TIn, TOut>
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut)
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut)
  name.vb: SynchronizationComputation(Of TIn, TOut)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
  - name: <
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: '>'
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
  - name: (
  - name: Of
  - name: " "
  - name: TIn
  - name: ','
  - name: " "
  - name: TOut
  - name: )
- uid: NMF.Synchronizations
  commentId: N:NMF.Synchronizations
  name: NMF.Synchronizations
  nameWithType: NMF.Synchronizations
  fullName: NMF.Synchronizations
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Synchronizations
    name: Synchronizations
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Synchronizations
    name: Synchronizations
- uid: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.CanResolveLeft*
  commentId: Overload:NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.CanResolveLeft
  name: CanResolveLeft
  nameWithType: IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.CanResolveLeft
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.CanResolveLeft
  nameWithType.vb: IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).CanResolveLeft
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).CanResolveLeft
- uid: NMF.Synchronizations.Inconsistencies.IInconsistency.CanResolveLeft
  commentId: P:NMF.Synchronizations.Inconsistencies.IInconsistency.CanResolveLeft
  parent: NMF.Synchronizations.Inconsistencies.IInconsistency
  name: CanResolveLeft
  nameWithType: IInconsistency.CanResolveLeft
  fullName: NMF.Synchronizations.Inconsistencies.IInconsistency.CanResolveLeft
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.CanResolveRight*
  commentId: Overload:NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.CanResolveRight
  name: CanResolveRight
  nameWithType: IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.CanResolveRight
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.CanResolveRight
  nameWithType.vb: IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).CanResolveRight
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).CanResolveRight
- uid: NMF.Synchronizations.Inconsistencies.IInconsistency.CanResolveRight
  commentId: P:NMF.Synchronizations.Inconsistencies.IInconsistency.CanResolveRight
  parent: NMF.Synchronizations.Inconsistencies.IInconsistency
  name: CanResolveRight
  nameWithType: IInconsistency.CanResolveRight
  fullName: NMF.Synchronizations.Inconsistencies.IInconsistency.CanResolveRight
- uid: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Dispose*
  commentId: Overload:NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Dispose
  name: Dispose
  nameWithType: IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.Dispose
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.Dispose
  nameWithType.vb: IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).Dispose
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    isExternal: true
  - name: (
  - name: )
- uid: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.ResolveLeft*
  commentId: Overload:NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.ResolveLeft
  name: ResolveLeft
  nameWithType: IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.ResolveLeft
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.ResolveLeft
  nameWithType.vb: IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).ResolveLeft
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).ResolveLeft
- uid: NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveLeft
  commentId: M:NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveLeft
  parent: NMF.Synchronizations.Inconsistencies.IInconsistency
  name: ResolveLeft()
  nameWithType: IInconsistency.ResolveLeft()
  fullName: NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveLeft()
  spec.csharp:
  - uid: NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveLeft
    name: ResolveLeft
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveLeft
    name: ResolveLeft
  - name: (
  - name: )
- uid: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.ResolveRight*
  commentId: Overload:NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.ResolveRight
  name: ResolveRight
  nameWithType: IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.ResolveRight
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.ResolveRight
  nameWithType.vb: IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).ResolveRight
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).ResolveRight
- uid: NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveRight
  commentId: M:NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveRight
  parent: NMF.Synchronizations.Inconsistencies.IInconsistency
  name: ResolveRight()
  nameWithType: IInconsistency.ResolveRight()
  fullName: NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveRight()
  spec.csharp:
  - uid: NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveRight
    name: ResolveRight
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveRight
    name: ResolveRight
  - name: (
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.GetHashCode*
  commentId: Overload:NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.GetHashCode
  name: GetHashCode
  nameWithType: IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.GetHashCode
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.GetHashCode
  nameWithType.vb: IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).GetHashCode
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Equals*
  commentId: Overload:NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4.Equals
  name: Equals
  nameWithType: IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.Equals
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>.Equals
  nameWithType.vb: IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).Equals
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight).Equals
- uid: System.IEquatable{NMF.Synchronizations.Inconsistencies.IInconsistency}.Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  commentId: M:System.IEquatable{NMF.Synchronizations.Inconsistencies.IInconsistency}.Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  parent: System.IEquatable{NMF.Synchronizations.Inconsistencies.IInconsistency}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(IInconsistency)
  nameWithType: IEquatable<IInconsistency>.Equals(IInconsistency)
  fullName: System.IEquatable<NMF.Synchronizations.Inconsistencies.IInconsistency>.Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  nameWithType.vb: IEquatable(Of IInconsistency).Equals(IInconsistency)
  fullName.vb: System.IEquatable(Of NMF.Synchronizations.Inconsistencies.IInconsistency).Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  spec.csharp:
  - uid: System.IEquatable{NMF.Synchronizations.Inconsistencies.IInconsistency}.Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
    name: Equals
    isExternal: true
  - name: (
  - uid: NMF.Synchronizations.Inconsistencies.IInconsistency
    name: IInconsistency
  - name: )
  spec.vb:
  - uid: System.IEquatable{NMF.Synchronizations.Inconsistencies.IInconsistency}.Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
    name: Equals
    isExternal: true
  - name: (
  - uid: NMF.Synchronizations.Inconsistencies.IInconsistency
    name: IInconsistency
  - name: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
  - name: (
  - name: T
  - name: )
- uid: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4
  commentId: T:NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4
  parent: NMF.Synchronizations.Inconsistencies
  name: IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>
  nameWithType: IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck<TLeft, TRight, TDepLeft, TDepRight>
  nameWithType.vb: IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight)
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight)
  name.vb: IncrementalReferenceConsistencyCheck(Of TLeft, TRight, TDepLeft, TDepRight)
  spec.csharp:
  - uid: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4
    name: IncrementalReferenceConsistencyCheck
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: '>'
  spec.vb:
  - uid: NMF.Synchronizations.Inconsistencies.IncrementalReferenceConsistencyCheck`4
    name: IncrementalReferenceConsistencyCheck
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TDepLeft
  - name: ','
  - name: " "
  - name: TDepRight
  - name: )
