### YamlMime:ManagedReference
items:
- uid: NMF.Synchronizations.ReflectiveSynchronization
  commentId: T:NMF.Synchronizations.ReflectiveSynchronization
  id: ReflectiveSynchronization
  parent: NMF.Synchronizations
  children:
  - NMF.Synchronizations.ReflectiveSynchronization.CreateCustomSynchronizationRules
  - NMF.Synchronizations.ReflectiveSynchronization.CreateCustomTransformationRules
  - NMF.Synchronizations.ReflectiveSynchronization.CreateDefaultSynchronizationRules
  - NMF.Synchronizations.ReflectiveSynchronization.CreateDefaultTransformationRules
  - NMF.Synchronizations.ReflectiveSynchronization.CreateRules
  - NMF.Synchronizations.ReflectiveSynchronization.GetRuleForRuleType(System.Type)
  - NMF.Synchronizations.ReflectiveSynchronization.GetRulesForRuleType(System.Type)
  - NMF.Synchronizations.ReflectiveSynchronization.RegisterRules
  - NMF.Synchronizations.ReflectiveSynchronization.Rule``1
  - NMF.Synchronizations.ReflectiveSynchronization.SynchronizationRule``1
  - NMF.Synchronizations.ReflectiveSynchronization.SynchronizationRules
  langs:
  - csharp
  - vb
  name: ReflectiveSynchronization
  nameWithType: ReflectiveSynchronization
  fullName: NMF.Synchronizations.ReflectiveSynchronization
  type: Class
  source:
    remote:
      path: Synchronizations/Synchronizations/ReflectiveSynchronization.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ReflectiveSynchronization
    path: src/Synchronizations/Synchronizations/ReflectiveSynchronization.cs
    startLine: 13
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nDenotes a synchronization that assigns the synchronization rules from the nested classes through reflection\n"
  example: []
  syntax:
    content: 'public class ReflectiveSynchronization : Synchronization'
    content.vb: >-
      Public Class ReflectiveSynchronization
          Inherits Synchronization
  inheritance:
  - System.Object
  - NMF.Transformations.Core.Transformation
  - NMF.Synchronizations.Synchronization
  derivedClasses:
  - A2BHelperWithoutContextNamespace.A2BHelperWithoutContext
  - NMF.Synchronizations.Models.HomogeneousSynchronization`1
  - PortV3Namespace.PortV3
  inheritedMembers:
  - NMF.Synchronizations.Synchronization.GetSynchronizationRuleForType(System.Type)
  - NMF.Synchronizations.Synchronization.GetSynchronizationRulesForType(System.Type)
  - NMF.Synchronizations.Synchronization.GetSynchronizationRuleForSignature(System.Type,System.Type)
  - NMF.Synchronizations.Synchronization.GetSynchronizationRulesForSignature(System.Type,System.Type)
  - NMF.Synchronizations.Synchronization.Synchronize``2({TLeft}@,{TRight}@,NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
  - NMF.Synchronizations.Synchronization.Synchronize``2(NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}},{TLeft}@,{TRight}@,NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
  - NMF.Synchronizations.Synchronization.Synchronize``2({TLeft}@,{TRight}@,NMF.Synchronizations.ISynchronizationContext)
  - NMF.Synchronizations.Synchronization.Synchronize``2(NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}},{TLeft}@,{TRight}@,NMF.Synchronizations.ISynchronizationContext)
  - NMF.Synchronizations.Synchronization.SynchronizeMany``2(System.Collections.Generic.ICollection{{TLeft}},System.Collections.Generic.ICollection{{TRight}},NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
  - NMF.Synchronizations.Synchronization.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}},System.Collections.Generic.ICollection{{TLeft}},System.Collections.Generic.ICollection{{TRight}},NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
  - NMF.Synchronizations.Synchronization.SynchronizeMany``2(System.Collections.Generic.ICollection{{TLeft}},System.Collections.Generic.ICollection{{TRight}},NMF.Synchronizations.ISynchronizationContext)
  - NMF.Synchronizations.Synchronization.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}},System.Collections.Generic.ICollection{{TLeft}},System.Collections.Generic.ICollection{{TRight}},NMF.Synchronizations.ISynchronizationContext)
  - NMF.Transformations.Core.Transformation.Patterns
  - NMF.Transformations.Core.Transformation.IsInitialized
  - NMF.Transformations.Core.Transformation.IsRulesRegistered
  - NMF.Transformations.Core.Transformation.CreateRulesInternal
  - NMF.Transformations.Core.Transformation.CreateContext
  - NMF.Transformations.Core.Transformation.Initialize
  - NMF.Transformations.Core.Transformation.MaxOutputDelay
  - NMF.Transformations.Core.Transformation.MaxTransformationDelay
  - NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
  - NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type)
  - NMF.Transformations.Core.Transformation.GetRulesExact(System.Type[],System.Type)
  - NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type[],System.Type)
  - NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type[])
  - NMF.Transformations.Core.Transformation.Rules
  - NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type,System.Boolean)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: NMF.Synchronizations.ReflectiveSynchronization.CreateRules
  commentId: M:NMF.Synchronizations.ReflectiveSynchronization.CreateRules
  id: CreateRules
  parent: NMF.Synchronizations.ReflectiveSynchronization
  langs:
  - csharp
  - vb
  name: CreateRules()
  nameWithType: ReflectiveSynchronization.CreateRules()
  fullName: NMF.Synchronizations.ReflectiveSynchronization.CreateRules()
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/ReflectiveSynchronization.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateRules
    path: src/Synchronizations/Synchronizations/ReflectiveSynchronization.cs
    startLine: 23
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nCreates all transformation rules of this transformation\n"
  remarks: This method is called during Initialization. The output IEnumerable-collection is saved into a list.
  example: []
  syntax:
    content: protected override sealed IEnumerable<GeneralTransformationRule> CreateRules()
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Transformations.Core.GeneralTransformationRule}
      description: A collection of transformation rules
    content.vb: Protected NotOverridable Overrides Function CreateRules As IEnumerable(Of GeneralTransformationRule)
  overridden: NMF.Transformations.Core.Transformation.CreateRules
  overload: NMF.Synchronizations.ReflectiveSynchronization.CreateRules*
  modifiers.csharp:
  - protected
  - override
  - sealed
  modifiers.vb:
  - Protected
  - Overrides
  - NotOverridable
- uid: NMF.Synchronizations.ReflectiveSynchronization.GetRuleForRuleType(System.Type)
  commentId: M:NMF.Synchronizations.ReflectiveSynchronization.GetRuleForRuleType(System.Type)
  id: GetRuleForRuleType(System.Type)
  parent: NMF.Synchronizations.ReflectiveSynchronization
  langs:
  - csharp
  - vb
  name: GetRuleForRuleType(Type)
  nameWithType: ReflectiveSynchronization.GetRuleForRuleType(Type)
  fullName: NMF.Synchronizations.ReflectiveSynchronization.GetRuleForRuleType(System.Type)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/ReflectiveSynchronization.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetRuleForRuleType
    path: src/Synchronizations/Synchronizations/ReflectiveSynchronization.cs
    startLine: 49
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nGets the rule with the specified type (exact match)\n"
  remarks: This method assumes there is only one transformation rule per type
  example: []
  syntax:
    content: public override GeneralTransformationRule GetRuleForRuleType(Type transformationRule)
    parameters:
    - id: transformationRule
      type: System.Type
      description: The type of the transformation rule
    return:
      type: NMF.Transformations.Core.GeneralTransformationRule
      description: The transformation rule with this type or null, if there is none
    content.vb: Public Overrides Function GetRuleForRuleType(transformationRule As Type) As GeneralTransformationRule
  overridden: NMF.Transformations.Core.Transformation.GetRuleForRuleType(System.Type)
  overload: NMF.Synchronizations.ReflectiveSynchronization.GetRuleForRuleType*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NMF.Synchronizations.ReflectiveSynchronization.Rule``1
  commentId: M:NMF.Synchronizations.ReflectiveSynchronization.Rule``1
  id: Rule``1
  parent: NMF.Synchronizations.ReflectiveSynchronization
  langs:
  - csharp
  - vb
  name: Rule<TRule>()
  nameWithType: ReflectiveSynchronization.Rule<TRule>()
  fullName: NMF.Synchronizations.ReflectiveSynchronization.Rule<TRule>()
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/ReflectiveSynchronization.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Rule
    path: src/Synchronizations/Synchronizations/ReflectiveSynchronization.cs
    startLine: 68
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nGets the transformation rule instance of the given rule type within the given transformation\n"
  example: []
  syntax:
    content: >-
      public TRule Rule<TRule>()
          where TRule : GeneralTransformationRule
    typeParameters:
    - id: TRule
      description: The type of the desired transformation rule
    return:
      type: '{TRule}'
      description: The transformation rule
    content.vb: Public Function Rule(Of TRule As GeneralTransformationRule) As TRule
  overload: NMF.Synchronizations.ReflectiveSynchronization.Rule*
  nameWithType.vb: ReflectiveSynchronization.Rule(Of TRule)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.ReflectiveSynchronization.Rule(Of TRule)()
  name.vb: Rule(Of TRule)()
- uid: NMF.Synchronizations.ReflectiveSynchronization.SynchronizationRule``1
  commentId: M:NMF.Synchronizations.ReflectiveSynchronization.SynchronizationRule``1
  id: SynchronizationRule``1
  parent: NMF.Synchronizations.ReflectiveSynchronization
  langs:
  - csharp
  - vb
  name: SynchronizationRule<TRule>()
  nameWithType: ReflectiveSynchronization.SynchronizationRule<TRule>()
  fullName: NMF.Synchronizations.ReflectiveSynchronization.SynchronizationRule<TRule>()
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/ReflectiveSynchronization.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizationRule
    path: src/Synchronizations/Synchronizations/ReflectiveSynchronization.cs
    startLine: 79
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nGets the synchronization rule instance of the given rule type within the given transformation\n"
  example: []
  syntax:
    content: >-
      public TRule SynchronizationRule<TRule>()
          where TRule : SynchronizationRuleBase
    typeParameters:
    - id: TRule
      description: The type of the desired transformation rule
    return:
      type: '{TRule}'
      description: The transformation rule
    content.vb: Public Function SynchronizationRule(Of TRule As SynchronizationRuleBase) As TRule
  overload: NMF.Synchronizations.ReflectiveSynchronization.SynchronizationRule*
  nameWithType.vb: ReflectiveSynchronization.SynchronizationRule(Of TRule)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.ReflectiveSynchronization.SynchronizationRule(Of TRule)()
  name.vb: SynchronizationRule(Of TRule)()
- uid: NMF.Synchronizations.ReflectiveSynchronization.GetRulesForRuleType(System.Type)
  commentId: M:NMF.Synchronizations.ReflectiveSynchronization.GetRulesForRuleType(System.Type)
  id: GetRulesForRuleType(System.Type)
  parent: NMF.Synchronizations.ReflectiveSynchronization
  langs:
  - csharp
  - vb
  name: GetRulesForRuleType(Type)
  nameWithType: ReflectiveSynchronization.GetRulesForRuleType(Type)
  fullName: NMF.Synchronizations.ReflectiveSynchronization.GetRulesForRuleType(System.Type)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/ReflectiveSynchronization.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetRulesForRuleType
    path: src/Synchronizations/Synchronizations/ReflectiveSynchronization.cs
    startLine: 99
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nGets all rules with the specified type (exact match)\n"
  remarks: This method assumes there is only one transformation rule per type
  example: []
  syntax:
    content: public override IEnumerable<GeneralTransformationRule> GetRulesForRuleType(Type transformationRule)
    parameters:
    - id: transformationRule
      type: System.Type
      description: The type of the transformation rules
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Transformations.Core.GeneralTransformationRule}
      description: A collection of all rules with this type
    content.vb: Public Overrides Function GetRulesForRuleType(transformationRule As Type) As IEnumerable(Of GeneralTransformationRule)
  overridden: NMF.Transformations.Core.Transformation.GetRulesForRuleType(System.Type)
  overload: NMF.Synchronizations.ReflectiveSynchronization.GetRulesForRuleType*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NMF.Synchronizations.ReflectiveSynchronization.RegisterRules
  commentId: M:NMF.Synchronizations.ReflectiveSynchronization.RegisterRules
  id: RegisterRules
  parent: NMF.Synchronizations.ReflectiveSynchronization
  langs:
  - csharp
  - vb
  name: RegisterRules()
  nameWithType: ReflectiveSynchronization.RegisterRules()
  fullName: NMF.Synchronizations.ReflectiveSynchronization.RegisterRules()
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/ReflectiveSynchronization.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RegisterRules
    path: src/Synchronizations/Synchronizations/ReflectiveSynchronization.cs
    startLine: 109
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nRegisters the rules of this transformation\n"
  example: []
  syntax:
    content: public override void RegisterRules()
    content.vb: Public Overrides Sub RegisterRules
  overridden: NMF.Synchronizations.Synchronization.RegisterRules
  overload: NMF.Synchronizations.ReflectiveSynchronization.RegisterRules*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NMF.Synchronizations.ReflectiveSynchronization.CreateCustomTransformationRules
  commentId: M:NMF.Synchronizations.ReflectiveSynchronization.CreateCustomTransformationRules
  id: CreateCustomTransformationRules
  parent: NMF.Synchronizations.ReflectiveSynchronization
  langs:
  - csharp
  - vb
  name: CreateCustomTransformationRules()
  nameWithType: ReflectiveSynchronization.CreateCustomTransformationRules()
  fullName: NMF.Synchronizations.ReflectiveSynchronization.CreateCustomTransformationRules()
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/ReflectiveSynchronization.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateCustomTransformationRules
    path: src/Synchronizations/Synchronizations/ReflectiveSynchronization.cs
    startLine: 128
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nCreates the custom transformation rules that are no public nested classes (cannot be overridden by reflected rules)\n"
  remarks: This method is called during Initialization. The output IEnumerable-collection is saved into a list.
  example: []
  syntax:
    content: protected virtual IEnumerable<GeneralTransformationRule> CreateCustomTransformationRules()
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Transformations.Core.GeneralTransformationRule}
      description: A collection of transformation rules
    content.vb: Protected Overridable Function CreateCustomTransformationRules As IEnumerable(Of GeneralTransformationRule)
  overload: NMF.Synchronizations.ReflectiveSynchronization.CreateCustomTransformationRules*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Synchronizations.ReflectiveSynchronization.CreateDefaultTransformationRules
  commentId: M:NMF.Synchronizations.ReflectiveSynchronization.CreateDefaultTransformationRules
  id: CreateDefaultTransformationRules
  parent: NMF.Synchronizations.ReflectiveSynchronization
  langs:
  - csharp
  - vb
  name: CreateDefaultTransformationRules()
  nameWithType: ReflectiveSynchronization.CreateDefaultTransformationRules()
  fullName: NMF.Synchronizations.ReflectiveSynchronization.CreateDefaultTransformationRules()
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/ReflectiveSynchronization.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateDefaultTransformationRules
    path: src/Synchronizations/Synchronizations/ReflectiveSynchronization.cs
    startLine: 138
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nCreates the default transformation rules that are no public nested classes (can be overridden by reflected rules)\n"
  remarks: This method is called during Initialization. The output IEnumerable-collection is saved into a list.
  example: []
  syntax:
    content: protected virtual IEnumerable<GeneralTransformationRule> CreateDefaultTransformationRules()
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Transformations.Core.GeneralTransformationRule}
      description: A collection of transformation rules
    content.vb: Protected Overridable Function CreateDefaultTransformationRules As IEnumerable(Of GeneralTransformationRule)
  overload: NMF.Synchronizations.ReflectiveSynchronization.CreateDefaultTransformationRules*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Synchronizations.ReflectiveSynchronization.CreateCustomSynchronizationRules
  commentId: M:NMF.Synchronizations.ReflectiveSynchronization.CreateCustomSynchronizationRules
  id: CreateCustomSynchronizationRules
  parent: NMF.Synchronizations.ReflectiveSynchronization
  langs:
  - csharp
  - vb
  name: CreateCustomSynchronizationRules()
  nameWithType: ReflectiveSynchronization.CreateCustomSynchronizationRules()
  fullName: NMF.Synchronizations.ReflectiveSynchronization.CreateCustomSynchronizationRules()
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/ReflectiveSynchronization.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateCustomSynchronizationRules
    path: src/Synchronizations/Synchronizations/ReflectiveSynchronization.cs
    startLine: 148
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nCreates the custom synchronization rules that are no public nested classes (cannot be overridden by reflected rules)\n"
  remarks: This method is called during Initialization. The output IEnumerable-collection is saved into a list.
  example: []
  syntax:
    content: protected virtual IEnumerable<SynchronizationRuleBase> CreateCustomSynchronizationRules()
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Synchronizations.SynchronizationRuleBase}
      description: A collection of transformation rules
    content.vb: Protected Overridable Function CreateCustomSynchronizationRules As IEnumerable(Of SynchronizationRuleBase)
  overload: NMF.Synchronizations.ReflectiveSynchronization.CreateCustomSynchronizationRules*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Synchronizations.ReflectiveSynchronization.CreateDefaultSynchronizationRules
  commentId: M:NMF.Synchronizations.ReflectiveSynchronization.CreateDefaultSynchronizationRules
  id: CreateDefaultSynchronizationRules
  parent: NMF.Synchronizations.ReflectiveSynchronization
  langs:
  - csharp
  - vb
  name: CreateDefaultSynchronizationRules()
  nameWithType: ReflectiveSynchronization.CreateDefaultSynchronizationRules()
  fullName: NMF.Synchronizations.ReflectiveSynchronization.CreateDefaultSynchronizationRules()
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/ReflectiveSynchronization.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateDefaultSynchronizationRules
    path: src/Synchronizations/Synchronizations/ReflectiveSynchronization.cs
    startLine: 158
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nCreates the default synchronization rules that are no public nested classes (can be overridden by reflected rules)\n"
  remarks: This method is called during Initialization. The output IEnumerable-collection is saved into a list.
  example: []
  syntax:
    content: protected virtual IEnumerable<SynchronizationRuleBase> CreateDefaultSynchronizationRules()
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Synchronizations.SynchronizationRuleBase}
      description: A collection of transformation rules
    content.vb: Protected Overridable Function CreateDefaultSynchronizationRules As IEnumerable(Of SynchronizationRuleBase)
  overload: NMF.Synchronizations.ReflectiveSynchronization.CreateDefaultSynchronizationRules*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: NMF.Synchronizations.ReflectiveSynchronization.SynchronizationRules
  commentId: P:NMF.Synchronizations.ReflectiveSynchronization.SynchronizationRules
  id: SynchronizationRules
  parent: NMF.Synchronizations.ReflectiveSynchronization
  langs:
  - csharp
  - vb
  name: SynchronizationRules
  nameWithType: ReflectiveSynchronization.SynchronizationRules
  fullName: NMF.Synchronizations.ReflectiveSynchronization.SynchronizationRules
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/ReflectiveSynchronization.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SynchronizationRules
    path: src/Synchronizations/Synchronizations/ReflectiveSynchronization.cs
    startLine: 167
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nGets the synchronization rules contained in this synchronization\n"
  example: []
  syntax:
    content: public override IEnumerable<SynchronizationRuleBase> SynchronizationRules { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{NMF.Synchronizations.SynchronizationRuleBase}
    content.vb: Public Overrides ReadOnly Property SynchronizationRules As IEnumerable(Of SynchronizationRuleBase)
  overridden: NMF.Synchronizations.Synchronization.SynchronizationRules
  overload: NMF.Synchronizations.ReflectiveSynchronization.SynchronizationRules*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
references:
- uid: NMF.Synchronizations
  commentId: N:NMF.Synchronizations
  name: NMF.Synchronizations
  nameWithType: NMF.Synchronizations
  fullName: NMF.Synchronizations
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Transformations.Core.Transformation
  commentId: T:NMF.Transformations.Core.Transformation
  parent: NMF.Transformations.Core
  name: Transformation
  nameWithType: Transformation
  fullName: NMF.Transformations.Core.Transformation
- uid: NMF.Synchronizations.Synchronization
  commentId: T:NMF.Synchronizations.Synchronization
  parent: NMF.Synchronizations
  name: Synchronization
  nameWithType: Synchronization
  fullName: NMF.Synchronizations.Synchronization
- uid: NMF.Synchronizations.Synchronization.GetSynchronizationRuleForType(System.Type)
  commentId: M:NMF.Synchronizations.Synchronization.GetSynchronizationRuleForType(System.Type)
  parent: NMF.Synchronizations.Synchronization
  isExternal: true
  name: GetSynchronizationRuleForType(Type)
  nameWithType: Synchronization.GetSynchronizationRuleForType(Type)
  fullName: NMF.Synchronizations.Synchronization.GetSynchronizationRuleForType(System.Type)
  spec.csharp:
  - uid: NMF.Synchronizations.Synchronization.GetSynchronizationRuleForType(System.Type)
    name: GetSynchronizationRuleForType
    nameWithType: Synchronization.GetSynchronizationRuleForType
    fullName: NMF.Synchronizations.Synchronization.GetSynchronizationRuleForType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.Synchronization.GetSynchronizationRuleForType(System.Type)
    name: GetSynchronizationRuleForType
    nameWithType: Synchronization.GetSynchronizationRuleForType
    fullName: NMF.Synchronizations.Synchronization.GetSynchronizationRuleForType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.Synchronization.GetSynchronizationRulesForType(System.Type)
  commentId: M:NMF.Synchronizations.Synchronization.GetSynchronizationRulesForType(System.Type)
  parent: NMF.Synchronizations.Synchronization
  isExternal: true
  name: GetSynchronizationRulesForType(Type)
  nameWithType: Synchronization.GetSynchronizationRulesForType(Type)
  fullName: NMF.Synchronizations.Synchronization.GetSynchronizationRulesForType(System.Type)
  spec.csharp:
  - uid: NMF.Synchronizations.Synchronization.GetSynchronizationRulesForType(System.Type)
    name: GetSynchronizationRulesForType
    nameWithType: Synchronization.GetSynchronizationRulesForType
    fullName: NMF.Synchronizations.Synchronization.GetSynchronizationRulesForType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.Synchronization.GetSynchronizationRulesForType(System.Type)
    name: GetSynchronizationRulesForType
    nameWithType: Synchronization.GetSynchronizationRulesForType
    fullName: NMF.Synchronizations.Synchronization.GetSynchronizationRulesForType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.Synchronization.GetSynchronizationRuleForSignature(System.Type,System.Type)
  commentId: M:NMF.Synchronizations.Synchronization.GetSynchronizationRuleForSignature(System.Type,System.Type)
  parent: NMF.Synchronizations.Synchronization
  isExternal: true
  name: GetSynchronizationRuleForSignature(Type, Type)
  nameWithType: Synchronization.GetSynchronizationRuleForSignature(Type, Type)
  fullName: NMF.Synchronizations.Synchronization.GetSynchronizationRuleForSignature(System.Type, System.Type)
  spec.csharp:
  - uid: NMF.Synchronizations.Synchronization.GetSynchronizationRuleForSignature(System.Type,System.Type)
    name: GetSynchronizationRuleForSignature
    nameWithType: Synchronization.GetSynchronizationRuleForSignature
    fullName: NMF.Synchronizations.Synchronization.GetSynchronizationRuleForSignature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.Synchronization.GetSynchronizationRuleForSignature(System.Type,System.Type)
    name: GetSynchronizationRuleForSignature
    nameWithType: Synchronization.GetSynchronizationRuleForSignature
    fullName: NMF.Synchronizations.Synchronization.GetSynchronizationRuleForSignature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.Synchronization.GetSynchronizationRulesForSignature(System.Type,System.Type)
  commentId: M:NMF.Synchronizations.Synchronization.GetSynchronizationRulesForSignature(System.Type,System.Type)
  parent: NMF.Synchronizations.Synchronization
  isExternal: true
  name: GetSynchronizationRulesForSignature(Type, Type)
  nameWithType: Synchronization.GetSynchronizationRulesForSignature(Type, Type)
  fullName: NMF.Synchronizations.Synchronization.GetSynchronizationRulesForSignature(System.Type, System.Type)
  spec.csharp:
  - uid: NMF.Synchronizations.Synchronization.GetSynchronizationRulesForSignature(System.Type,System.Type)
    name: GetSynchronizationRulesForSignature
    nameWithType: Synchronization.GetSynchronizationRulesForSignature
    fullName: NMF.Synchronizations.Synchronization.GetSynchronizationRulesForSignature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.Synchronization.GetSynchronizationRulesForSignature(System.Type,System.Type)
    name: GetSynchronizationRulesForSignature
    nameWithType: Synchronization.GetSynchronizationRulesForSignature
    fullName: NMF.Synchronizations.Synchronization.GetSynchronizationRulesForSignature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.Synchronization.Synchronize``2({TLeft}@,{TRight}@,NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
  commentId: M:NMF.Synchronizations.Synchronization.Synchronize``2(``0@,``1@,NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
  parent: NMF.Synchronizations.Synchronization
  definition: NMF.Synchronizations.Synchronization.Synchronize``2(``0@,``1@,NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
  name: Synchronize<TLeft, TRight>(TLeft, TRight, SynchronizationDirection, ChangePropagationMode)
  nameWithType: Synchronization.Synchronize<TLeft, TRight>(TLeft, TRight, SynchronizationDirection, ChangePropagationMode)
  fullName: NMF.Synchronizations.Synchronization.Synchronize<TLeft, TRight>(TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Transformations.ChangePropagationMode)
  nameWithType.vb: Synchronization.Synchronize(Of TLeft, TRight)(TLeft, TRight, SynchronizationDirection, ChangePropagationMode)
  fullName.vb: NMF.Synchronizations.Synchronization.Synchronize(Of TLeft, TRight)(TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Transformations.ChangePropagationMode)
  name.vb: Synchronize(Of TLeft, TRight)(TLeft, TRight, SynchronizationDirection, ChangePropagationMode)
  spec.csharp:
  - uid: NMF.Synchronizations.Synchronization.Synchronize``2(``0@,``1@,NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
    name: Synchronize<TLeft, TRight>
    nameWithType: Synchronization.Synchronize<TLeft, TRight>
    fullName: NMF.Synchronizations.Synchronization.Synchronize<TLeft, TRight>
  - name: (
    nameWithType: (
    fullName: (
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.ChangePropagationMode
    name: ChangePropagationMode
    nameWithType: ChangePropagationMode
    fullName: NMF.Transformations.ChangePropagationMode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.Synchronization.Synchronize``2(``0@,``1@,NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
    name: Synchronize(Of TLeft, TRight)
    nameWithType: Synchronization.Synchronize(Of TLeft, TRight)
    fullName: NMF.Synchronizations.Synchronization.Synchronize(Of TLeft, TRight)
  - name: (
    nameWithType: (
    fullName: (
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.ChangePropagationMode
    name: ChangePropagationMode
    nameWithType: ChangePropagationMode
    fullName: NMF.Transformations.ChangePropagationMode
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.Synchronization.Synchronize``2(NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}},{TLeft}@,{TRight}@,NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
  commentId: M:NMF.Synchronizations.Synchronization.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},``0@,``1@,NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
  parent: NMF.Synchronizations.Synchronization
  definition: NMF.Synchronizations.Synchronization.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},``0@,``1@,NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
  name: Synchronize<TLeft, TRight>(SynchronizationRule<TLeft, TRight>, TLeft, TRight, SynchronizationDirection, ChangePropagationMode)
  nameWithType: Synchronization.Synchronize<TLeft, TRight>(SynchronizationRule<TLeft, TRight>, TLeft, TRight, SynchronizationDirection, ChangePropagationMode)
  fullName: NMF.Synchronizations.Synchronization.Synchronize<TLeft, TRight>(NMF.Synchronizations.SynchronizationRule<TLeft, TRight>, TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Transformations.ChangePropagationMode)
  nameWithType.vb: Synchronization.Synchronize(Of TLeft, TRight)(SynchronizationRule(Of TLeft, TRight), TLeft, TRight, SynchronizationDirection, ChangePropagationMode)
  fullName.vb: NMF.Synchronizations.Synchronization.Synchronize(Of TLeft, TRight)(NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight), TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Transformations.ChangePropagationMode)
  name.vb: Synchronize(Of TLeft, TRight)(SynchronizationRule(Of TLeft, TRight), TLeft, TRight, SynchronizationDirection, ChangePropagationMode)
  spec.csharp:
  - uid: NMF.Synchronizations.Synchronization.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},``0@,``1@,NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
    name: Synchronize<TLeft, TRight>
    nameWithType: Synchronization.Synchronize<TLeft, TRight>
    fullName: NMF.Synchronizations.Synchronization.Synchronize<TLeft, TRight>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.ChangePropagationMode
    name: ChangePropagationMode
    nameWithType: ChangePropagationMode
    fullName: NMF.Transformations.ChangePropagationMode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.Synchronization.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},``0@,``1@,NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
    name: Synchronize(Of TLeft, TRight)
    nameWithType: Synchronization.Synchronize(Of TLeft, TRight)
    fullName: NMF.Synchronizations.Synchronization.Synchronize(Of TLeft, TRight)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.ChangePropagationMode
    name: ChangePropagationMode
    nameWithType: ChangePropagationMode
    fullName: NMF.Transformations.ChangePropagationMode
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.Synchronization.Synchronize``2({TLeft}@,{TRight}@,NMF.Synchronizations.ISynchronizationContext)
  commentId: M:NMF.Synchronizations.Synchronization.Synchronize``2(``0@,``1@,NMF.Synchronizations.ISynchronizationContext)
  parent: NMF.Synchronizations.Synchronization
  definition: NMF.Synchronizations.Synchronization.Synchronize``2(``0@,``1@,NMF.Synchronizations.ISynchronizationContext)
  name: Synchronize<TLeft, TRight>(TLeft, TRight, ISynchronizationContext)
  nameWithType: Synchronization.Synchronize<TLeft, TRight>(TLeft, TRight, ISynchronizationContext)
  fullName: NMF.Synchronizations.Synchronization.Synchronize<TLeft, TRight>(TLeft, TRight, NMF.Synchronizations.ISynchronizationContext)
  nameWithType.vb: Synchronization.Synchronize(Of TLeft, TRight)(TLeft, TRight, ISynchronizationContext)
  fullName.vb: NMF.Synchronizations.Synchronization.Synchronize(Of TLeft, TRight)(TLeft, TRight, NMF.Synchronizations.ISynchronizationContext)
  name.vb: Synchronize(Of TLeft, TRight)(TLeft, TRight, ISynchronizationContext)
  spec.csharp:
  - uid: NMF.Synchronizations.Synchronization.Synchronize``2(``0@,``1@,NMF.Synchronizations.ISynchronizationContext)
    name: Synchronize<TLeft, TRight>
    nameWithType: Synchronization.Synchronize<TLeft, TRight>
    fullName: NMF.Synchronizations.Synchronization.Synchronize<TLeft, TRight>
  - name: (
    nameWithType: (
    fullName: (
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.Synchronization.Synchronize``2(``0@,``1@,NMF.Synchronizations.ISynchronizationContext)
    name: Synchronize(Of TLeft, TRight)
    nameWithType: Synchronization.Synchronize(Of TLeft, TRight)
    fullName: NMF.Synchronizations.Synchronization.Synchronize(Of TLeft, TRight)
  - name: (
    nameWithType: (
    fullName: (
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.Synchronization.Synchronize``2(NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}},{TLeft}@,{TRight}@,NMF.Synchronizations.ISynchronizationContext)
  commentId: M:NMF.Synchronizations.Synchronization.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},``0@,``1@,NMF.Synchronizations.ISynchronizationContext)
  parent: NMF.Synchronizations.Synchronization
  definition: NMF.Synchronizations.Synchronization.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},``0@,``1@,NMF.Synchronizations.ISynchronizationContext)
  name: Synchronize<TLeft, TRight>(SynchronizationRule<TLeft, TRight>, TLeft, TRight, ISynchronizationContext)
  nameWithType: Synchronization.Synchronize<TLeft, TRight>(SynchronizationRule<TLeft, TRight>, TLeft, TRight, ISynchronizationContext)
  fullName: NMF.Synchronizations.Synchronization.Synchronize<TLeft, TRight>(NMF.Synchronizations.SynchronizationRule<TLeft, TRight>, TLeft, TRight, NMF.Synchronizations.ISynchronizationContext)
  nameWithType.vb: Synchronization.Synchronize(Of TLeft, TRight)(SynchronizationRule(Of TLeft, TRight), TLeft, TRight, ISynchronizationContext)
  fullName.vb: NMF.Synchronizations.Synchronization.Synchronize(Of TLeft, TRight)(NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight), TLeft, TRight, NMF.Synchronizations.ISynchronizationContext)
  name.vb: Synchronize(Of TLeft, TRight)(SynchronizationRule(Of TLeft, TRight), TLeft, TRight, ISynchronizationContext)
  spec.csharp:
  - uid: NMF.Synchronizations.Synchronization.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},``0@,``1@,NMF.Synchronizations.ISynchronizationContext)
    name: Synchronize<TLeft, TRight>
    nameWithType: Synchronization.Synchronize<TLeft, TRight>
    fullName: NMF.Synchronizations.Synchronization.Synchronize<TLeft, TRight>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.Synchronization.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},``0@,``1@,NMF.Synchronizations.ISynchronizationContext)
    name: Synchronize(Of TLeft, TRight)
    nameWithType: Synchronization.Synchronize(Of TLeft, TRight)
    fullName: NMF.Synchronizations.Synchronization.Synchronize(Of TLeft, TRight)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.Synchronization.SynchronizeMany``2(System.Collections.Generic.ICollection{{TLeft}},System.Collections.Generic.ICollection{{TRight}},NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
  commentId: M:NMF.Synchronizations.Synchronization.SynchronizeMany``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
  parent: NMF.Synchronizations.Synchronization
  definition: NMF.Synchronizations.Synchronization.SynchronizeMany``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
  name: SynchronizeMany<TLeft, TRight>(ICollection<TLeft>, ICollection<TRight>, SynchronizationDirection, ChangePropagationMode)
  nameWithType: Synchronization.SynchronizeMany<TLeft, TRight>(ICollection<TLeft>, ICollection<TRight>, SynchronizationDirection, ChangePropagationMode)
  fullName: NMF.Synchronizations.Synchronization.SynchronizeMany<TLeft, TRight>(System.Collections.Generic.ICollection<TLeft>, System.Collections.Generic.ICollection<TRight>, NMF.Synchronizations.SynchronizationDirection, NMF.Transformations.ChangePropagationMode)
  nameWithType.vb: Synchronization.SynchronizeMany(Of TLeft, TRight)(ICollection(Of TLeft), ICollection(Of TRight), SynchronizationDirection, ChangePropagationMode)
  fullName.vb: NMF.Synchronizations.Synchronization.SynchronizeMany(Of TLeft, TRight)(System.Collections.Generic.ICollection(Of TLeft), System.Collections.Generic.ICollection(Of TRight), NMF.Synchronizations.SynchronizationDirection, NMF.Transformations.ChangePropagationMode)
  name.vb: SynchronizeMany(Of TLeft, TRight)(ICollection(Of TLeft), ICollection(Of TRight), SynchronizationDirection, ChangePropagationMode)
  spec.csharp:
  - uid: NMF.Synchronizations.Synchronization.SynchronizeMany``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
    name: SynchronizeMany<TLeft, TRight>
    nameWithType: Synchronization.SynchronizeMany<TLeft, TRight>
    fullName: NMF.Synchronizations.Synchronization.SynchronizeMany<TLeft, TRight>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.ChangePropagationMode
    name: ChangePropagationMode
    nameWithType: ChangePropagationMode
    fullName: NMF.Transformations.ChangePropagationMode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.Synchronization.SynchronizeMany``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
    name: SynchronizeMany(Of TLeft, TRight)
    nameWithType: Synchronization.SynchronizeMany(Of TLeft, TRight)
    fullName: NMF.Synchronizations.Synchronization.SynchronizeMany(Of TLeft, TRight)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.ChangePropagationMode
    name: ChangePropagationMode
    nameWithType: ChangePropagationMode
    fullName: NMF.Transformations.ChangePropagationMode
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.Synchronization.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}},System.Collections.Generic.ICollection{{TLeft}},System.Collections.Generic.ICollection{{TRight}},NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
  commentId: M:NMF.Synchronizations.Synchronization.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
  parent: NMF.Synchronizations.Synchronization
  definition: NMF.Synchronizations.Synchronization.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
  name: SynchronizeMany<TLeft, TRight>(SynchronizationRule<TLeft, TRight>, ICollection<TLeft>, ICollection<TRight>, SynchronizationDirection, ChangePropagationMode)
  nameWithType: Synchronization.SynchronizeMany<TLeft, TRight>(SynchronizationRule<TLeft, TRight>, ICollection<TLeft>, ICollection<TRight>, SynchronizationDirection, ChangePropagationMode)
  fullName: NMF.Synchronizations.Synchronization.SynchronizeMany<TLeft, TRight>(NMF.Synchronizations.SynchronizationRule<TLeft, TRight>, System.Collections.Generic.ICollection<TLeft>, System.Collections.Generic.ICollection<TRight>, NMF.Synchronizations.SynchronizationDirection, NMF.Transformations.ChangePropagationMode)
  nameWithType.vb: Synchronization.SynchronizeMany(Of TLeft, TRight)(SynchronizationRule(Of TLeft, TRight), ICollection(Of TLeft), ICollection(Of TRight), SynchronizationDirection, ChangePropagationMode)
  fullName.vb: NMF.Synchronizations.Synchronization.SynchronizeMany(Of TLeft, TRight)(NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight), System.Collections.Generic.ICollection(Of TLeft), System.Collections.Generic.ICollection(Of TRight), NMF.Synchronizations.SynchronizationDirection, NMF.Transformations.ChangePropagationMode)
  name.vb: SynchronizeMany(Of TLeft, TRight)(SynchronizationRule(Of TLeft, TRight), ICollection(Of TLeft), ICollection(Of TRight), SynchronizationDirection, ChangePropagationMode)
  spec.csharp:
  - uid: NMF.Synchronizations.Synchronization.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
    name: SynchronizeMany<TLeft, TRight>
    nameWithType: Synchronization.SynchronizeMany<TLeft, TRight>
    fullName: NMF.Synchronizations.Synchronization.SynchronizeMany<TLeft, TRight>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.ChangePropagationMode
    name: ChangePropagationMode
    nameWithType: ChangePropagationMode
    fullName: NMF.Transformations.ChangePropagationMode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.Synchronization.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
    name: SynchronizeMany(Of TLeft, TRight)
    nameWithType: Synchronization.SynchronizeMany(Of TLeft, TRight)
    fullName: NMF.Synchronizations.Synchronization.SynchronizeMany(Of TLeft, TRight)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.ChangePropagationMode
    name: ChangePropagationMode
    nameWithType: ChangePropagationMode
    fullName: NMF.Transformations.ChangePropagationMode
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.Synchronization.SynchronizeMany``2(System.Collections.Generic.ICollection{{TLeft}},System.Collections.Generic.ICollection{{TRight}},NMF.Synchronizations.ISynchronizationContext)
  commentId: M:NMF.Synchronizations.Synchronization.SynchronizeMany``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.ISynchronizationContext)
  parent: NMF.Synchronizations.Synchronization
  definition: NMF.Synchronizations.Synchronization.SynchronizeMany``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.ISynchronizationContext)
  name: SynchronizeMany<TLeft, TRight>(ICollection<TLeft>, ICollection<TRight>, ISynchronizationContext)
  nameWithType: Synchronization.SynchronizeMany<TLeft, TRight>(ICollection<TLeft>, ICollection<TRight>, ISynchronizationContext)
  fullName: NMF.Synchronizations.Synchronization.SynchronizeMany<TLeft, TRight>(System.Collections.Generic.ICollection<TLeft>, System.Collections.Generic.ICollection<TRight>, NMF.Synchronizations.ISynchronizationContext)
  nameWithType.vb: Synchronization.SynchronizeMany(Of TLeft, TRight)(ICollection(Of TLeft), ICollection(Of TRight), ISynchronizationContext)
  fullName.vb: NMF.Synchronizations.Synchronization.SynchronizeMany(Of TLeft, TRight)(System.Collections.Generic.ICollection(Of TLeft), System.Collections.Generic.ICollection(Of TRight), NMF.Synchronizations.ISynchronizationContext)
  name.vb: SynchronizeMany(Of TLeft, TRight)(ICollection(Of TLeft), ICollection(Of TRight), ISynchronizationContext)
  spec.csharp:
  - uid: NMF.Synchronizations.Synchronization.SynchronizeMany``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.ISynchronizationContext)
    name: SynchronizeMany<TLeft, TRight>
    nameWithType: Synchronization.SynchronizeMany<TLeft, TRight>
    fullName: NMF.Synchronizations.Synchronization.SynchronizeMany<TLeft, TRight>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.Synchronization.SynchronizeMany``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.ISynchronizationContext)
    name: SynchronizeMany(Of TLeft, TRight)
    nameWithType: Synchronization.SynchronizeMany(Of TLeft, TRight)
    fullName: NMF.Synchronizations.Synchronization.SynchronizeMany(Of TLeft, TRight)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.Synchronization.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{{TLeft},{TRight}},System.Collections.Generic.ICollection{{TLeft}},System.Collections.Generic.ICollection{{TRight}},NMF.Synchronizations.ISynchronizationContext)
  commentId: M:NMF.Synchronizations.Synchronization.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.ISynchronizationContext)
  parent: NMF.Synchronizations.Synchronization
  definition: NMF.Synchronizations.Synchronization.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.ISynchronizationContext)
  name: SynchronizeMany<TLeft, TRight>(SynchronizationRule<TLeft, TRight>, ICollection<TLeft>, ICollection<TRight>, ISynchronizationContext)
  nameWithType: Synchronization.SynchronizeMany<TLeft, TRight>(SynchronizationRule<TLeft, TRight>, ICollection<TLeft>, ICollection<TRight>, ISynchronizationContext)
  fullName: NMF.Synchronizations.Synchronization.SynchronizeMany<TLeft, TRight>(NMF.Synchronizations.SynchronizationRule<TLeft, TRight>, System.Collections.Generic.ICollection<TLeft>, System.Collections.Generic.ICollection<TRight>, NMF.Synchronizations.ISynchronizationContext)
  nameWithType.vb: Synchronization.SynchronizeMany(Of TLeft, TRight)(SynchronizationRule(Of TLeft, TRight), ICollection(Of TLeft), ICollection(Of TRight), ISynchronizationContext)
  fullName.vb: NMF.Synchronizations.Synchronization.SynchronizeMany(Of TLeft, TRight)(NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight), System.Collections.Generic.ICollection(Of TLeft), System.Collections.Generic.ICollection(Of TRight), NMF.Synchronizations.ISynchronizationContext)
  name.vb: SynchronizeMany(Of TLeft, TRight)(SynchronizationRule(Of TLeft, TRight), ICollection(Of TLeft), ICollection(Of TRight), ISynchronizationContext)
  spec.csharp:
  - uid: NMF.Synchronizations.Synchronization.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.ISynchronizationContext)
    name: SynchronizeMany<TLeft, TRight>
    nameWithType: Synchronization.SynchronizeMany<TLeft, TRight>
    fullName: NMF.Synchronizations.Synchronization.SynchronizeMany<TLeft, TRight>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.Synchronization.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.ISynchronizationContext)
    name: SynchronizeMany(Of TLeft, TRight)
    nameWithType: Synchronization.SynchronizeMany(Of TLeft, TRight)
    fullName: NMF.Synchronizations.Synchronization.SynchronizeMany(Of TLeft, TRight)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Transformation.Patterns
  commentId: P:NMF.Transformations.Core.Transformation.Patterns
  parent: NMF.Transformations.Core.Transformation
  name: Patterns
  nameWithType: Transformation.Patterns
  fullName: NMF.Transformations.Core.Transformation.Patterns
- uid: NMF.Transformations.Core.Transformation.IsInitialized
  commentId: P:NMF.Transformations.Core.Transformation.IsInitialized
  parent: NMF.Transformations.Core.Transformation
  name: IsInitialized
  nameWithType: Transformation.IsInitialized
  fullName: NMF.Transformations.Core.Transformation.IsInitialized
- uid: NMF.Transformations.Core.Transformation.IsRulesRegistered
  commentId: P:NMF.Transformations.Core.Transformation.IsRulesRegistered
  parent: NMF.Transformations.Core.Transformation
  name: IsRulesRegistered
  nameWithType: Transformation.IsRulesRegistered
  fullName: NMF.Transformations.Core.Transformation.IsRulesRegistered
- uid: NMF.Transformations.Core.Transformation.CreateRulesInternal
  commentId: M:NMF.Transformations.Core.Transformation.CreateRulesInternal
  parent: NMF.Transformations.Core.Transformation
  name: CreateRulesInternal()
  nameWithType: Transformation.CreateRulesInternal()
  fullName: NMF.Transformations.Core.Transformation.CreateRulesInternal()
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.CreateRulesInternal
    name: CreateRulesInternal
    nameWithType: Transformation.CreateRulesInternal
    fullName: NMF.Transformations.Core.Transformation.CreateRulesInternal
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.CreateRulesInternal
    name: CreateRulesInternal
    nameWithType: Transformation.CreateRulesInternal
    fullName: NMF.Transformations.Core.Transformation.CreateRulesInternal
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Transformation.CreateContext
  commentId: M:NMF.Transformations.Core.Transformation.CreateContext
  parent: NMF.Transformations.Core.Transformation
  name: CreateContext()
  nameWithType: Transformation.CreateContext()
  fullName: NMF.Transformations.Core.Transformation.CreateContext()
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.CreateContext
    name: CreateContext
    nameWithType: Transformation.CreateContext
    fullName: NMF.Transformations.Core.Transformation.CreateContext
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.CreateContext
    name: CreateContext
    nameWithType: Transformation.CreateContext
    fullName: NMF.Transformations.Core.Transformation.CreateContext
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Transformation.Initialize
  commentId: M:NMF.Transformations.Core.Transformation.Initialize
  parent: NMF.Transformations.Core.Transformation
  name: Initialize()
  nameWithType: Transformation.Initialize()
  fullName: NMF.Transformations.Core.Transformation.Initialize()
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.Initialize
    name: Initialize
    nameWithType: Transformation.Initialize
    fullName: NMF.Transformations.Core.Transformation.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.Initialize
    name: Initialize
    nameWithType: Transformation.Initialize
    fullName: NMF.Transformations.Core.Transformation.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Transformation.MaxOutputDelay
  commentId: P:NMF.Transformations.Core.Transformation.MaxOutputDelay
  parent: NMF.Transformations.Core.Transformation
  name: MaxOutputDelay
  nameWithType: Transformation.MaxOutputDelay
  fullName: NMF.Transformations.Core.Transformation.MaxOutputDelay
- uid: NMF.Transformations.Core.Transformation.MaxTransformationDelay
  commentId: P:NMF.Transformations.Core.Transformation.MaxTransformationDelay
  parent: NMF.Transformations.Core.Transformation
  name: MaxTransformationDelay
  nameWithType: Transformation.MaxTransformationDelay
  fullName: NMF.Transformations.Core.Transformation.MaxTransformationDelay
- uid: NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
  commentId: M:NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
  parent: NMF.Transformations.Core.Transformation
  name: ComputeInstantiatingTransformationRulePath(Computation)
  nameWithType: Transformation.ComputeInstantiatingTransformationRulePath(Computation)
  fullName: NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
    name: ComputeInstantiatingTransformationRulePath
    nameWithType: Transformation.ComputeInstantiatingTransformationRulePath
    fullName: NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath(NMF.Transformations.Core.Computation)
    name: ComputeInstantiatingTransformationRulePath
    nameWithType: Transformation.ComputeInstantiatingTransformationRulePath
    fullName: NMF.Transformations.Core.Transformation.ComputeInstantiatingTransformationRulePath
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Transformations.Core.Computation
    name: Computation
    nameWithType: Computation
    fullName: NMF.Transformations.Core.Computation
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type)
  commentId: M:NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type)
  parent: NMF.Transformations.Core.Transformation
  isExternal: true
  name: GetRulesForTypeSignature(Type[], Type)
  nameWithType: Transformation.GetRulesForTypeSignature(Type[], Type)
  fullName: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[], System.Type)
  nameWithType.vb: Transformation.GetRulesForTypeSignature(Type(), Type)
  fullName.vb: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type(), System.Type)
  name.vb: GetRulesForTypeSignature(Type(), Type)
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type)
    name: GetRulesForTypeSignature
    nameWithType: Transformation.GetRulesForTypeSignature
    fullName: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type)
    name: GetRulesForTypeSignature
    nameWithType: Transformation.GetRulesForTypeSignature
    fullName: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Transformation.GetRulesExact(System.Type[],System.Type)
  commentId: M:NMF.Transformations.Core.Transformation.GetRulesExact(System.Type[],System.Type)
  parent: NMF.Transformations.Core.Transformation
  isExternal: true
  name: GetRulesExact(Type[], Type)
  nameWithType: Transformation.GetRulesExact(Type[], Type)
  fullName: NMF.Transformations.Core.Transformation.GetRulesExact(System.Type[], System.Type)
  nameWithType.vb: Transformation.GetRulesExact(Type(), Type)
  fullName.vb: NMF.Transformations.Core.Transformation.GetRulesExact(System.Type(), System.Type)
  name.vb: GetRulesExact(Type(), Type)
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.GetRulesExact(System.Type[],System.Type)
    name: GetRulesExact
    nameWithType: Transformation.GetRulesExact
    fullName: NMF.Transformations.Core.Transformation.GetRulesExact
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.GetRulesExact(System.Type[],System.Type)
    name: GetRulesExact
    nameWithType: Transformation.GetRulesExact
    fullName: NMF.Transformations.Core.Transformation.GetRulesExact
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type[],System.Type)
  commentId: M:NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type[],System.Type)
  parent: NMF.Transformations.Core.Transformation
  isExternal: true
  name: GetRuleForTypeSignature(Type[], Type)
  nameWithType: Transformation.GetRuleForTypeSignature(Type[], Type)
  fullName: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type[], System.Type)
  nameWithType.vb: Transformation.GetRuleForTypeSignature(Type(), Type)
  fullName.vb: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type(), System.Type)
  name.vb: GetRuleForTypeSignature(Type(), Type)
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type[],System.Type)
    name: GetRuleForTypeSignature
    nameWithType: Transformation.GetRuleForTypeSignature
    fullName: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature(System.Type[],System.Type)
    name: GetRuleForTypeSignature
    nameWithType: Transformation.GetRuleForTypeSignature
    fullName: NMF.Transformations.Core.Transformation.GetRuleForTypeSignature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type[])
  commentId: M:NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type[])
  parent: NMF.Transformations.Core.Transformation
  isExternal: true
  name: GetRulesForInputTypes(Type[])
  nameWithType: Transformation.GetRulesForInputTypes(Type[])
  fullName: NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type[])
  nameWithType.vb: Transformation.GetRulesForInputTypes(Type())
  fullName.vb: NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type())
  name.vb: GetRulesForInputTypes(Type())
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type[])
    name: GetRulesForInputTypes
    nameWithType: Transformation.GetRulesForInputTypes
    fullName: NMF.Transformations.Core.Transformation.GetRulesForInputTypes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.GetRulesForInputTypes(System.Type[])
    name: GetRulesForInputTypes
    nameWithType: Transformation.GetRulesForInputTypes
    fullName: NMF.Transformations.Core.Transformation.GetRulesForInputTypes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Transformation.Rules
  commentId: P:NMF.Transformations.Core.Transformation.Rules
  parent: NMF.Transformations.Core.Transformation
  name: Rules
  nameWithType: Transformation.Rules
  fullName: NMF.Transformations.Core.Transformation.Rules
- uid: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type,System.Boolean)
  commentId: M:NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type,System.Boolean)
  parent: NMF.Transformations.Core.Transformation
  isExternal: true
  name: GetRulesForTypeSignature(Type[], Type, Boolean)
  nameWithType: Transformation.GetRulesForTypeSignature(Type[], Type, Boolean)
  fullName: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[], System.Type, System.Boolean)
  nameWithType.vb: Transformation.GetRulesForTypeSignature(Type(), Type, Boolean)
  fullName.vb: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type(), System.Type, System.Boolean)
  name.vb: GetRulesForTypeSignature(Type(), Type, Boolean)
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type,System.Boolean)
    name: GetRulesForTypeSignature
    nameWithType: Transformation.GetRulesForTypeSignature
    fullName: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature(System.Type[],System.Type,System.Boolean)
    name: GetRulesForTypeSignature
    nameWithType: Transformation.GetRulesForTypeSignature
    fullName: NMF.Transformations.Core.Transformation.GetRulesForTypeSignature
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Transformations.Core
  commentId: N:NMF.Transformations.Core
  name: NMF.Transformations.Core
  nameWithType: NMF.Transformations.Core
  fullName: NMF.Transformations.Core
- uid: NMF.Synchronizations.Synchronization.Synchronize``2(``0@,``1@,NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
  commentId: M:NMF.Synchronizations.Synchronization.Synchronize``2(``0@,``1@,NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
  name: Synchronize<TLeft, TRight>(TLeft, TRight, SynchronizationDirection, ChangePropagationMode)
  nameWithType: Synchronization.Synchronize<TLeft, TRight>(TLeft, TRight, SynchronizationDirection, ChangePropagationMode)
  fullName: NMF.Synchronizations.Synchronization.Synchronize<TLeft, TRight>(TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Transformations.ChangePropagationMode)
  nameWithType.vb: Synchronization.Synchronize(Of TLeft, TRight)(TLeft, TRight, SynchronizationDirection, ChangePropagationMode)
  fullName.vb: NMF.Synchronizations.Synchronization.Synchronize(Of TLeft, TRight)(TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Transformations.ChangePropagationMode)
  name.vb: Synchronize(Of TLeft, TRight)(TLeft, TRight, SynchronizationDirection, ChangePropagationMode)
  spec.csharp:
  - uid: NMF.Synchronizations.Synchronization.Synchronize``2(``0@,``1@,NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
    name: Synchronize<TLeft, TRight>
    nameWithType: Synchronization.Synchronize<TLeft, TRight>
    fullName: NMF.Synchronizations.Synchronization.Synchronize<TLeft, TRight>
  - name: (
    nameWithType: (
    fullName: (
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.ChangePropagationMode
    name: ChangePropagationMode
    nameWithType: ChangePropagationMode
    fullName: NMF.Transformations.ChangePropagationMode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.Synchronization.Synchronize``2(``0@,``1@,NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
    name: Synchronize(Of TLeft, TRight)
    nameWithType: Synchronization.Synchronize(Of TLeft, TRight)
    fullName: NMF.Synchronizations.Synchronization.Synchronize(Of TLeft, TRight)
  - name: (
    nameWithType: (
    fullName: (
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.ChangePropagationMode
    name: ChangePropagationMode
    nameWithType: ChangePropagationMode
    fullName: NMF.Transformations.ChangePropagationMode
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.Synchronization.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},``0@,``1@,NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
  commentId: M:NMF.Synchronizations.Synchronization.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},``0@,``1@,NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
  name: Synchronize<TLeft, TRight>(SynchronizationRule<TLeft, TRight>, TLeft, TRight, SynchronizationDirection, ChangePropagationMode)
  nameWithType: Synchronization.Synchronize<TLeft, TRight>(SynchronizationRule<TLeft, TRight>, TLeft, TRight, SynchronizationDirection, ChangePropagationMode)
  fullName: NMF.Synchronizations.Synchronization.Synchronize<TLeft, TRight>(NMF.Synchronizations.SynchronizationRule<TLeft, TRight>, TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Transformations.ChangePropagationMode)
  nameWithType.vb: Synchronization.Synchronize(Of TLeft, TRight)(SynchronizationRule(Of TLeft, TRight), TLeft, TRight, SynchronizationDirection, ChangePropagationMode)
  fullName.vb: NMF.Synchronizations.Synchronization.Synchronize(Of TLeft, TRight)(NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight), TLeft, TRight, NMF.Synchronizations.SynchronizationDirection, NMF.Transformations.ChangePropagationMode)
  name.vb: Synchronize(Of TLeft, TRight)(SynchronizationRule(Of TLeft, TRight), TLeft, TRight, SynchronizationDirection, ChangePropagationMode)
  spec.csharp:
  - uid: NMF.Synchronizations.Synchronization.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},``0@,``1@,NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
    name: Synchronize<TLeft, TRight>
    nameWithType: Synchronization.Synchronize<TLeft, TRight>
    fullName: NMF.Synchronizations.Synchronization.Synchronize<TLeft, TRight>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.ChangePropagationMode
    name: ChangePropagationMode
    nameWithType: ChangePropagationMode
    fullName: NMF.Transformations.ChangePropagationMode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.Synchronization.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},``0@,``1@,NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
    name: Synchronize(Of TLeft, TRight)
    nameWithType: Synchronization.Synchronize(Of TLeft, TRight)
    fullName: NMF.Synchronizations.Synchronization.Synchronize(Of TLeft, TRight)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.ChangePropagationMode
    name: ChangePropagationMode
    nameWithType: ChangePropagationMode
    fullName: NMF.Transformations.ChangePropagationMode
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.Synchronization.Synchronize``2(``0@,``1@,NMF.Synchronizations.ISynchronizationContext)
  commentId: M:NMF.Synchronizations.Synchronization.Synchronize``2(``0@,``1@,NMF.Synchronizations.ISynchronizationContext)
  name: Synchronize<TLeft, TRight>(TLeft, TRight, ISynchronizationContext)
  nameWithType: Synchronization.Synchronize<TLeft, TRight>(TLeft, TRight, ISynchronizationContext)
  fullName: NMF.Synchronizations.Synchronization.Synchronize<TLeft, TRight>(TLeft, TRight, NMF.Synchronizations.ISynchronizationContext)
  nameWithType.vb: Synchronization.Synchronize(Of TLeft, TRight)(TLeft, TRight, ISynchronizationContext)
  fullName.vb: NMF.Synchronizations.Synchronization.Synchronize(Of TLeft, TRight)(TLeft, TRight, NMF.Synchronizations.ISynchronizationContext)
  name.vb: Synchronize(Of TLeft, TRight)(TLeft, TRight, ISynchronizationContext)
  spec.csharp:
  - uid: NMF.Synchronizations.Synchronization.Synchronize``2(``0@,``1@,NMF.Synchronizations.ISynchronizationContext)
    name: Synchronize<TLeft, TRight>
    nameWithType: Synchronization.Synchronize<TLeft, TRight>
    fullName: NMF.Synchronizations.Synchronization.Synchronize<TLeft, TRight>
  - name: (
    nameWithType: (
    fullName: (
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.Synchronization.Synchronize``2(``0@,``1@,NMF.Synchronizations.ISynchronizationContext)
    name: Synchronize(Of TLeft, TRight)
    nameWithType: Synchronization.Synchronize(Of TLeft, TRight)
    fullName: NMF.Synchronizations.Synchronization.Synchronize(Of TLeft, TRight)
  - name: (
    nameWithType: (
    fullName: (
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.Synchronization.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},``0@,``1@,NMF.Synchronizations.ISynchronizationContext)
  commentId: M:NMF.Synchronizations.Synchronization.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},``0@,``1@,NMF.Synchronizations.ISynchronizationContext)
  name: Synchronize<TLeft, TRight>(SynchronizationRule<TLeft, TRight>, TLeft, TRight, ISynchronizationContext)
  nameWithType: Synchronization.Synchronize<TLeft, TRight>(SynchronizationRule<TLeft, TRight>, TLeft, TRight, ISynchronizationContext)
  fullName: NMF.Synchronizations.Synchronization.Synchronize<TLeft, TRight>(NMF.Synchronizations.SynchronizationRule<TLeft, TRight>, TLeft, TRight, NMF.Synchronizations.ISynchronizationContext)
  nameWithType.vb: Synchronization.Synchronize(Of TLeft, TRight)(SynchronizationRule(Of TLeft, TRight), TLeft, TRight, ISynchronizationContext)
  fullName.vb: NMF.Synchronizations.Synchronization.Synchronize(Of TLeft, TRight)(NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight), TLeft, TRight, NMF.Synchronizations.ISynchronizationContext)
  name.vb: Synchronize(Of TLeft, TRight)(SynchronizationRule(Of TLeft, TRight), TLeft, TRight, ISynchronizationContext)
  spec.csharp:
  - uid: NMF.Synchronizations.Synchronization.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},``0@,``1@,NMF.Synchronizations.ISynchronizationContext)
    name: Synchronize<TLeft, TRight>
    nameWithType: Synchronization.Synchronize<TLeft, TRight>
    fullName: NMF.Synchronizations.Synchronization.Synchronize<TLeft, TRight>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.Synchronization.Synchronize``2(NMF.Synchronizations.SynchronizationRule{``0,``1},``0@,``1@,NMF.Synchronizations.ISynchronizationContext)
    name: Synchronize(Of TLeft, TRight)
    nameWithType: Synchronization.Synchronize(Of TLeft, TRight)
    fullName: NMF.Synchronizations.Synchronization.Synchronize(Of TLeft, TRight)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.Synchronization.SynchronizeMany``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
  commentId: M:NMF.Synchronizations.Synchronization.SynchronizeMany``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
  isExternal: true
  name: SynchronizeMany<TLeft, TRight>(ICollection<TLeft>, ICollection<TRight>, SynchronizationDirection, ChangePropagationMode)
  nameWithType: Synchronization.SynchronizeMany<TLeft, TRight>(ICollection<TLeft>, ICollection<TRight>, SynchronizationDirection, ChangePropagationMode)
  fullName: NMF.Synchronizations.Synchronization.SynchronizeMany<TLeft, TRight>(System.Collections.Generic.ICollection<TLeft>, System.Collections.Generic.ICollection<TRight>, NMF.Synchronizations.SynchronizationDirection, NMF.Transformations.ChangePropagationMode)
  nameWithType.vb: Synchronization.SynchronizeMany(Of TLeft, TRight)(ICollection(Of TLeft), ICollection(Of TRight), SynchronizationDirection, ChangePropagationMode)
  fullName.vb: NMF.Synchronizations.Synchronization.SynchronizeMany(Of TLeft, TRight)(System.Collections.Generic.ICollection(Of TLeft), System.Collections.Generic.ICollection(Of TRight), NMF.Synchronizations.SynchronizationDirection, NMF.Transformations.ChangePropagationMode)
  name.vb: SynchronizeMany(Of TLeft, TRight)(ICollection(Of TLeft), ICollection(Of TRight), SynchronizationDirection, ChangePropagationMode)
  spec.csharp:
  - uid: NMF.Synchronizations.Synchronization.SynchronizeMany``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
    name: SynchronizeMany<TLeft, TRight>
    nameWithType: Synchronization.SynchronizeMany<TLeft, TRight>
    fullName: NMF.Synchronizations.Synchronization.SynchronizeMany<TLeft, TRight>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.ChangePropagationMode
    name: ChangePropagationMode
    nameWithType: ChangePropagationMode
    fullName: NMF.Transformations.ChangePropagationMode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.Synchronization.SynchronizeMany``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
    name: SynchronizeMany(Of TLeft, TRight)
    nameWithType: Synchronization.SynchronizeMany(Of TLeft, TRight)
    fullName: NMF.Synchronizations.Synchronization.SynchronizeMany(Of TLeft, TRight)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.ChangePropagationMode
    name: ChangePropagationMode
    nameWithType: ChangePropagationMode
    fullName: NMF.Transformations.ChangePropagationMode
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.Synchronization.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
  commentId: M:NMF.Synchronizations.Synchronization.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
  isExternal: true
  name: SynchronizeMany<TLeft, TRight>(SynchronizationRule<TLeft, TRight>, ICollection<TLeft>, ICollection<TRight>, SynchronizationDirection, ChangePropagationMode)
  nameWithType: Synchronization.SynchronizeMany<TLeft, TRight>(SynchronizationRule<TLeft, TRight>, ICollection<TLeft>, ICollection<TRight>, SynchronizationDirection, ChangePropagationMode)
  fullName: NMF.Synchronizations.Synchronization.SynchronizeMany<TLeft, TRight>(NMF.Synchronizations.SynchronizationRule<TLeft, TRight>, System.Collections.Generic.ICollection<TLeft>, System.Collections.Generic.ICollection<TRight>, NMF.Synchronizations.SynchronizationDirection, NMF.Transformations.ChangePropagationMode)
  nameWithType.vb: Synchronization.SynchronizeMany(Of TLeft, TRight)(SynchronizationRule(Of TLeft, TRight), ICollection(Of TLeft), ICollection(Of TRight), SynchronizationDirection, ChangePropagationMode)
  fullName.vb: NMF.Synchronizations.Synchronization.SynchronizeMany(Of TLeft, TRight)(NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight), System.Collections.Generic.ICollection(Of TLeft), System.Collections.Generic.ICollection(Of TRight), NMF.Synchronizations.SynchronizationDirection, NMF.Transformations.ChangePropagationMode)
  name.vb: SynchronizeMany(Of TLeft, TRight)(SynchronizationRule(Of TLeft, TRight), ICollection(Of TLeft), ICollection(Of TRight), SynchronizationDirection, ChangePropagationMode)
  spec.csharp:
  - uid: NMF.Synchronizations.Synchronization.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
    name: SynchronizeMany<TLeft, TRight>
    nameWithType: Synchronization.SynchronizeMany<TLeft, TRight>
    fullName: NMF.Synchronizations.Synchronization.SynchronizeMany<TLeft, TRight>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.ChangePropagationMode
    name: ChangePropagationMode
    nameWithType: ChangePropagationMode
    fullName: NMF.Transformations.ChangePropagationMode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.Synchronization.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.SynchronizationDirection,NMF.Transformations.ChangePropagationMode)
    name: SynchronizeMany(Of TLeft, TRight)
    nameWithType: Synchronization.SynchronizeMany(Of TLeft, TRight)
    fullName: NMF.Synchronizations.Synchronization.SynchronizeMany(Of TLeft, TRight)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Transformations.ChangePropagationMode
    name: ChangePropagationMode
    nameWithType: ChangePropagationMode
    fullName: NMF.Transformations.ChangePropagationMode
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.Synchronization.SynchronizeMany``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.ISynchronizationContext)
  commentId: M:NMF.Synchronizations.Synchronization.SynchronizeMany``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.ISynchronizationContext)
  isExternal: true
  name: SynchronizeMany<TLeft, TRight>(ICollection<TLeft>, ICollection<TRight>, ISynchronizationContext)
  nameWithType: Synchronization.SynchronizeMany<TLeft, TRight>(ICollection<TLeft>, ICollection<TRight>, ISynchronizationContext)
  fullName: NMF.Synchronizations.Synchronization.SynchronizeMany<TLeft, TRight>(System.Collections.Generic.ICollection<TLeft>, System.Collections.Generic.ICollection<TRight>, NMF.Synchronizations.ISynchronizationContext)
  nameWithType.vb: Synchronization.SynchronizeMany(Of TLeft, TRight)(ICollection(Of TLeft), ICollection(Of TRight), ISynchronizationContext)
  fullName.vb: NMF.Synchronizations.Synchronization.SynchronizeMany(Of TLeft, TRight)(System.Collections.Generic.ICollection(Of TLeft), System.Collections.Generic.ICollection(Of TRight), NMF.Synchronizations.ISynchronizationContext)
  name.vb: SynchronizeMany(Of TLeft, TRight)(ICollection(Of TLeft), ICollection(Of TRight), ISynchronizationContext)
  spec.csharp:
  - uid: NMF.Synchronizations.Synchronization.SynchronizeMany``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.ISynchronizationContext)
    name: SynchronizeMany<TLeft, TRight>
    nameWithType: Synchronization.SynchronizeMany<TLeft, TRight>
    fullName: NMF.Synchronizations.Synchronization.SynchronizeMany<TLeft, TRight>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.Synchronization.SynchronizeMany``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.ISynchronizationContext)
    name: SynchronizeMany(Of TLeft, TRight)
    nameWithType: Synchronization.SynchronizeMany(Of TLeft, TRight)
    fullName: NMF.Synchronizations.Synchronization.SynchronizeMany(Of TLeft, TRight)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.Synchronization.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.ISynchronizationContext)
  commentId: M:NMF.Synchronizations.Synchronization.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.ISynchronizationContext)
  isExternal: true
  name: SynchronizeMany<TLeft, TRight>(SynchronizationRule<TLeft, TRight>, ICollection<TLeft>, ICollection<TRight>, ISynchronizationContext)
  nameWithType: Synchronization.SynchronizeMany<TLeft, TRight>(SynchronizationRule<TLeft, TRight>, ICollection<TLeft>, ICollection<TRight>, ISynchronizationContext)
  fullName: NMF.Synchronizations.Synchronization.SynchronizeMany<TLeft, TRight>(NMF.Synchronizations.SynchronizationRule<TLeft, TRight>, System.Collections.Generic.ICollection<TLeft>, System.Collections.Generic.ICollection<TRight>, NMF.Synchronizations.ISynchronizationContext)
  nameWithType.vb: Synchronization.SynchronizeMany(Of TLeft, TRight)(SynchronizationRule(Of TLeft, TRight), ICollection(Of TLeft), ICollection(Of TRight), ISynchronizationContext)
  fullName.vb: NMF.Synchronizations.Synchronization.SynchronizeMany(Of TLeft, TRight)(NMF.Synchronizations.SynchronizationRule(Of TLeft, TRight), System.Collections.Generic.ICollection(Of TLeft), System.Collections.Generic.ICollection(Of TRight), NMF.Synchronizations.ISynchronizationContext)
  name.vb: SynchronizeMany(Of TLeft, TRight)(SynchronizationRule(Of TLeft, TRight), ICollection(Of TLeft), ICollection(Of TRight), ISynchronizationContext)
  spec.csharp:
  - uid: NMF.Synchronizations.Synchronization.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.ISynchronizationContext)
    name: SynchronizeMany<TLeft, TRight>
    nameWithType: Synchronization.SynchronizeMany<TLeft, TRight>
    fullName: NMF.Synchronizations.Synchronization.SynchronizeMany<TLeft, TRight>
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.Synchronization.SynchronizeMany``2(NMF.Synchronizations.SynchronizationRule{``0,``1},System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``1},NMF.Synchronizations.ISynchronizationContext)
    name: SynchronizeMany(Of TLeft, TRight)
    nameWithType: Synchronization.SynchronizeMany(Of TLeft, TRight)
    fullName: NMF.Synchronizations.Synchronization.SynchronizeMany(Of TLeft, TRight)
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationRule`2
    name: SynchronizationRule
    nameWithType: SynchronizationRule
    fullName: NMF.Synchronizations.SynchronizationRule
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Transformations.Core.Transformation.CreateRules
  commentId: M:NMF.Transformations.Core.Transformation.CreateRules
  parent: NMF.Transformations.Core.Transformation
  name: CreateRules()
  nameWithType: Transformation.CreateRules()
  fullName: NMF.Transformations.Core.Transformation.CreateRules()
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.CreateRules
    name: CreateRules
    nameWithType: Transformation.CreateRules
    fullName: NMF.Transformations.Core.Transformation.CreateRules
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.CreateRules
    name: CreateRules
    nameWithType: Transformation.CreateRules
    fullName: NMF.Transformations.Core.Transformation.CreateRules
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.ReflectiveSynchronization.CreateRules*
  commentId: Overload:NMF.Synchronizations.ReflectiveSynchronization.CreateRules
  name: CreateRules
  nameWithType: ReflectiveSynchronization.CreateRules
  fullName: NMF.Synchronizations.ReflectiveSynchronization.CreateRules
- uid: System.Collections.Generic.IEnumerable{NMF.Transformations.Core.GeneralTransformationRule}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Transformations.Core.GeneralTransformationRule}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<GeneralTransformationRule>
  nameWithType: IEnumerable<GeneralTransformationRule>
  fullName: System.Collections.Generic.IEnumerable<NMF.Transformations.Core.GeneralTransformationRule>
  nameWithType.vb: IEnumerable(Of GeneralTransformationRule)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Transformations.Core.GeneralTransformationRule)
  name.vb: IEnumerable(Of GeneralTransformationRule)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Transformations.Core.GeneralTransformationRule
    name: GeneralTransformationRule
    nameWithType: GeneralTransformationRule
    fullName: NMF.Transformations.Core.GeneralTransformationRule
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NMF.Transformations.Core.Transformation.GetRuleForRuleType(System.Type)
  commentId: M:NMF.Transformations.Core.Transformation.GetRuleForRuleType(System.Type)
  parent: NMF.Transformations.Core.Transformation
  isExternal: true
  name: GetRuleForRuleType(Type)
  nameWithType: Transformation.GetRuleForRuleType(Type)
  fullName: NMF.Transformations.Core.Transformation.GetRuleForRuleType(System.Type)
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.GetRuleForRuleType(System.Type)
    name: GetRuleForRuleType
    nameWithType: Transformation.GetRuleForRuleType
    fullName: NMF.Transformations.Core.Transformation.GetRuleForRuleType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.GetRuleForRuleType(System.Type)
    name: GetRuleForRuleType
    nameWithType: Transformation.GetRuleForRuleType
    fullName: NMF.Transformations.Core.Transformation.GetRuleForRuleType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.ReflectiveSynchronization.GetRuleForRuleType*
  commentId: Overload:NMF.Synchronizations.ReflectiveSynchronization.GetRuleForRuleType
  name: GetRuleForRuleType
  nameWithType: ReflectiveSynchronization.GetRuleForRuleType
  fullName: NMF.Synchronizations.ReflectiveSynchronization.GetRuleForRuleType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: NMF.Transformations.Core.GeneralTransformationRule
  commentId: T:NMF.Transformations.Core.GeneralTransformationRule
  parent: NMF.Transformations.Core
  name: GeneralTransformationRule
  nameWithType: GeneralTransformationRule
  fullName: NMF.Transformations.Core.GeneralTransformationRule
- uid: NMF.Synchronizations.ReflectiveSynchronization.Rule*
  commentId: Overload:NMF.Synchronizations.ReflectiveSynchronization.Rule
  name: Rule
  nameWithType: ReflectiveSynchronization.Rule
  fullName: NMF.Synchronizations.ReflectiveSynchronization.Rule
- uid: '{TRule}'
  commentId: '!:TRule'
  definition: TRule
  name: TRule
  nameWithType: TRule
  fullName: TRule
- uid: TRule
  name: TRule
  nameWithType: TRule
  fullName: TRule
- uid: NMF.Synchronizations.ReflectiveSynchronization.SynchronizationRule*
  commentId: Overload:NMF.Synchronizations.ReflectiveSynchronization.SynchronizationRule
  name: SynchronizationRule
  nameWithType: ReflectiveSynchronization.SynchronizationRule
  fullName: NMF.Synchronizations.ReflectiveSynchronization.SynchronizationRule
- uid: NMF.Transformations.Core.Transformation.GetRulesForRuleType(System.Type)
  commentId: M:NMF.Transformations.Core.Transformation.GetRulesForRuleType(System.Type)
  parent: NMF.Transformations.Core.Transformation
  isExternal: true
  name: GetRulesForRuleType(Type)
  nameWithType: Transformation.GetRulesForRuleType(Type)
  fullName: NMF.Transformations.Core.Transformation.GetRulesForRuleType(System.Type)
  spec.csharp:
  - uid: NMF.Transformations.Core.Transformation.GetRulesForRuleType(System.Type)
    name: GetRulesForRuleType
    nameWithType: Transformation.GetRulesForRuleType
    fullName: NMF.Transformations.Core.Transformation.GetRulesForRuleType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Transformations.Core.Transformation.GetRulesForRuleType(System.Type)
    name: GetRulesForRuleType
    nameWithType: Transformation.GetRulesForRuleType
    fullName: NMF.Transformations.Core.Transformation.GetRulesForRuleType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.ReflectiveSynchronization.GetRulesForRuleType*
  commentId: Overload:NMF.Synchronizations.ReflectiveSynchronization.GetRulesForRuleType
  name: GetRulesForRuleType
  nameWithType: ReflectiveSynchronization.GetRulesForRuleType
  fullName: NMF.Synchronizations.ReflectiveSynchronization.GetRulesForRuleType
- uid: NMF.Synchronizations.Synchronization.RegisterRules
  commentId: M:NMF.Synchronizations.Synchronization.RegisterRules
  parent: NMF.Synchronizations.Synchronization
  name: RegisterRules()
  nameWithType: Synchronization.RegisterRules()
  fullName: NMF.Synchronizations.Synchronization.RegisterRules()
  spec.csharp:
  - uid: NMF.Synchronizations.Synchronization.RegisterRules
    name: RegisterRules
    nameWithType: Synchronization.RegisterRules
    fullName: NMF.Synchronizations.Synchronization.RegisterRules
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.Synchronization.RegisterRules
    name: RegisterRules
    nameWithType: Synchronization.RegisterRules
    fullName: NMF.Synchronizations.Synchronization.RegisterRules
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.ReflectiveSynchronization.RegisterRules*
  commentId: Overload:NMF.Synchronizations.ReflectiveSynchronization.RegisterRules
  name: RegisterRules
  nameWithType: ReflectiveSynchronization.RegisterRules
  fullName: NMF.Synchronizations.ReflectiveSynchronization.RegisterRules
- uid: NMF.Synchronizations.ReflectiveSynchronization.CreateCustomTransformationRules*
  commentId: Overload:NMF.Synchronizations.ReflectiveSynchronization.CreateCustomTransformationRules
  name: CreateCustomTransformationRules
  nameWithType: ReflectiveSynchronization.CreateCustomTransformationRules
  fullName: NMF.Synchronizations.ReflectiveSynchronization.CreateCustomTransformationRules
- uid: NMF.Synchronizations.ReflectiveSynchronization.CreateDefaultTransformationRules*
  commentId: Overload:NMF.Synchronizations.ReflectiveSynchronization.CreateDefaultTransformationRules
  name: CreateDefaultTransformationRules
  nameWithType: ReflectiveSynchronization.CreateDefaultTransformationRules
  fullName: NMF.Synchronizations.ReflectiveSynchronization.CreateDefaultTransformationRules
- uid: NMF.Synchronizations.ReflectiveSynchronization.CreateCustomSynchronizationRules*
  commentId: Overload:NMF.Synchronizations.ReflectiveSynchronization.CreateCustomSynchronizationRules
  name: CreateCustomSynchronizationRules
  nameWithType: ReflectiveSynchronization.CreateCustomSynchronizationRules
  fullName: NMF.Synchronizations.ReflectiveSynchronization.CreateCustomSynchronizationRules
- uid: System.Collections.Generic.IEnumerable{NMF.Synchronizations.SynchronizationRuleBase}
  commentId: T:System.Collections.Generic.IEnumerable{NMF.Synchronizations.SynchronizationRuleBase}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<SynchronizationRuleBase>
  nameWithType: IEnumerable<SynchronizationRuleBase>
  fullName: System.Collections.Generic.IEnumerable<NMF.Synchronizations.SynchronizationRuleBase>
  nameWithType.vb: IEnumerable(Of SynchronizationRuleBase)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NMF.Synchronizations.SynchronizationRuleBase)
  name.vb: IEnumerable(Of SynchronizationRuleBase)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Synchronizations.SynchronizationRuleBase
    name: SynchronizationRuleBase
    nameWithType: SynchronizationRuleBase
    fullName: NMF.Synchronizations.SynchronizationRuleBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Synchronizations.SynchronizationRuleBase
    name: SynchronizationRuleBase
    nameWithType: SynchronizationRuleBase
    fullName: NMF.Synchronizations.SynchronizationRuleBase
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.ReflectiveSynchronization.CreateDefaultSynchronizationRules*
  commentId: Overload:NMF.Synchronizations.ReflectiveSynchronization.CreateDefaultSynchronizationRules
  name: CreateDefaultSynchronizationRules
  nameWithType: ReflectiveSynchronization.CreateDefaultSynchronizationRules
  fullName: NMF.Synchronizations.ReflectiveSynchronization.CreateDefaultSynchronizationRules
- uid: NMF.Synchronizations.Synchronization.SynchronizationRules
  commentId: P:NMF.Synchronizations.Synchronization.SynchronizationRules
  parent: NMF.Synchronizations.Synchronization
  name: SynchronizationRules
  nameWithType: Synchronization.SynchronizationRules
  fullName: NMF.Synchronizations.Synchronization.SynchronizationRules
- uid: NMF.Synchronizations.ReflectiveSynchronization.SynchronizationRules*
  commentId: Overload:NMF.Synchronizations.ReflectiveSynchronization.SynchronizationRules
  name: SynchronizationRules
  nameWithType: ReflectiveSynchronization.SynchronizationRules
  fullName: NMF.Synchronizations.ReflectiveSynchronization.SynchronizationRules
