### YamlMime:ManagedReference
items:
- uid: NMF.Synchronizations.GuardedSynchronizationJob`2
  commentId: T:NMF.Synchronizations.GuardedSynchronizationJob`2
  id: GuardedSynchronizationJob`2
  parent: NMF.Synchronizations
  children:
  - NMF.Synchronizations.GuardedSynchronizationJob`2.#ctor(NMF.Synchronizations.ISynchronizationJob{`0,`1})
  - NMF.Synchronizations.GuardedSynchronizationJob`2.CreateTracker(NMF.Synchronizations.SynchronizationComputation{`0,`1})
  - NMF.Synchronizations.GuardedSynchronizationJob`2.IsEarly
  - NMF.Synchronizations.GuardedSynchronizationJob`2.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
  langs:
  - csharp
  - vb
  name: GuardedSynchronizationJob<TLeft, TRight>
  nameWithType: GuardedSynchronizationJob<TLeft, TRight>
  fullName: NMF.Synchronizations.GuardedSynchronizationJob<TLeft, TRight>
  type: Class
  source:
    remote:
      path: Synchronizations/Synchronizations/GuardedSynchronizationJob.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GuardedSynchronizationJob
    path: src/Synchronizations/Synchronizations/GuardedSynchronizationJob.cs
    startLine: 13
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nDenotes the base class for a synchronization job that is filtered by a guard\n"
  example: []
  syntax:
    content: 'public abstract class GuardedSynchronizationJob<TLeft, TRight> : ISynchronizationJob<TLeft, TRight>'
    typeParameters:
    - id: TLeft
      description: The LHS type of the guard
    - id: TRight
      description: The RHS type of the guard
    content.vb: >-
      Public MustInherit Class GuardedSynchronizationJob(Of TLeft, TRight)
          Implements ISynchronizationJob(Of TLeft, TRight)
  inheritance:
  - System.Object
  derivedClasses:
  - NMF.Synchronizations.BothGuardedSynchronizationJob`2
  - NMF.Synchronizations.LeftGuardedSynchronizationJob`2
  - NMF.Synchronizations.RightGuardedSynchronizationJob`2
  implements:
  - NMF.Synchronizations.ISynchronizationJob{{TLeft},{TRight}}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: GuardedSynchronizationJob(Of TLeft, TRight)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: NMF.Synchronizations.GuardedSynchronizationJob(Of TLeft, TRight)
  name.vb: GuardedSynchronizationJob(Of TLeft, TRight)
- uid: NMF.Synchronizations.GuardedSynchronizationJob`2.#ctor(NMF.Synchronizations.ISynchronizationJob{`0,`1})
  commentId: M:NMF.Synchronizations.GuardedSynchronizationJob`2.#ctor(NMF.Synchronizations.ISynchronizationJob{`0,`1})
  id: '#ctor(NMF.Synchronizations.ISynchronizationJob{`0,`1})'
  parent: NMF.Synchronizations.GuardedSynchronizationJob`2
  langs:
  - csharp
  - vb
  name: GuardedSynchronizationJob(ISynchronizationJob<TLeft, TRight>)
  nameWithType: GuardedSynchronizationJob<TLeft, TRight>.GuardedSynchronizationJob(ISynchronizationJob<TLeft, TRight>)
  fullName: NMF.Synchronizations.GuardedSynchronizationJob<TLeft, TRight>.GuardedSynchronizationJob(NMF.Synchronizations.ISynchronizationJob<TLeft, TRight>)
  type: Constructor
  source:
    remote:
      path: Synchronizations/Synchronizations/GuardedSynchronizationJob.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Synchronizations/Synchronizations/GuardedSynchronizationJob.cs
    startLine: 21
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nCreates a new guarded synchronization job\n"
  example: []
  syntax:
    content: public GuardedSynchronizationJob(ISynchronizationJob<TLeft, TRight> inner)
    parameters:
    - id: inner
      type: NMF.Synchronizations.ISynchronizationJob{{TLeft},{TRight}}
      description: The inner synchronization job
    content.vb: Public Sub New(inner As ISynchronizationJob(Of TLeft, TRight))
  overload: NMF.Synchronizations.GuardedSynchronizationJob`2.#ctor*
  nameWithType.vb: GuardedSynchronizationJob(Of TLeft, TRight).GuardedSynchronizationJob(ISynchronizationJob(Of TLeft, TRight))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.GuardedSynchronizationJob(Of TLeft, TRight).GuardedSynchronizationJob(NMF.Synchronizations.ISynchronizationJob(Of TLeft, TRight))
  name.vb: GuardedSynchronizationJob(ISynchronizationJob(Of TLeft, TRight))
- uid: NMF.Synchronizations.GuardedSynchronizationJob`2.IsEarly
  commentId: P:NMF.Synchronizations.GuardedSynchronizationJob`2.IsEarly
  id: IsEarly
  parent: NMF.Synchronizations.GuardedSynchronizationJob`2
  langs:
  - csharp
  - vb
  name: IsEarly
  nameWithType: GuardedSynchronizationJob<TLeft, TRight>.IsEarly
  fullName: NMF.Synchronizations.GuardedSynchronizationJob<TLeft, TRight>.IsEarly
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/GuardedSynchronizationJob.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IsEarly
    path: src/Synchronizations/Synchronizations/GuardedSynchronizationJob.cs
    startLine: 29
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  example: []
  syntax:
    content: public bool IsEarly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsEarly As Boolean
  overload: NMF.Synchronizations.GuardedSynchronizationJob`2.IsEarly*
  implements:
  - NMF.Synchronizations.ISynchronizationJob{{TLeft},{TRight}}.IsEarly
  nameWithType.vb: GuardedSynchronizationJob(Of TLeft, TRight).IsEarly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Synchronizations.GuardedSynchronizationJob(Of TLeft, TRight).IsEarly
- uid: NMF.Synchronizations.GuardedSynchronizationJob`2.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
  commentId: M:NMF.Synchronizations.GuardedSynchronizationJob`2.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
  id: Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
  parent: NMF.Synchronizations.GuardedSynchronizationJob`2
  langs:
  - csharp
  - vb
  name: Perform(SynchronizationComputation<TLeft, TRight>, SynchronizationDirection, ISynchronizationContext)
  nameWithType: GuardedSynchronizationJob<TLeft, TRight>.Perform(SynchronizationComputation<TLeft, TRight>, SynchronizationDirection, ISynchronizationContext)
  fullName: NMF.Synchronizations.GuardedSynchronizationJob<TLeft, TRight>.Perform(NMF.Synchronizations.SynchronizationComputation<TLeft, TRight>, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/GuardedSynchronizationJob.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Perform
    path: src/Synchronizations/Synchronizations/GuardedSynchronizationJob.cs
    startLine: 38
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  example: []
  syntax:
    content: public IDisposable Perform(SynchronizationComputation<TLeft, TRight> computation, SynchronizationDirection direction, ISynchronizationContext context)
    parameters:
    - id: computation
      type: NMF.Synchronizations.SynchronizationComputation{{TLeft},{TRight}}
    - id: direction
      type: NMF.Synchronizations.SynchronizationDirection
    - id: context
      type: NMF.Synchronizations.ISynchronizationContext
    return:
      type: System.IDisposable
    content.vb: Public Function Perform(computation As SynchronizationComputation(Of TLeft, TRight), direction As SynchronizationDirection, context As ISynchronizationContext) As IDisposable
  overload: NMF.Synchronizations.GuardedSynchronizationJob`2.Perform*
  implements:
  - NMF.Synchronizations.ISynchronizationJob{{TLeft},{TRight}}.Perform(NMF.Synchronizations.SynchronizationComputation{{TLeft},{TRight}},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
  nameWithType.vb: GuardedSynchronizationJob(Of TLeft, TRight).Perform(SynchronizationComputation(Of TLeft, TRight), SynchronizationDirection, ISynchronizationContext)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.GuardedSynchronizationJob(Of TLeft, TRight).Perform(NMF.Synchronizations.SynchronizationComputation(Of TLeft, TRight), NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext)
  name.vb: Perform(SynchronizationComputation(Of TLeft, TRight), SynchronizationDirection, ISynchronizationContext)
- uid: NMF.Synchronizations.GuardedSynchronizationJob`2.CreateTracker(NMF.Synchronizations.SynchronizationComputation{`0,`1})
  commentId: M:NMF.Synchronizations.GuardedSynchronizationJob`2.CreateTracker(NMF.Synchronizations.SynchronizationComputation{`0,`1})
  id: CreateTracker(NMF.Synchronizations.SynchronizationComputation{`0,`1})
  parent: NMF.Synchronizations.GuardedSynchronizationJob`2
  langs:
  - csharp
  - vb
  name: CreateTracker(SynchronizationComputation<TLeft, TRight>)
  nameWithType: GuardedSynchronizationJob<TLeft, TRight>.CreateTracker(SynchronizationComputation<TLeft, TRight>)
  fullName: NMF.Synchronizations.GuardedSynchronizationJob<TLeft, TRight>.CreateTracker(NMF.Synchronizations.SynchronizationComputation<TLeft, TRight>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/GuardedSynchronizationJob.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CreateTracker
    path: src/Synchronizations/Synchronizations/GuardedSynchronizationJob.cs
    startLine: 48
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nCreates a tracker for the given computation\n"
  example: []
  syntax:
    content: protected abstract INotifyValue<bool> CreateTracker(SynchronizationComputation<TLeft, TRight> computation)
    parameters:
    - id: computation
      type: NMF.Synchronizations.SynchronizationComputation{{TLeft},{TRight}}
      description: The computation that shall be tracked
    return:
      type: NMF.Expressions.INotifyValue{System.Boolean}
      description: ''
    content.vb: Protected MustOverride Function CreateTracker(computation As SynchronizationComputation(Of TLeft, TRight)) As INotifyValue(Of Boolean)
  overload: NMF.Synchronizations.GuardedSynchronizationJob`2.CreateTracker*
  nameWithType.vb: GuardedSynchronizationJob(Of TLeft, TRight).CreateTracker(SynchronizationComputation(Of TLeft, TRight))
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: NMF.Synchronizations.GuardedSynchronizationJob(Of TLeft, TRight).CreateTracker(NMF.Synchronizations.SynchronizationComputation(Of TLeft, TRight))
  name.vb: CreateTracker(SynchronizationComputation(Of TLeft, TRight))
references:
- uid: NMF.Synchronizations
  commentId: N:NMF.Synchronizations
  name: NMF.Synchronizations
  nameWithType: NMF.Synchronizations
  fullName: NMF.Synchronizations
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NMF.Synchronizations.ISynchronizationJob{{TLeft},{TRight}}
  commentId: T:NMF.Synchronizations.ISynchronizationJob{`0,`1}
  parent: NMF.Synchronizations
  definition: NMF.Synchronizations.ISynchronizationJob`2
  name: ISynchronizationJob<TLeft, TRight>
  nameWithType: ISynchronizationJob<TLeft, TRight>
  fullName: NMF.Synchronizations.ISynchronizationJob<TLeft, TRight>
  nameWithType.vb: ISynchronizationJob(Of TLeft, TRight)
  fullName.vb: NMF.Synchronizations.ISynchronizationJob(Of TLeft, TRight)
  name.vb: ISynchronizationJob(Of TLeft, TRight)
  spec.csharp:
  - uid: NMF.Synchronizations.ISynchronizationJob`2
    name: ISynchronizationJob
    nameWithType: ISynchronizationJob
    fullName: NMF.Synchronizations.ISynchronizationJob
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Synchronizations.ISynchronizationJob`2
    name: ISynchronizationJob
    nameWithType: ISynchronizationJob
    fullName: NMF.Synchronizations.ISynchronizationJob
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Synchronizations.ISynchronizationJob`2
  commentId: T:NMF.Synchronizations.ISynchronizationJob`2
  name: ISynchronizationJob<TLeft, TRight>
  nameWithType: ISynchronizationJob<TLeft, TRight>
  fullName: NMF.Synchronizations.ISynchronizationJob<TLeft, TRight>
  nameWithType.vb: ISynchronizationJob(Of TLeft, TRight)
  fullName.vb: NMF.Synchronizations.ISynchronizationJob(Of TLeft, TRight)
  name.vb: ISynchronizationJob(Of TLeft, TRight)
  spec.csharp:
  - uid: NMF.Synchronizations.ISynchronizationJob`2
    name: ISynchronizationJob
    nameWithType: ISynchronizationJob
    fullName: NMF.Synchronizations.ISynchronizationJob
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Synchronizations.ISynchronizationJob`2
    name: ISynchronizationJob
    nameWithType: ISynchronizationJob
    fullName: NMF.Synchronizations.ISynchronizationJob
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.GuardedSynchronizationJob`2.#ctor*
  commentId: Overload:NMF.Synchronizations.GuardedSynchronizationJob`2.#ctor
  name: GuardedSynchronizationJob
  nameWithType: GuardedSynchronizationJob<TLeft, TRight>.GuardedSynchronizationJob
  fullName: NMF.Synchronizations.GuardedSynchronizationJob<TLeft, TRight>.GuardedSynchronizationJob
  nameWithType.vb: GuardedSynchronizationJob(Of TLeft, TRight).GuardedSynchronizationJob
  fullName.vb: NMF.Synchronizations.GuardedSynchronizationJob(Of TLeft, TRight).GuardedSynchronizationJob
- uid: NMF.Synchronizations.GuardedSynchronizationJob`2.IsEarly*
  commentId: Overload:NMF.Synchronizations.GuardedSynchronizationJob`2.IsEarly
  name: IsEarly
  nameWithType: GuardedSynchronizationJob<TLeft, TRight>.IsEarly
  fullName: NMF.Synchronizations.GuardedSynchronizationJob<TLeft, TRight>.IsEarly
  nameWithType.vb: GuardedSynchronizationJob(Of TLeft, TRight).IsEarly
  fullName.vb: NMF.Synchronizations.GuardedSynchronizationJob(Of TLeft, TRight).IsEarly
- uid: NMF.Synchronizations.ISynchronizationJob{{TLeft},{TRight}}.IsEarly
  commentId: P:NMF.Synchronizations.ISynchronizationJob{`0,`1}.IsEarly
  parent: NMF.Synchronizations.ISynchronizationJob{{TLeft},{TRight}}
  definition: NMF.Synchronizations.ISynchronizationJob`2.IsEarly
  name: IsEarly
  nameWithType: ISynchronizationJob<TLeft, TRight>.IsEarly
  fullName: NMF.Synchronizations.ISynchronizationJob<TLeft, TRight>.IsEarly
  nameWithType.vb: ISynchronizationJob(Of TLeft, TRight).IsEarly
  fullName.vb: NMF.Synchronizations.ISynchronizationJob(Of TLeft, TRight).IsEarly
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NMF.Synchronizations.ISynchronizationJob`2.IsEarly
  commentId: P:NMF.Synchronizations.ISynchronizationJob`2.IsEarly
  name: IsEarly
  nameWithType: ISynchronizationJob<TLeft, TRight>.IsEarly
  fullName: NMF.Synchronizations.ISynchronizationJob<TLeft, TRight>.IsEarly
  nameWithType.vb: ISynchronizationJob(Of TLeft, TRight).IsEarly
  fullName.vb: NMF.Synchronizations.ISynchronizationJob(Of TLeft, TRight).IsEarly
- uid: NMF.Synchronizations.GuardedSynchronizationJob`2.Perform*
  commentId: Overload:NMF.Synchronizations.GuardedSynchronizationJob`2.Perform
  name: Perform
  nameWithType: GuardedSynchronizationJob<TLeft, TRight>.Perform
  fullName: NMF.Synchronizations.GuardedSynchronizationJob<TLeft, TRight>.Perform
  nameWithType.vb: GuardedSynchronizationJob(Of TLeft, TRight).Perform
  fullName.vb: NMF.Synchronizations.GuardedSynchronizationJob(Of TLeft, TRight).Perform
- uid: NMF.Synchronizations.ISynchronizationJob{{TLeft},{TRight}}.Perform(NMF.Synchronizations.SynchronizationComputation{{TLeft},{TRight}},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
  commentId: M:NMF.Synchronizations.ISynchronizationJob{`0,`1}.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
  parent: NMF.Synchronizations.ISynchronizationJob{{TLeft},{TRight}}
  definition: NMF.Synchronizations.ISynchronizationJob`2.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
  name: Perform(SynchronizationComputation<TLeft, TRight>, SynchronizationDirection, ISynchronizationContext)
  nameWithType: ISynchronizationJob<TLeft, TRight>.Perform(SynchronizationComputation<TLeft, TRight>, SynchronizationDirection, ISynchronizationContext)
  fullName: NMF.Synchronizations.ISynchronizationJob<TLeft, TRight>.Perform(NMF.Synchronizations.SynchronizationComputation<TLeft, TRight>, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext)
  nameWithType.vb: ISynchronizationJob(Of TLeft, TRight).Perform(SynchronizationComputation(Of TLeft, TRight), SynchronizationDirection, ISynchronizationContext)
  fullName.vb: NMF.Synchronizations.ISynchronizationJob(Of TLeft, TRight).Perform(NMF.Synchronizations.SynchronizationComputation(Of TLeft, TRight), NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext)
  name.vb: Perform(SynchronizationComputation(Of TLeft, TRight), SynchronizationDirection, ISynchronizationContext)
  spec.csharp:
  - uid: NMF.Synchronizations.ISynchronizationJob`2.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
    name: Perform
    nameWithType: ISynchronizationJob<TLeft, TRight>.Perform
    fullName: NMF.Synchronizations.ISynchronizationJob<TLeft, TRight>.Perform
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.ISynchronizationJob`2.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
    name: Perform
    nameWithType: ISynchronizationJob(Of TLeft, TRight).Perform
    fullName: NMF.Synchronizations.ISynchronizationJob(Of TLeft, TRight).Perform
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationComputation{{TLeft},{TRight}}
  commentId: T:NMF.Synchronizations.SynchronizationComputation{`0,`1}
  parent: NMF.Synchronizations
  definition: NMF.Synchronizations.SynchronizationComputation`2
  name: SynchronizationComputation<TLeft, TRight>
  nameWithType: SynchronizationComputation<TLeft, TRight>
  fullName: NMF.Synchronizations.SynchronizationComputation<TLeft, TRight>
  nameWithType.vb: SynchronizationComputation(Of TLeft, TRight)
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TLeft, TRight)
  name.vb: SynchronizationComputation(Of TLeft, TRight)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationDirection
  commentId: T:NMF.Synchronizations.SynchronizationDirection
  parent: NMF.Synchronizations
  name: SynchronizationDirection
  nameWithType: SynchronizationDirection
  fullName: NMF.Synchronizations.SynchronizationDirection
- uid: NMF.Synchronizations.ISynchronizationContext
  commentId: T:NMF.Synchronizations.ISynchronizationContext
  parent: NMF.Synchronizations
  name: ISynchronizationContext
  nameWithType: ISynchronizationContext
  fullName: NMF.Synchronizations.ISynchronizationContext
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: NMF.Synchronizations.ISynchronizationJob`2.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
  commentId: M:NMF.Synchronizations.ISynchronizationJob`2.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
  name: Perform(SynchronizationComputation<TLeft, TRight>, SynchronizationDirection, ISynchronizationContext)
  nameWithType: ISynchronizationJob<TLeft, TRight>.Perform(SynchronizationComputation<TLeft, TRight>, SynchronizationDirection, ISynchronizationContext)
  fullName: NMF.Synchronizations.ISynchronizationJob<TLeft, TRight>.Perform(NMF.Synchronizations.SynchronizationComputation<TLeft, TRight>, NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext)
  nameWithType.vb: ISynchronizationJob(Of TLeft, TRight).Perform(SynchronizationComputation(Of TLeft, TRight), SynchronizationDirection, ISynchronizationContext)
  fullName.vb: NMF.Synchronizations.ISynchronizationJob(Of TLeft, TRight).Perform(NMF.Synchronizations.SynchronizationComputation(Of TLeft, TRight), NMF.Synchronizations.SynchronizationDirection, NMF.Synchronizations.ISynchronizationContext)
  name.vb: Perform(SynchronizationComputation(Of TLeft, TRight), SynchronizationDirection, ISynchronizationContext)
  spec.csharp:
  - uid: NMF.Synchronizations.ISynchronizationJob`2.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
    name: Perform
    nameWithType: ISynchronizationJob<TLeft, TRight>.Perform
    fullName: NMF.Synchronizations.ISynchronizationJob<TLeft, TRight>.Perform
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: <
    nameWithType: <
    fullName: <
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.ISynchronizationJob`2.Perform(NMF.Synchronizations.SynchronizationComputation{`0,`1},NMF.Synchronizations.SynchronizationDirection,NMF.Synchronizations.ISynchronizationContext)
    name: Perform
    nameWithType: ISynchronizationJob(Of TLeft, TRight).Perform
    fullName: NMF.Synchronizations.ISynchronizationJob(Of TLeft, TRight).Perform
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TLeft
    nameWithType: TLeft
    fullName: TLeft
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRight
    nameWithType: TRight
    fullName: TRight
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.SynchronizationDirection
    name: SynchronizationDirection
    nameWithType: SynchronizationDirection
    fullName: NMF.Synchronizations.SynchronizationDirection
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NMF.Synchronizations.ISynchronizationContext
    name: ISynchronizationContext
    nameWithType: ISynchronizationContext
    fullName: NMF.Synchronizations.ISynchronizationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.SynchronizationComputation`2
  commentId: T:NMF.Synchronizations.SynchronizationComputation`2
  name: SynchronizationComputation<TIn, TOut>
  nameWithType: SynchronizationComputation<TIn, TOut>
  fullName: NMF.Synchronizations.SynchronizationComputation<TIn, TOut>
  nameWithType.vb: SynchronizationComputation(Of TIn, TOut)
  fullName.vb: NMF.Synchronizations.SynchronizationComputation(Of TIn, TOut)
  name.vb: SynchronizationComputation(Of TIn, TOut)
  spec.csharp:
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: <
    nameWithType: <
    fullName: <
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Synchronizations.SynchronizationComputation`2
    name: SynchronizationComputation
    nameWithType: SynchronizationComputation
    fullName: NMF.Synchronizations.SynchronizationComputation
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TIn
    nameWithType: TIn
    fullName: TIn
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.GuardedSynchronizationJob`2.CreateTracker*
  commentId: Overload:NMF.Synchronizations.GuardedSynchronizationJob`2.CreateTracker
  name: CreateTracker
  nameWithType: GuardedSynchronizationJob<TLeft, TRight>.CreateTracker
  fullName: NMF.Synchronizations.GuardedSynchronizationJob<TLeft, TRight>.CreateTracker
  nameWithType.vb: GuardedSynchronizationJob(Of TLeft, TRight).CreateTracker
  fullName.vb: NMF.Synchronizations.GuardedSynchronizationJob(Of TLeft, TRight).CreateTracker
- uid: NMF.Expressions.INotifyValue{System.Boolean}
  commentId: T:NMF.Expressions.INotifyValue{System.Boolean}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyValue`1
  name: INotifyValue<Boolean>
  nameWithType: INotifyValue<Boolean>
  fullName: NMF.Expressions.INotifyValue<System.Boolean>
  nameWithType.vb: INotifyValue(Of Boolean)
  fullName.vb: NMF.Expressions.INotifyValue(Of System.Boolean)
  name.vb: INotifyValue(Of Boolean)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyValue`1
  commentId: T:NMF.Expressions.INotifyValue`1
  name: INotifyValue<T>
  nameWithType: INotifyValue<T>
  fullName: NMF.Expressions.INotifyValue<T>
  nameWithType.vb: INotifyValue(Of T)
  fullName.vb: NMF.Expressions.INotifyValue(Of T)
  name.vb: INotifyValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyValue`1
    name: INotifyValue
    nameWithType: INotifyValue
    fullName: NMF.Expressions.INotifyValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
