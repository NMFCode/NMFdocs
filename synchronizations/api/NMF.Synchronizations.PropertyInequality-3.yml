### YamlMime:ManagedReference
items:
- uid: NMF.Synchronizations.PropertyInequality`3
  commentId: T:NMF.Synchronizations.PropertyInequality`3
  id: PropertyInequality`3
  parent: NMF.Synchronizations
  children:
  - NMF.Synchronizations.PropertyInequality`3.#ctor(`0,System.Action{`0,`2},`2,`1,System.Action{`1,`2},`2)
  - NMF.Synchronizations.PropertyInequality`3.CanResolveLeft
  - NMF.Synchronizations.PropertyInequality`3.CanResolveRight
  - NMF.Synchronizations.PropertyInequality`3.Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  - NMF.Synchronizations.PropertyInequality`3.Equals(NMF.Synchronizations.PropertyInequality{`0,`1,`2})
  - NMF.Synchronizations.PropertyInequality`3.Equals(System.Object)
  - NMF.Synchronizations.PropertyInequality`3.GetHashCode
  - NMF.Synchronizations.PropertyInequality`3.LeftContext
  - NMF.Synchronizations.PropertyInequality`3.LeftSetter
  - NMF.Synchronizations.PropertyInequality`3.LeftValue
  - NMF.Synchronizations.PropertyInequality`3.Representation
  - NMF.Synchronizations.PropertyInequality`3.ResolveLeft
  - NMF.Synchronizations.PropertyInequality`3.ResolveRight
  - NMF.Synchronizations.PropertyInequality`3.RightContext
  - NMF.Synchronizations.PropertyInequality`3.RightSetter
  - NMF.Synchronizations.PropertyInequality`3.RightValue
  - NMF.Synchronizations.PropertyInequality`3.ToString
  langs:
  - csharp
  - vb
  name: PropertyInequality<TLeft, TRight, TValue>
  nameWithType: PropertyInequality<TLeft, TRight, TValue>
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>
  type: Class
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: PropertyInequality
    path: src/Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
    startLine: 13
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nDenotes an inconsistency that a property had different values\n"
  example: []
  syntax:
    content: 'public class PropertyInequality<TLeft, TRight, TValue> : IInconsistency, IEquatable<IInconsistency>'
    typeParameters:
    - id: TLeft
      description: The LHS context type
    - id: TRight
      description: The RHS context type
    - id: TValue
      description: The type of the property
    content.vb: Public Class PropertyInequality(Of TLeft, TRight, TValue) Implements IInconsistency, IEquatable(Of IInconsistency)
  inheritance:
  - System.Object
  implements:
  - NMF.Synchronizations.Inconsistencies.IInconsistency
  - System.IEquatable{NMF.Synchronizations.Inconsistencies.IInconsistency}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue)
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue)
  name.vb: PropertyInequality(Of TLeft, TRight, TValue)
- uid: NMF.Synchronizations.PropertyInequality`3.LeftContext
  commentId: P:NMF.Synchronizations.PropertyInequality`3.LeftContext
  id: LeftContext
  parent: NMF.Synchronizations.PropertyInequality`3
  langs:
  - csharp
  - vb
  name: LeftContext
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.LeftContext
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.LeftContext
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: LeftContext
    path: src/Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
    startLine: 19
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nGets the LHS context element\n"
  example: []
  syntax:
    content: public TLeft LeftContext { get; }
    parameters: []
    return:
      type: '{TLeft}'
    content.vb: Public ReadOnly Property LeftContext As TLeft
  overload: NMF.Synchronizations.PropertyInequality`3.LeftContext*
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).LeftContext
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).LeftContext
- uid: NMF.Synchronizations.PropertyInequality`3.RightContext
  commentId: P:NMF.Synchronizations.PropertyInequality`3.RightContext
  id: RightContext
  parent: NMF.Synchronizations.PropertyInequality`3
  langs:
  - csharp
  - vb
  name: RightContext
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.RightContext
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.RightContext
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RightContext
    path: src/Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
    startLine: 24
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nGets the RHS context element\n"
  example: []
  syntax:
    content: public TRight RightContext { get; }
    parameters: []
    return:
      type: '{TRight}'
    content.vb: Public ReadOnly Property RightContext As TRight
  overload: NMF.Synchronizations.PropertyInequality`3.RightContext*
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).RightContext
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).RightContext
- uid: NMF.Synchronizations.PropertyInequality`3.LeftValue
  commentId: P:NMF.Synchronizations.PropertyInequality`3.LeftValue
  id: LeftValue
  parent: NMF.Synchronizations.PropertyInequality`3
  langs:
  - csharp
  - vb
  name: LeftValue
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.LeftValue
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.LeftValue
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: LeftValue
    path: src/Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
    startLine: 29
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nGets the LHS property value\n"
  example: []
  syntax:
    content: public TValue LeftValue { get; }
    parameters: []
    return:
      type: '{TValue}'
    content.vb: Public ReadOnly Property LeftValue As TValue
  overload: NMF.Synchronizations.PropertyInequality`3.LeftValue*
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).LeftValue
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).LeftValue
- uid: NMF.Synchronizations.PropertyInequality`3.RightValue
  commentId: P:NMF.Synchronizations.PropertyInequality`3.RightValue
  id: RightValue
  parent: NMF.Synchronizations.PropertyInequality`3
  langs:
  - csharp
  - vb
  name: RightValue
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.RightValue
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.RightValue
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RightValue
    path: src/Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
    startLine: 34
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nGets the RHS property value\n"
  example: []
  syntax:
    content: public TValue RightValue { get; }
    parameters: []
    return:
      type: '{TValue}'
    content.vb: Public ReadOnly Property RightValue As TValue
  overload: NMF.Synchronizations.PropertyInequality`3.RightValue*
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).RightValue
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).RightValue
- uid: NMF.Synchronizations.PropertyInequality`3.LeftSetter
  commentId: P:NMF.Synchronizations.PropertyInequality`3.LeftSetter
  id: LeftSetter
  parent: NMF.Synchronizations.PropertyInequality`3
  langs:
  - csharp
  - vb
  name: LeftSetter
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.LeftSetter
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.LeftSetter
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: LeftSetter
    path: src/Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
    startLine: 39
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nGets a function that sets the value at the LHS\n"
  example: []
  syntax:
    content: public Action<TLeft, TValue> LeftSetter { get; }
    parameters: []
    return:
      type: System.Action{{TLeft},{TValue}}
    content.vb: Public ReadOnly Property LeftSetter As Action(Of TLeft, TValue)
  overload: NMF.Synchronizations.PropertyInequality`3.LeftSetter*
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).LeftSetter
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).LeftSetter
- uid: NMF.Synchronizations.PropertyInequality`3.RightSetter
  commentId: P:NMF.Synchronizations.PropertyInequality`3.RightSetter
  id: RightSetter
  parent: NMF.Synchronizations.PropertyInequality`3
  langs:
  - csharp
  - vb
  name: RightSetter
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.RightSetter
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.RightSetter
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: RightSetter
    path: src/Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
    startLine: 44
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nGets a function that sets the value at the RHS\n"
  example: []
  syntax:
    content: public Action<TRight, TValue> RightSetter { get; }
    parameters: []
    return:
      type: System.Action{{TRight},{TValue}}
    content.vb: Public ReadOnly Property RightSetter As Action(Of TRight, TValue)
  overload: NMF.Synchronizations.PropertyInequality`3.RightSetter*
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).RightSetter
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).RightSetter
- uid: NMF.Synchronizations.PropertyInequality`3.CanResolveLeft
  commentId: P:NMF.Synchronizations.PropertyInequality`3.CanResolveLeft
  id: CanResolveLeft
  parent: NMF.Synchronizations.PropertyInequality`3
  langs:
  - csharp
  - vb
  name: CanResolveLeft
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.CanResolveLeft
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.CanResolveLeft
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CanResolveLeft
    path: src/Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
    startLine: 47
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nGets a value indicating whether the inconsistency can be automatically resolved modifying the left hand model only\n"
  example: []
  syntax:
    content: public bool CanResolveLeft { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property CanResolveLeft As Boolean
  overload: NMF.Synchronizations.PropertyInequality`3.CanResolveLeft*
  implements:
  - NMF.Synchronizations.Inconsistencies.IInconsistency.CanResolveLeft
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).CanResolveLeft
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).CanResolveLeft
- uid: NMF.Synchronizations.PropertyInequality`3.CanResolveRight
  commentId: P:NMF.Synchronizations.PropertyInequality`3.CanResolveRight
  id: CanResolveRight
  parent: NMF.Synchronizations.PropertyInequality`3
  langs:
  - csharp
  - vb
  name: CanResolveRight
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.CanResolveRight
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.CanResolveRight
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CanResolveRight
    path: src/Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
    startLine: 50
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nGets a value indicating whether the inconsistency can be automatically resolved modifying the right hand model only\n"
  example: []
  syntax:
    content: public bool CanResolveRight { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property CanResolveRight As Boolean
  overload: NMF.Synchronizations.PropertyInequality`3.CanResolveRight*
  implements:
  - NMF.Synchronizations.Inconsistencies.IInconsistency.CanResolveRight
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).CanResolveRight
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).CanResolveRight
- uid: NMF.Synchronizations.PropertyInequality`3.Representation
  commentId: P:NMF.Synchronizations.PropertyInequality`3.Representation
  id: Representation
  parent: NMF.Synchronizations.PropertyInequality`3
  langs:
  - csharp
  - vb
  name: Representation
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.Representation
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.Representation
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Representation
    path: src/Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
    startLine: 55
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nGets a human-readable description of this inconsistency\n"
  example: []
  syntax:
    content: public string Representation { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Representation As String
  overload: NMF.Synchronizations.PropertyInequality`3.Representation*
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).Representation
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).Representation
- uid: NMF.Synchronizations.PropertyInequality`3.#ctor(`0,System.Action{`0,`2},`2,`1,System.Action{`1,`2},`2)
  commentId: M:NMF.Synchronizations.PropertyInequality`3.#ctor(`0,System.Action{`0,`2},`2,`1,System.Action{`1,`2},`2)
  id: '#ctor(`0,System.Action{`0,`2},`2,`1,System.Action{`1,`2},`2)'
  parent: NMF.Synchronizations.PropertyInequality`3
  langs:
  - csharp
  - vb
  name: PropertyInequality(TLeft, Action<TLeft, TValue>, TValue, TRight, Action<TRight, TValue>, TValue)
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.PropertyInequality(TLeft, Action<TLeft, TValue>, TValue, TRight, Action<TRight, TValue>, TValue)
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.PropertyInequality(TLeft, System.Action<TLeft, TValue>, TValue, TRight, System.Action<TRight, TValue>, TValue)
  type: Constructor
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
    startLine: 72
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nCreates a new instance\n"
  example: []
  syntax:
    content: public PropertyInequality(TLeft leftContext, Action<TLeft, TValue> leftSetter, TValue leftValue, TRight rightContext, Action<TRight, TValue> rightSetter, TValue rightValue)
    parameters:
    - id: leftContext
      type: '{TLeft}'
      description: The LHS context element
    - id: leftSetter
      type: System.Action{{TLeft},{TValue}}
      description: The LHS setter
    - id: leftValue
      type: '{TValue}'
      description: The left value
    - id: rightContext
      type: '{TRight}'
      description: The RHS context element
    - id: rightSetter
      type: System.Action{{TRight},{TValue}}
      description: The RHS setter
    - id: rightValue
      type: '{TValue}'
      description: The right value
    content.vb: Public Sub New(leftContext As TLeft, leftSetter As Action(Of TLeft, TValue), leftValue As TValue, rightContext As TRight, rightSetter As Action(Of TRight, TValue), rightValue As TValue)
  overload: NMF.Synchronizations.PropertyInequality`3.#ctor*
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).New(TLeft, Action(Of TLeft, TValue), TValue, TRight, Action(Of TRight, TValue), TValue)
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).New(TLeft, System.Action(Of TLeft, TValue), TValue, TRight, System.Action(Of TRight, TValue), TValue)
  name.vb: New(TLeft, Action(Of TLeft, TValue), TValue, TRight, Action(Of TRight, TValue), TValue)
- uid: NMF.Synchronizations.PropertyInequality`3.ResolveLeft
  commentId: M:NMF.Synchronizations.PropertyInequality`3.ResolveLeft
  id: ResolveLeft
  parent: NMF.Synchronizations.PropertyInequality`3
  langs:
  - csharp
  - vb
  name: ResolveLeft()
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.ResolveLeft()
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.ResolveLeft()
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ResolveLeft
    path: src/Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
    startLine: 83
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nResolves the inconsistency modifying the left hand side model\n"
  example: []
  syntax:
    content: public void ResolveLeft()
    content.vb: Public Sub ResolveLeft()
  overload: NMF.Synchronizations.PropertyInequality`3.ResolveLeft*
  implements:
  - NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveLeft
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).ResolveLeft()
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).ResolveLeft()
- uid: NMF.Synchronizations.PropertyInequality`3.ResolveRight
  commentId: M:NMF.Synchronizations.PropertyInequality`3.ResolveRight
  id: ResolveRight
  parent: NMF.Synchronizations.PropertyInequality`3
  langs:
  - csharp
  - vb
  name: ResolveRight()
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.ResolveRight()
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.ResolveRight()
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ResolveRight
    path: src/Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
    startLine: 89
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  summary: "\nResolves the inconsistency modifying the right hand side model\n"
  example: []
  syntax:
    content: public void ResolveRight()
    content.vb: Public Sub ResolveRight()
  overload: NMF.Synchronizations.PropertyInequality`3.ResolveRight*
  implements:
  - NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveRight
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).ResolveRight()
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).ResolveRight()
- uid: NMF.Synchronizations.PropertyInequality`3.GetHashCode
  commentId: M:NMF.Synchronizations.PropertyInequality`3.GetHashCode
  id: GetHashCode
  parent: NMF.Synchronizations.PropertyInequality`3
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.GetHashCode()
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.GetHashCode()
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetHashCode
    path: src/Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
    startLine: 95
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.Object.GetHashCode
  overload: NMF.Synchronizations.PropertyInequality`3.GetHashCode*
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).GetHashCode()
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).GetHashCode()
- uid: NMF.Synchronizations.PropertyInequality`3.Equals(System.Object)
  commentId: M:NMF.Synchronizations.PropertyInequality`3.Equals(System.Object)
  id: Equals(System.Object)
  parent: NMF.Synchronizations.PropertyInequality`3
  langs:
  - csharp
  - vb
  name: Equals(object)
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.Equals(object)
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.Equals(object)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Equals
    path: src/Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
    startLine: 111
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: NMF.Synchronizations.PropertyInequality`3.Equals*
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).Equals(Object)
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).Equals(Object)
  name.vb: Equals(Object)
- uid: NMF.Synchronizations.PropertyInequality`3.Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  commentId: M:NMF.Synchronizations.PropertyInequality`3.Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  id: Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  parent: NMF.Synchronizations.PropertyInequality`3
  langs:
  - csharp
  - vb
  name: Equals(IInconsistency)
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.Equals(IInconsistency)
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Equals
    path: src/Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
    startLine: 119
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  example: []
  syntax:
    content: public bool Equals(IInconsistency other)
    parameters:
    - id: other
      type: NMF.Synchronizations.Inconsistencies.IInconsistency
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As IInconsistency) As Boolean
  overload: NMF.Synchronizations.PropertyInequality`3.Equals*
  implements:
  - System.IEquatable{NMF.Synchronizations.Inconsistencies.IInconsistency}.Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).Equals(IInconsistency)
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
- uid: NMF.Synchronizations.PropertyInequality`3.Equals(NMF.Synchronizations.PropertyInequality{`0,`1,`2})
  commentId: M:NMF.Synchronizations.PropertyInequality`3.Equals(NMF.Synchronizations.PropertyInequality{`0,`1,`2})
  id: Equals(NMF.Synchronizations.PropertyInequality{`0,`1,`2})
  parent: NMF.Synchronizations.PropertyInequality`3
  langs:
  - csharp
  - vb
  name: Equals(PropertyInequality<TLeft, TRight, TValue>)
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.Equals(PropertyInequality<TLeft, TRight, TValue>)
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.Equals(NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Equals
    path: src/Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
    startLine: 125
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  example: []
  syntax:
    content: public bool Equals(PropertyInequality<TLeft, TRight, TValue> other)
    parameters:
    - id: other
      type: NMF.Synchronizations.PropertyInequality`3
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As PropertyInequality(Of TLeft, TRight, TValue)) As Boolean
  overload: NMF.Synchronizations.PropertyInequality`3.Equals*
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).Equals(PropertyInequality(Of TLeft, TRight, TValue))
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).Equals(NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue))
  name.vb: Equals(PropertyInequality(Of TLeft, TRight, TValue))
- uid: NMF.Synchronizations.PropertyInequality`3.ToString
  commentId: M:NMF.Synchronizations.PropertyInequality`3.ToString
  id: ToString
  parent: NMF.Synchronizations.PropertyInequality`3
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.ToString()
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.ToString()
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ToString
    path: src/Synchronizations/Synchronizations/Inconsistencies/PropertyInequality.cs
    startLine: 133
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString() As String
  overridden: System.Object.ToString
  overload: NMF.Synchronizations.PropertyInequality`3.ToString*
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).ToString()
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).ToString()
references:
- uid: NMF.Synchronizations
  commentId: N:NMF.Synchronizations
  name: NMF.Synchronizations
  nameWithType: NMF.Synchronizations
  fullName: NMF.Synchronizations
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Synchronizations
    name: Synchronizations
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Synchronizations
    name: Synchronizations
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: NMF.Synchronizations.Inconsistencies.IInconsistency
  commentId: T:NMF.Synchronizations.Inconsistencies.IInconsistency
  parent: NMF.Synchronizations.Inconsistencies
  name: IInconsistency
  nameWithType: IInconsistency
  fullName: NMF.Synchronizations.Inconsistencies.IInconsistency
- uid: System.IEquatable{NMF.Synchronizations.Inconsistencies.IInconsistency}
  commentId: T:System.IEquatable{NMF.Synchronizations.Inconsistencies.IInconsistency}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<IInconsistency>
  nameWithType: IEquatable<IInconsistency>
  fullName: System.IEquatable<NMF.Synchronizations.Inconsistencies.IInconsistency>
  nameWithType.vb: IEquatable(Of IInconsistency)
  fullName.vb: System.IEquatable(Of NMF.Synchronizations.Inconsistencies.IInconsistency)
  name.vb: IEquatable(Of IInconsistency)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
  - name: <
  - uid: NMF.Synchronizations.Inconsistencies.IInconsistency
    name: IInconsistency
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: NMF.Synchronizations.Inconsistencies.IInconsistency
    name: IInconsistency
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NMF.Synchronizations.Inconsistencies
  commentId: N:NMF.Synchronizations.Inconsistencies
  name: NMF.Synchronizations.Inconsistencies
  nameWithType: NMF.Synchronizations.Inconsistencies
  fullName: NMF.Synchronizations.Inconsistencies
  spec.csharp:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Synchronizations
    name: Synchronizations
  - name: .
  - uid: NMF.Synchronizations.Inconsistencies
    name: Inconsistencies
  spec.vb:
  - uid: NMF
    name: NMF
  - name: .
  - uid: NMF.Synchronizations
    name: Synchronizations
  - name: .
  - uid: NMF.Synchronizations.Inconsistencies
    name: Inconsistencies
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: NMF.Synchronizations.PropertyInequality`3.LeftContext*
  commentId: Overload:NMF.Synchronizations.PropertyInequality`3.LeftContext
  name: LeftContext
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.LeftContext
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.LeftContext
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).LeftContext
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).LeftContext
- uid: '{TLeft}'
  commentId: '!:TLeft'
  definition: TLeft
  name: TLeft
  nameWithType: TLeft
  fullName: TLeft
- uid: TLeft
  name: TLeft
  nameWithType: TLeft
  fullName: TLeft
- uid: NMF.Synchronizations.PropertyInequality`3.RightContext*
  commentId: Overload:NMF.Synchronizations.PropertyInequality`3.RightContext
  name: RightContext
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.RightContext
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.RightContext
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).RightContext
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).RightContext
- uid: '{TRight}'
  commentId: '!:TRight'
  definition: TRight
  name: TRight
  nameWithType: TRight
  fullName: TRight
- uid: TRight
  name: TRight
  nameWithType: TRight
  fullName: TRight
- uid: NMF.Synchronizations.PropertyInequality`3.LeftValue*
  commentId: Overload:NMF.Synchronizations.PropertyInequality`3.LeftValue
  name: LeftValue
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.LeftValue
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.LeftValue
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).LeftValue
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).LeftValue
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: NMF.Synchronizations.PropertyInequality`3.RightValue*
  commentId: Overload:NMF.Synchronizations.PropertyInequality`3.RightValue
  name: RightValue
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.RightValue
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.RightValue
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).RightValue
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).RightValue
- uid: NMF.Synchronizations.PropertyInequality`3.LeftSetter*
  commentId: Overload:NMF.Synchronizations.PropertyInequality`3.LeftSetter
  name: LeftSetter
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.LeftSetter
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.LeftSetter
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).LeftSetter
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).LeftSetter
- uid: System.Action{{TLeft},{TValue}}
  commentId: T:System.Action{`0,`2}
  parent: System
  definition: System.Action`2
  name: Action<TLeft, TValue>
  nameWithType: Action<TLeft, TValue>
  fullName: System.Action<TLeft, TValue>
  nameWithType.vb: Action(Of TLeft, TValue)
  fullName.vb: System.Action(Of TLeft, TValue)
  name.vb: Action(Of TLeft, TValue)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: NMF.Synchronizations.PropertyInequality`3.RightSetter*
  commentId: Overload:NMF.Synchronizations.PropertyInequality`3.RightSetter
  name: RightSetter
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.RightSetter
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.RightSetter
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).RightSetter
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).RightSetter
- uid: System.Action{{TRight},{TValue}}
  commentId: T:System.Action{`1,`2}
  parent: System
  definition: System.Action`2
  name: Action<TRight, TValue>
  nameWithType: Action<TRight, TValue>
  fullName: System.Action<TRight, TValue>
  nameWithType.vb: Action(Of TRight, TValue)
  fullName.vb: System.Action(Of TRight, TValue)
  name.vb: Action(Of TRight, TValue)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: NMF.Synchronizations.PropertyInequality`3.CanResolveLeft*
  commentId: Overload:NMF.Synchronizations.PropertyInequality`3.CanResolveLeft
  name: CanResolveLeft
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.CanResolveLeft
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.CanResolveLeft
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).CanResolveLeft
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).CanResolveLeft
- uid: NMF.Synchronizations.Inconsistencies.IInconsistency.CanResolveLeft
  commentId: P:NMF.Synchronizations.Inconsistencies.IInconsistency.CanResolveLeft
  parent: NMF.Synchronizations.Inconsistencies.IInconsistency
  name: CanResolveLeft
  nameWithType: IInconsistency.CanResolveLeft
  fullName: NMF.Synchronizations.Inconsistencies.IInconsistency.CanResolveLeft
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: NMF.Synchronizations.PropertyInequality`3.CanResolveRight*
  commentId: Overload:NMF.Synchronizations.PropertyInequality`3.CanResolveRight
  name: CanResolveRight
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.CanResolveRight
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.CanResolveRight
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).CanResolveRight
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).CanResolveRight
- uid: NMF.Synchronizations.Inconsistencies.IInconsistency.CanResolveRight
  commentId: P:NMF.Synchronizations.Inconsistencies.IInconsistency.CanResolveRight
  parent: NMF.Synchronizations.Inconsistencies.IInconsistency
  name: CanResolveRight
  nameWithType: IInconsistency.CanResolveRight
  fullName: NMF.Synchronizations.Inconsistencies.IInconsistency.CanResolveRight
- uid: NMF.Synchronizations.PropertyInequality`3.Representation*
  commentId: Overload:NMF.Synchronizations.PropertyInequality`3.Representation
  name: Representation
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.Representation
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.Representation
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).Representation
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).Representation
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: NMF.Synchronizations.PropertyInequality`3.#ctor*
  commentId: Overload:NMF.Synchronizations.PropertyInequality`3.#ctor
  name: PropertyInequality
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.PropertyInequality
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.PropertyInequality
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).New
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).New
  name.vb: New
- uid: NMF.Synchronizations.PropertyInequality`3.ResolveLeft*
  commentId: Overload:NMF.Synchronizations.PropertyInequality`3.ResolveLeft
  name: ResolveLeft
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.ResolveLeft
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.ResolveLeft
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).ResolveLeft
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).ResolveLeft
- uid: NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveLeft
  commentId: M:NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveLeft
  parent: NMF.Synchronizations.Inconsistencies.IInconsistency
  name: ResolveLeft()
  nameWithType: IInconsistency.ResolveLeft()
  fullName: NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveLeft()
  spec.csharp:
  - uid: NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveLeft
    name: ResolveLeft
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveLeft
    name: ResolveLeft
  - name: (
  - name: )
- uid: NMF.Synchronizations.PropertyInequality`3.ResolveRight*
  commentId: Overload:NMF.Synchronizations.PropertyInequality`3.ResolveRight
  name: ResolveRight
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.ResolveRight
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.ResolveRight
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).ResolveRight
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).ResolveRight
- uid: NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveRight
  commentId: M:NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveRight
  parent: NMF.Synchronizations.Inconsistencies.IInconsistency
  name: ResolveRight()
  nameWithType: IInconsistency.ResolveRight()
  fullName: NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveRight()
  spec.csharp:
  - uid: NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveRight
    name: ResolveRight
  - name: (
  - name: )
  spec.vb:
  - uid: NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveRight
    name: ResolveRight
  - name: (
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: NMF.Synchronizations.PropertyInequality`3.GetHashCode*
  commentId: Overload:NMF.Synchronizations.PropertyInequality`3.GetHashCode
  name: GetHashCode
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.GetHashCode
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.GetHashCode
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).GetHashCode
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: NMF.Synchronizations.PropertyInequality`3.Equals*
  commentId: Overload:NMF.Synchronizations.PropertyInequality`3.Equals
  name: Equals
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.Equals
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.Equals
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).Equals
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).Equals
- uid: System.IEquatable{NMF.Synchronizations.Inconsistencies.IInconsistency}.Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  commentId: M:System.IEquatable{NMF.Synchronizations.Inconsistencies.IInconsistency}.Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  parent: System.IEquatable{NMF.Synchronizations.Inconsistencies.IInconsistency}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(IInconsistency)
  nameWithType: IEquatable<IInconsistency>.Equals(IInconsistency)
  fullName: System.IEquatable<NMF.Synchronizations.Inconsistencies.IInconsistency>.Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  nameWithType.vb: IEquatable(Of IInconsistency).Equals(IInconsistency)
  fullName.vb: System.IEquatable(Of NMF.Synchronizations.Inconsistencies.IInconsistency).Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  spec.csharp:
  - uid: System.IEquatable{NMF.Synchronizations.Inconsistencies.IInconsistency}.Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
    name: Equals
    isExternal: true
  - name: (
  - uid: NMF.Synchronizations.Inconsistencies.IInconsistency
    name: IInconsistency
  - name: )
  spec.vb:
  - uid: System.IEquatable{NMF.Synchronizations.Inconsistencies.IInconsistency}.Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
    name: Equals
    isExternal: true
  - name: (
  - uid: NMF.Synchronizations.Inconsistencies.IInconsistency
    name: IInconsistency
  - name: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
  - name: (
  - name: T
  - name: )
- uid: NMF.Synchronizations.PropertyInequality`3
  commentId: T:NMF.Synchronizations.PropertyInequality`3
  parent: NMF.Synchronizations
  name: PropertyInequality<TLeft, TRight, TValue>
  nameWithType: PropertyInequality<TLeft, TRight, TValue>
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue)
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue)
  name.vb: PropertyInequality(Of TLeft, TRight, TValue)
  spec.csharp:
  - uid: NMF.Synchronizations.PropertyInequality`3
    name: PropertyInequality
  - name: <
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: NMF.Synchronizations.PropertyInequality`3
    name: PropertyInequality
  - name: (
  - name: Of
  - name: " "
  - name: TLeft
  - name: ','
  - name: " "
  - name: TRight
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: NMF.Synchronizations.PropertyInequality`3.ToString*
  commentId: Overload:NMF.Synchronizations.PropertyInequality`3.ToString
  name: ToString
  nameWithType: PropertyInequality<TLeft, TRight, TValue>.ToString
  fullName: NMF.Synchronizations.PropertyInequality<TLeft, TRight, TValue>.ToString
  nameWithType.vb: PropertyInequality(Of TLeft, TRight, TValue).ToString
  fullName.vb: NMF.Synchronizations.PropertyInequality(Of TLeft, TRight, TValue).ToString
