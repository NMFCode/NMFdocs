### YamlMime:ManagedReference
items:
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1
  commentId: T:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1
  id: IncrementalPropertyConsistencyCheck`1
  parent: NMF.Synchronizations.Inconsistencies
  children:
  - NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.#ctor(NMF.Expressions.INotifyReversableValue{`0},NMF.Expressions.INotifyReversableValue{`0},NMF.Synchronizations.ISynchronizationContext)
  - NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.CanResolveLeft
  - NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.CanResolveRight
  - NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Context
  - NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Dispose
  - NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  - NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Equals(NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck{`0})
  - NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Equals(System.Object)
  - NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.GetHashCode
  - NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Representation
  - NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.ResolveLeft
  - NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.ResolveRight
  - NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.SourceLeft
  - NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.SourceRight
  - NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.ToString
  langs:
  - csharp
  - vb
  name: IncrementalPropertyConsistencyCheck<T>
  nameWithType: IncrementalPropertyConsistencyCheck<T>
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>
  type: Class
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: IncrementalPropertyConsistencyCheck
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
    startLine: 12
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  summary: "\nDenotes an incrementally maintained inconsistency that a property has different values in LHS and RHS\n"
  example: []
  syntax:
    content: 'public class IncrementalPropertyConsistencyCheck<T> : IDisposable, IInconsistency, IEquatable<IInconsistency>'
    typeParameters:
    - id: T
      description: ''
    content.vb: >-
      Public Class IncrementalPropertyConsistencyCheck(Of T)
          Implements IDisposable, IInconsistency, IEquatable(Of IInconsistency)
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  - NMF.Synchronizations.Inconsistencies.IInconsistency
  - System.IEquatable{NMF.Synchronizations.Inconsistencies.IInconsistency}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T)
  name.vb: IncrementalPropertyConsistencyCheck(Of T)
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.SourceLeft
  commentId: P:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.SourceLeft
  id: SourceLeft
  parent: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1
  langs:
  - csharp
  - vb
  name: SourceLeft
  nameWithType: IncrementalPropertyConsistencyCheck<T>.SourceLeft
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>.SourceLeft
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SourceLeft
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
    startLine: 18
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  summary: "\nGets an incrementally maintained value for the LHS property value\n"
  example: []
  syntax:
    content: public INotifyReversableValue<T> SourceLeft { get; }
    parameters: []
    return:
      type: NMF.Expressions.INotifyReversableValue{{T}}
    content.vb: Public ReadOnly Property SourceLeft As INotifyReversableValue(Of T)
  overload: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.SourceLeft*
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T).SourceLeft
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T).SourceLeft
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.SourceRight
  commentId: P:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.SourceRight
  id: SourceRight
  parent: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1
  langs:
  - csharp
  - vb
  name: SourceRight
  nameWithType: IncrementalPropertyConsistencyCheck<T>.SourceRight
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>.SourceRight
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: SourceRight
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
    startLine: 23
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  summary: "\nGets an incrementally maintained value for the RHS property value\n"
  example: []
  syntax:
    content: public INotifyReversableValue<T> SourceRight { get; }
    parameters: []
    return:
      type: NMF.Expressions.INotifyReversableValue{{T}}
    content.vb: Public ReadOnly Property SourceRight As INotifyReversableValue(Of T)
  overload: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.SourceRight*
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T).SourceRight
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T).SourceRight
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Context
  commentId: P:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Context
  id: Context
  parent: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1
  langs:
  - csharp
  - vb
  name: Context
  nameWithType: IncrementalPropertyConsistencyCheck<T>.Context
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>.Context
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Context
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
    startLine: 28
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  summary: "\nGets the synchronization context in which the inconsistency was found\n"
  example: []
  syntax:
    content: public ISynchronizationContext Context { get; }
    parameters: []
    return:
      type: NMF.Synchronizations.ISynchronizationContext
    content.vb: Public ReadOnly Property Context As ISynchronizationContext
  overload: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Context*
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T).Context
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T).Context
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Representation
  commentId: P:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Representation
  id: Representation
  parent: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1
  langs:
  - csharp
  - vb
  name: Representation
  nameWithType: IncrementalPropertyConsistencyCheck<T>.Representation
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>.Representation
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Representation
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
    startLine: 33
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  summary: "\nGets a human-readable description of the inconsistency\n"
  example: []
  syntax:
    content: public string Representation { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Representation As String
  overload: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Representation*
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T).Representation
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T).Representation
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.CanResolveLeft
  commentId: P:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.CanResolveLeft
  id: CanResolveLeft
  parent: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1
  langs:
  - csharp
  - vb
  name: CanResolveLeft
  nameWithType: IncrementalPropertyConsistencyCheck<T>.CanResolveLeft
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>.CanResolveLeft
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CanResolveLeft
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
    startLine: 42
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  summary: "\nGets a value indicating whether the inconsistency can be automatically resolved modifying the left hand model only\n"
  example: []
  syntax:
    content: public bool CanResolveLeft { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property CanResolveLeft As Boolean
  overload: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.CanResolveLeft*
  implements:
  - NMF.Synchronizations.Inconsistencies.IInconsistency.CanResolveLeft
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T).CanResolveLeft
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T).CanResolveLeft
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.CanResolveRight
  commentId: P:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.CanResolveRight
  id: CanResolveRight
  parent: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1
  langs:
  - csharp
  - vb
  name: CanResolveRight
  nameWithType: IncrementalPropertyConsistencyCheck<T>.CanResolveRight
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>.CanResolveRight
  type: Property
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: CanResolveRight
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
    startLine: 45
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  summary: "\nGets a value indicating whether the inconsistency can be automatically resolved modifying the right hand model only\n"
  example: []
  syntax:
    content: public bool CanResolveRight { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property CanResolveRight As Boolean
  overload: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.CanResolveRight*
  implements:
  - NMF.Synchronizations.Inconsistencies.IInconsistency.CanResolveRight
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T).CanResolveRight
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T).CanResolveRight
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.#ctor(NMF.Expressions.INotifyReversableValue{`0},NMF.Expressions.INotifyReversableValue{`0},NMF.Synchronizations.ISynchronizationContext)
  commentId: M:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.#ctor(NMF.Expressions.INotifyReversableValue{`0},NMF.Expressions.INotifyReversableValue{`0},NMF.Synchronizations.ISynchronizationContext)
  id: '#ctor(NMF.Expressions.INotifyReversableValue{`0},NMF.Expressions.INotifyReversableValue{`0},NMF.Synchronizations.ISynchronizationContext)'
  parent: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1
  langs:
  - csharp
  - vb
  name: IncrementalPropertyConsistencyCheck(INotifyReversableValue<T>, INotifyReversableValue<T>, ISynchronizationContext)
  nameWithType: IncrementalPropertyConsistencyCheck<T>.IncrementalPropertyConsistencyCheck(INotifyReversableValue<T>, INotifyReversableValue<T>, ISynchronizationContext)
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>.IncrementalPropertyConsistencyCheck(NMF.Expressions.INotifyReversableValue<T>, NMF.Expressions.INotifyReversableValue<T>, NMF.Synchronizations.ISynchronizationContext)
  type: Constructor
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: .ctor
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
    startLine: 53
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  summary: "\nCreates a new inconsistency\n"
  example: []
  syntax:
    content: public IncrementalPropertyConsistencyCheck(INotifyReversableValue<T> source1, INotifyReversableValue<T> source2, ISynchronizationContext context)
    parameters:
    - id: source1
      type: NMF.Expressions.INotifyReversableValue{{T}}
      description: The LHS source
    - id: source2
      type: NMF.Expressions.INotifyReversableValue{{T}}
      description: The RHS source
    - id: context
      type: NMF.Synchronizations.ISynchronizationContext
      description: The context in which the inconsistency arose
    content.vb: Public Sub New(source1 As INotifyReversableValue(Of T), source2 As INotifyReversableValue(Of T), context As ISynchronizationContext)
  overload: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.#ctor*
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T).IncrementalPropertyConsistencyCheck(INotifyReversableValue(Of T), INotifyReversableValue(Of T), ISynchronizationContext)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T).IncrementalPropertyConsistencyCheck(NMF.Expressions.INotifyReversableValue(Of T), NMF.Expressions.INotifyReversableValue(Of T), NMF.Synchronizations.ISynchronizationContext)
  name.vb: IncrementalPropertyConsistencyCheck(INotifyReversableValue(Of T), INotifyReversableValue(Of T), ISynchronizationContext)
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Dispose
  commentId: M:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Dispose
  id: Dispose
  parent: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: IncrementalPropertyConsistencyCheck<T>.Dispose()
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>.Dispose()
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Dispose
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
    startLine: 84
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Dispose*
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T).Dispose()
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.ResolveLeft
  commentId: M:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.ResolveLeft
  id: ResolveLeft
  parent: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1
  langs:
  - csharp
  - vb
  name: ResolveLeft()
  nameWithType: IncrementalPropertyConsistencyCheck<T>.ResolveLeft()
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>.ResolveLeft()
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ResolveLeft
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
    startLine: 93
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  summary: "\nResolves the inconsistency modifying the left hand side model\n"
  example: []
  syntax:
    content: public void ResolveLeft()
    content.vb: Public Sub ResolveLeft
  overload: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.ResolveLeft*
  implements:
  - NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveLeft
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T).ResolveLeft()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T).ResolveLeft()
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.ResolveRight
  commentId: M:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.ResolveRight
  id: ResolveRight
  parent: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1
  langs:
  - csharp
  - vb
  name: ResolveRight()
  nameWithType: IncrementalPropertyConsistencyCheck<T>.ResolveRight()
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>.ResolveRight()
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ResolveRight
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
    startLine: 99
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  summary: "\nResolves the inconsistency modifying the right hand side model\n"
  example: []
  syntax:
    content: public void ResolveRight()
    content.vb: Public Sub ResolveRight
  overload: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.ResolveRight*
  implements:
  - NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveRight
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T).ResolveRight()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T).ResolveRight()
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.GetHashCode
  commentId: M:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.GetHashCode
  id: GetHashCode
  parent: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: IncrementalPropertyConsistencyCheck<T>.GetHashCode()
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>.GetHashCode()
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: GetHashCode
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
    startLine: 105
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.GetHashCode*
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T).GetHashCode()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T).GetHashCode()
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Equals(System.Object)
  commentId: M:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Equals(System.Object)
  id: Equals(System.Object)
  parent: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: IncrementalPropertyConsistencyCheck<T>.Equals(Object)
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>.Equals(System.Object)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Equals
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
    startLine: 117
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Equals*
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T).Equals(Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T).Equals(System.Object)
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  commentId: M:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  id: Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  parent: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1
  langs:
  - csharp
  - vb
  name: Equals(IInconsistency)
  nameWithType: IncrementalPropertyConsistencyCheck<T>.Equals(IInconsistency)
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>.Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Equals
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
    startLine: 125
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  example: []
  syntax:
    content: public bool Equals(IInconsistency other)
    parameters:
    - id: other
      type: NMF.Synchronizations.Inconsistencies.IInconsistency
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As IInconsistency) As Boolean
  overload: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Equals*
  implements:
  - System.IEquatable{NMF.Synchronizations.Inconsistencies.IInconsistency}.Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T).Equals(IInconsistency)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T).Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Equals(NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck{`0})
  commentId: M:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Equals(NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck{`0})
  id: Equals(NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck{`0})
  parent: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1
  langs:
  - csharp
  - vb
  name: Equals(IncrementalPropertyConsistencyCheck<T>)
  nameWithType: IncrementalPropertyConsistencyCheck<T>.Equals(IncrementalPropertyConsistencyCheck<T>)
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>.Equals(NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>)
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: Equals
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
    startLine: 131
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  example: []
  syntax:
    content: public bool Equals(IncrementalPropertyConsistencyCheck<T> other)
    parameters:
    - id: other
      type: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1
    return:
      type: System.Boolean
    content.vb: Public Function Equals(other As IncrementalPropertyConsistencyCheck(Of T)) As Boolean
  overload: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Equals*
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T).Equals(IncrementalPropertyConsistencyCheck(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T).Equals(NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T))
  name.vb: Equals(IncrementalPropertyConsistencyCheck(Of T))
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.ToString
  commentId: M:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.ToString
  id: ToString
  parent: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: IncrementalPropertyConsistencyCheck<T>.ToString()
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>.ToString()
  type: Method
  source:
    remote:
      path: Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
      branch: master
      repo: https://github.com/NMFCode/NMF.git
    id: ToString
    path: src/Synchronizations/Synchronizations/Inconsistencies/IncrementalPropertyConsistencyCheck.cs
    startLine: 137
  assemblies:
  - NMF.Synchronizations
  namespace: NMF.Synchronizations.Inconsistencies
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.ToString*
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T).ToString()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T).ToString()
references:
- uid: NMF.Synchronizations.Inconsistencies
  commentId: N:NMF.Synchronizations.Inconsistencies
  name: NMF.Synchronizations.Inconsistencies
  nameWithType: NMF.Synchronizations.Inconsistencies
  fullName: NMF.Synchronizations.Inconsistencies
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: NMF.Synchronizations.Inconsistencies.IInconsistency
  commentId: T:NMF.Synchronizations.Inconsistencies.IInconsistency
  parent: NMF.Synchronizations.Inconsistencies
  name: IInconsistency
  nameWithType: IInconsistency
  fullName: NMF.Synchronizations.Inconsistencies.IInconsistency
- uid: System.IEquatable{NMF.Synchronizations.Inconsistencies.IInconsistency}
  commentId: T:System.IEquatable{NMF.Synchronizations.Inconsistencies.IInconsistency}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<IInconsistency>
  nameWithType: IEquatable<IInconsistency>
  fullName: System.IEquatable<NMF.Synchronizations.Inconsistencies.IInconsistency>
  nameWithType.vb: IEquatable(Of IInconsistency)
  fullName.vb: System.IEquatable(Of NMF.Synchronizations.Inconsistencies.IInconsistency)
  name.vb: IEquatable(Of IInconsistency)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NMF.Synchronizations.Inconsistencies.IInconsistency
    name: IInconsistency
    nameWithType: IInconsistency
    fullName: NMF.Synchronizations.Inconsistencies.IInconsistency
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NMF.Synchronizations.Inconsistencies.IInconsistency
    name: IInconsistency
    nameWithType: IInconsistency
    fullName: NMF.Synchronizations.Inconsistencies.IInconsistency
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.SourceLeft*
  commentId: Overload:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.SourceLeft
  name: SourceLeft
  nameWithType: IncrementalPropertyConsistencyCheck<T>.SourceLeft
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>.SourceLeft
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T).SourceLeft
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T).SourceLeft
- uid: NMF.Expressions.INotifyReversableValue{{T}}
  commentId: T:NMF.Expressions.INotifyReversableValue{`0}
  parent: NMF.Expressions
  definition: NMF.Expressions.INotifyReversableValue`1
  name: INotifyReversableValue<T>
  nameWithType: INotifyReversableValue<T>
  fullName: NMF.Expressions.INotifyReversableValue<T>
  nameWithType.vb: INotifyReversableValue(Of T)
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of T)
  name.vb: INotifyReversableValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    nameWithType: INotifyReversableValue
    fullName: NMF.Expressions.INotifyReversableValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    nameWithType: INotifyReversableValue
    fullName: NMF.Expressions.INotifyReversableValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions.INotifyReversableValue`1
  commentId: T:NMF.Expressions.INotifyReversableValue`1
  name: INotifyReversableValue<T>
  nameWithType: INotifyReversableValue<T>
  fullName: NMF.Expressions.INotifyReversableValue<T>
  nameWithType.vb: INotifyReversableValue(Of T)
  fullName.vb: NMF.Expressions.INotifyReversableValue(Of T)
  name.vb: INotifyReversableValue(Of T)
  spec.csharp:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    nameWithType: INotifyReversableValue
    fullName: NMF.Expressions.INotifyReversableValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Expressions.INotifyReversableValue`1
    name: INotifyReversableValue
    nameWithType: INotifyReversableValue
    fullName: NMF.Expressions.INotifyReversableValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Expressions
  commentId: N:NMF.Expressions
  name: NMF.Expressions
  nameWithType: NMF.Expressions
  fullName: NMF.Expressions
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.SourceRight*
  commentId: Overload:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.SourceRight
  name: SourceRight
  nameWithType: IncrementalPropertyConsistencyCheck<T>.SourceRight
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>.SourceRight
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T).SourceRight
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T).SourceRight
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Context*
  commentId: Overload:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Context
  name: Context
  nameWithType: IncrementalPropertyConsistencyCheck<T>.Context
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>.Context
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T).Context
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T).Context
- uid: NMF.Synchronizations.ISynchronizationContext
  commentId: T:NMF.Synchronizations.ISynchronizationContext
  parent: NMF.Synchronizations
  name: ISynchronizationContext
  nameWithType: ISynchronizationContext
  fullName: NMF.Synchronizations.ISynchronizationContext
- uid: NMF.Synchronizations
  commentId: N:NMF.Synchronizations
  name: NMF.Synchronizations
  nameWithType: NMF.Synchronizations
  fullName: NMF.Synchronizations
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Representation*
  commentId: Overload:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Representation
  name: Representation
  nameWithType: IncrementalPropertyConsistencyCheck<T>.Representation
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>.Representation
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T).Representation
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T).Representation
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.CanResolveLeft*
  commentId: Overload:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.CanResolveLeft
  name: CanResolveLeft
  nameWithType: IncrementalPropertyConsistencyCheck<T>.CanResolveLeft
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>.CanResolveLeft
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T).CanResolveLeft
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T).CanResolveLeft
- uid: NMF.Synchronizations.Inconsistencies.IInconsistency.CanResolveLeft
  commentId: P:NMF.Synchronizations.Inconsistencies.IInconsistency.CanResolveLeft
  parent: NMF.Synchronizations.Inconsistencies.IInconsistency
  name: CanResolveLeft
  nameWithType: IInconsistency.CanResolveLeft
  fullName: NMF.Synchronizations.Inconsistencies.IInconsistency.CanResolveLeft
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.CanResolveRight*
  commentId: Overload:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.CanResolveRight
  name: CanResolveRight
  nameWithType: IncrementalPropertyConsistencyCheck<T>.CanResolveRight
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>.CanResolveRight
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T).CanResolveRight
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T).CanResolveRight
- uid: NMF.Synchronizations.Inconsistencies.IInconsistency.CanResolveRight
  commentId: P:NMF.Synchronizations.Inconsistencies.IInconsistency.CanResolveRight
  parent: NMF.Synchronizations.Inconsistencies.IInconsistency
  name: CanResolveRight
  nameWithType: IInconsistency.CanResolveRight
  fullName: NMF.Synchronizations.Inconsistencies.IInconsistency.CanResolveRight
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.#ctor*
  commentId: Overload:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.#ctor
  name: IncrementalPropertyConsistencyCheck
  nameWithType: IncrementalPropertyConsistencyCheck<T>.IncrementalPropertyConsistencyCheck
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>.IncrementalPropertyConsistencyCheck
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T).IncrementalPropertyConsistencyCheck
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T).IncrementalPropertyConsistencyCheck
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Dispose*
  commentId: Overload:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Dispose
  name: Dispose
  nameWithType: IncrementalPropertyConsistencyCheck<T>.Dispose
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>.Dispose
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T).Dispose
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T).Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.ResolveLeft*
  commentId: Overload:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.ResolveLeft
  name: ResolveLeft
  nameWithType: IncrementalPropertyConsistencyCheck<T>.ResolveLeft
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>.ResolveLeft
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T).ResolveLeft
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T).ResolveLeft
- uid: NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveLeft
  commentId: M:NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveLeft
  parent: NMF.Synchronizations.Inconsistencies.IInconsistency
  name: ResolveLeft()
  nameWithType: IInconsistency.ResolveLeft()
  fullName: NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveLeft()
  spec.csharp:
  - uid: NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveLeft
    name: ResolveLeft
    nameWithType: IInconsistency.ResolveLeft
    fullName: NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveLeft
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveLeft
    name: ResolveLeft
    nameWithType: IInconsistency.ResolveLeft
    fullName: NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveLeft
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.ResolveRight*
  commentId: Overload:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.ResolveRight
  name: ResolveRight
  nameWithType: IncrementalPropertyConsistencyCheck<T>.ResolveRight
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>.ResolveRight
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T).ResolveRight
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T).ResolveRight
- uid: NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveRight
  commentId: M:NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveRight
  parent: NMF.Synchronizations.Inconsistencies.IInconsistency
  name: ResolveRight()
  nameWithType: IInconsistency.ResolveRight()
  fullName: NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveRight()
  spec.csharp:
  - uid: NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveRight
    name: ResolveRight
    nameWithType: IInconsistency.ResolveRight
    fullName: NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveRight
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveRight
    name: ResolveRight
    nameWithType: IInconsistency.ResolveRight
    fullName: NMF.Synchronizations.Inconsistencies.IInconsistency.ResolveRight
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.GetHashCode*
  commentId: Overload:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.GetHashCode
  name: GetHashCode
  nameWithType: IncrementalPropertyConsistencyCheck<T>.GetHashCode
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>.GetHashCode
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T).GetHashCode
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T).GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Equals*
  commentId: Overload:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.Equals
  name: Equals
  nameWithType: IncrementalPropertyConsistencyCheck<T>.Equals
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>.Equals
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T).Equals
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T).Equals
- uid: System.IEquatable{NMF.Synchronizations.Inconsistencies.IInconsistency}.Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  commentId: M:System.IEquatable{NMF.Synchronizations.Inconsistencies.IInconsistency}.Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  parent: System.IEquatable{NMF.Synchronizations.Inconsistencies.IInconsistency}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(IInconsistency)
  nameWithType: IEquatable<IInconsistency>.Equals(IInconsistency)
  fullName: System.IEquatable<NMF.Synchronizations.Inconsistencies.IInconsistency>.Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  nameWithType.vb: IEquatable(Of IInconsistency).Equals(IInconsistency)
  fullName.vb: System.IEquatable(Of NMF.Synchronizations.Inconsistencies.IInconsistency).Equals(NMF.Synchronizations.Inconsistencies.IInconsistency)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<IInconsistency>.Equals
    fullName: System.IEquatable<NMF.Synchronizations.Inconsistencies.IInconsistency>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.Inconsistencies.IInconsistency
    name: IInconsistency
    nameWithType: IInconsistency
    fullName: NMF.Synchronizations.Inconsistencies.IInconsistency
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of IInconsistency).Equals
    fullName: System.IEquatable(Of NMF.Synchronizations.Inconsistencies.IInconsistency).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: NMF.Synchronizations.Inconsistencies.IInconsistency
    name: IInconsistency
    nameWithType: IInconsistency
    fullName: NMF.Synchronizations.Inconsistencies.IInconsistency
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1
  commentId: T:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1
  parent: NMF.Synchronizations.Inconsistencies
  name: IncrementalPropertyConsistencyCheck<T>
  nameWithType: IncrementalPropertyConsistencyCheck<T>
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T)
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T)
  name.vb: IncrementalPropertyConsistencyCheck(Of T)
  spec.csharp:
  - uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1
    name: IncrementalPropertyConsistencyCheck
    nameWithType: IncrementalPropertyConsistencyCheck
    fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1
    name: IncrementalPropertyConsistencyCheck
    nameWithType: IncrementalPropertyConsistencyCheck
    fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.ToString*
  commentId: Overload:NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck`1.ToString
  name: ToString
  nameWithType: IncrementalPropertyConsistencyCheck<T>.ToString
  fullName: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck<T>.ToString
  nameWithType.vb: IncrementalPropertyConsistencyCheck(Of T).ToString
  fullName.vb: NMF.Synchronizations.Inconsistencies.IncrementalPropertyConsistencyCheck(Of T).ToString
